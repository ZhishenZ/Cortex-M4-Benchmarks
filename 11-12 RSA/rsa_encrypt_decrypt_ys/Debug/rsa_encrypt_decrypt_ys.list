
rsa_encrypt_decrypt_ys.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08004a58  08004a58  00014a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b0c  08004b0c  00030160  2**0
                  CONTENTS
  4 .ARM          00000008  08004b0c  08004b0c  00014b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b14  08004b14  00030160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b14  08004b14  00014b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b18  08004b18  00014b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  08004b1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000148  10000000  10000000  00030000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .ccmramdata   00000018  10000148  10000148  00030148  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000012b0  20000268  20000268  00030268  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  20001518  20001518  00030268  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030160  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f1a3  00000000  00000000  00030190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001cc9  00000000  00000000  0003f333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c00  00000000  00000000  00041000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000b58  00000000  00000000  00041c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001d29a  00000000  00000000  00042758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000edbe  00000000  00000000  0005f9f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b5178  00000000  00000000  0006e7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  00123928  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000037cc  00000000  00000000  0012397c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000268 	.word	0x20000268
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004a2c 	.word	0x08004a2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000026c 	.word	0x2000026c
 80001cc:	08004a2c 	.word	0x08004a2c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a70:	f000 b96e 	b.w	8000d50 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468c      	mov	ip, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f040 8083 	bne.w	8000ba2 <__udivmoddi4+0x116>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d947      	bls.n	8000b32 <__udivmoddi4+0xa6>
 8000aa2:	fab2 f282 	clz	r2, r2
 8000aa6:	b142      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	f1c2 0020 	rsb	r0, r2, #32
 8000aac:	fa24 f000 	lsr.w	r0, r4, r0
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	4097      	lsls	r7, r2
 8000ab4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ac4:	fa1f fe87 	uxth.w	lr, r7
 8000ac8:	fb08 c116 	mls	r1, r8, r6, ip
 8000acc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18fb      	adds	r3, r7, r3
 8000ada:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000ade:	f080 8119 	bcs.w	8000d14 <__udivmoddi4+0x288>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8116 	bls.w	8000d14 <__udivmoddi4+0x288>
 8000ae8:	3e02      	subs	r6, #2
 8000aea:	443b      	add	r3, r7
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af4:	fb08 3310 	mls	r3, r8, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b00:	45a6      	cmp	lr, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b0a:	f080 8105 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000b0e:	45a6      	cmp	lr, r4
 8000b10:	f240 8102 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000b14:	3802      	subs	r0, #2
 8000b16:	443c      	add	r4, r7
 8000b18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1c:	eba4 040e 	sub.w	r4, r4, lr
 8000b20:	2600      	movs	r6, #0
 8000b22:	b11d      	cbz	r5, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c5 4300 	strd	r4, r3, [r5]
 8000b2c:	4631      	mov	r1, r6
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	b902      	cbnz	r2, 8000b36 <__udivmoddi4+0xaa>
 8000b34:	deff      	udf	#255	; 0xff
 8000b36:	fab2 f282 	clz	r2, r2
 8000b3a:	2a00      	cmp	r2, #0
 8000b3c:	d150      	bne.n	8000be0 <__udivmoddi4+0x154>
 8000b3e:	1bcb      	subs	r3, r1, r7
 8000b40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b44:	fa1f f887 	uxth.w	r8, r7
 8000b48:	2601      	movs	r6, #1
 8000b4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b4e:	0c21      	lsrs	r1, r4, #16
 8000b50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b58:	fb08 f30c 	mul.w	r3, r8, ip
 8000b5c:	428b      	cmp	r3, r1
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000b60:	1879      	adds	r1, r7, r1
 8000b62:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0xe2>
 8000b68:	428b      	cmp	r3, r1
 8000b6a:	f200 80e9 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000b6e:	4684      	mov	ip, r0
 8000b70:	1ac9      	subs	r1, r1, r3
 8000b72:	b2a3      	uxth	r3, r4
 8000b74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b80:	fb08 f800 	mul.w	r8, r8, r0
 8000b84:	45a0      	cmp	r8, r4
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x10c>
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x10a>
 8000b90:	45a0      	cmp	r8, r4
 8000b92:	f200 80d9 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000b96:	4618      	mov	r0, r3
 8000b98:	eba4 0408 	sub.w	r4, r4, r8
 8000b9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ba0:	e7bf      	b.n	8000b22 <__udivmoddi4+0x96>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x12e>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	f000 80b1 	beq.w	8000d0e <__udivmoddi4+0x282>
 8000bac:	2600      	movs	r6, #0
 8000bae:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	4631      	mov	r1, r6
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	fab3 f683 	clz	r6, r3
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d14a      	bne.n	8000c58 <__udivmoddi4+0x1cc>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d302      	bcc.n	8000bcc <__udivmoddi4+0x140>
 8000bc6:	4282      	cmp	r2, r0
 8000bc8:	f200 80b8 	bhi.w	8000d3c <__udivmoddi4+0x2b0>
 8000bcc:	1a84      	subs	r4, r0, r2
 8000bce:	eb61 0103 	sbc.w	r1, r1, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d0a8      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000bda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bde:	e7a5      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000be0:	f1c2 0320 	rsb	r3, r2, #32
 8000be4:	fa20 f603 	lsr.w	r6, r0, r3
 8000be8:	4097      	lsls	r7, r2
 8000bea:	fa01 f002 	lsl.w	r0, r1, r2
 8000bee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf2:	40d9      	lsrs	r1, r3
 8000bf4:	4330      	orrs	r0, r6
 8000bf6:	0c03      	lsrs	r3, r0, #16
 8000bf8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bfc:	fa1f f887 	uxth.w	r8, r7
 8000c00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb06 f108 	mul.w	r1, r6, r8
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x19c>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000c1a:	f080 808d 	bcs.w	8000d38 <__udivmoddi4+0x2ac>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 808a 	bls.w	8000d38 <__udivmoddi4+0x2ac>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b281      	uxth	r1, r0
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c38:	fb00 f308 	mul.w	r3, r0, r8
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x1c4>
 8000c40:	1879      	adds	r1, r7, r1
 8000c42:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000c46:	d273      	bcs.n	8000d30 <__udivmoddi4+0x2a4>
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d971      	bls.n	8000d30 <__udivmoddi4+0x2a4>
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	4439      	add	r1, r7
 8000c50:	1acb      	subs	r3, r1, r3
 8000c52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c56:	e778      	b.n	8000b4a <__udivmoddi4+0xbe>
 8000c58:	f1c6 0c20 	rsb	ip, r6, #32
 8000c5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c64:	431c      	orrs	r4, r3
 8000c66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c76:	431f      	orrs	r7, r3
 8000c78:	0c3b      	lsrs	r3, r7, #16
 8000c7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c7e:	fa1f f884 	uxth.w	r8, r4
 8000c82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c8e:	458a      	cmp	sl, r1
 8000c90:	fa02 f206 	lsl.w	r2, r2, r6
 8000c94:	fa00 f306 	lsl.w	r3, r0, r6
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x220>
 8000c9a:	1861      	adds	r1, r4, r1
 8000c9c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ca0:	d248      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca2:	458a      	cmp	sl, r1
 8000ca4:	d946      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca6:	f1a9 0902 	sub.w	r9, r9, #2
 8000caa:	4421      	add	r1, r4
 8000cac:	eba1 010a 	sub.w	r1, r1, sl
 8000cb0:	b2bf      	uxth	r7, r7
 8000cb2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cbe:	fb00 f808 	mul.w	r8, r0, r8
 8000cc2:	45b8      	cmp	r8, r7
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0x24a>
 8000cc6:	19e7      	adds	r7, r4, r7
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ccc:	d22e      	bcs.n	8000d2c <__udivmoddi4+0x2a0>
 8000cce:	45b8      	cmp	r8, r7
 8000cd0:	d92c      	bls.n	8000d2c <__udivmoddi4+0x2a0>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4427      	add	r7, r4
 8000cd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cda:	eba7 0708 	sub.w	r7, r7, r8
 8000cde:	fba0 8902 	umull	r8, r9, r0, r2
 8000ce2:	454f      	cmp	r7, r9
 8000ce4:	46c6      	mov	lr, r8
 8000ce6:	4649      	mov	r1, r9
 8000ce8:	d31a      	bcc.n	8000d20 <__udivmoddi4+0x294>
 8000cea:	d017      	beq.n	8000d1c <__udivmoddi4+0x290>
 8000cec:	b15d      	cbz	r5, 8000d06 <__udivmoddi4+0x27a>
 8000cee:	ebb3 020e 	subs.w	r2, r3, lr
 8000cf2:	eb67 0701 	sbc.w	r7, r7, r1
 8000cf6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cfa:	40f2      	lsrs	r2, r6
 8000cfc:	ea4c 0202 	orr.w	r2, ip, r2
 8000d00:	40f7      	lsrs	r7, r6
 8000d02:	e9c5 2700 	strd	r2, r7, [r5]
 8000d06:	2600      	movs	r6, #0
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e70b      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e9      	b.n	8000aec <__udivmoddi4+0x60>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6fd      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d1c:	4543      	cmp	r3, r8
 8000d1e:	d2e5      	bcs.n	8000cec <__udivmoddi4+0x260>
 8000d20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d24:	eb69 0104 	sbc.w	r1, r9, r4
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7df      	b.n	8000cec <__udivmoddi4+0x260>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	e7d2      	b.n	8000cd6 <__udivmoddi4+0x24a>
 8000d30:	4660      	mov	r0, ip
 8000d32:	e78d      	b.n	8000c50 <__udivmoddi4+0x1c4>
 8000d34:	4681      	mov	r9, r0
 8000d36:	e7b9      	b.n	8000cac <__udivmoddi4+0x220>
 8000d38:	4666      	mov	r6, ip
 8000d3a:	e775      	b.n	8000c28 <__udivmoddi4+0x19c>
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	e74a      	b.n	8000bd6 <__udivmoddi4+0x14a>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	4439      	add	r1, r7
 8000d46:	e713      	b.n	8000b70 <__udivmoddi4+0xe4>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	443c      	add	r4, r7
 8000d4c:	e724      	b.n	8000b98 <__udivmoddi4+0x10c>
 8000d4e:	bf00      	nop

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d54:	b5b0      	push	{r4, r5, r7, lr}
 8000d56:	b096      	sub	sp, #88	; 0x58
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	ro_data = ro_data_src;
 8000d5a:	4b56      	ldr	r3, [pc, #344]	; (8000eb4 <main+0x160>)
 8000d5c:	4a56      	ldr	r2, [pc, #344]	; (8000eb8 <main+0x164>)
 8000d5e:	601a      	str	r2, [r3, #0]
	uint8_t gu8_MSG[60] = {'\0'};
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	f107 0318 	add.w	r3, r7, #24
 8000d68:	2238      	movs	r2, #56	; 0x38
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f003 fa27 	bl	80041c0 <memset>
	int cpu_frequency=24;				/* in MHz */
 8000d72:	2318      	movs	r3, #24
 8000d74:	653b      	str	r3, [r7, #80]	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d76:	f000 faf3 	bl	8001360 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d7a:	f000 f8b1 	bl	8000ee0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d7e:	f000 f987 	bl	8001090 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d82:	f000 f907 	bl	8000f94 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000d86:	f000 f953 	bl	8001030 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000d8a:	484c      	ldr	r0, [pc, #304]	; (8000ebc <main+0x168>)
 8000d8c:	f002 f944 	bl	8003018 <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	time1 = TIM2->CNT;
 8000d90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d96:	613b      	str	r3, [r7, #16]
	encrypt();
 8000d98:	f003 fe56 	bl	8004a48 <__encrypt_veneer>
	//
	time2 = TIM2->CNT;
 8000d9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da2:	60fb      	str	r3, [r7, #12]
	HAL_Delay(1000);
 8000da4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000da8:	f000 fb40 	bl	800142c <HAL_Delay>
	time3 = TIM2->CNT;
 8000dac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db2:	60bb      	str	r3, [r7, #8]
	decrypto();
 8000db4:	f003 fe4c 	bl	8004a50 <__decrypto_veneer>
	//HAL_Delay(1000);
	time4 = TIM2->CNT;
 8000db8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dbe:	607b      	str	r3, [r7, #4]
	encrypt_time =(int)((double)(time2-time1)/cpu_frequency*1000); /* in ns */
 8000dc0:	68fa      	ldr	r2, [r7, #12]
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fb94 	bl	80004f4 <__aeabi_ui2d>
 8000dcc:	4604      	mov	r4, r0
 8000dce:	460d      	mov	r5, r1
 8000dd0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8000dd2:	f7ff fb9f 	bl	8000514 <__aeabi_i2d>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	460b      	mov	r3, r1
 8000dda:	4620      	mov	r0, r4
 8000ddc:	4629      	mov	r1, r5
 8000dde:	f7ff fd2d 	bl	800083c <__aeabi_ddiv>
 8000de2:	4602      	mov	r2, r0
 8000de4:	460b      	mov	r3, r1
 8000de6:	4610      	mov	r0, r2
 8000de8:	4619      	mov	r1, r3
 8000dea:	f04f 0200 	mov.w	r2, #0
 8000dee:	4b34      	ldr	r3, [pc, #208]	; (8000ec0 <main+0x16c>)
 8000df0:	f7ff fbfa 	bl	80005e8 <__aeabi_dmul>
 8000df4:	4602      	mov	r2, r0
 8000df6:	460b      	mov	r3, r1
 8000df8:	4610      	mov	r0, r2
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	f7ff fe06 	bl	8000a0c <__aeabi_d2iz>
 8000e00:	4603      	mov	r3, r0
 8000e02:	4a30      	ldr	r2, [pc, #192]	; (8000ec4 <main+0x170>)
 8000e04:	6013      	str	r3, [r2, #0]
	decrypt_time =(int)((double)(time4-time3)/cpu_frequency*1000); /* in ns */
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fb71 	bl	80004f4 <__aeabi_ui2d>
 8000e12:	4604      	mov	r4, r0
 8000e14:	460d      	mov	r5, r1
 8000e16:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8000e18:	f7ff fb7c 	bl	8000514 <__aeabi_i2d>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	460b      	mov	r3, r1
 8000e20:	4620      	mov	r0, r4
 8000e22:	4629      	mov	r1, r5
 8000e24:	f7ff fd0a 	bl	800083c <__aeabi_ddiv>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f04f 0200 	mov.w	r2, #0
 8000e34:	4b22      	ldr	r3, [pc, #136]	; (8000ec0 <main+0x16c>)
 8000e36:	f7ff fbd7 	bl	80005e8 <__aeabi_dmul>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	4610      	mov	r0, r2
 8000e40:	4619      	mov	r1, r3
 8000e42:	f7ff fde3 	bl	8000a0c <__aeabi_d2iz>
 8000e46:	4603      	mov	r3, r0
 8000e48:	4a1f      	ldr	r2, [pc, #124]	; (8000ec8 <main+0x174>)
 8000e4a:	6013      	str	r3, [r2, #0]
	sprintf(gu8_MSG, "\n\rEncryption time: %ld\n\rDecryption time: %ld\n\r",
 8000e4c:	4b1d      	ldr	r3, [pc, #116]	; (8000ec4 <main+0x170>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b1d      	ldr	r3, [pc, #116]	; (8000ec8 <main+0x174>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f107 0014 	add.w	r0, r7, #20
 8000e58:	491c      	ldr	r1, [pc, #112]	; (8000ecc <main+0x178>)
 8000e5a:	f003 f9b9 	bl	80041d0 <siprintf>
			encrypt_time,decrypt_time);
	HAL_UART_Transmit(&huart1, gu8_MSG, sizeof(gu8_MSG), 0xFFFF);
 8000e5e:	f107 0114 	add.w	r1, r7, #20
 8000e62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e66:	223c      	movs	r2, #60	; 0x3c
 8000e68:	4819      	ldr	r0, [pc, #100]	; (8000ed0 <main+0x17c>)
 8000e6a:	f002 fd67 	bl	800393c <HAL_UART_Transmit>

	/* check if message is correct en-/decrypted */
	for(int i=0; i<SIZE; i++)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	657b      	str	r3, [r7, #84]	; 0x54
 8000e72:	e013      	b.n	8000e9c <main+0x148>
		if(de_plaintext_char[i]!=plaintext[i])
 8000e74:	4a17      	ldr	r2, [pc, #92]	; (8000ed4 <main+0x180>)
 8000e76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e78:	4413      	add	r3, r2
 8000e7a:	781a      	ldrb	r2, [r3, #0]
 8000e7c:	4916      	ldr	r1, [pc, #88]	; (8000ed8 <main+0x184>)
 8000e7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e80:	440b      	add	r3, r1
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d006      	beq.n	8000e96 <main+0x142>
			HAL_UART_Transmit(&huart1, "en-/decryption error!\n\r",
 8000e88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e8c:	223c      	movs	r2, #60	; 0x3c
 8000e8e:	4913      	ldr	r1, [pc, #76]	; (8000edc <main+0x188>)
 8000e90:	480f      	ldr	r0, [pc, #60]	; (8000ed0 <main+0x17c>)
 8000e92:	f002 fd53 	bl	800393c <HAL_UART_Transmit>
	for(int i=0; i<SIZE; i++)
 8000e96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e98:	3301      	adds	r3, #1
 8000e9a:	657b      	str	r3, [r7, #84]	; 0x54
 8000e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e9e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ea2:	dbe7      	blt.n	8000e74 <main+0x120>
					sizeof(gu8_MSG), 0xFFFF);

	HAL_Delay(1000);
 8000ea4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ea8:	f000 fac0 	bl	800142c <HAL_Delay>
	Reset_Handler();
 8000eac:	f000 fa2e 	bl	800130c <Reset_Handler>
  {
 8000eb0:	e76e      	b.n	8000d90 <main+0x3c>
 8000eb2:	bf00      	nop
 8000eb4:	20000298 	.word	0x20000298
 8000eb8:	10000148 	.word	0x10000148
 8000ebc:	200012c0 	.word	0x200012c0
 8000ec0:	408f4000 	.word	0x408f4000
 8000ec4:	20000290 	.word	0x20000290
 8000ec8:	2000130c 	.word	0x2000130c
 8000ecc:	08004a58 	.word	0x08004a58
 8000ed0:	2000029c 	.word	0x2000029c
 8000ed4:	20001310 	.word	0x20001310
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	08004a88 	.word	0x08004a88

08000ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b09e      	sub	sp, #120	; 0x78
 8000ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000eea:	2228      	movs	r2, #40	; 0x28
 8000eec:	2100      	movs	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f003 f966 	bl	80041c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f04:	463b      	mov	r3, r7
 8000f06:	223c      	movs	r2, #60	; 0x3c
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f003 f958 	bl	80041c0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f10:	2301      	movs	r3, #1
 8000f12:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f18:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f22:	2302      	movs	r3, #2
 8000f24:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f2a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8000f2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000f30:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f32:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 fd28 	bl	800198c <HAL_RCC_OscConfig>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f42:	f000 f8d5 	bl	80010f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f46:	230f      	movs	r3, #15
 8000f48:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f5c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f001 fc1a 	bl	800279c <HAL_RCC_ClockConfig>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f6e:	f000 f8bf 	bl	80010f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f72:	2301      	movs	r3, #1
 8000f74:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f001 fe43 	bl	8002c08 <HAL_RCCEx_PeriphCLKConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000f88:	f000 f8b2 	bl	80010f0 <Error_Handler>
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	3778      	adds	r7, #120	; 0x78
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f9a:	f107 0310 	add.w	r3, r7, #16
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa8:	1d3b      	adds	r3, r7, #4
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fb2:	4b1e      	ldr	r3, [pc, #120]	; (800102c <MX_TIM2_Init+0x98>)
 8000fb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fb8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000fba:	4b1c      	ldr	r3, [pc, #112]	; (800102c <MX_TIM2_Init+0x98>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc0:	4b1a      	ldr	r3, [pc, #104]	; (800102c <MX_TIM2_Init+0x98>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000fc6:	4b19      	ldr	r3, [pc, #100]	; (800102c <MX_TIM2_Init+0x98>)
 8000fc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fcc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fce:	4b17      	ldr	r3, [pc, #92]	; (800102c <MX_TIM2_Init+0x98>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fd4:	4b15      	ldr	r3, [pc, #84]	; (800102c <MX_TIM2_Init+0x98>)
 8000fd6:	2280      	movs	r2, #128	; 0x80
 8000fd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fda:	4814      	ldr	r0, [pc, #80]	; (800102c <MX_TIM2_Init+0x98>)
 8000fdc:	f001 ffc4 	bl	8002f68 <HAL_TIM_Base_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000fe6:	f000 f883 	bl	80010f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ff0:	f107 0310 	add.w	r3, r7, #16
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	480d      	ldr	r0, [pc, #52]	; (800102c <MX_TIM2_Init+0x98>)
 8000ff8:	f002 f98f 	bl	800331a <HAL_TIM_ConfigClockSource>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001002:	f000 f875 	bl	80010f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001006:	2300      	movs	r3, #0
 8001008:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	4619      	mov	r1, r3
 8001012:	4806      	ldr	r0, [pc, #24]	; (800102c <MX_TIM2_Init+0x98>)
 8001014:	f002 fba6 	bl	8003764 <HAL_TIMEx_MasterConfigSynchronization>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800101e:	f000 f867 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001022:	bf00      	nop
 8001024:	3720      	adds	r7, #32
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	200012c0 	.word	0x200012c0

08001030 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001034:	4b14      	ldr	r3, [pc, #80]	; (8001088 <MX_USART1_UART_Init+0x58>)
 8001036:	4a15      	ldr	r2, [pc, #84]	; (800108c <MX_USART1_UART_Init+0x5c>)
 8001038:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800103a:	4b13      	ldr	r3, [pc, #76]	; (8001088 <MX_USART1_UART_Init+0x58>)
 800103c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001040:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <MX_USART1_UART_Init+0x58>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <MX_USART1_UART_Init+0x58>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <MX_USART1_UART_Init+0x58>)
 8001050:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001054:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001056:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <MX_USART1_UART_Init+0x58>)
 8001058:	220c      	movs	r2, #12
 800105a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105c:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <MX_USART1_UART_Init+0x58>)
 800105e:	2200      	movs	r2, #0
 8001060:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001062:	4b09      	ldr	r3, [pc, #36]	; (8001088 <MX_USART1_UART_Init+0x58>)
 8001064:	2200      	movs	r2, #0
 8001066:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001068:	4b07      	ldr	r3, [pc, #28]	; (8001088 <MX_USART1_UART_Init+0x58>)
 800106a:	2200      	movs	r2, #0
 800106c:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <MX_USART1_UART_Init+0x58>)
 8001070:	2200      	movs	r2, #0
 8001072:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001074:	4804      	ldr	r0, [pc, #16]	; (8001088 <MX_USART1_UART_Init+0x58>)
 8001076:	f002 fc13 	bl	80038a0 <HAL_UART_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8001080:	f000 f836 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	2000029c 	.word	0x2000029c
 800108c:	40013800 	.word	0x40013800

08001090 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <MX_GPIO_Init+0x5c>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	4a14      	ldr	r2, [pc, #80]	; (80010ec <MX_GPIO_Init+0x5c>)
 800109c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010a0:	6153      	str	r3, [r2, #20]
 80010a2:	4b12      	ldr	r3, [pc, #72]	; (80010ec <MX_GPIO_Init+0x5c>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ae:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <MX_GPIO_Init+0x5c>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	4a0e      	ldr	r2, [pc, #56]	; (80010ec <MX_GPIO_Init+0x5c>)
 80010b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80010b8:	6153      	str	r3, [r2, #20]
 80010ba:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <MX_GPIO_Init+0x5c>)
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <MX_GPIO_Init+0x5c>)
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	4a08      	ldr	r2, [pc, #32]	; (80010ec <MX_GPIO_Init+0x5c>)
 80010cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d0:	6153      	str	r3, [r2, #20]
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <MX_GPIO_Init+0x5c>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]

}
 80010de:	bf00      	nop
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40021000 	.word	0x40021000

080010f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f4:	b672      	cpsid	i
}
 80010f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <Error_Handler+0x8>
	...

080010fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001102:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <HAL_MspInit+0x44>)
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	4a0e      	ldr	r2, [pc, #56]	; (8001140 <HAL_MspInit+0x44>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	6193      	str	r3, [r2, #24]
 800110e:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <HAL_MspInit+0x44>)
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <HAL_MspInit+0x44>)
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	4a08      	ldr	r2, [pc, #32]	; (8001140 <HAL_MspInit+0x44>)
 8001120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001124:	61d3      	str	r3, [r2, #28]
 8001126:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_MspInit+0x44>)
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112e:	603b      	str	r3, [r7, #0]
 8001130:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	40021000 	.word	0x40021000

08001144 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001154:	d113      	bne.n	800117e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001156:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <HAL_TIM_Base_MspInit+0x44>)
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	4a0b      	ldr	r2, [pc, #44]	; (8001188 <HAL_TIM_Base_MspInit+0x44>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	61d3      	str	r3, [r2, #28]
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <HAL_TIM_Base_MspInit+0x44>)
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	201c      	movs	r0, #28
 8001174:	f000 fa59 	bl	800162a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001178:	201c      	movs	r0, #28
 800117a:	f000 fa72 	bl	8001662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40021000 	.word	0x40021000

0800118c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	; 0x28
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a17      	ldr	r2, [pc, #92]	; (8001208 <HAL_UART_MspInit+0x7c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d127      	bne.n	80011fe <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011ae:	4b17      	ldr	r3, [pc, #92]	; (800120c <HAL_UART_MspInit+0x80>)
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	4a16      	ldr	r2, [pc, #88]	; (800120c <HAL_UART_MspInit+0x80>)
 80011b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b8:	6193      	str	r3, [r2, #24]
 80011ba:	4b14      	ldr	r3, [pc, #80]	; (800120c <HAL_UART_MspInit+0x80>)
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c6:	4b11      	ldr	r3, [pc, #68]	; (800120c <HAL_UART_MspInit+0x80>)
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	4a10      	ldr	r2, [pc, #64]	; (800120c <HAL_UART_MspInit+0x80>)
 80011cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011d0:	6153      	str	r3, [r2, #20]
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <HAL_UART_MspInit+0x80>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80011de:	2330      	movs	r3, #48	; 0x30
 80011e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ea:	2303      	movs	r3, #3
 80011ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011ee:	2307      	movs	r3, #7
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	4805      	ldr	r0, [pc, #20]	; (8001210 <HAL_UART_MspInit+0x84>)
 80011fa:	f000 fa4d 	bl	8001698 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011fe:	bf00      	nop
 8001200:	3728      	adds	r7, #40	; 0x28
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40013800 	.word	0x40013800
 800120c:	40021000 	.word	0x40021000
 8001210:	48000800 	.word	0x48000800

08001214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001218:	e7fe      	b.n	8001218 <NMI_Handler+0x4>

0800121a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121e:	e7fe      	b.n	800121e <HardFault_Handler+0x4>

08001220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <MemManage_Handler+0x4>

08001226 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800122a:	e7fe      	b.n	800122a <BusFault_Handler+0x4>

0800122c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001230:	e7fe      	b.n	8001230 <UsageFault_Handler+0x4>

08001232 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001260:	f000 f8c4 	bl	80013ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}

08001268 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800126c:	4802      	ldr	r0, [pc, #8]	; (8001278 <TIM2_IRQHandler+0x10>)
 800126e:	f001 ff35 	bl	80030dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200012c0 	.word	0x200012c0

0800127c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001284:	4a14      	ldr	r2, [pc, #80]	; (80012d8 <_sbrk+0x5c>)
 8001286:	4b15      	ldr	r3, [pc, #84]	; (80012dc <_sbrk+0x60>)
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001290:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <_sbrk+0x64>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d102      	bne.n	800129e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <_sbrk+0x64>)
 800129a:	4a12      	ldr	r2, [pc, #72]	; (80012e4 <_sbrk+0x68>)
 800129c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <_sbrk+0x64>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4413      	add	r3, r2
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d207      	bcs.n	80012bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012ac:	f002 ff5e 	bl	800416c <__errno>
 80012b0:	4603      	mov	r3, r0
 80012b2:	220c      	movs	r2, #12
 80012b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012ba:	e009      	b.n	80012d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <_sbrk+0x64>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012c2:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <_sbrk+0x64>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	4a05      	ldr	r2, [pc, #20]	; (80012e0 <_sbrk+0x64>)
 80012cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ce:	68fb      	ldr	r3, [r7, #12]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	2000a000 	.word	0x2000a000
 80012dc:	00000400 	.word	0x00000400
 80012e0:	20000284 	.word	0x20000284
 80012e4:	20001518 	.word	0x20001518

080012e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <SystemInit+0x20>)
 80012ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012f2:	4a05      	ldr	r2, [pc, #20]	; (8001308 <SystemInit+0x20>)
 80012f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800130c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001344 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001310:	480d      	ldr	r0, [pc, #52]	; (8001348 <LoopForever+0x6>)
  ldr r1, =_edata
 8001312:	490e      	ldr	r1, [pc, #56]	; (800134c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001314:	4a0e      	ldr	r2, [pc, #56]	; (8001350 <LoopForever+0xe>)
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001318:	e002      	b.n	8001320 <LoopCopyDataInit>

0800131a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800131a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800131c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800131e:	3304      	adds	r3, #4

08001320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001324:	d3f9      	bcc.n	800131a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001326:	4a0b      	ldr	r2, [pc, #44]	; (8001354 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001328:	4c0b      	ldr	r4, [pc, #44]	; (8001358 <LoopForever+0x16>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800132c:	e001      	b.n	8001332 <LoopFillZerobss>

0800132e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800132e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001330:	3204      	adds	r2, #4

08001332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001334:	d3fb      	bcc.n	800132e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001336:	f7ff ffd7 	bl	80012e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800133a:	f002 ff1d 	bl	8004178 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800133e:	f7ff fd09 	bl	8000d54 <main>

08001342 <LoopForever>:

LoopForever:
    b LoopForever
 8001342:	e7fe      	b.n	8001342 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001344:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800134c:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 8001350:	08004b1c 	.word	0x08004b1c
  ldr r2, =_sbss
 8001354:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 8001358:	20001518 	.word	0x20001518

0800135c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800135c:	e7fe      	b.n	800135c <ADC1_2_IRQHandler>
	...

08001360 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <HAL_Init+0x28>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a07      	ldr	r2, [pc, #28]	; (8001388 <HAL_Init+0x28>)
 800136a:	f043 0310 	orr.w	r3, r3, #16
 800136e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001370:	2003      	movs	r0, #3
 8001372:	f000 f94f 	bl	8001614 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001376:	200f      	movs	r0, #15
 8001378:	f000 f808 	bl	800138c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800137c:	f7ff febe 	bl	80010fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40022000 	.word	0x40022000

0800138c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <HAL_InitTick+0x54>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <HAL_InitTick+0x58>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4619      	mov	r1, r3
 800139e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 f967 	bl	800167e <HAL_SYSTICK_Config>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e00e      	b.n	80013d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b0f      	cmp	r3, #15
 80013be:	d80a      	bhi.n	80013d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c0:	2200      	movs	r2, #0
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013c8:	f000 f92f 	bl	800162a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013cc:	4a06      	ldr	r2, [pc, #24]	; (80013e8 <HAL_InitTick+0x5c>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
 80013d4:	e000      	b.n	80013d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	200001f4 	.word	0x200001f4
 80013e4:	200001fc 	.word	0x200001fc
 80013e8:	200001f8 	.word	0x200001f8

080013ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_IncTick+0x20>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_IncTick+0x24>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4413      	add	r3, r2
 80013fc:	4a04      	ldr	r2, [pc, #16]	; (8001410 <HAL_IncTick+0x24>)
 80013fe:	6013      	str	r3, [r2, #0]
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	200001fc 	.word	0x200001fc
 8001410:	20001504 	.word	0x20001504

08001414 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return uwTick;  
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <HAL_GetTick+0x14>)
 800141a:	681b      	ldr	r3, [r3, #0]
}
 800141c:	4618      	mov	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	20001504 	.word	0x20001504

0800142c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001434:	f7ff ffee 	bl	8001414 <HAL_GetTick>
 8001438:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001444:	d005      	beq.n	8001452 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <HAL_Delay+0x44>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	461a      	mov	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4413      	add	r3, r2
 8001450:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001452:	bf00      	nop
 8001454:	f7ff ffde 	bl	8001414 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	429a      	cmp	r2, r3
 8001462:	d8f7      	bhi.n	8001454 <HAL_Delay+0x28>
  {
  }
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	200001fc 	.word	0x200001fc

08001474 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148a:	68ba      	ldr	r2, [r7, #8]
 800148c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001490:	4013      	ands	r3, r2
 8001492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800149c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014a6:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <__NVIC_SetPriorityGrouping+0x44>)
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	60d3      	str	r3, [r2, #12]
}
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <__NVIC_GetPriorityGrouping+0x18>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	0a1b      	lsrs	r3, r3, #8
 80014c6:	f003 0307 	and.w	r3, r3, #7
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	db0b      	blt.n	8001502 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	f003 021f 	and.w	r2, r3, #31
 80014f0:	4907      	ldr	r1, [pc, #28]	; (8001510 <__NVIC_EnableIRQ+0x38>)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	095b      	lsrs	r3, r3, #5
 80014f8:	2001      	movs	r0, #1
 80014fa:	fa00 f202 	lsl.w	r2, r0, r2
 80014fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000e100 	.word	0xe000e100

08001514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	6039      	str	r1, [r7, #0]
 800151e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001524:	2b00      	cmp	r3, #0
 8001526:	db0a      	blt.n	800153e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	b2da      	uxtb	r2, r3
 800152c:	490c      	ldr	r1, [pc, #48]	; (8001560 <__NVIC_SetPriority+0x4c>)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	0112      	lsls	r2, r2, #4
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	440b      	add	r3, r1
 8001538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800153c:	e00a      	b.n	8001554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4908      	ldr	r1, [pc, #32]	; (8001564 <__NVIC_SetPriority+0x50>)
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	3b04      	subs	r3, #4
 800154c:	0112      	lsls	r2, r2, #4
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	440b      	add	r3, r1
 8001552:	761a      	strb	r2, [r3, #24]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000e100 	.word	0xe000e100
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001568:	b480      	push	{r7}
 800156a:	b089      	sub	sp, #36	; 0x24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f1c3 0307 	rsb	r3, r3, #7
 8001582:	2b04      	cmp	r3, #4
 8001584:	bf28      	it	cs
 8001586:	2304      	movcs	r3, #4
 8001588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3304      	adds	r3, #4
 800158e:	2b06      	cmp	r3, #6
 8001590:	d902      	bls.n	8001598 <NVIC_EncodePriority+0x30>
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	3b03      	subs	r3, #3
 8001596:	e000      	b.n	800159a <NVIC_EncodePriority+0x32>
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43da      	mvns	r2, r3
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	401a      	ands	r2, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	43d9      	mvns	r1, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	4313      	orrs	r3, r2
         );
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3724      	adds	r7, #36	; 0x24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3b01      	subs	r3, #1
 80015dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e0:	d301      	bcc.n	80015e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015e2:	2301      	movs	r3, #1
 80015e4:	e00f      	b.n	8001606 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <SysTick_Config+0x40>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ee:	210f      	movs	r1, #15
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015f4:	f7ff ff8e 	bl	8001514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <SysTick_Config+0x40>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fe:	4b04      	ldr	r3, [pc, #16]	; (8001610 <SysTick_Config+0x40>)
 8001600:	2207      	movs	r2, #7
 8001602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	e000e010 	.word	0xe000e010

08001614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ff29 	bl	8001474 <__NVIC_SetPriorityGrouping>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	4603      	mov	r3, r0
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
 8001636:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800163c:	f7ff ff3e 	bl	80014bc <__NVIC_GetPriorityGrouping>
 8001640:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	68b9      	ldr	r1, [r7, #8]
 8001646:	6978      	ldr	r0, [r7, #20]
 8001648:	f7ff ff8e 	bl	8001568 <NVIC_EncodePriority>
 800164c:	4602      	mov	r2, r0
 800164e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001652:	4611      	mov	r1, r2
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff5d 	bl	8001514 <__NVIC_SetPriority>
}
 800165a:	bf00      	nop
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	4603      	mov	r3, r0
 800166a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800166c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff31 	bl	80014d8 <__NVIC_EnableIRQ>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff ffa2 	bl	80015d0 <SysTick_Config>
 800168c:	4603      	mov	r3, r0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001698:	b480      	push	{r7}
 800169a:	b087      	sub	sp, #28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016a6:	e154      	b.n	8001952 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	2101      	movs	r1, #1
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	fa01 f303 	lsl.w	r3, r1, r3
 80016b4:	4013      	ands	r3, r2
 80016b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f000 8146 	beq.w	800194c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 0303 	and.w	r3, r3, #3
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d005      	beq.n	80016d8 <HAL_GPIO_Init+0x40>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d130      	bne.n	800173a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	2203      	movs	r2, #3
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	4013      	ands	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	68da      	ldr	r2, [r3, #12]
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	4313      	orrs	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800170e:	2201      	movs	r2, #1
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4013      	ands	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	091b      	lsrs	r3, r3, #4
 8001724:	f003 0201 	and.w	r2, r3, #1
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4313      	orrs	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	2b03      	cmp	r3, #3
 8001744:	d017      	beq.n	8001776 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	2203      	movs	r2, #3
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	4013      	ands	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	4313      	orrs	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d123      	bne.n	80017ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	08da      	lsrs	r2, r3, #3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3208      	adds	r2, #8
 800178a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800178e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	220f      	movs	r2, #15
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4013      	ands	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	691a      	ldr	r2, [r3, #16]
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	08da      	lsrs	r2, r3, #3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3208      	adds	r2, #8
 80017c4:	6939      	ldr	r1, [r7, #16]
 80017c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	2203      	movs	r2, #3
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	4013      	ands	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 0203 	and.w	r2, r3, #3
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 80a0 	beq.w	800194c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180c:	4b58      	ldr	r3, [pc, #352]	; (8001970 <HAL_GPIO_Init+0x2d8>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	4a57      	ldr	r2, [pc, #348]	; (8001970 <HAL_GPIO_Init+0x2d8>)
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	6193      	str	r3, [r2, #24]
 8001818:	4b55      	ldr	r3, [pc, #340]	; (8001970 <HAL_GPIO_Init+0x2d8>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001824:	4a53      	ldr	r2, [pc, #332]	; (8001974 <HAL_GPIO_Init+0x2dc>)
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	089b      	lsrs	r3, r3, #2
 800182a:	3302      	adds	r3, #2
 800182c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001830:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f003 0303 	and.w	r3, r3, #3
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	220f      	movs	r2, #15
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4013      	ands	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800184e:	d019      	beq.n	8001884 <HAL_GPIO_Init+0x1ec>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a49      	ldr	r2, [pc, #292]	; (8001978 <HAL_GPIO_Init+0x2e0>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d013      	beq.n	8001880 <HAL_GPIO_Init+0x1e8>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a48      	ldr	r2, [pc, #288]	; (800197c <HAL_GPIO_Init+0x2e4>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d00d      	beq.n	800187c <HAL_GPIO_Init+0x1e4>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a47      	ldr	r2, [pc, #284]	; (8001980 <HAL_GPIO_Init+0x2e8>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d007      	beq.n	8001878 <HAL_GPIO_Init+0x1e0>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a46      	ldr	r2, [pc, #280]	; (8001984 <HAL_GPIO_Init+0x2ec>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d101      	bne.n	8001874 <HAL_GPIO_Init+0x1dc>
 8001870:	2304      	movs	r3, #4
 8001872:	e008      	b.n	8001886 <HAL_GPIO_Init+0x1ee>
 8001874:	2305      	movs	r3, #5
 8001876:	e006      	b.n	8001886 <HAL_GPIO_Init+0x1ee>
 8001878:	2303      	movs	r3, #3
 800187a:	e004      	b.n	8001886 <HAL_GPIO_Init+0x1ee>
 800187c:	2302      	movs	r3, #2
 800187e:	e002      	b.n	8001886 <HAL_GPIO_Init+0x1ee>
 8001880:	2301      	movs	r3, #1
 8001882:	e000      	b.n	8001886 <HAL_GPIO_Init+0x1ee>
 8001884:	2300      	movs	r3, #0
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	f002 0203 	and.w	r2, r2, #3
 800188c:	0092      	lsls	r2, r2, #2
 800188e:	4093      	lsls	r3, r2
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4313      	orrs	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001896:	4937      	ldr	r1, [pc, #220]	; (8001974 <HAL_GPIO_Init+0x2dc>)
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	089b      	lsrs	r3, r3, #2
 800189c:	3302      	adds	r3, #2
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018a4:	4b38      	ldr	r3, [pc, #224]	; (8001988 <HAL_GPIO_Init+0x2f0>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4013      	ands	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018c8:	4a2f      	ldr	r2, [pc, #188]	; (8001988 <HAL_GPIO_Init+0x2f0>)
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018ce:	4b2e      	ldr	r3, [pc, #184]	; (8001988 <HAL_GPIO_Init+0x2f0>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	43db      	mvns	r3, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4013      	ands	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018f2:	4a25      	ldr	r2, [pc, #148]	; (8001988 <HAL_GPIO_Init+0x2f0>)
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018f8:	4b23      	ldr	r3, [pc, #140]	; (8001988 <HAL_GPIO_Init+0x2f0>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	43db      	mvns	r3, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800191c:	4a1a      	ldr	r2, [pc, #104]	; (8001988 <HAL_GPIO_Init+0x2f0>)
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001922:	4b19      	ldr	r3, [pc, #100]	; (8001988 <HAL_GPIO_Init+0x2f0>)
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	43db      	mvns	r3, r3
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4313      	orrs	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001946:	4a10      	ldr	r2, [pc, #64]	; (8001988 <HAL_GPIO_Init+0x2f0>)
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	3301      	adds	r3, #1
 8001950:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	fa22 f303 	lsr.w	r3, r2, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	f47f aea3 	bne.w	80016a8 <HAL_GPIO_Init+0x10>
  }
}
 8001962:	bf00      	nop
 8001964:	bf00      	nop
 8001966:	371c      	adds	r7, #28
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	40021000 	.word	0x40021000
 8001974:	40010000 	.word	0x40010000
 8001978:	48000400 	.word	0x48000400
 800197c:	48000800 	.word	0x48000800
 8001980:	48000c00 	.word	0x48000c00
 8001984:	48001000 	.word	0x48001000
 8001988:	40010400 	.word	0x40010400

0800198c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001992:	af00      	add	r7, sp, #0
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d102      	bne.n	80019a6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	f000 bef4 	b.w	800278e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 816a 	beq.w	8001c8a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019b6:	4bb3      	ldr	r3, [pc, #716]	; (8001c84 <HAL_RCC_OscConfig+0x2f8>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 030c 	and.w	r3, r3, #12
 80019be:	2b04      	cmp	r3, #4
 80019c0:	d00c      	beq.n	80019dc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019c2:	4bb0      	ldr	r3, [pc, #704]	; (8001c84 <HAL_RCC_OscConfig+0x2f8>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 030c 	and.w	r3, r3, #12
 80019ca:	2b08      	cmp	r3, #8
 80019cc:	d159      	bne.n	8001a82 <HAL_RCC_OscConfig+0xf6>
 80019ce:	4bad      	ldr	r3, [pc, #692]	; (8001c84 <HAL_RCC_OscConfig+0x2f8>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019da:	d152      	bne.n	8001a82 <HAL_RCC_OscConfig+0xf6>
 80019dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019e0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80019e8:	fa93 f3a3 	rbit	r3, r3
 80019ec:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019f0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f4:	fab3 f383 	clz	r3, r3
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	095b      	lsrs	r3, r3, #5
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d102      	bne.n	8001a0e <HAL_RCC_OscConfig+0x82>
 8001a08:	4b9e      	ldr	r3, [pc, #632]	; (8001c84 <HAL_RCC_OscConfig+0x2f8>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	e015      	b.n	8001a3a <HAL_RCC_OscConfig+0xae>
 8001a0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a12:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a16:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001a1a:	fa93 f3a3 	rbit	r3, r3
 8001a1e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001a22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a26:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001a2a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001a2e:	fa93 f3a3 	rbit	r3, r3
 8001a32:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001a36:	4b93      	ldr	r3, [pc, #588]	; (8001c84 <HAL_RCC_OscConfig+0x2f8>)
 8001a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a3e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001a42:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001a46:	fa92 f2a2 	rbit	r2, r2
 8001a4a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001a4e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001a52:	fab2 f282 	clz	r2, r2
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	f042 0220 	orr.w	r2, r2, #32
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	f002 021f 	and.w	r2, r2, #31
 8001a62:	2101      	movs	r1, #1
 8001a64:	fa01 f202 	lsl.w	r2, r1, r2
 8001a68:	4013      	ands	r3, r2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 810c 	beq.w	8001c88 <HAL_RCC_OscConfig+0x2fc>
 8001a70:	1d3b      	adds	r3, r7, #4
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f040 8106 	bne.w	8001c88 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	f000 be86 	b.w	800278e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a82:	1d3b      	adds	r3, r7, #4
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a8c:	d106      	bne.n	8001a9c <HAL_RCC_OscConfig+0x110>
 8001a8e:	4b7d      	ldr	r3, [pc, #500]	; (8001c84 <HAL_RCC_OscConfig+0x2f8>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a7c      	ldr	r2, [pc, #496]	; (8001c84 <HAL_RCC_OscConfig+0x2f8>)
 8001a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	e030      	b.n	8001afe <HAL_RCC_OscConfig+0x172>
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10c      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x134>
 8001aa6:	4b77      	ldr	r3, [pc, #476]	; (8001c84 <HAL_RCC_OscConfig+0x2f8>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a76      	ldr	r2, [pc, #472]	; (8001c84 <HAL_RCC_OscConfig+0x2f8>)
 8001aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	4b74      	ldr	r3, [pc, #464]	; (8001c84 <HAL_RCC_OscConfig+0x2f8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a73      	ldr	r2, [pc, #460]	; (8001c84 <HAL_RCC_OscConfig+0x2f8>)
 8001ab8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	e01e      	b.n	8001afe <HAL_RCC_OscConfig+0x172>
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aca:	d10c      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x15a>
 8001acc:	4b6d      	ldr	r3, [pc, #436]	; (8001c84 <HAL_RCC_OscConfig+0x2f8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a6c      	ldr	r2, [pc, #432]	; (8001c84 <HAL_RCC_OscConfig+0x2f8>)
 8001ad2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	4b6a      	ldr	r3, [pc, #424]	; (8001c84 <HAL_RCC_OscConfig+0x2f8>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a69      	ldr	r2, [pc, #420]	; (8001c84 <HAL_RCC_OscConfig+0x2f8>)
 8001ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	e00b      	b.n	8001afe <HAL_RCC_OscConfig+0x172>
 8001ae6:	4b67      	ldr	r3, [pc, #412]	; (8001c84 <HAL_RCC_OscConfig+0x2f8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a66      	ldr	r2, [pc, #408]	; (8001c84 <HAL_RCC_OscConfig+0x2f8>)
 8001aec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	4b64      	ldr	r3, [pc, #400]	; (8001c84 <HAL_RCC_OscConfig+0x2f8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a63      	ldr	r2, [pc, #396]	; (8001c84 <HAL_RCC_OscConfig+0x2f8>)
 8001af8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001afc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001afe:	4b61      	ldr	r3, [pc, #388]	; (8001c84 <HAL_RCC_OscConfig+0x2f8>)
 8001b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b02:	f023 020f 	bic.w	r2, r3, #15
 8001b06:	1d3b      	adds	r3, r7, #4
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	495d      	ldr	r1, [pc, #372]	; (8001c84 <HAL_RCC_OscConfig+0x2f8>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d059      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1c:	f7ff fc7a 	bl	8001414 <HAL_GetTick>
 8001b20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b24:	e00a      	b.n	8001b3c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b26:	f7ff fc75 	bl	8001414 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b64      	cmp	r3, #100	; 0x64
 8001b34:	d902      	bls.n	8001b3c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	f000 be29 	b.w	800278e <HAL_RCC_OscConfig+0xe02>
 8001b3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b40:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b44:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001b48:	fa93 f3a3 	rbit	r3, r3
 8001b4c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001b50:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b54:	fab3 f383 	clz	r3, r3
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	095b      	lsrs	r3, r3, #5
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d102      	bne.n	8001b6e <HAL_RCC_OscConfig+0x1e2>
 8001b68:	4b46      	ldr	r3, [pc, #280]	; (8001c84 <HAL_RCC_OscConfig+0x2f8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	e015      	b.n	8001b9a <HAL_RCC_OscConfig+0x20e>
 8001b6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b72:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b76:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001b7a:	fa93 f3a3 	rbit	r3, r3
 8001b7e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001b82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b86:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001b8a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001b8e:	fa93 f3a3 	rbit	r3, r3
 8001b92:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001b96:	4b3b      	ldr	r3, [pc, #236]	; (8001c84 <HAL_RCC_OscConfig+0x2f8>)
 8001b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b9e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001ba2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001ba6:	fa92 f2a2 	rbit	r2, r2
 8001baa:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001bae:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001bb2:	fab2 f282 	clz	r2, r2
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	f042 0220 	orr.w	r2, r2, #32
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	f002 021f 	and.w	r2, r2, #31
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc8:	4013      	ands	r3, r2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0ab      	beq.n	8001b26 <HAL_RCC_OscConfig+0x19a>
 8001bce:	e05c      	b.n	8001c8a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd0:	f7ff fc20 	bl	8001414 <HAL_GetTick>
 8001bd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd8:	e00a      	b.n	8001bf0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bda:	f7ff fc1b 	bl	8001414 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b64      	cmp	r3, #100	; 0x64
 8001be8:	d902      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	f000 bdcf 	b.w	800278e <HAL_RCC_OscConfig+0xe02>
 8001bf0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bf4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001bfc:	fa93 f3a3 	rbit	r3, r3
 8001c00:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001c04:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c08:	fab3 f383 	clz	r3, r3
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	095b      	lsrs	r3, r3, #5
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d102      	bne.n	8001c22 <HAL_RCC_OscConfig+0x296>
 8001c1c:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <HAL_RCC_OscConfig+0x2f8>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	e015      	b.n	8001c4e <HAL_RCC_OscConfig+0x2c2>
 8001c22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c26:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001c2e:	fa93 f3a3 	rbit	r3, r3
 8001c32:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001c36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c3a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001c3e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001c42:	fa93 f3a3 	rbit	r3, r3
 8001c46:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <HAL_RCC_OscConfig+0x2f8>)
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c52:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001c56:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001c5a:	fa92 f2a2 	rbit	r2, r2
 8001c5e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001c62:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001c66:	fab2 f282 	clz	r2, r2
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	f042 0220 	orr.w	r2, r2, #32
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	f002 021f 	and.w	r2, r2, #31
 8001c76:	2101      	movs	r1, #1
 8001c78:	fa01 f202 	lsl.w	r2, r1, r2
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1ab      	bne.n	8001bda <HAL_RCC_OscConfig+0x24e>
 8001c82:	e002      	b.n	8001c8a <HAL_RCC_OscConfig+0x2fe>
 8001c84:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 816f 	beq.w	8001f78 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c9a:	4bd0      	ldr	r3, [pc, #832]	; (8001fdc <HAL_RCC_OscConfig+0x650>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f003 030c 	and.w	r3, r3, #12
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00b      	beq.n	8001cbe <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ca6:	4bcd      	ldr	r3, [pc, #820]	; (8001fdc <HAL_RCC_OscConfig+0x650>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 030c 	and.w	r3, r3, #12
 8001cae:	2b08      	cmp	r3, #8
 8001cb0:	d16c      	bne.n	8001d8c <HAL_RCC_OscConfig+0x400>
 8001cb2:	4bca      	ldr	r3, [pc, #808]	; (8001fdc <HAL_RCC_OscConfig+0x650>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d166      	bne.n	8001d8c <HAL_RCC_OscConfig+0x400>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001cc8:	fa93 f3a3 	rbit	r3, r3
 8001ccc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001cd0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd4:	fab3 f383 	clz	r3, r3
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	095b      	lsrs	r3, r3, #5
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d102      	bne.n	8001cee <HAL_RCC_OscConfig+0x362>
 8001ce8:	4bbc      	ldr	r3, [pc, #752]	; (8001fdc <HAL_RCC_OscConfig+0x650>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	e013      	b.n	8001d16 <HAL_RCC_OscConfig+0x38a>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001cf8:	fa93 f3a3 	rbit	r3, r3
 8001cfc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001d00:	2302      	movs	r3, #2
 8001d02:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001d06:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001d0a:	fa93 f3a3 	rbit	r3, r3
 8001d0e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001d12:	4bb2      	ldr	r3, [pc, #712]	; (8001fdc <HAL_RCC_OscConfig+0x650>)
 8001d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d16:	2202      	movs	r2, #2
 8001d18:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001d1c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001d20:	fa92 f2a2 	rbit	r2, r2
 8001d24:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001d28:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001d2c:	fab2 f282 	clz	r2, r2
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	f042 0220 	orr.w	r2, r2, #32
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	f002 021f 	and.w	r2, r2, #31
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d007      	beq.n	8001d58 <HAL_RCC_OscConfig+0x3cc>
 8001d48:	1d3b      	adds	r3, r7, #4
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d002      	beq.n	8001d58 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	f000 bd1b 	b.w	800278e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d58:	4ba0      	ldr	r3, [pc, #640]	; (8001fdc <HAL_RCC_OscConfig+0x650>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d60:	1d3b      	adds	r3, r7, #4
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	21f8      	movs	r1, #248	; 0xf8
 8001d68:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001d70:	fa91 f1a1 	rbit	r1, r1
 8001d74:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001d78:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001d7c:	fab1 f181 	clz	r1, r1
 8001d80:	b2c9      	uxtb	r1, r1
 8001d82:	408b      	lsls	r3, r1
 8001d84:	4995      	ldr	r1, [pc, #596]	; (8001fdc <HAL_RCC_OscConfig+0x650>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8a:	e0f5      	b.n	8001f78 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d8c:	1d3b      	adds	r3, r7, #4
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 8085 	beq.w	8001ea2 <HAL_RCC_OscConfig+0x516>
 8001d98:	2301      	movs	r3, #1
 8001d9a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001da2:	fa93 f3a3 	rbit	r3, r3
 8001da6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001daa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dae:	fab3 f383 	clz	r3, r3
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001db8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc4:	f7ff fb26 	bl	8001414 <HAL_GetTick>
 8001dc8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dcc:	e00a      	b.n	8001de4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dce:	f7ff fb21 	bl	8001414 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d902      	bls.n	8001de4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	f000 bcd5 	b.w	800278e <HAL_RCC_OscConfig+0xe02>
 8001de4:	2302      	movs	r3, #2
 8001de6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dea:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001dee:	fa93 f3a3 	rbit	r3, r3
 8001df2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001df6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfa:	fab3 f383 	clz	r3, r3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	095b      	lsrs	r3, r3, #5
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d102      	bne.n	8001e14 <HAL_RCC_OscConfig+0x488>
 8001e0e:	4b73      	ldr	r3, [pc, #460]	; (8001fdc <HAL_RCC_OscConfig+0x650>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	e013      	b.n	8001e3c <HAL_RCC_OscConfig+0x4b0>
 8001e14:	2302      	movs	r3, #2
 8001e16:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001e1e:	fa93 f3a3 	rbit	r3, r3
 8001e22:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001e26:	2302      	movs	r3, #2
 8001e28:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001e2c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001e30:	fa93 f3a3 	rbit	r3, r3
 8001e34:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001e38:	4b68      	ldr	r3, [pc, #416]	; (8001fdc <HAL_RCC_OscConfig+0x650>)
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001e42:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001e46:	fa92 f2a2 	rbit	r2, r2
 8001e4a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001e4e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001e52:	fab2 f282 	clz	r2, r2
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	f042 0220 	orr.w	r2, r2, #32
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	f002 021f 	and.w	r2, r2, #31
 8001e62:	2101      	movs	r1, #1
 8001e64:	fa01 f202 	lsl.w	r2, r1, r2
 8001e68:	4013      	ands	r3, r2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0af      	beq.n	8001dce <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6e:	4b5b      	ldr	r3, [pc, #364]	; (8001fdc <HAL_RCC_OscConfig+0x650>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e76:	1d3b      	adds	r3, r7, #4
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	21f8      	movs	r1, #248	; 0xf8
 8001e7e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001e86:	fa91 f1a1 	rbit	r1, r1
 8001e8a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001e8e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001e92:	fab1 f181 	clz	r1, r1
 8001e96:	b2c9      	uxtb	r1, r1
 8001e98:	408b      	lsls	r3, r1
 8001e9a:	4950      	ldr	r1, [pc, #320]	; (8001fdc <HAL_RCC_OscConfig+0x650>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	600b      	str	r3, [r1, #0]
 8001ea0:	e06a      	b.n	8001f78 <HAL_RCC_OscConfig+0x5ec>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001eac:	fa93 f3a3 	rbit	r3, r3
 8001eb0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001eb4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eb8:	fab3 f383 	clz	r3, r3
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ec2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	461a      	mov	r2, r3
 8001eca:	2300      	movs	r3, #0
 8001ecc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ece:	f7ff faa1 	bl	8001414 <HAL_GetTick>
 8001ed2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed6:	e00a      	b.n	8001eee <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ed8:	f7ff fa9c 	bl	8001414 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d902      	bls.n	8001eee <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	f000 bc50 	b.w	800278e <HAL_RCC_OscConfig+0xe02>
 8001eee:	2302      	movs	r3, #2
 8001ef0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001ef8:	fa93 f3a3 	rbit	r3, r3
 8001efc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001f00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f04:	fab3 f383 	clz	r3, r3
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	095b      	lsrs	r3, r3, #5
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d102      	bne.n	8001f1e <HAL_RCC_OscConfig+0x592>
 8001f18:	4b30      	ldr	r3, [pc, #192]	; (8001fdc <HAL_RCC_OscConfig+0x650>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	e013      	b.n	8001f46 <HAL_RCC_OscConfig+0x5ba>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001f28:	fa93 f3a3 	rbit	r3, r3
 8001f2c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001f30:	2302      	movs	r3, #2
 8001f32:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001f36:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001f3a:	fa93 f3a3 	rbit	r3, r3
 8001f3e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001f42:	4b26      	ldr	r3, [pc, #152]	; (8001fdc <HAL_RCC_OscConfig+0x650>)
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	2202      	movs	r2, #2
 8001f48:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001f4c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001f50:	fa92 f2a2 	rbit	r2, r2
 8001f54:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001f58:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001f5c:	fab2 f282 	clz	r2, r2
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	f042 0220 	orr.w	r2, r2, #32
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	f002 021f 	and.w	r2, r2, #31
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1af      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 80da 	beq.w	800213c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f88:	1d3b      	adds	r3, r7, #4
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d069      	beq.n	8002066 <HAL_RCC_OscConfig+0x6da>
 8001f92:	2301      	movs	r3, #1
 8001f94:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f98:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001f9c:	fa93 f3a3 	rbit	r3, r3
 8001fa0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001fa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fa8:	fab3 f383 	clz	r3, r3
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	461a      	mov	r2, r3
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <HAL_RCC_OscConfig+0x654>)
 8001fb2:	4413      	add	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	2301      	movs	r3, #1
 8001fba:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fbc:	f7ff fa2a 	bl	8001414 <HAL_GetTick>
 8001fc0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc4:	e00e      	b.n	8001fe4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fc6:	f7ff fa25 	bl	8001414 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d906      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e3d9      	b.n	800278e <HAL_RCC_OscConfig+0xe02>
 8001fda:	bf00      	nop
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	10908120 	.word	0x10908120
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001fee:	fa93 f3a3 	rbit	r3, r3
 8001ff2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001ff6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	fa93 f2a3 	rbit	r2, r3
 8002008:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002012:	2202      	movs	r2, #2
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	fa93 f2a3 	rbit	r2, r3
 8002020:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002024:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002026:	4ba5      	ldr	r3, [pc, #660]	; (80022bc <HAL_RCC_OscConfig+0x930>)
 8002028:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800202a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800202e:	2102      	movs	r1, #2
 8002030:	6019      	str	r1, [r3, #0]
 8002032:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	fa93 f1a3 	rbit	r1, r3
 800203c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002040:	6019      	str	r1, [r3, #0]
  return result;
 8002042:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	fab3 f383 	clz	r3, r3
 800204c:	b2db      	uxtb	r3, r3
 800204e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002052:	b2db      	uxtb	r3, r3
 8002054:	f003 031f 	and.w	r3, r3, #31
 8002058:	2101      	movs	r1, #1
 800205a:	fa01 f303 	lsl.w	r3, r1, r3
 800205e:	4013      	ands	r3, r2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0b0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x63a>
 8002064:	e06a      	b.n	800213c <HAL_RCC_OscConfig+0x7b0>
 8002066:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800206a:	2201      	movs	r2, #1
 800206c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	fa93 f2a3 	rbit	r2, r3
 8002078:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800207c:	601a      	str	r2, [r3, #0]
  return result;
 800207e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002082:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002084:	fab3 f383 	clz	r3, r3
 8002088:	b2db      	uxtb	r3, r3
 800208a:	461a      	mov	r2, r3
 800208c:	4b8c      	ldr	r3, [pc, #560]	; (80022c0 <HAL_RCC_OscConfig+0x934>)
 800208e:	4413      	add	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	461a      	mov	r2, r3
 8002094:	2300      	movs	r3, #0
 8002096:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002098:	f7ff f9bc 	bl	8001414 <HAL_GetTick>
 800209c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a0:	e009      	b.n	80020b6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020a2:	f7ff f9b7 	bl	8001414 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e36b      	b.n	800278e <HAL_RCC_OscConfig+0xe02>
 80020b6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80020ba:	2202      	movs	r2, #2
 80020bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	fa93 f2a3 	rbit	r2, r3
 80020c8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80020d2:	2202      	movs	r2, #2
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	fa93 f2a3 	rbit	r2, r3
 80020e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80020ea:	2202      	movs	r2, #2
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	fa93 f2a3 	rbit	r2, r3
 80020f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020fc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020fe:	4b6f      	ldr	r3, [pc, #444]	; (80022bc <HAL_RCC_OscConfig+0x930>)
 8002100:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002102:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002106:	2102      	movs	r1, #2
 8002108:	6019      	str	r1, [r3, #0]
 800210a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	fa93 f1a3 	rbit	r1, r3
 8002114:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002118:	6019      	str	r1, [r3, #0]
  return result;
 800211a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	fab3 f383 	clz	r3, r3
 8002124:	b2db      	uxtb	r3, r3
 8002126:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800212a:	b2db      	uxtb	r3, r3
 800212c:	f003 031f 	and.w	r3, r3, #31
 8002130:	2101      	movs	r1, #1
 8002132:	fa01 f303 	lsl.w	r3, r1, r3
 8002136:	4013      	ands	r3, r2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1b2      	bne.n	80020a2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800213c:	1d3b      	adds	r3, r7, #4
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 8158 	beq.w	80023fc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800214c:	2300      	movs	r3, #0
 800214e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002152:	4b5a      	ldr	r3, [pc, #360]	; (80022bc <HAL_RCC_OscConfig+0x930>)
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d112      	bne.n	8002184 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800215e:	4b57      	ldr	r3, [pc, #348]	; (80022bc <HAL_RCC_OscConfig+0x930>)
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	4a56      	ldr	r2, [pc, #344]	; (80022bc <HAL_RCC_OscConfig+0x930>)
 8002164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002168:	61d3      	str	r3, [r2, #28]
 800216a:	4b54      	ldr	r3, [pc, #336]	; (80022bc <HAL_RCC_OscConfig+0x930>)
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002172:	f107 0308 	add.w	r3, r7, #8
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	f107 0308 	add.w	r3, r7, #8
 800217c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800217e:	2301      	movs	r3, #1
 8002180:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002184:	4b4f      	ldr	r3, [pc, #316]	; (80022c4 <HAL_RCC_OscConfig+0x938>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218c:	2b00      	cmp	r3, #0
 800218e:	d11a      	bne.n	80021c6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002190:	4b4c      	ldr	r3, [pc, #304]	; (80022c4 <HAL_RCC_OscConfig+0x938>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a4b      	ldr	r2, [pc, #300]	; (80022c4 <HAL_RCC_OscConfig+0x938>)
 8002196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800219a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800219c:	f7ff f93a 	bl	8001414 <HAL_GetTick>
 80021a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a4:	e009      	b.n	80021ba <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021a6:	f7ff f935 	bl	8001414 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b64      	cmp	r3, #100	; 0x64
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e2e9      	b.n	800278e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ba:	4b42      	ldr	r3, [pc, #264]	; (80022c4 <HAL_RCC_OscConfig+0x938>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0ef      	beq.n	80021a6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021c6:	1d3b      	adds	r3, r7, #4
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d106      	bne.n	80021de <HAL_RCC_OscConfig+0x852>
 80021d0:	4b3a      	ldr	r3, [pc, #232]	; (80022bc <HAL_RCC_OscConfig+0x930>)
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	4a39      	ldr	r2, [pc, #228]	; (80022bc <HAL_RCC_OscConfig+0x930>)
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	6213      	str	r3, [r2, #32]
 80021dc:	e02f      	b.n	800223e <HAL_RCC_OscConfig+0x8b2>
 80021de:	1d3b      	adds	r3, r7, #4
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d10c      	bne.n	8002202 <HAL_RCC_OscConfig+0x876>
 80021e8:	4b34      	ldr	r3, [pc, #208]	; (80022bc <HAL_RCC_OscConfig+0x930>)
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	4a33      	ldr	r2, [pc, #204]	; (80022bc <HAL_RCC_OscConfig+0x930>)
 80021ee:	f023 0301 	bic.w	r3, r3, #1
 80021f2:	6213      	str	r3, [r2, #32]
 80021f4:	4b31      	ldr	r3, [pc, #196]	; (80022bc <HAL_RCC_OscConfig+0x930>)
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	4a30      	ldr	r2, [pc, #192]	; (80022bc <HAL_RCC_OscConfig+0x930>)
 80021fa:	f023 0304 	bic.w	r3, r3, #4
 80021fe:	6213      	str	r3, [r2, #32]
 8002200:	e01d      	b.n	800223e <HAL_RCC_OscConfig+0x8b2>
 8002202:	1d3b      	adds	r3, r7, #4
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	2b05      	cmp	r3, #5
 800220a:	d10c      	bne.n	8002226 <HAL_RCC_OscConfig+0x89a>
 800220c:	4b2b      	ldr	r3, [pc, #172]	; (80022bc <HAL_RCC_OscConfig+0x930>)
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	4a2a      	ldr	r2, [pc, #168]	; (80022bc <HAL_RCC_OscConfig+0x930>)
 8002212:	f043 0304 	orr.w	r3, r3, #4
 8002216:	6213      	str	r3, [r2, #32]
 8002218:	4b28      	ldr	r3, [pc, #160]	; (80022bc <HAL_RCC_OscConfig+0x930>)
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	4a27      	ldr	r2, [pc, #156]	; (80022bc <HAL_RCC_OscConfig+0x930>)
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	6213      	str	r3, [r2, #32]
 8002224:	e00b      	b.n	800223e <HAL_RCC_OscConfig+0x8b2>
 8002226:	4b25      	ldr	r3, [pc, #148]	; (80022bc <HAL_RCC_OscConfig+0x930>)
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	4a24      	ldr	r2, [pc, #144]	; (80022bc <HAL_RCC_OscConfig+0x930>)
 800222c:	f023 0301 	bic.w	r3, r3, #1
 8002230:	6213      	str	r3, [r2, #32]
 8002232:	4b22      	ldr	r3, [pc, #136]	; (80022bc <HAL_RCC_OscConfig+0x930>)
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	4a21      	ldr	r2, [pc, #132]	; (80022bc <HAL_RCC_OscConfig+0x930>)
 8002238:	f023 0304 	bic.w	r3, r3, #4
 800223c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800223e:	1d3b      	adds	r3, r7, #4
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d06b      	beq.n	8002320 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002248:	f7ff f8e4 	bl	8001414 <HAL_GetTick>
 800224c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002250:	e00b      	b.n	800226a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002252:	f7ff f8df 	bl	8001414 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002262:	4293      	cmp	r3, r2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e291      	b.n	800278e <HAL_RCC_OscConfig+0xe02>
 800226a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800226e:	2202      	movs	r2, #2
 8002270:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	fa93 f2a3 	rbit	r2, r3
 800227c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002286:	2202      	movs	r2, #2
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	fa93 f2a3 	rbit	r2, r3
 8002294:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002298:	601a      	str	r2, [r3, #0]
  return result;
 800229a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800229e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a0:	fab3 f383 	clz	r3, r3
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	095b      	lsrs	r3, r3, #5
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	f043 0302 	orr.w	r3, r3, #2
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d109      	bne.n	80022c8 <HAL_RCC_OscConfig+0x93c>
 80022b4:	4b01      	ldr	r3, [pc, #4]	; (80022bc <HAL_RCC_OscConfig+0x930>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	e014      	b.n	80022e4 <HAL_RCC_OscConfig+0x958>
 80022ba:	bf00      	nop
 80022bc:	40021000 	.word	0x40021000
 80022c0:	10908120 	.word	0x10908120
 80022c4:	40007000 	.word	0x40007000
 80022c8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80022cc:	2202      	movs	r2, #2
 80022ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	fa93 f2a3 	rbit	r2, r3
 80022da:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	4bbb      	ldr	r3, [pc, #748]	; (80025d0 <HAL_RCC_OscConfig+0xc44>)
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80022e8:	2102      	movs	r1, #2
 80022ea:	6011      	str	r1, [r2, #0]
 80022ec:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	fa92 f1a2 	rbit	r1, r2
 80022f6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80022fa:	6011      	str	r1, [r2, #0]
  return result;
 80022fc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002300:	6812      	ldr	r2, [r2, #0]
 8002302:	fab2 f282 	clz	r2, r2
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	f002 021f 	and.w	r2, r2, #31
 8002312:	2101      	movs	r1, #1
 8002314:	fa01 f202 	lsl.w	r2, r1, r2
 8002318:	4013      	ands	r3, r2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d099      	beq.n	8002252 <HAL_RCC_OscConfig+0x8c6>
 800231e:	e063      	b.n	80023e8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002320:	f7ff f878 	bl	8001414 <HAL_GetTick>
 8002324:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002328:	e00b      	b.n	8002342 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800232a:	f7ff f873 	bl	8001414 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	f241 3288 	movw	r2, #5000	; 0x1388
 800233a:	4293      	cmp	r3, r2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e225      	b.n	800278e <HAL_RCC_OscConfig+0xe02>
 8002342:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002346:	2202      	movs	r2, #2
 8002348:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	fa93 f2a3 	rbit	r2, r3
 8002354:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800235e:	2202      	movs	r2, #2
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	fa93 f2a3 	rbit	r2, r3
 800236c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002370:	601a      	str	r2, [r3, #0]
  return result;
 8002372:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002376:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002378:	fab3 f383 	clz	r3, r3
 800237c:	b2db      	uxtb	r3, r3
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	b2db      	uxtb	r3, r3
 8002382:	f043 0302 	orr.w	r3, r3, #2
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d102      	bne.n	8002392 <HAL_RCC_OscConfig+0xa06>
 800238c:	4b90      	ldr	r3, [pc, #576]	; (80025d0 <HAL_RCC_OscConfig+0xc44>)
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	e00d      	b.n	80023ae <HAL_RCC_OscConfig+0xa22>
 8002392:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002396:	2202      	movs	r2, #2
 8002398:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	fa93 f2a3 	rbit	r2, r3
 80023a4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	4b89      	ldr	r3, [pc, #548]	; (80025d0 <HAL_RCC_OscConfig+0xc44>)
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80023b2:	2102      	movs	r1, #2
 80023b4:	6011      	str	r1, [r2, #0]
 80023b6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	fa92 f1a2 	rbit	r1, r2
 80023c0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80023c4:	6011      	str	r1, [r2, #0]
  return result;
 80023c6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80023ca:	6812      	ldr	r2, [r2, #0]
 80023cc:	fab2 f282 	clz	r2, r2
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	f002 021f 	and.w	r2, r2, #31
 80023dc:	2101      	movs	r1, #1
 80023de:	fa01 f202 	lsl.w	r2, r1, r2
 80023e2:	4013      	ands	r3, r2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1a0      	bne.n	800232a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023e8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d105      	bne.n	80023fc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023f0:	4b77      	ldr	r3, [pc, #476]	; (80025d0 <HAL_RCC_OscConfig+0xc44>)
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	4a76      	ldr	r2, [pc, #472]	; (80025d0 <HAL_RCC_OscConfig+0xc44>)
 80023f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023fa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023fc:	1d3b      	adds	r3, r7, #4
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 81c2 	beq.w	800278c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002408:	4b71      	ldr	r3, [pc, #452]	; (80025d0 <HAL_RCC_OscConfig+0xc44>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 030c 	and.w	r3, r3, #12
 8002410:	2b08      	cmp	r3, #8
 8002412:	f000 819c 	beq.w	800274e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002416:	1d3b      	adds	r3, r7, #4
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	2b02      	cmp	r3, #2
 800241e:	f040 8114 	bne.w	800264a <HAL_RCC_OscConfig+0xcbe>
 8002422:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002426:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800242a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	fa93 f2a3 	rbit	r2, r3
 8002436:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800243a:	601a      	str	r2, [r3, #0]
  return result;
 800243c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002440:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	b2db      	uxtb	r3, r3
 8002448:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800244c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	461a      	mov	r2, r3
 8002454:	2300      	movs	r3, #0
 8002456:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002458:	f7fe ffdc 	bl	8001414 <HAL_GetTick>
 800245c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002460:	e009      	b.n	8002476 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002462:	f7fe ffd7 	bl	8001414 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e18b      	b.n	800278e <HAL_RCC_OscConfig+0xe02>
 8002476:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800247a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800247e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002480:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	fa93 f2a3 	rbit	r2, r3
 800248a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800248e:	601a      	str	r2, [r3, #0]
  return result;
 8002490:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002494:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002496:	fab3 f383 	clz	r3, r3
 800249a:	b2db      	uxtb	r3, r3
 800249c:	095b      	lsrs	r3, r3, #5
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d102      	bne.n	80024b0 <HAL_RCC_OscConfig+0xb24>
 80024aa:	4b49      	ldr	r3, [pc, #292]	; (80025d0 <HAL_RCC_OscConfig+0xc44>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	e01b      	b.n	80024e8 <HAL_RCC_OscConfig+0xb5c>
 80024b0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80024b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	fa93 f2a3 	rbit	r2, r3
 80024c4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80024ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	fa93 f2a3 	rbit	r2, r3
 80024de:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	4b3a      	ldr	r3, [pc, #232]	; (80025d0 <HAL_RCC_OscConfig+0xc44>)
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80024ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024f0:	6011      	str	r1, [r2, #0]
 80024f2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80024f6:	6812      	ldr	r2, [r2, #0]
 80024f8:	fa92 f1a2 	rbit	r1, r2
 80024fc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002500:	6011      	str	r1, [r2, #0]
  return result;
 8002502:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002506:	6812      	ldr	r2, [r2, #0]
 8002508:	fab2 f282 	clz	r2, r2
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	f042 0220 	orr.w	r2, r2, #32
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	f002 021f 	and.w	r2, r2, #31
 8002518:	2101      	movs	r1, #1
 800251a:	fa01 f202 	lsl.w	r2, r1, r2
 800251e:	4013      	ands	r3, r2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d19e      	bne.n	8002462 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002524:	4b2a      	ldr	r3, [pc, #168]	; (80025d0 <HAL_RCC_OscConfig+0xc44>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800252c:	1d3b      	adds	r3, r7, #4
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002532:	1d3b      	adds	r3, r7, #4
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	430b      	orrs	r3, r1
 800253a:	4925      	ldr	r1, [pc, #148]	; (80025d0 <HAL_RCC_OscConfig+0xc44>)
 800253c:	4313      	orrs	r3, r2
 800253e:	604b      	str	r3, [r1, #4]
 8002540:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002544:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002548:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	fa93 f2a3 	rbit	r2, r3
 8002554:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002558:	601a      	str	r2, [r3, #0]
  return result;
 800255a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800255e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002560:	fab3 f383 	clz	r3, r3
 8002564:	b2db      	uxtb	r3, r3
 8002566:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800256a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	461a      	mov	r2, r3
 8002572:	2301      	movs	r3, #1
 8002574:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002576:	f7fe ff4d 	bl	8001414 <HAL_GetTick>
 800257a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800257e:	e009      	b.n	8002594 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002580:	f7fe ff48 	bl	8001414 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e0fc      	b.n	800278e <HAL_RCC_OscConfig+0xe02>
 8002594:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002598:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800259c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	fa93 f2a3 	rbit	r2, r3
 80025a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025ac:	601a      	str	r2, [r3, #0]
  return result;
 80025ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025b2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025b4:	fab3 f383 	clz	r3, r3
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	095b      	lsrs	r3, r3, #5
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d105      	bne.n	80025d4 <HAL_RCC_OscConfig+0xc48>
 80025c8:	4b01      	ldr	r3, [pc, #4]	; (80025d0 <HAL_RCC_OscConfig+0xc44>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	e01e      	b.n	800260c <HAL_RCC_OscConfig+0xc80>
 80025ce:	bf00      	nop
 80025d0:	40021000 	.word	0x40021000
 80025d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80025d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	fa93 f2a3 	rbit	r2, r3
 80025e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	fa93 f2a3 	rbit	r2, r3
 8002602:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	4b63      	ldr	r3, [pc, #396]	; (8002798 <HAL_RCC_OscConfig+0xe0c>)
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002610:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002614:	6011      	str	r1, [r2, #0]
 8002616:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	fa92 f1a2 	rbit	r1, r2
 8002620:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002624:	6011      	str	r1, [r2, #0]
  return result;
 8002626:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800262a:	6812      	ldr	r2, [r2, #0]
 800262c:	fab2 f282 	clz	r2, r2
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	f042 0220 	orr.w	r2, r2, #32
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	f002 021f 	and.w	r2, r2, #31
 800263c:	2101      	movs	r1, #1
 800263e:	fa01 f202 	lsl.w	r2, r1, r2
 8002642:	4013      	ands	r3, r2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d09b      	beq.n	8002580 <HAL_RCC_OscConfig+0xbf4>
 8002648:	e0a0      	b.n	800278c <HAL_RCC_OscConfig+0xe00>
 800264a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800264e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002652:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002654:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	fa93 f2a3 	rbit	r2, r3
 800265e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002662:	601a      	str	r2, [r3, #0]
  return result;
 8002664:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002668:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800266a:	fab3 f383 	clz	r3, r3
 800266e:	b2db      	uxtb	r3, r3
 8002670:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002674:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	461a      	mov	r2, r3
 800267c:	2300      	movs	r3, #0
 800267e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002680:	f7fe fec8 	bl	8001414 <HAL_GetTick>
 8002684:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002688:	e009      	b.n	800269e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800268a:	f7fe fec3 	bl	8001414 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e077      	b.n	800278e <HAL_RCC_OscConfig+0xe02>
 800269e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	fa93 f2a3 	rbit	r2, r3
 80026b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026b6:	601a      	str	r2, [r3, #0]
  return result;
 80026b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026be:	fab3 f383 	clz	r3, r3
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	095b      	lsrs	r3, r3, #5
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d102      	bne.n	80026d8 <HAL_RCC_OscConfig+0xd4c>
 80026d2:	4b31      	ldr	r3, [pc, #196]	; (8002798 <HAL_RCC_OscConfig+0xe0c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	e01b      	b.n	8002710 <HAL_RCC_OscConfig+0xd84>
 80026d8:	f107 0320 	add.w	r3, r7, #32
 80026dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e2:	f107 0320 	add.w	r3, r7, #32
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	fa93 f2a3 	rbit	r2, r3
 80026ec:	f107 031c 	add.w	r3, r7, #28
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	f107 0318 	add.w	r3, r7, #24
 80026f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	f107 0318 	add.w	r3, r7, #24
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	fa93 f2a3 	rbit	r2, r3
 8002706:	f107 0314 	add.w	r3, r7, #20
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	4b22      	ldr	r3, [pc, #136]	; (8002798 <HAL_RCC_OscConfig+0xe0c>)
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	f107 0210 	add.w	r2, r7, #16
 8002714:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002718:	6011      	str	r1, [r2, #0]
 800271a:	f107 0210 	add.w	r2, r7, #16
 800271e:	6812      	ldr	r2, [r2, #0]
 8002720:	fa92 f1a2 	rbit	r1, r2
 8002724:	f107 020c 	add.w	r2, r7, #12
 8002728:	6011      	str	r1, [r2, #0]
  return result;
 800272a:	f107 020c 	add.w	r2, r7, #12
 800272e:	6812      	ldr	r2, [r2, #0]
 8002730:	fab2 f282 	clz	r2, r2
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	f042 0220 	orr.w	r2, r2, #32
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	f002 021f 	and.w	r2, r2, #31
 8002740:	2101      	movs	r1, #1
 8002742:	fa01 f202 	lsl.w	r2, r1, r2
 8002746:	4013      	ands	r3, r2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d19e      	bne.n	800268a <HAL_RCC_OscConfig+0xcfe>
 800274c:	e01e      	b.n	800278c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800274e:	1d3b      	adds	r3, r7, #4
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d101      	bne.n	800275c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e018      	b.n	800278e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800275c:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <HAL_RCC_OscConfig+0xe0c>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002764:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002768:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800276c:	1d3b      	adds	r3, r7, #4
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	429a      	cmp	r2, r3
 8002774:	d108      	bne.n	8002788 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002776:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800277a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800277e:	1d3b      	adds	r3, r7, #4
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002784:	429a      	cmp	r2, r3
 8002786:	d001      	beq.n	800278c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e000      	b.n	800278e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40021000 	.word	0x40021000

0800279c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b09e      	sub	sp, #120	; 0x78
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e162      	b.n	8002a7a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027b4:	4b90      	ldr	r3, [pc, #576]	; (80029f8 <HAL_RCC_ClockConfig+0x25c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d910      	bls.n	80027e4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c2:	4b8d      	ldr	r3, [pc, #564]	; (80029f8 <HAL_RCC_ClockConfig+0x25c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f023 0207 	bic.w	r2, r3, #7
 80027ca:	498b      	ldr	r1, [pc, #556]	; (80029f8 <HAL_RCC_ClockConfig+0x25c>)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d2:	4b89      	ldr	r3, [pc, #548]	; (80029f8 <HAL_RCC_ClockConfig+0x25c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d001      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e14a      	b.n	8002a7a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d008      	beq.n	8002802 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f0:	4b82      	ldr	r3, [pc, #520]	; (80029fc <HAL_RCC_ClockConfig+0x260>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	497f      	ldr	r1, [pc, #508]	; (80029fc <HAL_RCC_ClockConfig+0x260>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 80dc 	beq.w	80029c8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d13c      	bne.n	8002892 <HAL_RCC_ClockConfig+0xf6>
 8002818:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800281c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002820:	fa93 f3a3 	rbit	r3, r3
 8002824:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002828:	fab3 f383 	clz	r3, r3
 800282c:	b2db      	uxtb	r3, r3
 800282e:	095b      	lsrs	r3, r3, #5
 8002830:	b2db      	uxtb	r3, r3
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b01      	cmp	r3, #1
 800283a:	d102      	bne.n	8002842 <HAL_RCC_ClockConfig+0xa6>
 800283c:	4b6f      	ldr	r3, [pc, #444]	; (80029fc <HAL_RCC_ClockConfig+0x260>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	e00f      	b.n	8002862 <HAL_RCC_ClockConfig+0xc6>
 8002842:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002846:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002848:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800284a:	fa93 f3a3 	rbit	r3, r3
 800284e:	667b      	str	r3, [r7, #100]	; 0x64
 8002850:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002854:	663b      	str	r3, [r7, #96]	; 0x60
 8002856:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002858:	fa93 f3a3 	rbit	r3, r3
 800285c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800285e:	4b67      	ldr	r3, [pc, #412]	; (80029fc <HAL_RCC_ClockConfig+0x260>)
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002866:	65ba      	str	r2, [r7, #88]	; 0x58
 8002868:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800286a:	fa92 f2a2 	rbit	r2, r2
 800286e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002870:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002872:	fab2 f282 	clz	r2, r2
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	f042 0220 	orr.w	r2, r2, #32
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	f002 021f 	and.w	r2, r2, #31
 8002882:	2101      	movs	r1, #1
 8002884:	fa01 f202 	lsl.w	r2, r1, r2
 8002888:	4013      	ands	r3, r2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d17b      	bne.n	8002986 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e0f3      	b.n	8002a7a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d13c      	bne.n	8002914 <HAL_RCC_ClockConfig+0x178>
 800289a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800289e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028a2:	fa93 f3a3 	rbit	r3, r3
 80028a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80028a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028aa:	fab3 f383 	clz	r3, r3
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	095b      	lsrs	r3, r3, #5
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d102      	bne.n	80028c4 <HAL_RCC_ClockConfig+0x128>
 80028be:	4b4f      	ldr	r3, [pc, #316]	; (80029fc <HAL_RCC_ClockConfig+0x260>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	e00f      	b.n	80028e4 <HAL_RCC_ClockConfig+0x148>
 80028c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028cc:	fa93 f3a3 	rbit	r3, r3
 80028d0:	647b      	str	r3, [r7, #68]	; 0x44
 80028d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028d6:	643b      	str	r3, [r7, #64]	; 0x40
 80028d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028da:	fa93 f3a3 	rbit	r3, r3
 80028de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028e0:	4b46      	ldr	r3, [pc, #280]	; (80029fc <HAL_RCC_ClockConfig+0x260>)
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028e8:	63ba      	str	r2, [r7, #56]	; 0x38
 80028ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028ec:	fa92 f2a2 	rbit	r2, r2
 80028f0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80028f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028f4:	fab2 f282 	clz	r2, r2
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	f042 0220 	orr.w	r2, r2, #32
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	f002 021f 	and.w	r2, r2, #31
 8002904:	2101      	movs	r1, #1
 8002906:	fa01 f202 	lsl.w	r2, r1, r2
 800290a:	4013      	ands	r3, r2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d13a      	bne.n	8002986 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e0b2      	b.n	8002a7a <HAL_RCC_ClockConfig+0x2de>
 8002914:	2302      	movs	r3, #2
 8002916:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291a:	fa93 f3a3 	rbit	r3, r3
 800291e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002922:	fab3 f383 	clz	r3, r3
 8002926:	b2db      	uxtb	r3, r3
 8002928:	095b      	lsrs	r3, r3, #5
 800292a:	b2db      	uxtb	r3, r3
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b01      	cmp	r3, #1
 8002934:	d102      	bne.n	800293c <HAL_RCC_ClockConfig+0x1a0>
 8002936:	4b31      	ldr	r3, [pc, #196]	; (80029fc <HAL_RCC_ClockConfig+0x260>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	e00d      	b.n	8002958 <HAL_RCC_ClockConfig+0x1bc>
 800293c:	2302      	movs	r3, #2
 800293e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002942:	fa93 f3a3 	rbit	r3, r3
 8002946:	627b      	str	r3, [r7, #36]	; 0x24
 8002948:	2302      	movs	r3, #2
 800294a:	623b      	str	r3, [r7, #32]
 800294c:	6a3b      	ldr	r3, [r7, #32]
 800294e:	fa93 f3a3 	rbit	r3, r3
 8002952:	61fb      	str	r3, [r7, #28]
 8002954:	4b29      	ldr	r3, [pc, #164]	; (80029fc <HAL_RCC_ClockConfig+0x260>)
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	2202      	movs	r2, #2
 800295a:	61ba      	str	r2, [r7, #24]
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	fa92 f2a2 	rbit	r2, r2
 8002962:	617a      	str	r2, [r7, #20]
  return result;
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	fab2 f282 	clz	r2, r2
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	f042 0220 	orr.w	r2, r2, #32
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	f002 021f 	and.w	r2, r2, #31
 8002976:	2101      	movs	r1, #1
 8002978:	fa01 f202 	lsl.w	r2, r1, r2
 800297c:	4013      	ands	r3, r2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e079      	b.n	8002a7a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002986:	4b1d      	ldr	r3, [pc, #116]	; (80029fc <HAL_RCC_ClockConfig+0x260>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f023 0203 	bic.w	r2, r3, #3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	491a      	ldr	r1, [pc, #104]	; (80029fc <HAL_RCC_ClockConfig+0x260>)
 8002994:	4313      	orrs	r3, r2
 8002996:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002998:	f7fe fd3c 	bl	8001414 <HAL_GetTick>
 800299c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299e:	e00a      	b.n	80029b6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a0:	f7fe fd38 	bl	8001414 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e061      	b.n	8002a7a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b6:	4b11      	ldr	r3, [pc, #68]	; (80029fc <HAL_RCC_ClockConfig+0x260>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f003 020c 	and.w	r2, r3, #12
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d1eb      	bne.n	80029a0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029c8:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <HAL_RCC_ClockConfig+0x25c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d214      	bcs.n	8002a00 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d6:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <HAL_RCC_ClockConfig+0x25c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f023 0207 	bic.w	r2, r3, #7
 80029de:	4906      	ldr	r1, [pc, #24]	; (80029f8 <HAL_RCC_ClockConfig+0x25c>)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e6:	4b04      	ldr	r3, [pc, #16]	; (80029f8 <HAL_RCC_ClockConfig+0x25c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d005      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e040      	b.n	8002a7a <HAL_RCC_ClockConfig+0x2de>
 80029f8:	40022000 	.word	0x40022000
 80029fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d008      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a0c:	4b1d      	ldr	r3, [pc, #116]	; (8002a84 <HAL_RCC_ClockConfig+0x2e8>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	491a      	ldr	r1, [pc, #104]	; (8002a84 <HAL_RCC_ClockConfig+0x2e8>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d009      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a2a:	4b16      	ldr	r3, [pc, #88]	; (8002a84 <HAL_RCC_ClockConfig+0x2e8>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	4912      	ldr	r1, [pc, #72]	; (8002a84 <HAL_RCC_ClockConfig+0x2e8>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a3e:	f000 f829 	bl	8002a94 <HAL_RCC_GetSysClockFreq>
 8002a42:	4601      	mov	r1, r0
 8002a44:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <HAL_RCC_ClockConfig+0x2e8>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a4c:	22f0      	movs	r2, #240	; 0xf0
 8002a4e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	fa92 f2a2 	rbit	r2, r2
 8002a56:	60fa      	str	r2, [r7, #12]
  return result;
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	fab2 f282 	clz	r2, r2
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	40d3      	lsrs	r3, r2
 8002a62:	4a09      	ldr	r2, [pc, #36]	; (8002a88 <HAL_RCC_ClockConfig+0x2ec>)
 8002a64:	5cd3      	ldrb	r3, [r2, r3]
 8002a66:	fa21 f303 	lsr.w	r3, r1, r3
 8002a6a:	4a08      	ldr	r2, [pc, #32]	; (8002a8c <HAL_RCC_ClockConfig+0x2f0>)
 8002a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a6e:	4b08      	ldr	r3, [pc, #32]	; (8002a90 <HAL_RCC_ClockConfig+0x2f4>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fe fc8a 	bl	800138c <HAL_InitTick>
  
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3778      	adds	r7, #120	; 0x78
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40021000 	.word	0x40021000
 8002a88:	08004aa0 	.word	0x08004aa0
 8002a8c:	200001f4 	.word	0x200001f4
 8002a90:	200001f8 	.word	0x200001f8

08002a94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b08b      	sub	sp, #44	; 0x2c
 8002a98:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61bb      	str	r3, [r7, #24]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002aae:	4b29      	ldr	r3, [pc, #164]	; (8002b54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d002      	beq.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x30>
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	d003      	beq.n	8002aca <HAL_RCC_GetSysClockFreq+0x36>
 8002ac2:	e03c      	b.n	8002b3e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ac4:	4b24      	ldr	r3, [pc, #144]	; (8002b58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ac6:	623b      	str	r3, [r7, #32]
      break;
 8002ac8:	e03c      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002ad0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002ad4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	fa92 f2a2 	rbit	r2, r2
 8002adc:	607a      	str	r2, [r7, #4]
  return result;
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	fab2 f282 	clz	r2, r2
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	40d3      	lsrs	r3, r2
 8002ae8:	4a1c      	ldr	r2, [pc, #112]	; (8002b5c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002aea:	5cd3      	ldrb	r3, [r2, r3]
 8002aec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002aee:	4b19      	ldr	r3, [pc, #100]	; (8002b54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	220f      	movs	r2, #15
 8002af8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	fa92 f2a2 	rbit	r2, r2
 8002b00:	60fa      	str	r2, [r7, #12]
  return result;
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	fab2 f282 	clz	r2, r2
 8002b08:	b2d2      	uxtb	r2, r2
 8002b0a:	40d3      	lsrs	r3, r2
 8002b0c:	4a14      	ldr	r2, [pc, #80]	; (8002b60 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002b0e:	5cd3      	ldrb	r3, [r2, r3]
 8002b10:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d008      	beq.n	8002b2e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b1c:	4a0e      	ldr	r2, [pc, #56]	; (8002b58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	fb02 f303 	mul.w	r3, r2, r3
 8002b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b2c:	e004      	b.n	8002b38 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	4a0c      	ldr	r2, [pc, #48]	; (8002b64 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b32:	fb02 f303 	mul.w	r3, r2, r3
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	623b      	str	r3, [r7, #32]
      break;
 8002b3c:	e002      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b3e:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b40:	623b      	str	r3, [r7, #32]
      break;
 8002b42:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b44:	6a3b      	ldr	r3, [r7, #32]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	372c      	adds	r7, #44	; 0x2c
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	40021000 	.word	0x40021000
 8002b58:	007a1200 	.word	0x007a1200
 8002b5c:	08004ab8 	.word	0x08004ab8
 8002b60:	08004ac8 	.word	0x08004ac8
 8002b64:	003d0900 	.word	0x003d0900

08002b68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b6c:	4b03      	ldr	r3, [pc, #12]	; (8002b7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	200001f4 	.word	0x200001f4

08002b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002b86:	f7ff ffef 	bl	8002b68 <HAL_RCC_GetHCLKFreq>
 8002b8a:	4601      	mov	r1, r0
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b94:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002b98:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	fa92 f2a2 	rbit	r2, r2
 8002ba0:	603a      	str	r2, [r7, #0]
  return result;
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	fab2 f282 	clz	r2, r2
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	40d3      	lsrs	r3, r2
 8002bac:	4a04      	ldr	r2, [pc, #16]	; (8002bc0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002bae:	5cd3      	ldrb	r3, [r2, r3]
 8002bb0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	08004ab0 	.word	0x08004ab0

08002bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002bca:	f7ff ffcd 	bl	8002b68 <HAL_RCC_GetHCLKFreq>
 8002bce:	4601      	mov	r1, r0
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002bd8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002bdc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	fa92 f2a2 	rbit	r2, r2
 8002be4:	603a      	str	r2, [r7, #0]
  return result;
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	fab2 f282 	clz	r2, r2
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	40d3      	lsrs	r3, r2
 8002bf0:	4a04      	ldr	r2, [pc, #16]	; (8002c04 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002bf2:	5cd3      	ldrb	r3, [r2, r3]
 8002bf4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40021000 	.word	0x40021000
 8002c04:	08004ab0 	.word	0x08004ab0

08002c08 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b092      	sub	sp, #72	; 0x48
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f000 80d4 	beq.w	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c2c:	4b4e      	ldr	r3, [pc, #312]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10e      	bne.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c38:	4b4b      	ldr	r3, [pc, #300]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	4a4a      	ldr	r2, [pc, #296]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c42:	61d3      	str	r3, [r2, #28]
 8002c44:	4b48      	ldr	r3, [pc, #288]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4c:	60bb      	str	r3, [r7, #8]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c50:	2301      	movs	r3, #1
 8002c52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c56:	4b45      	ldr	r3, [pc, #276]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d118      	bne.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c62:	4b42      	ldr	r3, [pc, #264]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a41      	ldr	r2, [pc, #260]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c6c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c6e:	f7fe fbd1 	bl	8001414 <HAL_GetTick>
 8002c72:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c74:	e008      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c76:	f7fe fbcd 	bl	8001414 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b64      	cmp	r3, #100	; 0x64
 8002c82:	d901      	bls.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e169      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c88:	4b38      	ldr	r3, [pc, #224]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0f0      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c94:	4b34      	ldr	r3, [pc, #208]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 8084 	beq.w	8002dae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d07c      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cb4:	4b2c      	ldr	r3, [pc, #176]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cc2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cce:	fab3 f383 	clz	r3, r3
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4b26      	ldr	r3, [pc, #152]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cd8:	4413      	add	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	461a      	mov	r2, r3
 8002cde:	2301      	movs	r3, #1
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ce6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cea:	fa93 f3a3 	rbit	r3, r3
 8002cee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cf2:	fab3 f383 	clz	r3, r3
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4b1d      	ldr	r3, [pc, #116]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cfc:	4413      	add	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	461a      	mov	r2, r3
 8002d02:	2300      	movs	r3, #0
 8002d04:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d06:	4a18      	ldr	r2, [pc, #96]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d0a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d04b      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d16:	f7fe fb7d 	bl	8001414 <HAL_GetTick>
 8002d1a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d1c:	e00a      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d1e:	f7fe fb79 	bl	8001414 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e113      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002d34:	2302      	movs	r3, #2
 8002d36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3a:	fa93 f3a3 	rbit	r3, r3
 8002d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d40:	2302      	movs	r3, #2
 8002d42:	623b      	str	r3, [r7, #32]
 8002d44:	6a3b      	ldr	r3, [r7, #32]
 8002d46:	fa93 f3a3 	rbit	r3, r3
 8002d4a:	61fb      	str	r3, [r7, #28]
  return result;
 8002d4c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d4e:	fab3 f383 	clz	r3, r3
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	095b      	lsrs	r3, r3, #5
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	f043 0302 	orr.w	r3, r3, #2
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d108      	bne.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002d62:	4b01      	ldr	r3, [pc, #4]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	e00d      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	40007000 	.word	0x40007000
 8002d70:	10908100 	.word	0x10908100
 8002d74:	2302      	movs	r3, #2
 8002d76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	fa93 f3a3 	rbit	r3, r3
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	4b78      	ldr	r3, [pc, #480]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	2202      	movs	r2, #2
 8002d86:	613a      	str	r2, [r7, #16]
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	fa92 f2a2 	rbit	r2, r2
 8002d8e:	60fa      	str	r2, [r7, #12]
  return result;
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	fab2 f282 	clz	r2, r2
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d9c:	b2d2      	uxtb	r2, r2
 8002d9e:	f002 021f 	and.w	r2, r2, #31
 8002da2:	2101      	movs	r1, #1
 8002da4:	fa01 f202 	lsl.w	r2, r1, r2
 8002da8:	4013      	ands	r3, r2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0b7      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002dae:	4b6d      	ldr	r3, [pc, #436]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	496a      	ldr	r1, [pc, #424]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dc0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d105      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc8:	4b66      	ldr	r3, [pc, #408]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	4a65      	ldr	r2, [pc, #404]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d008      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002de0:	4b60      	ldr	r3, [pc, #384]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de4:	f023 0203 	bic.w	r2, r3, #3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	495d      	ldr	r1, [pc, #372]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d008      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dfe:	4b59      	ldr	r3, [pc, #356]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	4956      	ldr	r1, [pc, #344]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e1c:	4b51      	ldr	r3, [pc, #324]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	494e      	ldr	r1, [pc, #312]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0320 	and.w	r3, r3, #32
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d008      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e3a:	4b4a      	ldr	r3, [pc, #296]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	f023 0210 	bic.w	r2, r3, #16
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	4947      	ldr	r1, [pc, #284]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002e58:	4b42      	ldr	r3, [pc, #264]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e64:	493f      	ldr	r1, [pc, #252]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d008      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e76:	4b3b      	ldr	r3, [pc, #236]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	f023 0220 	bic.w	r2, r3, #32
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	4938      	ldr	r1, [pc, #224]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e94:	4b33      	ldr	r3, [pc, #204]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	4930      	ldr	r1, [pc, #192]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0310 	and.w	r3, r3, #16
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d008      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002eb2:	4b2c      	ldr	r3, [pc, #176]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	4929      	ldr	r1, [pc, #164]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d008      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ed0:	4b24      	ldr	r3, [pc, #144]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002edc:	4921      	ldr	r1, [pc, #132]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d008      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002eee:	4b1d      	ldr	r3, [pc, #116]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	491a      	ldr	r1, [pc, #104]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d008      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002f0c:	4b15      	ldr	r3, [pc, #84]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f10:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f18:	4912      	ldr	r1, [pc, #72]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d008      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f2a:	4b0e      	ldr	r3, [pc, #56]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	490b      	ldr	r1, [pc, #44]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d008      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002f48:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f54:	4903      	ldr	r1, [pc, #12]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3748      	adds	r7, #72	; 0x48
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40021000 	.word	0x40021000

08002f68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e049      	b.n	800300e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d106      	bne.n	8002f94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7fe f8d8 	bl	8001144 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3304      	adds	r3, #4
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	f000 fab2 	bl	8003510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b01      	cmp	r3, #1
 800302a:	d001      	beq.n	8003030 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e042      	b.n	80030b6 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2202      	movs	r2, #2
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a21      	ldr	r2, [pc, #132]	; (80030c4 <HAL_TIM_Base_Start+0xac>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d018      	beq.n	8003074 <HAL_TIM_Base_Start+0x5c>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800304a:	d013      	beq.n	8003074 <HAL_TIM_Base_Start+0x5c>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a1d      	ldr	r2, [pc, #116]	; (80030c8 <HAL_TIM_Base_Start+0xb0>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d00e      	beq.n	8003074 <HAL_TIM_Base_Start+0x5c>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a1c      	ldr	r2, [pc, #112]	; (80030cc <HAL_TIM_Base_Start+0xb4>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d009      	beq.n	8003074 <HAL_TIM_Base_Start+0x5c>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a1a      	ldr	r2, [pc, #104]	; (80030d0 <HAL_TIM_Base_Start+0xb8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d004      	beq.n	8003074 <HAL_TIM_Base_Start+0x5c>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a19      	ldr	r2, [pc, #100]	; (80030d4 <HAL_TIM_Base_Start+0xbc>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d115      	bne.n	80030a0 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	4b17      	ldr	r3, [pc, #92]	; (80030d8 <HAL_TIM_Base_Start+0xc0>)
 800307c:	4013      	ands	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2b06      	cmp	r3, #6
 8003084:	d015      	beq.n	80030b2 <HAL_TIM_Base_Start+0x9a>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800308c:	d011      	beq.n	80030b2 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f042 0201 	orr.w	r2, r2, #1
 800309c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800309e:	e008      	b.n	80030b2 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0201 	orr.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	e000      	b.n	80030b4 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3714      	adds	r7, #20
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	40012c00 	.word	0x40012c00
 80030c8:	40000400 	.word	0x40000400
 80030cc:	40000800 	.word	0x40000800
 80030d0:	40013400 	.word	0x40013400
 80030d4:	40014000 	.word	0x40014000
 80030d8:	00010007 	.word	0x00010007

080030dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d122      	bne.n	8003138 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d11b      	bne.n	8003138 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f06f 0202 	mvn.w	r2, #2
 8003108:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	f003 0303 	and.w	r3, r3, #3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f9d8 	bl	80034d4 <HAL_TIM_IC_CaptureCallback>
 8003124:	e005      	b.n	8003132 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f9ca 	bl	80034c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f9db 	bl	80034e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	2b04      	cmp	r3, #4
 8003144:	d122      	bne.n	800318c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b04      	cmp	r3, #4
 8003152:	d11b      	bne.n	800318c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f06f 0204 	mvn.w	r2, #4
 800315c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2202      	movs	r2, #2
 8003162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f9ae 	bl	80034d4 <HAL_TIM_IC_CaptureCallback>
 8003178:	e005      	b.n	8003186 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f9a0 	bl	80034c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 f9b1 	bl	80034e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b08      	cmp	r3, #8
 8003198:	d122      	bne.n	80031e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f003 0308 	and.w	r3, r3, #8
 80031a4:	2b08      	cmp	r3, #8
 80031a6:	d11b      	bne.n	80031e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f06f 0208 	mvn.w	r2, #8
 80031b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2204      	movs	r2, #4
 80031b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f984 	bl	80034d4 <HAL_TIM_IC_CaptureCallback>
 80031cc:	e005      	b.n	80031da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f976 	bl	80034c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f987 	bl	80034e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f003 0310 	and.w	r3, r3, #16
 80031ea:	2b10      	cmp	r3, #16
 80031ec:	d122      	bne.n	8003234 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f003 0310 	and.w	r3, r3, #16
 80031f8:	2b10      	cmp	r3, #16
 80031fa:	d11b      	bne.n	8003234 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f06f 0210 	mvn.w	r2, #16
 8003204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2208      	movs	r2, #8
 800320a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f95a 	bl	80034d4 <HAL_TIM_IC_CaptureCallback>
 8003220:	e005      	b.n	800322e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f94c 	bl	80034c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f95d 	bl	80034e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b01      	cmp	r3, #1
 8003240:	d10e      	bne.n	8003260 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b01      	cmp	r3, #1
 800324e:	d107      	bne.n	8003260 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f06f 0201 	mvn.w	r2, #1
 8003258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f926 	bl	80034ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326a:	2b80      	cmp	r3, #128	; 0x80
 800326c:	d10e      	bne.n	800328c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003278:	2b80      	cmp	r3, #128	; 0x80
 800327a:	d107      	bne.n	800328c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 faf6 	bl	8003878 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800329a:	d10e      	bne.n	80032ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a6:	2b80      	cmp	r3, #128	; 0x80
 80032a8:	d107      	bne.n	80032ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80032b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 fae9 	bl	800388c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c4:	2b40      	cmp	r3, #64	; 0x40
 80032c6:	d10e      	bne.n	80032e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d2:	2b40      	cmp	r3, #64	; 0x40
 80032d4:	d107      	bne.n	80032e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f90b 	bl	80034fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	f003 0320 	and.w	r3, r3, #32
 80032f0:	2b20      	cmp	r3, #32
 80032f2:	d10e      	bne.n	8003312 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f003 0320 	and.w	r3, r3, #32
 80032fe:	2b20      	cmp	r3, #32
 8003300:	d107      	bne.n	8003312 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f06f 0220 	mvn.w	r2, #32
 800330a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 faa9 	bl	8003864 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b084      	sub	sp, #16
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
 8003322:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003324:	2300      	movs	r3, #0
 8003326:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_TIM_ConfigClockSource+0x1c>
 8003332:	2302      	movs	r3, #2
 8003334:	e0b6      	b.n	80034a4 <HAL_TIM_ConfigClockSource+0x18a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2202      	movs	r2, #2
 8003342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003354:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003358:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003360:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003372:	d03e      	beq.n	80033f2 <HAL_TIM_ConfigClockSource+0xd8>
 8003374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003378:	f200 8087 	bhi.w	800348a <HAL_TIM_ConfigClockSource+0x170>
 800337c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003380:	f000 8086 	beq.w	8003490 <HAL_TIM_ConfigClockSource+0x176>
 8003384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003388:	d87f      	bhi.n	800348a <HAL_TIM_ConfigClockSource+0x170>
 800338a:	2b70      	cmp	r3, #112	; 0x70
 800338c:	d01a      	beq.n	80033c4 <HAL_TIM_ConfigClockSource+0xaa>
 800338e:	2b70      	cmp	r3, #112	; 0x70
 8003390:	d87b      	bhi.n	800348a <HAL_TIM_ConfigClockSource+0x170>
 8003392:	2b60      	cmp	r3, #96	; 0x60
 8003394:	d050      	beq.n	8003438 <HAL_TIM_ConfigClockSource+0x11e>
 8003396:	2b60      	cmp	r3, #96	; 0x60
 8003398:	d877      	bhi.n	800348a <HAL_TIM_ConfigClockSource+0x170>
 800339a:	2b50      	cmp	r3, #80	; 0x50
 800339c:	d03c      	beq.n	8003418 <HAL_TIM_ConfigClockSource+0xfe>
 800339e:	2b50      	cmp	r3, #80	; 0x50
 80033a0:	d873      	bhi.n	800348a <HAL_TIM_ConfigClockSource+0x170>
 80033a2:	2b40      	cmp	r3, #64	; 0x40
 80033a4:	d058      	beq.n	8003458 <HAL_TIM_ConfigClockSource+0x13e>
 80033a6:	2b40      	cmp	r3, #64	; 0x40
 80033a8:	d86f      	bhi.n	800348a <HAL_TIM_ConfigClockSource+0x170>
 80033aa:	2b30      	cmp	r3, #48	; 0x30
 80033ac:	d064      	beq.n	8003478 <HAL_TIM_ConfigClockSource+0x15e>
 80033ae:	2b30      	cmp	r3, #48	; 0x30
 80033b0:	d86b      	bhi.n	800348a <HAL_TIM_ConfigClockSource+0x170>
 80033b2:	2b20      	cmp	r3, #32
 80033b4:	d060      	beq.n	8003478 <HAL_TIM_ConfigClockSource+0x15e>
 80033b6:	2b20      	cmp	r3, #32
 80033b8:	d867      	bhi.n	800348a <HAL_TIM_ConfigClockSource+0x170>
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d05c      	beq.n	8003478 <HAL_TIM_ConfigClockSource+0x15e>
 80033be:	2b10      	cmp	r3, #16
 80033c0:	d05a      	beq.n	8003478 <HAL_TIM_ConfigClockSource+0x15e>
 80033c2:	e062      	b.n	800348a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6818      	ldr	r0, [r3, #0]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	6899      	ldr	r1, [r3, #8]
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f000 f9a6 	bl	8003724 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033e6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	609a      	str	r2, [r3, #8]
      break;
 80033f0:	e04f      	b.n	8003492 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	6899      	ldr	r1, [r3, #8]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f000 f98f 	bl	8003724 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003414:	609a      	str	r2, [r3, #8]
      break;
 8003416:	e03c      	b.n	8003492 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6818      	ldr	r0, [r3, #0]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	6859      	ldr	r1, [r3, #4]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	461a      	mov	r2, r3
 8003426:	f000 f903 	bl	8003630 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2150      	movs	r1, #80	; 0x50
 8003430:	4618      	mov	r0, r3
 8003432:	f000 f95c 	bl	80036ee <TIM_ITRx_SetConfig>
      break;
 8003436:	e02c      	b.n	8003492 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6818      	ldr	r0, [r3, #0]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	6859      	ldr	r1, [r3, #4]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	461a      	mov	r2, r3
 8003446:	f000 f922 	bl	800368e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2160      	movs	r1, #96	; 0x60
 8003450:	4618      	mov	r0, r3
 8003452:	f000 f94c 	bl	80036ee <TIM_ITRx_SetConfig>
      break;
 8003456:	e01c      	b.n	8003492 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6818      	ldr	r0, [r3, #0]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	6859      	ldr	r1, [r3, #4]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	461a      	mov	r2, r3
 8003466:	f000 f8e3 	bl	8003630 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2140      	movs	r1, #64	; 0x40
 8003470:	4618      	mov	r0, r3
 8003472:	f000 f93c 	bl	80036ee <TIM_ITRx_SetConfig>
      break;
 8003476:	e00c      	b.n	8003492 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4619      	mov	r1, r3
 8003482:	4610      	mov	r0, r2
 8003484:	f000 f933 	bl	80036ee <TIM_ITRx_SetConfig>
      break;
 8003488:	e003      	b.n	8003492 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	73fb      	strb	r3, [r7, #15]
      break;
 800348e:	e000      	b.n	8003492 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003490:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a3c      	ldr	r2, [pc, #240]	; (8003614 <TIM_Base_SetConfig+0x104>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d00f      	beq.n	8003548 <TIM_Base_SetConfig+0x38>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352e:	d00b      	beq.n	8003548 <TIM_Base_SetConfig+0x38>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a39      	ldr	r2, [pc, #228]	; (8003618 <TIM_Base_SetConfig+0x108>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d007      	beq.n	8003548 <TIM_Base_SetConfig+0x38>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a38      	ldr	r2, [pc, #224]	; (800361c <TIM_Base_SetConfig+0x10c>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d003      	beq.n	8003548 <TIM_Base_SetConfig+0x38>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a37      	ldr	r2, [pc, #220]	; (8003620 <TIM_Base_SetConfig+0x110>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d108      	bne.n	800355a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800354e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	4313      	orrs	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a2d      	ldr	r2, [pc, #180]	; (8003614 <TIM_Base_SetConfig+0x104>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d01b      	beq.n	800359a <TIM_Base_SetConfig+0x8a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003568:	d017      	beq.n	800359a <TIM_Base_SetConfig+0x8a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a2a      	ldr	r2, [pc, #168]	; (8003618 <TIM_Base_SetConfig+0x108>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d013      	beq.n	800359a <TIM_Base_SetConfig+0x8a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a29      	ldr	r2, [pc, #164]	; (800361c <TIM_Base_SetConfig+0x10c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d00f      	beq.n	800359a <TIM_Base_SetConfig+0x8a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a28      	ldr	r2, [pc, #160]	; (8003620 <TIM_Base_SetConfig+0x110>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00b      	beq.n	800359a <TIM_Base_SetConfig+0x8a>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a27      	ldr	r2, [pc, #156]	; (8003624 <TIM_Base_SetConfig+0x114>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d007      	beq.n	800359a <TIM_Base_SetConfig+0x8a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a26      	ldr	r2, [pc, #152]	; (8003628 <TIM_Base_SetConfig+0x118>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d003      	beq.n	800359a <TIM_Base_SetConfig+0x8a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a25      	ldr	r2, [pc, #148]	; (800362c <TIM_Base_SetConfig+0x11c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d108      	bne.n	80035ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a10      	ldr	r2, [pc, #64]	; (8003614 <TIM_Base_SetConfig+0x104>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d00f      	beq.n	80035f8 <TIM_Base_SetConfig+0xe8>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a11      	ldr	r2, [pc, #68]	; (8003620 <TIM_Base_SetConfig+0x110>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d00b      	beq.n	80035f8 <TIM_Base_SetConfig+0xe8>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a10      	ldr	r2, [pc, #64]	; (8003624 <TIM_Base_SetConfig+0x114>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d007      	beq.n	80035f8 <TIM_Base_SetConfig+0xe8>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a0f      	ldr	r2, [pc, #60]	; (8003628 <TIM_Base_SetConfig+0x118>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d003      	beq.n	80035f8 <TIM_Base_SetConfig+0xe8>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a0e      	ldr	r2, [pc, #56]	; (800362c <TIM_Base_SetConfig+0x11c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d103      	bne.n	8003600 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	691a      	ldr	r2, [r3, #16]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	615a      	str	r2, [r3, #20]
}
 8003606:	bf00      	nop
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	40012c00 	.word	0x40012c00
 8003618:	40000400 	.word	0x40000400
 800361c:	40000800 	.word	0x40000800
 8003620:	40013400 	.word	0x40013400
 8003624:	40014000 	.word	0x40014000
 8003628:	40014400 	.word	0x40014400
 800362c:	40014800 	.word	0x40014800

08003630 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003630:	b480      	push	{r7}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	f023 0201 	bic.w	r2, r3, #1
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800365a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	4313      	orrs	r3, r2
 8003664:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f023 030a 	bic.w	r3, r3, #10
 800366c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	4313      	orrs	r3, r2
 8003674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	621a      	str	r2, [r3, #32]
}
 8003682:	bf00      	nop
 8003684:	371c      	adds	r7, #28
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800368e:	b480      	push	{r7}
 8003690:	b087      	sub	sp, #28
 8003692:	af00      	add	r7, sp, #0
 8003694:	60f8      	str	r0, [r7, #12]
 8003696:	60b9      	str	r1, [r7, #8]
 8003698:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	f023 0210 	bic.w	r2, r3, #16
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	031b      	lsls	r3, r3, #12
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	621a      	str	r2, [r3, #32]
}
 80036e2:	bf00      	nop
 80036e4:	371c      	adds	r7, #28
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b085      	sub	sp, #20
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
 80036f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003704:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4313      	orrs	r3, r2
 800370c:	f043 0307 	orr.w	r3, r3, #7
 8003710:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	609a      	str	r2, [r3, #8]
}
 8003718:	bf00      	nop
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003724:	b480      	push	{r7}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
 8003730:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800373e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	021a      	lsls	r2, r3, #8
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	431a      	orrs	r2, r3
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4313      	orrs	r3, r2
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	4313      	orrs	r3, r2
 8003750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	609a      	str	r2, [r3, #8]
}
 8003758:	bf00      	nop
 800375a:	371c      	adds	r7, #28
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003778:	2302      	movs	r3, #2
 800377a:	e063      	b.n	8003844 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2202      	movs	r2, #2
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a2b      	ldr	r2, [pc, #172]	; (8003850 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d004      	beq.n	80037b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a2a      	ldr	r2, [pc, #168]	; (8003854 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d108      	bne.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80037b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	4313      	orrs	r3, r2
 80037c0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a1b      	ldr	r2, [pc, #108]	; (8003850 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d018      	beq.n	8003818 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ee:	d013      	beq.n	8003818 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a18      	ldr	r2, [pc, #96]	; (8003858 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d00e      	beq.n	8003818 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a17      	ldr	r2, [pc, #92]	; (800385c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d009      	beq.n	8003818 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a12      	ldr	r2, [pc, #72]	; (8003854 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d004      	beq.n	8003818 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a13      	ldr	r2, [pc, #76]	; (8003860 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d10c      	bne.n	8003832 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800381e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	4313      	orrs	r3, r2
 8003828:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	40012c00 	.word	0x40012c00
 8003854:	40013400 	.word	0x40013400
 8003858:	40000400 	.word	0x40000400
 800385c:	40000800 	.word	0x40000800
 8003860:	40014000 	.word	0x40014000

08003864 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e040      	b.n	8003934 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d106      	bne.n	80038c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7fd fc62 	bl	800118c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2224      	movs	r2, #36	; 0x24
 80038cc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0201 	bic.w	r2, r2, #1
 80038dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f8c0 	bl	8003a64 <UART_SetConfig>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d101      	bne.n	80038ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e022      	b.n	8003934 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d002      	beq.n	80038fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fa88 	bl	8003e0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800390a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800391a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 0201 	orr.w	r2, r2, #1
 800392a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 fb0f 	bl	8003f50 <UART_CheckIdleState>
 8003932:	4603      	mov	r3, r0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b08a      	sub	sp, #40	; 0x28
 8003940:	af02      	add	r7, sp, #8
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	603b      	str	r3, [r7, #0]
 8003948:	4613      	mov	r3, r2
 800394a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003950:	2b20      	cmp	r3, #32
 8003952:	f040 8082 	bne.w	8003a5a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <HAL_UART_Transmit+0x26>
 800395c:	88fb      	ldrh	r3, [r7, #6]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e07a      	b.n	8003a5c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800396c:	2b01      	cmp	r3, #1
 800396e:	d101      	bne.n	8003974 <HAL_UART_Transmit+0x38>
 8003970:	2302      	movs	r3, #2
 8003972:	e073      	b.n	8003a5c <HAL_UART_Transmit+0x120>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2221      	movs	r2, #33	; 0x21
 8003988:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800398a:	f7fd fd43 	bl	8001414 <HAL_GetTick>
 800398e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	88fa      	ldrh	r2, [r7, #6]
 8003994:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	88fa      	ldrh	r2, [r7, #6]
 800399c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a8:	d108      	bne.n	80039bc <HAL_UART_Transmit+0x80>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d104      	bne.n	80039bc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80039b2:	2300      	movs	r3, #0
 80039b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	61bb      	str	r3, [r7, #24]
 80039ba:	e003      	b.n	80039c4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039c0:	2300      	movs	r3, #0
 80039c2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80039cc:	e02d      	b.n	8003a2a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2200      	movs	r2, #0
 80039d6:	2180      	movs	r1, #128	; 0x80
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 fb02 	bl	8003fe2 <UART_WaitOnFlagUntilTimeout>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e039      	b.n	8003a5c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10b      	bne.n	8003a06 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	881a      	ldrh	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039fa:	b292      	uxth	r2, r2
 80039fc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	3302      	adds	r3, #2
 8003a02:	61bb      	str	r3, [r7, #24]
 8003a04:	e008      	b.n	8003a18 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	781a      	ldrb	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	b292      	uxth	r2, r2
 8003a10:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	3301      	adds	r3, #1
 8003a16:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1cb      	bne.n	80039ce <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	2140      	movs	r1, #64	; 0x40
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f000 face 	bl	8003fe2 <UART_WaitOnFlagUntilTimeout>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e005      	b.n	8003a5c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2220      	movs	r2, #32
 8003a54:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003a56:	2300      	movs	r3, #0
 8003a58:	e000      	b.n	8003a5c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003a5a:	2302      	movs	r3, #2
  }
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3720      	adds	r7, #32
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b088      	sub	sp, #32
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003a92:	f023 030c 	bic.w	r3, r3, #12
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6812      	ldr	r2, [r2, #0]
 8003a9a:	6979      	ldr	r1, [r7, #20]
 8003a9c:	430b      	orrs	r3, r1
 8003a9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4aae      	ldr	r2, [pc, #696]	; (8003d98 <UART_SetConfig+0x334>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d120      	bne.n	8003b26 <UART_SetConfig+0xc2>
 8003ae4:	4bad      	ldr	r3, [pc, #692]	; (8003d9c <UART_SetConfig+0x338>)
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae8:	f003 0303 	and.w	r3, r3, #3
 8003aec:	2b03      	cmp	r3, #3
 8003aee:	d817      	bhi.n	8003b20 <UART_SetConfig+0xbc>
 8003af0:	a201      	add	r2, pc, #4	; (adr r2, 8003af8 <UART_SetConfig+0x94>)
 8003af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af6:	bf00      	nop
 8003af8:	08003b09 	.word	0x08003b09
 8003afc:	08003b15 	.word	0x08003b15
 8003b00:	08003b1b 	.word	0x08003b1b
 8003b04:	08003b0f 	.word	0x08003b0f
 8003b08:	2301      	movs	r3, #1
 8003b0a:	77fb      	strb	r3, [r7, #31]
 8003b0c:	e0b5      	b.n	8003c7a <UART_SetConfig+0x216>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	77fb      	strb	r3, [r7, #31]
 8003b12:	e0b2      	b.n	8003c7a <UART_SetConfig+0x216>
 8003b14:	2304      	movs	r3, #4
 8003b16:	77fb      	strb	r3, [r7, #31]
 8003b18:	e0af      	b.n	8003c7a <UART_SetConfig+0x216>
 8003b1a:	2308      	movs	r3, #8
 8003b1c:	77fb      	strb	r3, [r7, #31]
 8003b1e:	e0ac      	b.n	8003c7a <UART_SetConfig+0x216>
 8003b20:	2310      	movs	r3, #16
 8003b22:	77fb      	strb	r3, [r7, #31]
 8003b24:	e0a9      	b.n	8003c7a <UART_SetConfig+0x216>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a9d      	ldr	r2, [pc, #628]	; (8003da0 <UART_SetConfig+0x33c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d124      	bne.n	8003b7a <UART_SetConfig+0x116>
 8003b30:	4b9a      	ldr	r3, [pc, #616]	; (8003d9c <UART_SetConfig+0x338>)
 8003b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b3c:	d011      	beq.n	8003b62 <UART_SetConfig+0xfe>
 8003b3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b42:	d817      	bhi.n	8003b74 <UART_SetConfig+0x110>
 8003b44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b48:	d011      	beq.n	8003b6e <UART_SetConfig+0x10a>
 8003b4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b4e:	d811      	bhi.n	8003b74 <UART_SetConfig+0x110>
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <UART_SetConfig+0xf8>
 8003b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b58:	d006      	beq.n	8003b68 <UART_SetConfig+0x104>
 8003b5a:	e00b      	b.n	8003b74 <UART_SetConfig+0x110>
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	77fb      	strb	r3, [r7, #31]
 8003b60:	e08b      	b.n	8003c7a <UART_SetConfig+0x216>
 8003b62:	2302      	movs	r3, #2
 8003b64:	77fb      	strb	r3, [r7, #31]
 8003b66:	e088      	b.n	8003c7a <UART_SetConfig+0x216>
 8003b68:	2304      	movs	r3, #4
 8003b6a:	77fb      	strb	r3, [r7, #31]
 8003b6c:	e085      	b.n	8003c7a <UART_SetConfig+0x216>
 8003b6e:	2308      	movs	r3, #8
 8003b70:	77fb      	strb	r3, [r7, #31]
 8003b72:	e082      	b.n	8003c7a <UART_SetConfig+0x216>
 8003b74:	2310      	movs	r3, #16
 8003b76:	77fb      	strb	r3, [r7, #31]
 8003b78:	e07f      	b.n	8003c7a <UART_SetConfig+0x216>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a89      	ldr	r2, [pc, #548]	; (8003da4 <UART_SetConfig+0x340>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d124      	bne.n	8003bce <UART_SetConfig+0x16a>
 8003b84:	4b85      	ldr	r3, [pc, #532]	; (8003d9c <UART_SetConfig+0x338>)
 8003b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b88:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003b8c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b90:	d011      	beq.n	8003bb6 <UART_SetConfig+0x152>
 8003b92:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b96:	d817      	bhi.n	8003bc8 <UART_SetConfig+0x164>
 8003b98:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b9c:	d011      	beq.n	8003bc2 <UART_SetConfig+0x15e>
 8003b9e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ba2:	d811      	bhi.n	8003bc8 <UART_SetConfig+0x164>
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <UART_SetConfig+0x14c>
 8003ba8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003bac:	d006      	beq.n	8003bbc <UART_SetConfig+0x158>
 8003bae:	e00b      	b.n	8003bc8 <UART_SetConfig+0x164>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	77fb      	strb	r3, [r7, #31]
 8003bb4:	e061      	b.n	8003c7a <UART_SetConfig+0x216>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	77fb      	strb	r3, [r7, #31]
 8003bba:	e05e      	b.n	8003c7a <UART_SetConfig+0x216>
 8003bbc:	2304      	movs	r3, #4
 8003bbe:	77fb      	strb	r3, [r7, #31]
 8003bc0:	e05b      	b.n	8003c7a <UART_SetConfig+0x216>
 8003bc2:	2308      	movs	r3, #8
 8003bc4:	77fb      	strb	r3, [r7, #31]
 8003bc6:	e058      	b.n	8003c7a <UART_SetConfig+0x216>
 8003bc8:	2310      	movs	r3, #16
 8003bca:	77fb      	strb	r3, [r7, #31]
 8003bcc:	e055      	b.n	8003c7a <UART_SetConfig+0x216>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a75      	ldr	r2, [pc, #468]	; (8003da8 <UART_SetConfig+0x344>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d124      	bne.n	8003c22 <UART_SetConfig+0x1be>
 8003bd8:	4b70      	ldr	r3, [pc, #448]	; (8003d9c <UART_SetConfig+0x338>)
 8003bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bdc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003be0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003be4:	d011      	beq.n	8003c0a <UART_SetConfig+0x1a6>
 8003be6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003bea:	d817      	bhi.n	8003c1c <UART_SetConfig+0x1b8>
 8003bec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bf0:	d011      	beq.n	8003c16 <UART_SetConfig+0x1b2>
 8003bf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bf6:	d811      	bhi.n	8003c1c <UART_SetConfig+0x1b8>
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <UART_SetConfig+0x1a0>
 8003bfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c00:	d006      	beq.n	8003c10 <UART_SetConfig+0x1ac>
 8003c02:	e00b      	b.n	8003c1c <UART_SetConfig+0x1b8>
 8003c04:	2300      	movs	r3, #0
 8003c06:	77fb      	strb	r3, [r7, #31]
 8003c08:	e037      	b.n	8003c7a <UART_SetConfig+0x216>
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	77fb      	strb	r3, [r7, #31]
 8003c0e:	e034      	b.n	8003c7a <UART_SetConfig+0x216>
 8003c10:	2304      	movs	r3, #4
 8003c12:	77fb      	strb	r3, [r7, #31]
 8003c14:	e031      	b.n	8003c7a <UART_SetConfig+0x216>
 8003c16:	2308      	movs	r3, #8
 8003c18:	77fb      	strb	r3, [r7, #31]
 8003c1a:	e02e      	b.n	8003c7a <UART_SetConfig+0x216>
 8003c1c:	2310      	movs	r3, #16
 8003c1e:	77fb      	strb	r3, [r7, #31]
 8003c20:	e02b      	b.n	8003c7a <UART_SetConfig+0x216>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a61      	ldr	r2, [pc, #388]	; (8003dac <UART_SetConfig+0x348>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d124      	bne.n	8003c76 <UART_SetConfig+0x212>
 8003c2c:	4b5b      	ldr	r3, [pc, #364]	; (8003d9c <UART_SetConfig+0x338>)
 8003c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c30:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003c34:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c38:	d011      	beq.n	8003c5e <UART_SetConfig+0x1fa>
 8003c3a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c3e:	d817      	bhi.n	8003c70 <UART_SetConfig+0x20c>
 8003c40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c44:	d011      	beq.n	8003c6a <UART_SetConfig+0x206>
 8003c46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c4a:	d811      	bhi.n	8003c70 <UART_SetConfig+0x20c>
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <UART_SetConfig+0x1f4>
 8003c50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c54:	d006      	beq.n	8003c64 <UART_SetConfig+0x200>
 8003c56:	e00b      	b.n	8003c70 <UART_SetConfig+0x20c>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	77fb      	strb	r3, [r7, #31]
 8003c5c:	e00d      	b.n	8003c7a <UART_SetConfig+0x216>
 8003c5e:	2302      	movs	r3, #2
 8003c60:	77fb      	strb	r3, [r7, #31]
 8003c62:	e00a      	b.n	8003c7a <UART_SetConfig+0x216>
 8003c64:	2304      	movs	r3, #4
 8003c66:	77fb      	strb	r3, [r7, #31]
 8003c68:	e007      	b.n	8003c7a <UART_SetConfig+0x216>
 8003c6a:	2308      	movs	r3, #8
 8003c6c:	77fb      	strb	r3, [r7, #31]
 8003c6e:	e004      	b.n	8003c7a <UART_SetConfig+0x216>
 8003c70:	2310      	movs	r3, #16
 8003c72:	77fb      	strb	r3, [r7, #31]
 8003c74:	e001      	b.n	8003c7a <UART_SetConfig+0x216>
 8003c76:	2310      	movs	r3, #16
 8003c78:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c82:	d15c      	bne.n	8003d3e <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8003c84:	7ffb      	ldrb	r3, [r7, #31]
 8003c86:	2b08      	cmp	r3, #8
 8003c88:	d827      	bhi.n	8003cda <UART_SetConfig+0x276>
 8003c8a:	a201      	add	r2, pc, #4	; (adr r2, 8003c90 <UART_SetConfig+0x22c>)
 8003c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c90:	08003cb5 	.word	0x08003cb5
 8003c94:	08003cbd 	.word	0x08003cbd
 8003c98:	08003cc5 	.word	0x08003cc5
 8003c9c:	08003cdb 	.word	0x08003cdb
 8003ca0:	08003ccb 	.word	0x08003ccb
 8003ca4:	08003cdb 	.word	0x08003cdb
 8003ca8:	08003cdb 	.word	0x08003cdb
 8003cac:	08003cdb 	.word	0x08003cdb
 8003cb0:	08003cd3 	.word	0x08003cd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cb4:	f7fe ff64 	bl	8002b80 <HAL_RCC_GetPCLK1Freq>
 8003cb8:	61b8      	str	r0, [r7, #24]
        break;
 8003cba:	e013      	b.n	8003ce4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cbc:	f7fe ff82 	bl	8002bc4 <HAL_RCC_GetPCLK2Freq>
 8003cc0:	61b8      	str	r0, [r7, #24]
        break;
 8003cc2:	e00f      	b.n	8003ce4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cc4:	4b3a      	ldr	r3, [pc, #232]	; (8003db0 <UART_SetConfig+0x34c>)
 8003cc6:	61bb      	str	r3, [r7, #24]
        break;
 8003cc8:	e00c      	b.n	8003ce4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cca:	f7fe fee3 	bl	8002a94 <HAL_RCC_GetSysClockFreq>
 8003cce:	61b8      	str	r0, [r7, #24]
        break;
 8003cd0:	e008      	b.n	8003ce4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cd6:	61bb      	str	r3, [r7, #24]
        break;
 8003cd8:	e004      	b.n	8003ce4 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	77bb      	strb	r3, [r7, #30]
        break;
 8003ce2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 8085 	beq.w	8003df6 <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	005a      	lsls	r2, r3, #1
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	085b      	lsrs	r3, r3, #1
 8003cf6:	441a      	add	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	2b0f      	cmp	r3, #15
 8003d08:	d916      	bls.n	8003d38 <UART_SetConfig+0x2d4>
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d10:	d212      	bcs.n	8003d38 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	f023 030f 	bic.w	r3, r3, #15
 8003d1a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	085b      	lsrs	r3, r3, #1
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	89fb      	ldrh	r3, [r7, #14]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	89fa      	ldrh	r2, [r7, #14]
 8003d34:	60da      	str	r2, [r3, #12]
 8003d36:	e05e      	b.n	8003df6 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	77bb      	strb	r3, [r7, #30]
 8003d3c:	e05b      	b.n	8003df6 <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d3e:	7ffb      	ldrb	r3, [r7, #31]
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d837      	bhi.n	8003db4 <UART_SetConfig+0x350>
 8003d44:	a201      	add	r2, pc, #4	; (adr r2, 8003d4c <UART_SetConfig+0x2e8>)
 8003d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4a:	bf00      	nop
 8003d4c:	08003d71 	.word	0x08003d71
 8003d50:	08003d79 	.word	0x08003d79
 8003d54:	08003d81 	.word	0x08003d81
 8003d58:	08003db5 	.word	0x08003db5
 8003d5c:	08003d87 	.word	0x08003d87
 8003d60:	08003db5 	.word	0x08003db5
 8003d64:	08003db5 	.word	0x08003db5
 8003d68:	08003db5 	.word	0x08003db5
 8003d6c:	08003d8f 	.word	0x08003d8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d70:	f7fe ff06 	bl	8002b80 <HAL_RCC_GetPCLK1Freq>
 8003d74:	61b8      	str	r0, [r7, #24]
        break;
 8003d76:	e022      	b.n	8003dbe <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d78:	f7fe ff24 	bl	8002bc4 <HAL_RCC_GetPCLK2Freq>
 8003d7c:	61b8      	str	r0, [r7, #24]
        break;
 8003d7e:	e01e      	b.n	8003dbe <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d80:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <UART_SetConfig+0x34c>)
 8003d82:	61bb      	str	r3, [r7, #24]
        break;
 8003d84:	e01b      	b.n	8003dbe <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d86:	f7fe fe85 	bl	8002a94 <HAL_RCC_GetSysClockFreq>
 8003d8a:	61b8      	str	r0, [r7, #24]
        break;
 8003d8c:	e017      	b.n	8003dbe <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d92:	61bb      	str	r3, [r7, #24]
        break;
 8003d94:	e013      	b.n	8003dbe <UART_SetConfig+0x35a>
 8003d96:	bf00      	nop
 8003d98:	40013800 	.word	0x40013800
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	40004400 	.word	0x40004400
 8003da4:	40004800 	.word	0x40004800
 8003da8:	40004c00 	.word	0x40004c00
 8003dac:	40005000 	.word	0x40005000
 8003db0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003db4:	2300      	movs	r3, #0
 8003db6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	77bb      	strb	r3, [r7, #30]
        break;
 8003dbc:	bf00      	nop
    }

    if (pclk != 0U)
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d018      	beq.n	8003df6 <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	085a      	lsrs	r2, r3, #1
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	441a      	add	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	2b0f      	cmp	r3, #15
 8003dde:	d908      	bls.n	8003df2 <UART_SetConfig+0x38e>
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de6:	d204      	bcs.n	8003df2 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	60da      	str	r2, [r3, #12]
 8003df0:	e001      	b.n	8003df6 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003e02:	7fbb      	ldrb	r3, [r7, #30]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3720      	adds	r7, #32
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00a      	beq.n	8003e36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00a      	beq.n	8003e7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	f003 0308 	and.w	r3, r3, #8
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00a      	beq.n	8003e9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea0:	f003 0310 	and.w	r3, r3, #16
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00a      	beq.n	8003ebe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec2:	f003 0320 	and.w	r3, r3, #32
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00a      	beq.n	8003ee0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d01a      	beq.n	8003f22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f0a:	d10a      	bne.n	8003f22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00a      	beq.n	8003f44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	605a      	str	r2, [r3, #4]
  }
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af02      	add	r7, sp, #8
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f60:	f7fd fa58 	bl	8001414 <HAL_GetTick>
 8003f64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0308 	and.w	r3, r3, #8
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d10e      	bne.n	8003f92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f82d 	bl	8003fe2 <UART_WaitOnFlagUntilTimeout>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e023      	b.n	8003fda <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b04      	cmp	r3, #4
 8003f9e:	d10e      	bne.n	8003fbe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f817 	bl	8003fe2 <UART_WaitOnFlagUntilTimeout>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e00d      	b.n	8003fda <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b09c      	sub	sp, #112	; 0x70
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	60f8      	str	r0, [r7, #12]
 8003fea:	60b9      	str	r1, [r7, #8]
 8003fec:	603b      	str	r3, [r7, #0]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ff2:	e0a5      	b.n	8004140 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ff6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ffa:	f000 80a1 	beq.w	8004140 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ffe:	f7fd fa09 	bl	8001414 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800400a:	429a      	cmp	r2, r3
 800400c:	d302      	bcc.n	8004014 <UART_WaitOnFlagUntilTimeout+0x32>
 800400e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004010:	2b00      	cmp	r3, #0
 8004012:	d13e      	bne.n	8004092 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800401c:	e853 3f00 	ldrex	r3, [r3]
 8004020:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004024:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004028:	667b      	str	r3, [r7, #100]	; 0x64
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	461a      	mov	r2, r3
 8004030:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004032:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004034:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004036:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004038:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800403a:	e841 2300 	strex	r3, r2, [r1]
 800403e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1e6      	bne.n	8004014 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	3308      	adds	r3, #8
 800404c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004050:	e853 3f00 	ldrex	r3, [r3]
 8004054:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004058:	f023 0301 	bic.w	r3, r3, #1
 800405c:	663b      	str	r3, [r7, #96]	; 0x60
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	3308      	adds	r3, #8
 8004064:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004066:	64ba      	str	r2, [r7, #72]	; 0x48
 8004068:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800406c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800406e:	e841 2300 	strex	r3, r2, [r1]
 8004072:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1e5      	bne.n	8004046 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2220      	movs	r2, #32
 800407e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2220      	movs	r2, #32
 8004084:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e067      	b.n	8004162 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b00      	cmp	r3, #0
 800409e:	d04f      	beq.n	8004140 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040ae:	d147      	bne.n	8004140 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c2:	e853 3f00 	ldrex	r3, [r3]
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	461a      	mov	r2, r3
 80040d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d8:	637b      	str	r3, [r7, #52]	; 0x34
 80040da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040e0:	e841 2300 	strex	r3, r2, [r1]
 80040e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1e6      	bne.n	80040ba <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3308      	adds	r3, #8
 80040f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	e853 3f00 	ldrex	r3, [r3]
 80040fa:	613b      	str	r3, [r7, #16]
   return(result);
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	f023 0301 	bic.w	r3, r3, #1
 8004102:	66bb      	str	r3, [r7, #104]	; 0x68
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	3308      	adds	r3, #8
 800410a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800410c:	623a      	str	r2, [r7, #32]
 800410e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004110:	69f9      	ldr	r1, [r7, #28]
 8004112:	6a3a      	ldr	r2, [r7, #32]
 8004114:	e841 2300 	strex	r3, r2, [r1]
 8004118:	61bb      	str	r3, [r7, #24]
   return(result);
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1e5      	bne.n	80040ec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2220      	movs	r2, #32
 8004124:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2220      	movs	r2, #32
 800412a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2220      	movs	r2, #32
 8004130:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e010      	b.n	8004162 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	69da      	ldr	r2, [r3, #28]
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	4013      	ands	r3, r2
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	429a      	cmp	r2, r3
 800414e:	bf0c      	ite	eq
 8004150:	2301      	moveq	r3, #1
 8004152:	2300      	movne	r3, #0
 8004154:	b2db      	uxtb	r3, r3
 8004156:	461a      	mov	r2, r3
 8004158:	79fb      	ldrb	r3, [r7, #7]
 800415a:	429a      	cmp	r2, r3
 800415c:	f43f af4a 	beq.w	8003ff4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3770      	adds	r7, #112	; 0x70
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
	...

0800416c <__errno>:
 800416c:	4b01      	ldr	r3, [pc, #4]	; (8004174 <__errno+0x8>)
 800416e:	6818      	ldr	r0, [r3, #0]
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	20000200 	.word	0x20000200

08004178 <__libc_init_array>:
 8004178:	b570      	push	{r4, r5, r6, lr}
 800417a:	4d0d      	ldr	r5, [pc, #52]	; (80041b0 <__libc_init_array+0x38>)
 800417c:	4c0d      	ldr	r4, [pc, #52]	; (80041b4 <__libc_init_array+0x3c>)
 800417e:	1b64      	subs	r4, r4, r5
 8004180:	10a4      	asrs	r4, r4, #2
 8004182:	2600      	movs	r6, #0
 8004184:	42a6      	cmp	r6, r4
 8004186:	d109      	bne.n	800419c <__libc_init_array+0x24>
 8004188:	4d0b      	ldr	r5, [pc, #44]	; (80041b8 <__libc_init_array+0x40>)
 800418a:	4c0c      	ldr	r4, [pc, #48]	; (80041bc <__libc_init_array+0x44>)
 800418c:	f000 fc4e 	bl	8004a2c <_init>
 8004190:	1b64      	subs	r4, r4, r5
 8004192:	10a4      	asrs	r4, r4, #2
 8004194:	2600      	movs	r6, #0
 8004196:	42a6      	cmp	r6, r4
 8004198:	d105      	bne.n	80041a6 <__libc_init_array+0x2e>
 800419a:	bd70      	pop	{r4, r5, r6, pc}
 800419c:	f855 3b04 	ldr.w	r3, [r5], #4
 80041a0:	4798      	blx	r3
 80041a2:	3601      	adds	r6, #1
 80041a4:	e7ee      	b.n	8004184 <__libc_init_array+0xc>
 80041a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80041aa:	4798      	blx	r3
 80041ac:	3601      	adds	r6, #1
 80041ae:	e7f2      	b.n	8004196 <__libc_init_array+0x1e>
 80041b0:	08004b14 	.word	0x08004b14
 80041b4:	08004b14 	.word	0x08004b14
 80041b8:	08004b14 	.word	0x08004b14
 80041bc:	08004b18 	.word	0x08004b18

080041c0 <memset>:
 80041c0:	4402      	add	r2, r0
 80041c2:	4603      	mov	r3, r0
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d100      	bne.n	80041ca <memset+0xa>
 80041c8:	4770      	bx	lr
 80041ca:	f803 1b01 	strb.w	r1, [r3], #1
 80041ce:	e7f9      	b.n	80041c4 <memset+0x4>

080041d0 <siprintf>:
 80041d0:	b40e      	push	{r1, r2, r3}
 80041d2:	b500      	push	{lr}
 80041d4:	b09c      	sub	sp, #112	; 0x70
 80041d6:	ab1d      	add	r3, sp, #116	; 0x74
 80041d8:	9002      	str	r0, [sp, #8]
 80041da:	9006      	str	r0, [sp, #24]
 80041dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80041e0:	4809      	ldr	r0, [pc, #36]	; (8004208 <siprintf+0x38>)
 80041e2:	9107      	str	r1, [sp, #28]
 80041e4:	9104      	str	r1, [sp, #16]
 80041e6:	4909      	ldr	r1, [pc, #36]	; (800420c <siprintf+0x3c>)
 80041e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80041ec:	9105      	str	r1, [sp, #20]
 80041ee:	6800      	ldr	r0, [r0, #0]
 80041f0:	9301      	str	r3, [sp, #4]
 80041f2:	a902      	add	r1, sp, #8
 80041f4:	f000 f868 	bl	80042c8 <_svfiprintf_r>
 80041f8:	9b02      	ldr	r3, [sp, #8]
 80041fa:	2200      	movs	r2, #0
 80041fc:	701a      	strb	r2, [r3, #0]
 80041fe:	b01c      	add	sp, #112	; 0x70
 8004200:	f85d eb04 	ldr.w	lr, [sp], #4
 8004204:	b003      	add	sp, #12
 8004206:	4770      	bx	lr
 8004208:	20000200 	.word	0x20000200
 800420c:	ffff0208 	.word	0xffff0208

08004210 <__ssputs_r>:
 8004210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004214:	688e      	ldr	r6, [r1, #8]
 8004216:	429e      	cmp	r6, r3
 8004218:	4682      	mov	sl, r0
 800421a:	460c      	mov	r4, r1
 800421c:	4690      	mov	r8, r2
 800421e:	461f      	mov	r7, r3
 8004220:	d838      	bhi.n	8004294 <__ssputs_r+0x84>
 8004222:	898a      	ldrh	r2, [r1, #12]
 8004224:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004228:	d032      	beq.n	8004290 <__ssputs_r+0x80>
 800422a:	6825      	ldr	r5, [r4, #0]
 800422c:	6909      	ldr	r1, [r1, #16]
 800422e:	eba5 0901 	sub.w	r9, r5, r1
 8004232:	6965      	ldr	r5, [r4, #20]
 8004234:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004238:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800423c:	3301      	adds	r3, #1
 800423e:	444b      	add	r3, r9
 8004240:	106d      	asrs	r5, r5, #1
 8004242:	429d      	cmp	r5, r3
 8004244:	bf38      	it	cc
 8004246:	461d      	movcc	r5, r3
 8004248:	0553      	lsls	r3, r2, #21
 800424a:	d531      	bpl.n	80042b0 <__ssputs_r+0xa0>
 800424c:	4629      	mov	r1, r5
 800424e:	f000 fb47 	bl	80048e0 <_malloc_r>
 8004252:	4606      	mov	r6, r0
 8004254:	b950      	cbnz	r0, 800426c <__ssputs_r+0x5c>
 8004256:	230c      	movs	r3, #12
 8004258:	f8ca 3000 	str.w	r3, [sl]
 800425c:	89a3      	ldrh	r3, [r4, #12]
 800425e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004262:	81a3      	strh	r3, [r4, #12]
 8004264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800426c:	6921      	ldr	r1, [r4, #16]
 800426e:	464a      	mov	r2, r9
 8004270:	f000 fabe 	bl	80047f0 <memcpy>
 8004274:	89a3      	ldrh	r3, [r4, #12]
 8004276:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800427a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800427e:	81a3      	strh	r3, [r4, #12]
 8004280:	6126      	str	r6, [r4, #16]
 8004282:	6165      	str	r5, [r4, #20]
 8004284:	444e      	add	r6, r9
 8004286:	eba5 0509 	sub.w	r5, r5, r9
 800428a:	6026      	str	r6, [r4, #0]
 800428c:	60a5      	str	r5, [r4, #8]
 800428e:	463e      	mov	r6, r7
 8004290:	42be      	cmp	r6, r7
 8004292:	d900      	bls.n	8004296 <__ssputs_r+0x86>
 8004294:	463e      	mov	r6, r7
 8004296:	4632      	mov	r2, r6
 8004298:	6820      	ldr	r0, [r4, #0]
 800429a:	4641      	mov	r1, r8
 800429c:	f000 fab6 	bl	800480c <memmove>
 80042a0:	68a3      	ldr	r3, [r4, #8]
 80042a2:	6822      	ldr	r2, [r4, #0]
 80042a4:	1b9b      	subs	r3, r3, r6
 80042a6:	4432      	add	r2, r6
 80042a8:	60a3      	str	r3, [r4, #8]
 80042aa:	6022      	str	r2, [r4, #0]
 80042ac:	2000      	movs	r0, #0
 80042ae:	e7db      	b.n	8004268 <__ssputs_r+0x58>
 80042b0:	462a      	mov	r2, r5
 80042b2:	f000 fb6f 	bl	8004994 <_realloc_r>
 80042b6:	4606      	mov	r6, r0
 80042b8:	2800      	cmp	r0, #0
 80042ba:	d1e1      	bne.n	8004280 <__ssputs_r+0x70>
 80042bc:	6921      	ldr	r1, [r4, #16]
 80042be:	4650      	mov	r0, sl
 80042c0:	f000 fabe 	bl	8004840 <_free_r>
 80042c4:	e7c7      	b.n	8004256 <__ssputs_r+0x46>
	...

080042c8 <_svfiprintf_r>:
 80042c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042cc:	4698      	mov	r8, r3
 80042ce:	898b      	ldrh	r3, [r1, #12]
 80042d0:	061b      	lsls	r3, r3, #24
 80042d2:	b09d      	sub	sp, #116	; 0x74
 80042d4:	4607      	mov	r7, r0
 80042d6:	460d      	mov	r5, r1
 80042d8:	4614      	mov	r4, r2
 80042da:	d50e      	bpl.n	80042fa <_svfiprintf_r+0x32>
 80042dc:	690b      	ldr	r3, [r1, #16]
 80042de:	b963      	cbnz	r3, 80042fa <_svfiprintf_r+0x32>
 80042e0:	2140      	movs	r1, #64	; 0x40
 80042e2:	f000 fafd 	bl	80048e0 <_malloc_r>
 80042e6:	6028      	str	r0, [r5, #0]
 80042e8:	6128      	str	r0, [r5, #16]
 80042ea:	b920      	cbnz	r0, 80042f6 <_svfiprintf_r+0x2e>
 80042ec:	230c      	movs	r3, #12
 80042ee:	603b      	str	r3, [r7, #0]
 80042f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042f4:	e0d1      	b.n	800449a <_svfiprintf_r+0x1d2>
 80042f6:	2340      	movs	r3, #64	; 0x40
 80042f8:	616b      	str	r3, [r5, #20]
 80042fa:	2300      	movs	r3, #0
 80042fc:	9309      	str	r3, [sp, #36]	; 0x24
 80042fe:	2320      	movs	r3, #32
 8004300:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004304:	f8cd 800c 	str.w	r8, [sp, #12]
 8004308:	2330      	movs	r3, #48	; 0x30
 800430a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80044b4 <_svfiprintf_r+0x1ec>
 800430e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004312:	f04f 0901 	mov.w	r9, #1
 8004316:	4623      	mov	r3, r4
 8004318:	469a      	mov	sl, r3
 800431a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800431e:	b10a      	cbz	r2, 8004324 <_svfiprintf_r+0x5c>
 8004320:	2a25      	cmp	r2, #37	; 0x25
 8004322:	d1f9      	bne.n	8004318 <_svfiprintf_r+0x50>
 8004324:	ebba 0b04 	subs.w	fp, sl, r4
 8004328:	d00b      	beq.n	8004342 <_svfiprintf_r+0x7a>
 800432a:	465b      	mov	r3, fp
 800432c:	4622      	mov	r2, r4
 800432e:	4629      	mov	r1, r5
 8004330:	4638      	mov	r0, r7
 8004332:	f7ff ff6d 	bl	8004210 <__ssputs_r>
 8004336:	3001      	adds	r0, #1
 8004338:	f000 80aa 	beq.w	8004490 <_svfiprintf_r+0x1c8>
 800433c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800433e:	445a      	add	r2, fp
 8004340:	9209      	str	r2, [sp, #36]	; 0x24
 8004342:	f89a 3000 	ldrb.w	r3, [sl]
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 80a2 	beq.w	8004490 <_svfiprintf_r+0x1c8>
 800434c:	2300      	movs	r3, #0
 800434e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004352:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004356:	f10a 0a01 	add.w	sl, sl, #1
 800435a:	9304      	str	r3, [sp, #16]
 800435c:	9307      	str	r3, [sp, #28]
 800435e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004362:	931a      	str	r3, [sp, #104]	; 0x68
 8004364:	4654      	mov	r4, sl
 8004366:	2205      	movs	r2, #5
 8004368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800436c:	4851      	ldr	r0, [pc, #324]	; (80044b4 <_svfiprintf_r+0x1ec>)
 800436e:	f7fb ff2f 	bl	80001d0 <memchr>
 8004372:	9a04      	ldr	r2, [sp, #16]
 8004374:	b9d8      	cbnz	r0, 80043ae <_svfiprintf_r+0xe6>
 8004376:	06d0      	lsls	r0, r2, #27
 8004378:	bf44      	itt	mi
 800437a:	2320      	movmi	r3, #32
 800437c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004380:	0711      	lsls	r1, r2, #28
 8004382:	bf44      	itt	mi
 8004384:	232b      	movmi	r3, #43	; 0x2b
 8004386:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800438a:	f89a 3000 	ldrb.w	r3, [sl]
 800438e:	2b2a      	cmp	r3, #42	; 0x2a
 8004390:	d015      	beq.n	80043be <_svfiprintf_r+0xf6>
 8004392:	9a07      	ldr	r2, [sp, #28]
 8004394:	4654      	mov	r4, sl
 8004396:	2000      	movs	r0, #0
 8004398:	f04f 0c0a 	mov.w	ip, #10
 800439c:	4621      	mov	r1, r4
 800439e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043a2:	3b30      	subs	r3, #48	; 0x30
 80043a4:	2b09      	cmp	r3, #9
 80043a6:	d94e      	bls.n	8004446 <_svfiprintf_r+0x17e>
 80043a8:	b1b0      	cbz	r0, 80043d8 <_svfiprintf_r+0x110>
 80043aa:	9207      	str	r2, [sp, #28]
 80043ac:	e014      	b.n	80043d8 <_svfiprintf_r+0x110>
 80043ae:	eba0 0308 	sub.w	r3, r0, r8
 80043b2:	fa09 f303 	lsl.w	r3, r9, r3
 80043b6:	4313      	orrs	r3, r2
 80043b8:	9304      	str	r3, [sp, #16]
 80043ba:	46a2      	mov	sl, r4
 80043bc:	e7d2      	b.n	8004364 <_svfiprintf_r+0x9c>
 80043be:	9b03      	ldr	r3, [sp, #12]
 80043c0:	1d19      	adds	r1, r3, #4
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	9103      	str	r1, [sp, #12]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	bfbb      	ittet	lt
 80043ca:	425b      	neglt	r3, r3
 80043cc:	f042 0202 	orrlt.w	r2, r2, #2
 80043d0:	9307      	strge	r3, [sp, #28]
 80043d2:	9307      	strlt	r3, [sp, #28]
 80043d4:	bfb8      	it	lt
 80043d6:	9204      	strlt	r2, [sp, #16]
 80043d8:	7823      	ldrb	r3, [r4, #0]
 80043da:	2b2e      	cmp	r3, #46	; 0x2e
 80043dc:	d10c      	bne.n	80043f8 <_svfiprintf_r+0x130>
 80043de:	7863      	ldrb	r3, [r4, #1]
 80043e0:	2b2a      	cmp	r3, #42	; 0x2a
 80043e2:	d135      	bne.n	8004450 <_svfiprintf_r+0x188>
 80043e4:	9b03      	ldr	r3, [sp, #12]
 80043e6:	1d1a      	adds	r2, r3, #4
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	9203      	str	r2, [sp, #12]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	bfb8      	it	lt
 80043f0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80043f4:	3402      	adds	r4, #2
 80043f6:	9305      	str	r3, [sp, #20]
 80043f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80044c4 <_svfiprintf_r+0x1fc>
 80043fc:	7821      	ldrb	r1, [r4, #0]
 80043fe:	2203      	movs	r2, #3
 8004400:	4650      	mov	r0, sl
 8004402:	f7fb fee5 	bl	80001d0 <memchr>
 8004406:	b140      	cbz	r0, 800441a <_svfiprintf_r+0x152>
 8004408:	2340      	movs	r3, #64	; 0x40
 800440a:	eba0 000a 	sub.w	r0, r0, sl
 800440e:	fa03 f000 	lsl.w	r0, r3, r0
 8004412:	9b04      	ldr	r3, [sp, #16]
 8004414:	4303      	orrs	r3, r0
 8004416:	3401      	adds	r4, #1
 8004418:	9304      	str	r3, [sp, #16]
 800441a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800441e:	4826      	ldr	r0, [pc, #152]	; (80044b8 <_svfiprintf_r+0x1f0>)
 8004420:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004424:	2206      	movs	r2, #6
 8004426:	f7fb fed3 	bl	80001d0 <memchr>
 800442a:	2800      	cmp	r0, #0
 800442c:	d038      	beq.n	80044a0 <_svfiprintf_r+0x1d8>
 800442e:	4b23      	ldr	r3, [pc, #140]	; (80044bc <_svfiprintf_r+0x1f4>)
 8004430:	bb1b      	cbnz	r3, 800447a <_svfiprintf_r+0x1b2>
 8004432:	9b03      	ldr	r3, [sp, #12]
 8004434:	3307      	adds	r3, #7
 8004436:	f023 0307 	bic.w	r3, r3, #7
 800443a:	3308      	adds	r3, #8
 800443c:	9303      	str	r3, [sp, #12]
 800443e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004440:	4433      	add	r3, r6
 8004442:	9309      	str	r3, [sp, #36]	; 0x24
 8004444:	e767      	b.n	8004316 <_svfiprintf_r+0x4e>
 8004446:	fb0c 3202 	mla	r2, ip, r2, r3
 800444a:	460c      	mov	r4, r1
 800444c:	2001      	movs	r0, #1
 800444e:	e7a5      	b.n	800439c <_svfiprintf_r+0xd4>
 8004450:	2300      	movs	r3, #0
 8004452:	3401      	adds	r4, #1
 8004454:	9305      	str	r3, [sp, #20]
 8004456:	4619      	mov	r1, r3
 8004458:	f04f 0c0a 	mov.w	ip, #10
 800445c:	4620      	mov	r0, r4
 800445e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004462:	3a30      	subs	r2, #48	; 0x30
 8004464:	2a09      	cmp	r2, #9
 8004466:	d903      	bls.n	8004470 <_svfiprintf_r+0x1a8>
 8004468:	2b00      	cmp	r3, #0
 800446a:	d0c5      	beq.n	80043f8 <_svfiprintf_r+0x130>
 800446c:	9105      	str	r1, [sp, #20]
 800446e:	e7c3      	b.n	80043f8 <_svfiprintf_r+0x130>
 8004470:	fb0c 2101 	mla	r1, ip, r1, r2
 8004474:	4604      	mov	r4, r0
 8004476:	2301      	movs	r3, #1
 8004478:	e7f0      	b.n	800445c <_svfiprintf_r+0x194>
 800447a:	ab03      	add	r3, sp, #12
 800447c:	9300      	str	r3, [sp, #0]
 800447e:	462a      	mov	r2, r5
 8004480:	4b0f      	ldr	r3, [pc, #60]	; (80044c0 <_svfiprintf_r+0x1f8>)
 8004482:	a904      	add	r1, sp, #16
 8004484:	4638      	mov	r0, r7
 8004486:	f3af 8000 	nop.w
 800448a:	1c42      	adds	r2, r0, #1
 800448c:	4606      	mov	r6, r0
 800448e:	d1d6      	bne.n	800443e <_svfiprintf_r+0x176>
 8004490:	89ab      	ldrh	r3, [r5, #12]
 8004492:	065b      	lsls	r3, r3, #25
 8004494:	f53f af2c 	bmi.w	80042f0 <_svfiprintf_r+0x28>
 8004498:	9809      	ldr	r0, [sp, #36]	; 0x24
 800449a:	b01d      	add	sp, #116	; 0x74
 800449c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044a0:	ab03      	add	r3, sp, #12
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	462a      	mov	r2, r5
 80044a6:	4b06      	ldr	r3, [pc, #24]	; (80044c0 <_svfiprintf_r+0x1f8>)
 80044a8:	a904      	add	r1, sp, #16
 80044aa:	4638      	mov	r0, r7
 80044ac:	f000 f87a 	bl	80045a4 <_printf_i>
 80044b0:	e7eb      	b.n	800448a <_svfiprintf_r+0x1c2>
 80044b2:	bf00      	nop
 80044b4:	08004ad8 	.word	0x08004ad8
 80044b8:	08004ae2 	.word	0x08004ae2
 80044bc:	00000000 	.word	0x00000000
 80044c0:	08004211 	.word	0x08004211
 80044c4:	08004ade 	.word	0x08004ade

080044c8 <_printf_common>:
 80044c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044cc:	4616      	mov	r6, r2
 80044ce:	4699      	mov	r9, r3
 80044d0:	688a      	ldr	r2, [r1, #8]
 80044d2:	690b      	ldr	r3, [r1, #16]
 80044d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044d8:	4293      	cmp	r3, r2
 80044da:	bfb8      	it	lt
 80044dc:	4613      	movlt	r3, r2
 80044de:	6033      	str	r3, [r6, #0]
 80044e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044e4:	4607      	mov	r7, r0
 80044e6:	460c      	mov	r4, r1
 80044e8:	b10a      	cbz	r2, 80044ee <_printf_common+0x26>
 80044ea:	3301      	adds	r3, #1
 80044ec:	6033      	str	r3, [r6, #0]
 80044ee:	6823      	ldr	r3, [r4, #0]
 80044f0:	0699      	lsls	r1, r3, #26
 80044f2:	bf42      	ittt	mi
 80044f4:	6833      	ldrmi	r3, [r6, #0]
 80044f6:	3302      	addmi	r3, #2
 80044f8:	6033      	strmi	r3, [r6, #0]
 80044fa:	6825      	ldr	r5, [r4, #0]
 80044fc:	f015 0506 	ands.w	r5, r5, #6
 8004500:	d106      	bne.n	8004510 <_printf_common+0x48>
 8004502:	f104 0a19 	add.w	sl, r4, #25
 8004506:	68e3      	ldr	r3, [r4, #12]
 8004508:	6832      	ldr	r2, [r6, #0]
 800450a:	1a9b      	subs	r3, r3, r2
 800450c:	42ab      	cmp	r3, r5
 800450e:	dc26      	bgt.n	800455e <_printf_common+0x96>
 8004510:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004514:	1e13      	subs	r3, r2, #0
 8004516:	6822      	ldr	r2, [r4, #0]
 8004518:	bf18      	it	ne
 800451a:	2301      	movne	r3, #1
 800451c:	0692      	lsls	r2, r2, #26
 800451e:	d42b      	bmi.n	8004578 <_printf_common+0xb0>
 8004520:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004524:	4649      	mov	r1, r9
 8004526:	4638      	mov	r0, r7
 8004528:	47c0      	blx	r8
 800452a:	3001      	adds	r0, #1
 800452c:	d01e      	beq.n	800456c <_printf_common+0xa4>
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	68e5      	ldr	r5, [r4, #12]
 8004532:	6832      	ldr	r2, [r6, #0]
 8004534:	f003 0306 	and.w	r3, r3, #6
 8004538:	2b04      	cmp	r3, #4
 800453a:	bf08      	it	eq
 800453c:	1aad      	subeq	r5, r5, r2
 800453e:	68a3      	ldr	r3, [r4, #8]
 8004540:	6922      	ldr	r2, [r4, #16]
 8004542:	bf0c      	ite	eq
 8004544:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004548:	2500      	movne	r5, #0
 800454a:	4293      	cmp	r3, r2
 800454c:	bfc4      	itt	gt
 800454e:	1a9b      	subgt	r3, r3, r2
 8004550:	18ed      	addgt	r5, r5, r3
 8004552:	2600      	movs	r6, #0
 8004554:	341a      	adds	r4, #26
 8004556:	42b5      	cmp	r5, r6
 8004558:	d11a      	bne.n	8004590 <_printf_common+0xc8>
 800455a:	2000      	movs	r0, #0
 800455c:	e008      	b.n	8004570 <_printf_common+0xa8>
 800455e:	2301      	movs	r3, #1
 8004560:	4652      	mov	r2, sl
 8004562:	4649      	mov	r1, r9
 8004564:	4638      	mov	r0, r7
 8004566:	47c0      	blx	r8
 8004568:	3001      	adds	r0, #1
 800456a:	d103      	bne.n	8004574 <_printf_common+0xac>
 800456c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004574:	3501      	adds	r5, #1
 8004576:	e7c6      	b.n	8004506 <_printf_common+0x3e>
 8004578:	18e1      	adds	r1, r4, r3
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	2030      	movs	r0, #48	; 0x30
 800457e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004582:	4422      	add	r2, r4
 8004584:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004588:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800458c:	3302      	adds	r3, #2
 800458e:	e7c7      	b.n	8004520 <_printf_common+0x58>
 8004590:	2301      	movs	r3, #1
 8004592:	4622      	mov	r2, r4
 8004594:	4649      	mov	r1, r9
 8004596:	4638      	mov	r0, r7
 8004598:	47c0      	blx	r8
 800459a:	3001      	adds	r0, #1
 800459c:	d0e6      	beq.n	800456c <_printf_common+0xa4>
 800459e:	3601      	adds	r6, #1
 80045a0:	e7d9      	b.n	8004556 <_printf_common+0x8e>
	...

080045a4 <_printf_i>:
 80045a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045a8:	460c      	mov	r4, r1
 80045aa:	4691      	mov	r9, r2
 80045ac:	7e27      	ldrb	r7, [r4, #24]
 80045ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80045b0:	2f78      	cmp	r7, #120	; 0x78
 80045b2:	4680      	mov	r8, r0
 80045b4:	469a      	mov	sl, r3
 80045b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045ba:	d807      	bhi.n	80045cc <_printf_i+0x28>
 80045bc:	2f62      	cmp	r7, #98	; 0x62
 80045be:	d80a      	bhi.n	80045d6 <_printf_i+0x32>
 80045c0:	2f00      	cmp	r7, #0
 80045c2:	f000 80d8 	beq.w	8004776 <_printf_i+0x1d2>
 80045c6:	2f58      	cmp	r7, #88	; 0x58
 80045c8:	f000 80a3 	beq.w	8004712 <_printf_i+0x16e>
 80045cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80045d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045d4:	e03a      	b.n	800464c <_printf_i+0xa8>
 80045d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045da:	2b15      	cmp	r3, #21
 80045dc:	d8f6      	bhi.n	80045cc <_printf_i+0x28>
 80045de:	a001      	add	r0, pc, #4	; (adr r0, 80045e4 <_printf_i+0x40>)
 80045e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80045e4:	0800463d 	.word	0x0800463d
 80045e8:	08004651 	.word	0x08004651
 80045ec:	080045cd 	.word	0x080045cd
 80045f0:	080045cd 	.word	0x080045cd
 80045f4:	080045cd 	.word	0x080045cd
 80045f8:	080045cd 	.word	0x080045cd
 80045fc:	08004651 	.word	0x08004651
 8004600:	080045cd 	.word	0x080045cd
 8004604:	080045cd 	.word	0x080045cd
 8004608:	080045cd 	.word	0x080045cd
 800460c:	080045cd 	.word	0x080045cd
 8004610:	0800475d 	.word	0x0800475d
 8004614:	08004681 	.word	0x08004681
 8004618:	0800473f 	.word	0x0800473f
 800461c:	080045cd 	.word	0x080045cd
 8004620:	080045cd 	.word	0x080045cd
 8004624:	0800477f 	.word	0x0800477f
 8004628:	080045cd 	.word	0x080045cd
 800462c:	08004681 	.word	0x08004681
 8004630:	080045cd 	.word	0x080045cd
 8004634:	080045cd 	.word	0x080045cd
 8004638:	08004747 	.word	0x08004747
 800463c:	680b      	ldr	r3, [r1, #0]
 800463e:	1d1a      	adds	r2, r3, #4
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	600a      	str	r2, [r1, #0]
 8004644:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004648:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800464c:	2301      	movs	r3, #1
 800464e:	e0a3      	b.n	8004798 <_printf_i+0x1f4>
 8004650:	6825      	ldr	r5, [r4, #0]
 8004652:	6808      	ldr	r0, [r1, #0]
 8004654:	062e      	lsls	r6, r5, #24
 8004656:	f100 0304 	add.w	r3, r0, #4
 800465a:	d50a      	bpl.n	8004672 <_printf_i+0xce>
 800465c:	6805      	ldr	r5, [r0, #0]
 800465e:	600b      	str	r3, [r1, #0]
 8004660:	2d00      	cmp	r5, #0
 8004662:	da03      	bge.n	800466c <_printf_i+0xc8>
 8004664:	232d      	movs	r3, #45	; 0x2d
 8004666:	426d      	negs	r5, r5
 8004668:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800466c:	485e      	ldr	r0, [pc, #376]	; (80047e8 <_printf_i+0x244>)
 800466e:	230a      	movs	r3, #10
 8004670:	e019      	b.n	80046a6 <_printf_i+0x102>
 8004672:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004676:	6805      	ldr	r5, [r0, #0]
 8004678:	600b      	str	r3, [r1, #0]
 800467a:	bf18      	it	ne
 800467c:	b22d      	sxthne	r5, r5
 800467e:	e7ef      	b.n	8004660 <_printf_i+0xbc>
 8004680:	680b      	ldr	r3, [r1, #0]
 8004682:	6825      	ldr	r5, [r4, #0]
 8004684:	1d18      	adds	r0, r3, #4
 8004686:	6008      	str	r0, [r1, #0]
 8004688:	0628      	lsls	r0, r5, #24
 800468a:	d501      	bpl.n	8004690 <_printf_i+0xec>
 800468c:	681d      	ldr	r5, [r3, #0]
 800468e:	e002      	b.n	8004696 <_printf_i+0xf2>
 8004690:	0669      	lsls	r1, r5, #25
 8004692:	d5fb      	bpl.n	800468c <_printf_i+0xe8>
 8004694:	881d      	ldrh	r5, [r3, #0]
 8004696:	4854      	ldr	r0, [pc, #336]	; (80047e8 <_printf_i+0x244>)
 8004698:	2f6f      	cmp	r7, #111	; 0x6f
 800469a:	bf0c      	ite	eq
 800469c:	2308      	moveq	r3, #8
 800469e:	230a      	movne	r3, #10
 80046a0:	2100      	movs	r1, #0
 80046a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046a6:	6866      	ldr	r6, [r4, #4]
 80046a8:	60a6      	str	r6, [r4, #8]
 80046aa:	2e00      	cmp	r6, #0
 80046ac:	bfa2      	ittt	ge
 80046ae:	6821      	ldrge	r1, [r4, #0]
 80046b0:	f021 0104 	bicge.w	r1, r1, #4
 80046b4:	6021      	strge	r1, [r4, #0]
 80046b6:	b90d      	cbnz	r5, 80046bc <_printf_i+0x118>
 80046b8:	2e00      	cmp	r6, #0
 80046ba:	d04d      	beq.n	8004758 <_printf_i+0x1b4>
 80046bc:	4616      	mov	r6, r2
 80046be:	fbb5 f1f3 	udiv	r1, r5, r3
 80046c2:	fb03 5711 	mls	r7, r3, r1, r5
 80046c6:	5dc7      	ldrb	r7, [r0, r7]
 80046c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80046cc:	462f      	mov	r7, r5
 80046ce:	42bb      	cmp	r3, r7
 80046d0:	460d      	mov	r5, r1
 80046d2:	d9f4      	bls.n	80046be <_printf_i+0x11a>
 80046d4:	2b08      	cmp	r3, #8
 80046d6:	d10b      	bne.n	80046f0 <_printf_i+0x14c>
 80046d8:	6823      	ldr	r3, [r4, #0]
 80046da:	07df      	lsls	r7, r3, #31
 80046dc:	d508      	bpl.n	80046f0 <_printf_i+0x14c>
 80046de:	6923      	ldr	r3, [r4, #16]
 80046e0:	6861      	ldr	r1, [r4, #4]
 80046e2:	4299      	cmp	r1, r3
 80046e4:	bfde      	ittt	le
 80046e6:	2330      	movle	r3, #48	; 0x30
 80046e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046ec:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80046f0:	1b92      	subs	r2, r2, r6
 80046f2:	6122      	str	r2, [r4, #16]
 80046f4:	f8cd a000 	str.w	sl, [sp]
 80046f8:	464b      	mov	r3, r9
 80046fa:	aa03      	add	r2, sp, #12
 80046fc:	4621      	mov	r1, r4
 80046fe:	4640      	mov	r0, r8
 8004700:	f7ff fee2 	bl	80044c8 <_printf_common>
 8004704:	3001      	adds	r0, #1
 8004706:	d14c      	bne.n	80047a2 <_printf_i+0x1fe>
 8004708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800470c:	b004      	add	sp, #16
 800470e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004712:	4835      	ldr	r0, [pc, #212]	; (80047e8 <_printf_i+0x244>)
 8004714:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004718:	6823      	ldr	r3, [r4, #0]
 800471a:	680e      	ldr	r6, [r1, #0]
 800471c:	061f      	lsls	r7, r3, #24
 800471e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004722:	600e      	str	r6, [r1, #0]
 8004724:	d514      	bpl.n	8004750 <_printf_i+0x1ac>
 8004726:	07d9      	lsls	r1, r3, #31
 8004728:	bf44      	itt	mi
 800472a:	f043 0320 	orrmi.w	r3, r3, #32
 800472e:	6023      	strmi	r3, [r4, #0]
 8004730:	b91d      	cbnz	r5, 800473a <_printf_i+0x196>
 8004732:	6823      	ldr	r3, [r4, #0]
 8004734:	f023 0320 	bic.w	r3, r3, #32
 8004738:	6023      	str	r3, [r4, #0]
 800473a:	2310      	movs	r3, #16
 800473c:	e7b0      	b.n	80046a0 <_printf_i+0xfc>
 800473e:	6823      	ldr	r3, [r4, #0]
 8004740:	f043 0320 	orr.w	r3, r3, #32
 8004744:	6023      	str	r3, [r4, #0]
 8004746:	2378      	movs	r3, #120	; 0x78
 8004748:	4828      	ldr	r0, [pc, #160]	; (80047ec <_printf_i+0x248>)
 800474a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800474e:	e7e3      	b.n	8004718 <_printf_i+0x174>
 8004750:	065e      	lsls	r6, r3, #25
 8004752:	bf48      	it	mi
 8004754:	b2ad      	uxthmi	r5, r5
 8004756:	e7e6      	b.n	8004726 <_printf_i+0x182>
 8004758:	4616      	mov	r6, r2
 800475a:	e7bb      	b.n	80046d4 <_printf_i+0x130>
 800475c:	680b      	ldr	r3, [r1, #0]
 800475e:	6826      	ldr	r6, [r4, #0]
 8004760:	6960      	ldr	r0, [r4, #20]
 8004762:	1d1d      	adds	r5, r3, #4
 8004764:	600d      	str	r5, [r1, #0]
 8004766:	0635      	lsls	r5, r6, #24
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	d501      	bpl.n	8004770 <_printf_i+0x1cc>
 800476c:	6018      	str	r0, [r3, #0]
 800476e:	e002      	b.n	8004776 <_printf_i+0x1d2>
 8004770:	0671      	lsls	r1, r6, #25
 8004772:	d5fb      	bpl.n	800476c <_printf_i+0x1c8>
 8004774:	8018      	strh	r0, [r3, #0]
 8004776:	2300      	movs	r3, #0
 8004778:	6123      	str	r3, [r4, #16]
 800477a:	4616      	mov	r6, r2
 800477c:	e7ba      	b.n	80046f4 <_printf_i+0x150>
 800477e:	680b      	ldr	r3, [r1, #0]
 8004780:	1d1a      	adds	r2, r3, #4
 8004782:	600a      	str	r2, [r1, #0]
 8004784:	681e      	ldr	r6, [r3, #0]
 8004786:	6862      	ldr	r2, [r4, #4]
 8004788:	2100      	movs	r1, #0
 800478a:	4630      	mov	r0, r6
 800478c:	f7fb fd20 	bl	80001d0 <memchr>
 8004790:	b108      	cbz	r0, 8004796 <_printf_i+0x1f2>
 8004792:	1b80      	subs	r0, r0, r6
 8004794:	6060      	str	r0, [r4, #4]
 8004796:	6863      	ldr	r3, [r4, #4]
 8004798:	6123      	str	r3, [r4, #16]
 800479a:	2300      	movs	r3, #0
 800479c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047a0:	e7a8      	b.n	80046f4 <_printf_i+0x150>
 80047a2:	6923      	ldr	r3, [r4, #16]
 80047a4:	4632      	mov	r2, r6
 80047a6:	4649      	mov	r1, r9
 80047a8:	4640      	mov	r0, r8
 80047aa:	47d0      	blx	sl
 80047ac:	3001      	adds	r0, #1
 80047ae:	d0ab      	beq.n	8004708 <_printf_i+0x164>
 80047b0:	6823      	ldr	r3, [r4, #0]
 80047b2:	079b      	lsls	r3, r3, #30
 80047b4:	d413      	bmi.n	80047de <_printf_i+0x23a>
 80047b6:	68e0      	ldr	r0, [r4, #12]
 80047b8:	9b03      	ldr	r3, [sp, #12]
 80047ba:	4298      	cmp	r0, r3
 80047bc:	bfb8      	it	lt
 80047be:	4618      	movlt	r0, r3
 80047c0:	e7a4      	b.n	800470c <_printf_i+0x168>
 80047c2:	2301      	movs	r3, #1
 80047c4:	4632      	mov	r2, r6
 80047c6:	4649      	mov	r1, r9
 80047c8:	4640      	mov	r0, r8
 80047ca:	47d0      	blx	sl
 80047cc:	3001      	adds	r0, #1
 80047ce:	d09b      	beq.n	8004708 <_printf_i+0x164>
 80047d0:	3501      	adds	r5, #1
 80047d2:	68e3      	ldr	r3, [r4, #12]
 80047d4:	9903      	ldr	r1, [sp, #12]
 80047d6:	1a5b      	subs	r3, r3, r1
 80047d8:	42ab      	cmp	r3, r5
 80047da:	dcf2      	bgt.n	80047c2 <_printf_i+0x21e>
 80047dc:	e7eb      	b.n	80047b6 <_printf_i+0x212>
 80047de:	2500      	movs	r5, #0
 80047e0:	f104 0619 	add.w	r6, r4, #25
 80047e4:	e7f5      	b.n	80047d2 <_printf_i+0x22e>
 80047e6:	bf00      	nop
 80047e8:	08004ae9 	.word	0x08004ae9
 80047ec:	08004afa 	.word	0x08004afa

080047f0 <memcpy>:
 80047f0:	440a      	add	r2, r1
 80047f2:	4291      	cmp	r1, r2
 80047f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80047f8:	d100      	bne.n	80047fc <memcpy+0xc>
 80047fa:	4770      	bx	lr
 80047fc:	b510      	push	{r4, lr}
 80047fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004802:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004806:	4291      	cmp	r1, r2
 8004808:	d1f9      	bne.n	80047fe <memcpy+0xe>
 800480a:	bd10      	pop	{r4, pc}

0800480c <memmove>:
 800480c:	4288      	cmp	r0, r1
 800480e:	b510      	push	{r4, lr}
 8004810:	eb01 0402 	add.w	r4, r1, r2
 8004814:	d902      	bls.n	800481c <memmove+0x10>
 8004816:	4284      	cmp	r4, r0
 8004818:	4623      	mov	r3, r4
 800481a:	d807      	bhi.n	800482c <memmove+0x20>
 800481c:	1e43      	subs	r3, r0, #1
 800481e:	42a1      	cmp	r1, r4
 8004820:	d008      	beq.n	8004834 <memmove+0x28>
 8004822:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004826:	f803 2f01 	strb.w	r2, [r3, #1]!
 800482a:	e7f8      	b.n	800481e <memmove+0x12>
 800482c:	4402      	add	r2, r0
 800482e:	4601      	mov	r1, r0
 8004830:	428a      	cmp	r2, r1
 8004832:	d100      	bne.n	8004836 <memmove+0x2a>
 8004834:	bd10      	pop	{r4, pc}
 8004836:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800483a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800483e:	e7f7      	b.n	8004830 <memmove+0x24>

08004840 <_free_r>:
 8004840:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004842:	2900      	cmp	r1, #0
 8004844:	d048      	beq.n	80048d8 <_free_r+0x98>
 8004846:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800484a:	9001      	str	r0, [sp, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	f1a1 0404 	sub.w	r4, r1, #4
 8004852:	bfb8      	it	lt
 8004854:	18e4      	addlt	r4, r4, r3
 8004856:	f000 f8d3 	bl	8004a00 <__malloc_lock>
 800485a:	4a20      	ldr	r2, [pc, #128]	; (80048dc <_free_r+0x9c>)
 800485c:	9801      	ldr	r0, [sp, #4]
 800485e:	6813      	ldr	r3, [r2, #0]
 8004860:	4615      	mov	r5, r2
 8004862:	b933      	cbnz	r3, 8004872 <_free_r+0x32>
 8004864:	6063      	str	r3, [r4, #4]
 8004866:	6014      	str	r4, [r2, #0]
 8004868:	b003      	add	sp, #12
 800486a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800486e:	f000 b8cd 	b.w	8004a0c <__malloc_unlock>
 8004872:	42a3      	cmp	r3, r4
 8004874:	d90b      	bls.n	800488e <_free_r+0x4e>
 8004876:	6821      	ldr	r1, [r4, #0]
 8004878:	1862      	adds	r2, r4, r1
 800487a:	4293      	cmp	r3, r2
 800487c:	bf04      	itt	eq
 800487e:	681a      	ldreq	r2, [r3, #0]
 8004880:	685b      	ldreq	r3, [r3, #4]
 8004882:	6063      	str	r3, [r4, #4]
 8004884:	bf04      	itt	eq
 8004886:	1852      	addeq	r2, r2, r1
 8004888:	6022      	streq	r2, [r4, #0]
 800488a:	602c      	str	r4, [r5, #0]
 800488c:	e7ec      	b.n	8004868 <_free_r+0x28>
 800488e:	461a      	mov	r2, r3
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	b10b      	cbz	r3, 8004898 <_free_r+0x58>
 8004894:	42a3      	cmp	r3, r4
 8004896:	d9fa      	bls.n	800488e <_free_r+0x4e>
 8004898:	6811      	ldr	r1, [r2, #0]
 800489a:	1855      	adds	r5, r2, r1
 800489c:	42a5      	cmp	r5, r4
 800489e:	d10b      	bne.n	80048b8 <_free_r+0x78>
 80048a0:	6824      	ldr	r4, [r4, #0]
 80048a2:	4421      	add	r1, r4
 80048a4:	1854      	adds	r4, r2, r1
 80048a6:	42a3      	cmp	r3, r4
 80048a8:	6011      	str	r1, [r2, #0]
 80048aa:	d1dd      	bne.n	8004868 <_free_r+0x28>
 80048ac:	681c      	ldr	r4, [r3, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	6053      	str	r3, [r2, #4]
 80048b2:	4421      	add	r1, r4
 80048b4:	6011      	str	r1, [r2, #0]
 80048b6:	e7d7      	b.n	8004868 <_free_r+0x28>
 80048b8:	d902      	bls.n	80048c0 <_free_r+0x80>
 80048ba:	230c      	movs	r3, #12
 80048bc:	6003      	str	r3, [r0, #0]
 80048be:	e7d3      	b.n	8004868 <_free_r+0x28>
 80048c0:	6825      	ldr	r5, [r4, #0]
 80048c2:	1961      	adds	r1, r4, r5
 80048c4:	428b      	cmp	r3, r1
 80048c6:	bf04      	itt	eq
 80048c8:	6819      	ldreq	r1, [r3, #0]
 80048ca:	685b      	ldreq	r3, [r3, #4]
 80048cc:	6063      	str	r3, [r4, #4]
 80048ce:	bf04      	itt	eq
 80048d0:	1949      	addeq	r1, r1, r5
 80048d2:	6021      	streq	r1, [r4, #0]
 80048d4:	6054      	str	r4, [r2, #4]
 80048d6:	e7c7      	b.n	8004868 <_free_r+0x28>
 80048d8:	b003      	add	sp, #12
 80048da:	bd30      	pop	{r4, r5, pc}
 80048dc:	20000288 	.word	0x20000288

080048e0 <_malloc_r>:
 80048e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e2:	1ccd      	adds	r5, r1, #3
 80048e4:	f025 0503 	bic.w	r5, r5, #3
 80048e8:	3508      	adds	r5, #8
 80048ea:	2d0c      	cmp	r5, #12
 80048ec:	bf38      	it	cc
 80048ee:	250c      	movcc	r5, #12
 80048f0:	2d00      	cmp	r5, #0
 80048f2:	4606      	mov	r6, r0
 80048f4:	db01      	blt.n	80048fa <_malloc_r+0x1a>
 80048f6:	42a9      	cmp	r1, r5
 80048f8:	d903      	bls.n	8004902 <_malloc_r+0x22>
 80048fa:	230c      	movs	r3, #12
 80048fc:	6033      	str	r3, [r6, #0]
 80048fe:	2000      	movs	r0, #0
 8004900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004902:	f000 f87d 	bl	8004a00 <__malloc_lock>
 8004906:	4921      	ldr	r1, [pc, #132]	; (800498c <_malloc_r+0xac>)
 8004908:	680a      	ldr	r2, [r1, #0]
 800490a:	4614      	mov	r4, r2
 800490c:	b99c      	cbnz	r4, 8004936 <_malloc_r+0x56>
 800490e:	4f20      	ldr	r7, [pc, #128]	; (8004990 <_malloc_r+0xb0>)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	b923      	cbnz	r3, 800491e <_malloc_r+0x3e>
 8004914:	4621      	mov	r1, r4
 8004916:	4630      	mov	r0, r6
 8004918:	f000 f862 	bl	80049e0 <_sbrk_r>
 800491c:	6038      	str	r0, [r7, #0]
 800491e:	4629      	mov	r1, r5
 8004920:	4630      	mov	r0, r6
 8004922:	f000 f85d 	bl	80049e0 <_sbrk_r>
 8004926:	1c43      	adds	r3, r0, #1
 8004928:	d123      	bne.n	8004972 <_malloc_r+0x92>
 800492a:	230c      	movs	r3, #12
 800492c:	6033      	str	r3, [r6, #0]
 800492e:	4630      	mov	r0, r6
 8004930:	f000 f86c 	bl	8004a0c <__malloc_unlock>
 8004934:	e7e3      	b.n	80048fe <_malloc_r+0x1e>
 8004936:	6823      	ldr	r3, [r4, #0]
 8004938:	1b5b      	subs	r3, r3, r5
 800493a:	d417      	bmi.n	800496c <_malloc_r+0x8c>
 800493c:	2b0b      	cmp	r3, #11
 800493e:	d903      	bls.n	8004948 <_malloc_r+0x68>
 8004940:	6023      	str	r3, [r4, #0]
 8004942:	441c      	add	r4, r3
 8004944:	6025      	str	r5, [r4, #0]
 8004946:	e004      	b.n	8004952 <_malloc_r+0x72>
 8004948:	6863      	ldr	r3, [r4, #4]
 800494a:	42a2      	cmp	r2, r4
 800494c:	bf0c      	ite	eq
 800494e:	600b      	streq	r3, [r1, #0]
 8004950:	6053      	strne	r3, [r2, #4]
 8004952:	4630      	mov	r0, r6
 8004954:	f000 f85a 	bl	8004a0c <__malloc_unlock>
 8004958:	f104 000b 	add.w	r0, r4, #11
 800495c:	1d23      	adds	r3, r4, #4
 800495e:	f020 0007 	bic.w	r0, r0, #7
 8004962:	1ac2      	subs	r2, r0, r3
 8004964:	d0cc      	beq.n	8004900 <_malloc_r+0x20>
 8004966:	1a1b      	subs	r3, r3, r0
 8004968:	50a3      	str	r3, [r4, r2]
 800496a:	e7c9      	b.n	8004900 <_malloc_r+0x20>
 800496c:	4622      	mov	r2, r4
 800496e:	6864      	ldr	r4, [r4, #4]
 8004970:	e7cc      	b.n	800490c <_malloc_r+0x2c>
 8004972:	1cc4      	adds	r4, r0, #3
 8004974:	f024 0403 	bic.w	r4, r4, #3
 8004978:	42a0      	cmp	r0, r4
 800497a:	d0e3      	beq.n	8004944 <_malloc_r+0x64>
 800497c:	1a21      	subs	r1, r4, r0
 800497e:	4630      	mov	r0, r6
 8004980:	f000 f82e 	bl	80049e0 <_sbrk_r>
 8004984:	3001      	adds	r0, #1
 8004986:	d1dd      	bne.n	8004944 <_malloc_r+0x64>
 8004988:	e7cf      	b.n	800492a <_malloc_r+0x4a>
 800498a:	bf00      	nop
 800498c:	20000288 	.word	0x20000288
 8004990:	2000028c 	.word	0x2000028c

08004994 <_realloc_r>:
 8004994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004996:	4607      	mov	r7, r0
 8004998:	4614      	mov	r4, r2
 800499a:	460e      	mov	r6, r1
 800499c:	b921      	cbnz	r1, 80049a8 <_realloc_r+0x14>
 800499e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80049a2:	4611      	mov	r1, r2
 80049a4:	f7ff bf9c 	b.w	80048e0 <_malloc_r>
 80049a8:	b922      	cbnz	r2, 80049b4 <_realloc_r+0x20>
 80049aa:	f7ff ff49 	bl	8004840 <_free_r>
 80049ae:	4625      	mov	r5, r4
 80049b0:	4628      	mov	r0, r5
 80049b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049b4:	f000 f830 	bl	8004a18 <_malloc_usable_size_r>
 80049b8:	42a0      	cmp	r0, r4
 80049ba:	d20f      	bcs.n	80049dc <_realloc_r+0x48>
 80049bc:	4621      	mov	r1, r4
 80049be:	4638      	mov	r0, r7
 80049c0:	f7ff ff8e 	bl	80048e0 <_malloc_r>
 80049c4:	4605      	mov	r5, r0
 80049c6:	2800      	cmp	r0, #0
 80049c8:	d0f2      	beq.n	80049b0 <_realloc_r+0x1c>
 80049ca:	4631      	mov	r1, r6
 80049cc:	4622      	mov	r2, r4
 80049ce:	f7ff ff0f 	bl	80047f0 <memcpy>
 80049d2:	4631      	mov	r1, r6
 80049d4:	4638      	mov	r0, r7
 80049d6:	f7ff ff33 	bl	8004840 <_free_r>
 80049da:	e7e9      	b.n	80049b0 <_realloc_r+0x1c>
 80049dc:	4635      	mov	r5, r6
 80049de:	e7e7      	b.n	80049b0 <_realloc_r+0x1c>

080049e0 <_sbrk_r>:
 80049e0:	b538      	push	{r3, r4, r5, lr}
 80049e2:	4d06      	ldr	r5, [pc, #24]	; (80049fc <_sbrk_r+0x1c>)
 80049e4:	2300      	movs	r3, #0
 80049e6:	4604      	mov	r4, r0
 80049e8:	4608      	mov	r0, r1
 80049ea:	602b      	str	r3, [r5, #0]
 80049ec:	f7fc fc46 	bl	800127c <_sbrk>
 80049f0:	1c43      	adds	r3, r0, #1
 80049f2:	d102      	bne.n	80049fa <_sbrk_r+0x1a>
 80049f4:	682b      	ldr	r3, [r5, #0]
 80049f6:	b103      	cbz	r3, 80049fa <_sbrk_r+0x1a>
 80049f8:	6023      	str	r3, [r4, #0]
 80049fa:	bd38      	pop	{r3, r4, r5, pc}
 80049fc:	20001508 	.word	0x20001508

08004a00 <__malloc_lock>:
 8004a00:	4801      	ldr	r0, [pc, #4]	; (8004a08 <__malloc_lock+0x8>)
 8004a02:	f000 b811 	b.w	8004a28 <__retarget_lock_acquire_recursive>
 8004a06:	bf00      	nop
 8004a08:	20001510 	.word	0x20001510

08004a0c <__malloc_unlock>:
 8004a0c:	4801      	ldr	r0, [pc, #4]	; (8004a14 <__malloc_unlock+0x8>)
 8004a0e:	f000 b80c 	b.w	8004a2a <__retarget_lock_release_recursive>
 8004a12:	bf00      	nop
 8004a14:	20001510 	.word	0x20001510

08004a18 <_malloc_usable_size_r>:
 8004a18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a1c:	1f18      	subs	r0, r3, #4
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	bfbc      	itt	lt
 8004a22:	580b      	ldrlt	r3, [r1, r0]
 8004a24:	18c0      	addlt	r0, r0, r3
 8004a26:	4770      	bx	lr

08004a28 <__retarget_lock_acquire_recursive>:
 8004a28:	4770      	bx	lr

08004a2a <__retarget_lock_release_recursive>:
 8004a2a:	4770      	bx	lr

08004a2c <_init>:
 8004a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2e:	bf00      	nop
 8004a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a32:	bc08      	pop	{r3}
 8004a34:	469e      	mov	lr, r3
 8004a36:	4770      	bx	lr

08004a38 <_fini>:
 8004a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a3a:	bf00      	nop
 8004a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a3e:	bc08      	pop	{r3}
 8004a40:	469e      	mov	lr, r3
 8004a42:	4770      	bx	lr
 8004a44:	0000      	movs	r0, r0
	...

08004a48 <__encrypt_veneer>:
 8004a48:	f85f f000 	ldr.w	pc, [pc]	; 8004a4c <__encrypt_veneer+0x4>
 8004a4c:	10000001 	.word	0x10000001

08004a50 <__decrypto_veneer>:
 8004a50:	f85f f000 	ldr.w	pc, [pc]	; 8004a54 <__decrypto_veneer+0x4>
 8004a54:	10000095 	.word	0x10000095

Disassembly of section .ccmram:

10000000 <encrypt>:
void encrypt(){
10000000:	b580      	push	{r7, lr}
10000002:	b082      	sub	sp, #8
10000004:	af00      	add	r7, sp, #0
	int temp_crypted_element=1;
10000006:	2301      	movs	r3, #1
10000008:	607b      	str	r3, [r7, #4]
	for(uint16_t i=0;i<SIZE;i++){
1000000a:	2300      	movs	r3, #0
1000000c:	807b      	strh	r3, [r7, #2]
1000000e:	e032      	b.n	10000076 <encrypt+0x76>
	   for(uint16_t j=0;j</*key_info.e*/ro_data[0];j++){
10000010:	2300      	movs	r3, #0
10000012:	803b      	strh	r3, [r7, #0]
10000014:	e015      	b.n	10000042 <encrypt+0x42>
		   temp_crypted_element= temp_crypted_element * plaintext[i] % ro_data[1];
10000016:	887b      	ldrh	r3, [r7, #2]
10000018:	4a1b      	ldr	r2, [pc, #108]	; (10000088 <encrypt+0x88>)
1000001a:	5cd3      	ldrb	r3, [r2, r3]
1000001c:	461a      	mov	r2, r3
1000001e:	687b      	ldr	r3, [r7, #4]
10000020:	fb03 f302 	mul.w	r3, r3, r2
10000024:	4618      	mov	r0, r3
10000026:	ea4f 71e0 	mov.w	r1, r0, asr #31
1000002a:	4b18      	ldr	r3, [pc, #96]	; (1000008c <encrypt+0x8c>)
1000002c:	681b      	ldr	r3, [r3, #0]
1000002e:	3308      	adds	r3, #8
10000030:	e9d3 2300 	ldrd	r2, r3, [r3]
10000034:	f000 f884 	bl	10000140 <____aeabi_uldivmod_veneer>
10000038:	4613      	mov	r3, r2
1000003a:	607b      	str	r3, [r7, #4]
	   for(uint16_t j=0;j</*key_info.e*/ro_data[0];j++){
1000003c:	883b      	ldrh	r3, [r7, #0]
1000003e:	3301      	adds	r3, #1
10000040:	803b      	strh	r3, [r7, #0]
10000042:	8838      	ldrh	r0, [r7, #0]
10000044:	f04f 0100 	mov.w	r1, #0
10000048:	4b10      	ldr	r3, [pc, #64]	; (1000008c <encrypt+0x8c>)
1000004a:	681b      	ldr	r3, [r3, #0]
1000004c:	e9d3 2300 	ldrd	r2, r3, [r3]
10000050:	4299      	cmp	r1, r3
10000052:	bf08      	it	eq
10000054:	4290      	cmpeq	r0, r2
10000056:	d3de      	bcc.n	10000016 <encrypt+0x16>
	   c[i]=temp_crypted_element;
10000058:	8879      	ldrh	r1, [r7, #2]
1000005a:	687b      	ldr	r3, [r7, #4]
1000005c:	461a      	mov	r2, r3
1000005e:	ea4f 73e2 	mov.w	r3, r2, asr #31
10000062:	480b      	ldr	r0, [pc, #44]	; (10000090 <encrypt+0x90>)
10000064:	00c9      	lsls	r1, r1, #3
10000066:	4401      	add	r1, r0
10000068:	e9c1 2300 	strd	r2, r3, [r1]
	   temp_crypted_element=1;
1000006c:	2301      	movs	r3, #1
1000006e:	607b      	str	r3, [r7, #4]
	for(uint16_t i=0;i<SIZE;i++){
10000070:	887b      	ldrh	r3, [r7, #2]
10000072:	3301      	adds	r3, #1
10000074:	807b      	strh	r3, [r7, #2]
10000076:	887b      	ldrh	r3, [r7, #2]
10000078:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
1000007c:	d3c8      	bcc.n	10000010 <encrypt+0x10>
}
1000007e:	bf00      	nop
10000080:	bf00      	nop
10000082:	3708      	adds	r7, #8
10000084:	46bd      	mov	sp, r7
10000086:	bd80      	pop	{r7, pc}
10000088:	20000000 	.word	0x20000000
1000008c:	20000298 	.word	0x20000298
10000090:	20000320 	.word	0x20000320

10000094 <decrypto>:
void decrypto(){
10000094:	b590      	push	{r4, r7, lr}
10000096:	b085      	sub	sp, #20
10000098:	af00      	add	r7, sp, #0
	uint64_t temp_var=1;
1000009a:	f04f 0201 	mov.w	r2, #1
1000009e:	f04f 0300 	mov.w	r3, #0
100000a2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(uint16_t i=0;i<SIZE;i++){
100000a6:	2300      	movs	r3, #0
100000a8:	80fb      	strh	r3, [r7, #6]
100000aa:	e039      	b.n	10000120 <decrypto+0x8c>
	   for(uint16_t j=0; j< ro_data[2]; j++){
100000ac:	2300      	movs	r3, #0
100000ae:	80bb      	strh	r3, [r7, #4]
100000b0:	e01d      	b.n	100000ee <decrypto+0x5a>
		temp_var=temp_var*c[i] % ro_data[1];
100000b2:	88fb      	ldrh	r3, [r7, #6]
100000b4:	4a1f      	ldr	r2, [pc, #124]	; (10000134 <decrypto+0xa0>)
100000b6:	00db      	lsls	r3, r3, #3
100000b8:	4413      	add	r3, r2
100000ba:	e9d3 2300 	ldrd	r2, r3, [r3]
100000be:	68b9      	ldr	r1, [r7, #8]
100000c0:	fb03 f001 	mul.w	r0, r3, r1
100000c4:	68f9      	ldr	r1, [r7, #12]
100000c6:	fb02 f101 	mul.w	r1, r2, r1
100000ca:	1844      	adds	r4, r0, r1
100000cc:	68b9      	ldr	r1, [r7, #8]
100000ce:	fba1 0102 	umull	r0, r1, r1, r2
100000d2:	1863      	adds	r3, r4, r1
100000d4:	4619      	mov	r1, r3
100000d6:	4b18      	ldr	r3, [pc, #96]	; (10000138 <decrypto+0xa4>)
100000d8:	681b      	ldr	r3, [r3, #0]
100000da:	3308      	adds	r3, #8
100000dc:	e9d3 2300 	ldrd	r2, r3, [r3]
100000e0:	f000 f82e 	bl	10000140 <____aeabi_uldivmod_veneer>
100000e4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	   for(uint16_t j=0; j< ro_data[2]; j++){
100000e8:	88bb      	ldrh	r3, [r7, #4]
100000ea:	3301      	adds	r3, #1
100000ec:	80bb      	strh	r3, [r7, #4]
100000ee:	88b8      	ldrh	r0, [r7, #4]
100000f0:	f04f 0100 	mov.w	r1, #0
100000f4:	4b10      	ldr	r3, [pc, #64]	; (10000138 <decrypto+0xa4>)
100000f6:	681b      	ldr	r3, [r3, #0]
100000f8:	3310      	adds	r3, #16
100000fa:	e9d3 2300 	ldrd	r2, r3, [r3]
100000fe:	4299      	cmp	r1, r3
10000100:	bf08      	it	eq
10000102:	4290      	cmpeq	r0, r2
10000104:	d3d5      	bcc.n	100000b2 <decrypto+0x1e>
	   de_plaintext_char[i]=temp_var;
10000106:	88fb      	ldrh	r3, [r7, #6]
10000108:	7a39      	ldrb	r1, [r7, #8]
1000010a:	4a0c      	ldr	r2, [pc, #48]	; (1000013c <decrypto+0xa8>)
1000010c:	54d1      	strb	r1, [r2, r3]
	   temp_var=1;
1000010e:	f04f 0201 	mov.w	r2, #1
10000112:	f04f 0300 	mov.w	r3, #0
10000116:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(uint16_t i=0;i<SIZE;i++){
1000011a:	88fb      	ldrh	r3, [r7, #6]
1000011c:	3301      	adds	r3, #1
1000011e:	80fb      	strh	r3, [r7, #6]
10000120:	88fb      	ldrh	r3, [r7, #6]
10000122:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
10000126:	d3c1      	bcc.n	100000ac <decrypto+0x18>
}
10000128:	bf00      	nop
1000012a:	bf00      	nop
1000012c:	3714      	adds	r7, #20
1000012e:	46bd      	mov	sp, r7
10000130:	bd90      	pop	{r4, r7, pc}
10000132:	bf00      	nop
10000134:	20000320 	.word	0x20000320
10000138:	20000298 	.word	0x20000298
1000013c:	20001310 	.word	0x20001310

10000140 <____aeabi_uldivmod_veneer>:
10000140:	f85f f000 	ldr.w	pc, [pc]	; 10000144 <____aeabi_uldivmod_veneer+0x4>
10000144:	08000a5d 	.word	0x08000a5d
