
binary_search_ys.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004764  08004764  00014764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047d8  080047d8  00031000  2**0
                  CONTENTS
  4 .ARM          00000000  080047d8  080047d8  00031000  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047d8  080047d8  00031000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047d8  080047d8  000147d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047dc  080047dc  000147dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080047e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00031000  2**0
                  CONTENTS
 10 .ccmramdata   00001000  10000000  10000000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000118  20000078  20000078  00040078  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000190  20000190  00040078  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00031000  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f8a7  00000000  00000000  00031030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001d19  00000000  00000000  000408d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000bf8  00000000  00000000  000425f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000b50  00000000  00000000  000431e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001de80  00000000  00000000  00043d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000eeae  00000000  00000000  00061bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b743b  00000000  00000000  00070a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  00127ea1  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003744  00000000  00000000  00127ef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800474c 	.word	0x0800474c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800474c 	.word	0x0800474c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <binary_search>:
/* USER CODE BEGIN PFP */
#if(CCMRAM)
__attribute__((section(".ccmram")))
#endif
int binary_search(int x)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b087      	sub	sp, #28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  int fvalue, mid, up, low ;

  low = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
  up = NUMELEMS;
 8000a68:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <binary_search+0x78>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	613b      	str	r3, [r7, #16]
  fvalue = -1 /* all data are positive */ ;
 8000a6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a72:	617b      	str	r3, [r7, #20]
  while (low <= up) {
 8000a74:	e023      	b.n	8000abe <binary_search+0x62>
    mid = (low + up) >> 1;
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	105b      	asrs	r3, r3, #1
 8000a7e:	60bb      	str	r3, [r7, #8]
    if (data_org[mid].key == x ) {  /*  found  */
 8000a80:	4a15      	ldr	r2, [pc, #84]	; (8000ad8 <binary_search+0x7c>)
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d109      	bne.n	8000aa2 <binary_search+0x46>
      up = low - 1;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	3b01      	subs	r3, #1
 8000a92:	613b      	str	r3, [r7, #16]
      fvalue = data_org[mid].value;
 8000a94:	4a10      	ldr	r2, [pc, #64]	; (8000ad8 <binary_search+0x7c>)
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	00db      	lsls	r3, r3, #3
 8000a9a:	4413      	add	r3, r2
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	e00d      	b.n	8000abe <binary_search+0x62>
    }
    else  /* not found */
      if (data_org[mid].key > x ) 	{
 8000aa2:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <binary_search+0x7c>)
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	da03      	bge.n	8000ab8 <binary_search+0x5c>
	up = mid - 1;
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	e002      	b.n	8000abe <binary_search+0x62>
      }
      else   {
             	low = mid + 1;
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	3301      	adds	r3, #1
 8000abc:	60fb      	str	r3, [r7, #12]
  while (low <= up) {
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	ddd7      	ble.n	8000a76 <binary_search+0x1a>
      }
  }
  return fvalue;
 8000ac6:	697b      	ldr	r3, [r7, #20]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	371c      	adds	r7, #28
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	20000004 	.word	0x20000004
 8000ad8:	10000000 	.word	0x10000000

08000adc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b092      	sub	sp, #72	; 0x48
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t gu8_MSG[60] = {'\0'};
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	f107 0310 	add.w	r3, r7, #16
 8000aea:	2238      	movs	r2, #56	; 0x38
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f003 f9f6 	bl	8003ee0 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000af4:	f000 fac4 	bl	8001080 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af8:	f000 f882 	bl	8000c00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000afc:	f000 f958 	bl	8000db0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b00:	f000 f8d8 	bl	8000cb4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000b04:	f000 f924 	bl	8000d50 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000b08:	4833      	ldr	r0, [pc, #204]	; (8000bd8 <main+0xfc>)
 8000b0a:	f002 f915 	bl	8002d38 <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	time1 = TIM2->CNT;
 8000b0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b14:	60bb      	str	r3, [r7, #8]
	valueToFind = binary_search(keyToFind);
 8000b16:	4b31      	ldr	r3, [pc, #196]	; (8000bdc <main+0x100>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff ff9e 	bl	8000a5c <binary_search>
 8000b20:	4603      	mov	r3, r0
 8000b22:	4a2f      	ldr	r2, [pc, #188]	; (8000be0 <main+0x104>)
 8000b24:	6013      	str	r3, [r2, #0]
	time2 = TIM2->CNT;
 8000b26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b2c:	607b      	str	r3, [r7, #4]


	execution_time =(int)((double)(time2-time1)/cpu_frequency*1000);          /* in ns */
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	1ad3      	subs	r3, r2, r3
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fcdd 	bl	80004f4 <__aeabi_ui2d>
 8000b3a:	f04f 0200 	mov.w	r2, #0
 8000b3e:	4b29      	ldr	r3, [pc, #164]	; (8000be4 <main+0x108>)
 8000b40:	f7ff fe7c 	bl	800083c <__aeabi_ddiv>
 8000b44:	4602      	mov	r2, r0
 8000b46:	460b      	mov	r3, r1
 8000b48:	4610      	mov	r0, r2
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f04f 0200 	mov.w	r2, #0
 8000b50:	4b25      	ldr	r3, [pc, #148]	; (8000be8 <main+0x10c>)
 8000b52:	f7ff fd49 	bl	80005e8 <__aeabi_dmul>
 8000b56:	4602      	mov	r2, r0
 8000b58:	460b      	mov	r3, r1
 8000b5a:	4610      	mov	r0, r2
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f7ff ff55 	bl	8000a0c <__aeabi_d2iz>
 8000b62:	4603      	mov	r3, r0
 8000b64:	4a21      	ldr	r2, [pc, #132]	; (8000bec <main+0x110>)
 8000b66:	6013      	str	r3, [r2, #0]
	//sprintf(gu8_MSG, "%d\t%d\t%ld\n\r",NUMELEMS,valueToFind, execution_time);
	sprintf(gu8_MSG, "%d\n\r",execution_time);
 8000b68:	4b20      	ldr	r3, [pc, #128]	; (8000bec <main+0x110>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	f107 030c 	add.w	r3, r7, #12
 8000b70:	491f      	ldr	r1, [pc, #124]	; (8000bf0 <main+0x114>)
 8000b72:	4618      	mov	r0, r3
 8000b74:	f003 f9bc 	bl	8003ef0 <siprintf>
	HAL_UART_Transmit(&huart1, gu8_MSG, sizeof(gu8_MSG), 0xFFFF);
 8000b78:	f107 010c 	add.w	r1, r7, #12
 8000b7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b80:	223c      	movs	r2, #60	; 0x3c
 8000b82:	481c      	ldr	r0, [pc, #112]	; (8000bf4 <main+0x118>)
 8000b84:	f002 fd6a 	bl	800365c <HAL_UART_Transmit>
	HAL_Delay(200);
 8000b88:	20c8      	movs	r0, #200	; 0xc8
 8000b8a:	f000 fadf 	bl	800114c <HAL_Delay>
	if(loop_counter == 0){
 8000b8e:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <main+0x11c>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d106      	bne.n	8000ba4 <main+0xc8>
		loop_counter++;
 8000b96:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <main+0x11c>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <main+0x11c>)
 8000ba0:	701a      	strb	r2, [r3, #0]
 8000ba2:	e7b4      	b.n	8000b0e <main+0x32>
	}else if(NUMELEMS < 512){
 8000ba4:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <main+0x120>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bac:	da0b      	bge.n	8000bc6 <main+0xea>
		NUMELEMS *= 2;
 8000bae:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <main+0x120>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	4a11      	ldr	r2, [pc, #68]	; (8000bfc <main+0x120>)
 8000bb6:	6013      	str	r3, [r2, #0]
		loop_counter++;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <main+0x11c>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <main+0x11c>)
 8000bc2:	701a      	strb	r2, [r3, #0]
 8000bc4:	e7a3      	b.n	8000b0e <main+0x32>
	}else{
		NUMELEMS=4;
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	; (8000bfc <main+0x120>)
 8000bc8:	2204      	movs	r2, #4
 8000bca:	601a      	str	r2, [r3, #0]
		HAL_Delay(2000);
 8000bcc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bd0:	f000 fabc 	bl	800114c <HAL_Delay>
	time1 = TIM2->CNT;
 8000bd4:	e79b      	b.n	8000b0e <main+0x32>
 8000bd6:	bf00      	nop
 8000bd8:	20000130 	.word	0x20000130
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	200000a4 	.word	0x200000a4
 8000be4:	40520000 	.word	0x40520000
 8000be8:	408f4000 	.word	0x408f4000
 8000bec:	2000012c 	.word	0x2000012c
 8000bf0:	08004764 	.word	0x08004764
 8000bf4:	200000a8 	.word	0x200000a8
 8000bf8:	20000094 	.word	0x20000094
 8000bfc:	20000004 	.word	0x20000004

08000c00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b09e      	sub	sp, #120	; 0x78
 8000c04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c06:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c0a:	2228      	movs	r2, #40	; 0x28
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f003 f966 	bl	8003ee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c14:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c24:	463b      	mov	r3, r7
 8000c26:	223c      	movs	r2, #60	; 0x3c
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f003 f958 	bl	8003ee0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c30:	2301      	movs	r3, #1
 8000c32:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c38:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c42:	2302      	movs	r3, #2
 8000c44:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c4a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c4c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c50:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c52:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 fd28 	bl	80016ac <HAL_RCC_OscConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c62:	f000 f8d5 	bl	8000e10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c66:	230f      	movs	r3, #15
 8000c68:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c7c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c80:	2102      	movs	r1, #2
 8000c82:	4618      	mov	r0, r3
 8000c84:	f001 fc1a 	bl	80024bc <HAL_RCC_ClockConfig>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c8e:	f000 f8bf 	bl	8000e10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c92:	2301      	movs	r3, #1
 8000c94:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c96:	2300      	movs	r3, #0
 8000c98:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c9a:	463b      	mov	r3, r7
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f001 fe43 	bl	8002928 <HAL_RCCEx_PeriphCLKConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000ca8:	f000 f8b2 	bl	8000e10 <Error_Handler>
  }
}
 8000cac:	bf00      	nop
 8000cae:	3778      	adds	r7, #120	; 0x78
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b088      	sub	sp, #32
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cba:	f107 0310 	add.w	r3, r7, #16
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cd2:	4b1e      	ldr	r3, [pc, #120]	; (8000d4c <MX_TIM2_Init+0x98>)
 8000cd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cd8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <MX_TIM2_Init+0x98>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <MX_TIM2_Init+0x98>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ce6:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <MX_TIM2_Init+0x98>)
 8000ce8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cee:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <MX_TIM2_Init+0x98>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cf4:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <MX_TIM2_Init+0x98>)
 8000cf6:	2280      	movs	r2, #128	; 0x80
 8000cf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cfa:	4814      	ldr	r0, [pc, #80]	; (8000d4c <MX_TIM2_Init+0x98>)
 8000cfc:	f001 ffc4 	bl	8002c88 <HAL_TIM_Base_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d06:	f000 f883 	bl	8000e10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	4619      	mov	r1, r3
 8000d16:	480d      	ldr	r0, [pc, #52]	; (8000d4c <MX_TIM2_Init+0x98>)
 8000d18:	f002 f98f 	bl	800303a <HAL_TIM_ConfigClockSource>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d22:	f000 f875 	bl	8000e10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	4619      	mov	r1, r3
 8000d32:	4806      	ldr	r0, [pc, #24]	; (8000d4c <MX_TIM2_Init+0x98>)
 8000d34:	f002 fba6 	bl	8003484 <HAL_TIMEx_MasterConfigSynchronization>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d3e:	f000 f867 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	3720      	adds	r7, #32
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000130 	.word	0x20000130

08000d50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d54:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <MX_USART1_UART_Init+0x58>)
 8000d56:	4a15      	ldr	r2, [pc, #84]	; (8000dac <MX_USART1_UART_Init+0x5c>)
 8000d58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000d5a:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <MX_USART1_UART_Init+0x58>)
 8000d5c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000d60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <MX_USART1_UART_Init+0x58>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d68:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <MX_USART1_UART_Init+0x58>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <MX_USART1_UART_Init+0x58>)
 8000d70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d74:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <MX_USART1_UART_Init+0x58>)
 8000d78:	220c      	movs	r2, #12
 8000d7a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <MX_USART1_UART_Init+0x58>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <MX_USART1_UART_Init+0x58>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d88:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <MX_USART1_UART_Init+0x58>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <MX_USART1_UART_Init+0x58>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d94:	4804      	ldr	r0, [pc, #16]	; (8000da8 <MX_USART1_UART_Init+0x58>)
 8000d96:	f002 fc13 	bl	80035c0 <HAL_UART_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8000da0:	f000 f836 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	200000a8 	.word	0x200000a8
 8000dac:	40013800 	.word	0x40013800

08000db0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000db6:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <MX_GPIO_Init+0x5c>)
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	4a14      	ldr	r2, [pc, #80]	; (8000e0c <MX_GPIO_Init+0x5c>)
 8000dbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dc0:	6153      	str	r3, [r2, #20]
 8000dc2:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <MX_GPIO_Init+0x5c>)
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dce:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <MX_GPIO_Init+0x5c>)
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	4a0e      	ldr	r2, [pc, #56]	; (8000e0c <MX_GPIO_Init+0x5c>)
 8000dd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000dd8:	6153      	str	r3, [r2, #20]
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <MX_GPIO_Init+0x5c>)
 8000ddc:	695b      	ldr	r3, [r3, #20]
 8000dde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <MX_GPIO_Init+0x5c>)
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	4a08      	ldr	r2, [pc, #32]	; (8000e0c <MX_GPIO_Init+0x5c>)
 8000dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df0:	6153      	str	r3, [r2, #20]
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <MX_GPIO_Init+0x5c>)
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]

}
 8000dfe:	bf00      	nop
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	40021000 	.word	0x40021000

08000e10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e14:	b672      	cpsid	i
}
 8000e16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <Error_Handler+0x8>
	...

08000e1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <HAL_MspInit+0x44>)
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <HAL_MspInit+0x44>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6193      	str	r3, [r2, #24]
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <HAL_MspInit+0x44>)
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <HAL_MspInit+0x44>)
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	4a08      	ldr	r2, [pc, #32]	; (8000e60 <HAL_MspInit+0x44>)
 8000e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e44:	61d3      	str	r3, [r2, #28]
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_MspInit+0x44>)
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	40021000 	.word	0x40021000

08000e64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e74:	d113      	bne.n	8000e9e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e76:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <HAL_TIM_Base_MspInit+0x44>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ea8 <HAL_TIM_Base_MspInit+0x44>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	61d3      	str	r3, [r2, #28]
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <HAL_TIM_Base_MspInit+0x44>)
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2100      	movs	r1, #0
 8000e92:	201c      	movs	r0, #28
 8000e94:	f000 fa59 	bl	800134a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e98:	201c      	movs	r0, #28
 8000e9a:	f000 fa72 	bl	8001382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40021000 	.word	0x40021000

08000eac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a17      	ldr	r2, [pc, #92]	; (8000f28 <HAL_UART_MspInit+0x7c>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d127      	bne.n	8000f1e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ece:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <HAL_UART_MspInit+0x80>)
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	4a16      	ldr	r2, [pc, #88]	; (8000f2c <HAL_UART_MspInit+0x80>)
 8000ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed8:	6193      	str	r3, [r2, #24]
 8000eda:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <HAL_UART_MspInit+0x80>)
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <HAL_UART_MspInit+0x80>)
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	4a10      	ldr	r2, [pc, #64]	; (8000f2c <HAL_UART_MspInit+0x80>)
 8000eec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ef0:	6153      	str	r3, [r2, #20]
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <HAL_UART_MspInit+0x80>)
 8000ef4:	695b      	ldr	r3, [r3, #20]
 8000ef6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000efe:	2330      	movs	r3, #48	; 0x30
 8000f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f0e:	2307      	movs	r3, #7
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	4619      	mov	r1, r3
 8000f18:	4805      	ldr	r0, [pc, #20]	; (8000f30 <HAL_UART_MspInit+0x84>)
 8000f1a:	f000 fa4d 	bl	80013b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f1e:	bf00      	nop
 8000f20:	3728      	adds	r7, #40	; 0x28
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40013800 	.word	0x40013800
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	48000800 	.word	0x48000800

08000f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <NMI_Handler+0x4>

08000f3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <HardFault_Handler+0x4>

08000f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <MemManage_Handler+0x4>

08000f46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <BusFault_Handler+0x4>

08000f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <UsageFault_Handler+0x4>

08000f52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f80:	f000 f8c4 	bl	800110c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <TIM2_IRQHandler+0x10>)
 8000f8e:	f001 ff35 	bl	8002dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000130 	.word	0x20000130

08000f9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa4:	4a14      	ldr	r2, [pc, #80]	; (8000ff8 <_sbrk+0x5c>)
 8000fa6:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <_sbrk+0x60>)
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fb0:	4b13      	ldr	r3, [pc, #76]	; (8001000 <_sbrk+0x64>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d102      	bne.n	8000fbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb8:	4b11      	ldr	r3, [pc, #68]	; (8001000 <_sbrk+0x64>)
 8000fba:	4a12      	ldr	r2, [pc, #72]	; (8001004 <_sbrk+0x68>)
 8000fbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <_sbrk+0x64>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d207      	bcs.n	8000fdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fcc:	f002 ff5e 	bl	8003e8c <__errno>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	220c      	movs	r2, #12
 8000fd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fda:	e009      	b.n	8000ff0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <_sbrk+0x64>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fe2:	4b07      	ldr	r3, [pc, #28]	; (8001000 <_sbrk+0x64>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4413      	add	r3, r2
 8000fea:	4a05      	ldr	r2, [pc, #20]	; (8001000 <_sbrk+0x64>)
 8000fec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fee:	68fb      	ldr	r3, [r7, #12]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3718      	adds	r7, #24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	2000a000 	.word	0x2000a000
 8000ffc:	00000400 	.word	0x00000400
 8001000:	20000098 	.word	0x20000098
 8001004:	20000190 	.word	0x20000190

08001008 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <SystemInit+0x20>)
 800100e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001012:	4a05      	ldr	r2, [pc, #20]	; (8001028 <SystemInit+0x20>)
 8001014:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001018:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800102c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001064 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001030:	480d      	ldr	r0, [pc, #52]	; (8001068 <LoopForever+0x6>)
  ldr r1, =_edata
 8001032:	490e      	ldr	r1, [pc, #56]	; (800106c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001034:	4a0e      	ldr	r2, [pc, #56]	; (8001070 <LoopForever+0xe>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001038:	e002      	b.n	8001040 <LoopCopyDataInit>

0800103a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800103c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103e:	3304      	adds	r3, #4

08001040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001044:	d3f9      	bcc.n	800103a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001046:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001048:	4c0b      	ldr	r4, [pc, #44]	; (8001078 <LoopForever+0x16>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800104c:	e001      	b.n	8001052 <LoopFillZerobss>

0800104e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001050:	3204      	adds	r2, #4

08001052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001054:	d3fb      	bcc.n	800104e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001056:	f7ff ffd7 	bl	8001008 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800105a:	f002 ff1d 	bl	8003e98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800105e:	f7ff fd3d 	bl	8000adc <main>

08001062 <LoopForever>:

LoopForever:
    b LoopForever
 8001062:	e7fe      	b.n	8001062 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001064:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001068:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800106c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001070:	080047e0 	.word	0x080047e0
  ldr r2, =_sbss
 8001074:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001078:	20000190 	.word	0x20000190

0800107c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800107c:	e7fe      	b.n	800107c <ADC1_2_IRQHandler>
	...

08001080 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <HAL_Init+0x28>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <HAL_Init+0x28>)
 800108a:	f043 0310 	orr.w	r3, r3, #16
 800108e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001090:	2003      	movs	r0, #3
 8001092:	f000 f94f 	bl	8001334 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001096:	200f      	movs	r0, #15
 8001098:	f000 f808 	bl	80010ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800109c:	f7ff febe 	bl	8000e1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40022000 	.word	0x40022000

080010ac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <HAL_InitTick+0x54>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <HAL_InitTick+0x58>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	4619      	mov	r1, r3
 80010be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f967 	bl	800139e <HAL_SYSTICK_Config>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00e      	b.n	80010f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b0f      	cmp	r3, #15
 80010de:	d80a      	bhi.n	80010f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e0:	2200      	movs	r2, #0
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010e8:	f000 f92f 	bl	800134a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010ec:	4a06      	ldr	r2, [pc, #24]	; (8001108 <HAL_InitTick+0x5c>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	e000      	b.n	80010f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000008 	.word	0x20000008
 8001104:	20000010 	.word	0x20000010
 8001108:	2000000c 	.word	0x2000000c

0800110c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_IncTick+0x20>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_IncTick+0x24>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4413      	add	r3, r2
 800111c:	4a04      	ldr	r2, [pc, #16]	; (8001130 <HAL_IncTick+0x24>)
 800111e:	6013      	str	r3, [r2, #0]
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000010 	.word	0x20000010
 8001130:	2000017c 	.word	0x2000017c

08001134 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return uwTick;  
 8001138:	4b03      	ldr	r3, [pc, #12]	; (8001148 <HAL_GetTick+0x14>)
 800113a:	681b      	ldr	r3, [r3, #0]
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	2000017c 	.word	0x2000017c

0800114c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001154:	f7ff ffee 	bl	8001134 <HAL_GetTick>
 8001158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001164:	d005      	beq.n	8001172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <HAL_Delay+0x44>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4413      	add	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001172:	bf00      	nop
 8001174:	f7ff ffde 	bl	8001134 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	429a      	cmp	r2, r3
 8001182:	d8f7      	bhi.n	8001174 <HAL_Delay+0x28>
  {
  }
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000010 	.word	0x20000010

08001194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b0:	4013      	ands	r3, r2
 80011b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c6:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	60d3      	str	r3, [r2, #12]
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <__NVIC_GetPriorityGrouping+0x18>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	0a1b      	lsrs	r3, r3, #8
 80011e6:	f003 0307 	and.w	r3, r3, #7
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	2b00      	cmp	r3, #0
 8001208:	db0b      	blt.n	8001222 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	f003 021f 	and.w	r2, r3, #31
 8001210:	4907      	ldr	r1, [pc, #28]	; (8001230 <__NVIC_EnableIRQ+0x38>)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	095b      	lsrs	r3, r3, #5
 8001218:	2001      	movs	r0, #1
 800121a:	fa00 f202 	lsl.w	r2, r0, r2
 800121e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000e100 	.word	0xe000e100

08001234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	2b00      	cmp	r3, #0
 8001246:	db0a      	blt.n	800125e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	490c      	ldr	r1, [pc, #48]	; (8001280 <__NVIC_SetPriority+0x4c>)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	0112      	lsls	r2, r2, #4
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	440b      	add	r3, r1
 8001258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800125c:	e00a      	b.n	8001274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4908      	ldr	r1, [pc, #32]	; (8001284 <__NVIC_SetPriority+0x50>)
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	3b04      	subs	r3, #4
 800126c:	0112      	lsls	r2, r2, #4
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	440b      	add	r3, r1
 8001272:	761a      	strb	r2, [r3, #24]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000e100 	.word	0xe000e100
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001288:	b480      	push	{r7}
 800128a:	b089      	sub	sp, #36	; 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f1c3 0307 	rsb	r3, r3, #7
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	bf28      	it	cs
 80012a6:	2304      	movcs	r3, #4
 80012a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3304      	adds	r3, #4
 80012ae:	2b06      	cmp	r3, #6
 80012b0:	d902      	bls.n	80012b8 <NVIC_EncodePriority+0x30>
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3b03      	subs	r3, #3
 80012b6:	e000      	b.n	80012ba <NVIC_EncodePriority+0x32>
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43da      	mvns	r2, r3
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	401a      	ands	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	fa01 f303 	lsl.w	r3, r1, r3
 80012da:	43d9      	mvns	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	4313      	orrs	r3, r2
         );
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3724      	adds	r7, #36	; 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001300:	d301      	bcc.n	8001306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001302:	2301      	movs	r3, #1
 8001304:	e00f      	b.n	8001326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001306:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <SysTick_Config+0x40>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130e:	210f      	movs	r1, #15
 8001310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001314:	f7ff ff8e 	bl	8001234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <SysTick_Config+0x40>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <SysTick_Config+0x40>)
 8001320:	2207      	movs	r2, #7
 8001322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	e000e010 	.word	0xe000e010

08001334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff ff29 	bl	8001194 <__NVIC_SetPriorityGrouping>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af00      	add	r7, sp, #0
 8001350:	4603      	mov	r3, r0
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800135c:	f7ff ff3e 	bl	80011dc <__NVIC_GetPriorityGrouping>
 8001360:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	68b9      	ldr	r1, [r7, #8]
 8001366:	6978      	ldr	r0, [r7, #20]
 8001368:	f7ff ff8e 	bl	8001288 <NVIC_EncodePriority>
 800136c:	4602      	mov	r2, r0
 800136e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff5d 	bl	8001234 <__NVIC_SetPriority>
}
 800137a:	bf00      	nop
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	4603      	mov	r3, r0
 800138a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800138c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff31 	bl	80011f8 <__NVIC_EnableIRQ>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ffa2 	bl	80012f0 <SysTick_Config>
 80013ac:	4603      	mov	r3, r0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b087      	sub	sp, #28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c6:	e154      	b.n	8001672 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	2101      	movs	r1, #1
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	fa01 f303 	lsl.w	r3, r1, r3
 80013d4:	4013      	ands	r3, r2
 80013d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f000 8146 	beq.w	800166c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 0303 	and.w	r3, r3, #3
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d005      	beq.n	80013f8 <HAL_GPIO_Init+0x40>
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 0303 	and.w	r3, r3, #3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d130      	bne.n	800145a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	2203      	movs	r2, #3
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	4013      	ands	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	68da      	ldr	r2, [r3, #12]
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4313      	orrs	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800142e:	2201      	movs	r2, #1
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	4013      	ands	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	091b      	lsrs	r3, r3, #4
 8001444:	f003 0201 	and.w	r2, r3, #1
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	2b03      	cmp	r3, #3
 8001464:	d017      	beq.n	8001496 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	2203      	movs	r2, #3
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d123      	bne.n	80014ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	08da      	lsrs	r2, r3, #3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3208      	adds	r2, #8
 80014aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	220f      	movs	r2, #15
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43db      	mvns	r3, r3
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4013      	ands	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	691a      	ldr	r2, [r3, #16]
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	4313      	orrs	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	08da      	lsrs	r2, r3, #3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3208      	adds	r2, #8
 80014e4:	6939      	ldr	r1, [r7, #16]
 80014e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	2203      	movs	r2, #3
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f003 0203 	and.w	r2, r3, #3
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 80a0 	beq.w	800166c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152c:	4b58      	ldr	r3, [pc, #352]	; (8001690 <HAL_GPIO_Init+0x2d8>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	4a57      	ldr	r2, [pc, #348]	; (8001690 <HAL_GPIO_Init+0x2d8>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6193      	str	r3, [r2, #24]
 8001538:	4b55      	ldr	r3, [pc, #340]	; (8001690 <HAL_GPIO_Init+0x2d8>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001544:	4a53      	ldr	r2, [pc, #332]	; (8001694 <HAL_GPIO_Init+0x2dc>)
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	089b      	lsrs	r3, r3, #2
 800154a:	3302      	adds	r3, #2
 800154c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001550:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	f003 0303 	and.w	r3, r3, #3
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	220f      	movs	r2, #15
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4013      	ands	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800156e:	d019      	beq.n	80015a4 <HAL_GPIO_Init+0x1ec>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a49      	ldr	r2, [pc, #292]	; (8001698 <HAL_GPIO_Init+0x2e0>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d013      	beq.n	80015a0 <HAL_GPIO_Init+0x1e8>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a48      	ldr	r2, [pc, #288]	; (800169c <HAL_GPIO_Init+0x2e4>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d00d      	beq.n	800159c <HAL_GPIO_Init+0x1e4>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a47      	ldr	r2, [pc, #284]	; (80016a0 <HAL_GPIO_Init+0x2e8>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d007      	beq.n	8001598 <HAL_GPIO_Init+0x1e0>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a46      	ldr	r2, [pc, #280]	; (80016a4 <HAL_GPIO_Init+0x2ec>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d101      	bne.n	8001594 <HAL_GPIO_Init+0x1dc>
 8001590:	2304      	movs	r3, #4
 8001592:	e008      	b.n	80015a6 <HAL_GPIO_Init+0x1ee>
 8001594:	2305      	movs	r3, #5
 8001596:	e006      	b.n	80015a6 <HAL_GPIO_Init+0x1ee>
 8001598:	2303      	movs	r3, #3
 800159a:	e004      	b.n	80015a6 <HAL_GPIO_Init+0x1ee>
 800159c:	2302      	movs	r3, #2
 800159e:	e002      	b.n	80015a6 <HAL_GPIO_Init+0x1ee>
 80015a0:	2301      	movs	r3, #1
 80015a2:	e000      	b.n	80015a6 <HAL_GPIO_Init+0x1ee>
 80015a4:	2300      	movs	r3, #0
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	f002 0203 	and.w	r2, r2, #3
 80015ac:	0092      	lsls	r2, r2, #2
 80015ae:	4093      	lsls	r3, r2
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015b6:	4937      	ldr	r1, [pc, #220]	; (8001694 <HAL_GPIO_Init+0x2dc>)
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	089b      	lsrs	r3, r3, #2
 80015bc:	3302      	adds	r3, #2
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015c4:	4b38      	ldr	r3, [pc, #224]	; (80016a8 <HAL_GPIO_Init+0x2f0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4013      	ands	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015e8:	4a2f      	ldr	r2, [pc, #188]	; (80016a8 <HAL_GPIO_Init+0x2f0>)
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015ee:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <HAL_GPIO_Init+0x2f0>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	43db      	mvns	r3, r3
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	4013      	ands	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4313      	orrs	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001612:	4a25      	ldr	r2, [pc, #148]	; (80016a8 <HAL_GPIO_Init+0x2f0>)
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001618:	4b23      	ldr	r3, [pc, #140]	; (80016a8 <HAL_GPIO_Init+0x2f0>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	43db      	mvns	r3, r3
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4013      	ands	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d003      	beq.n	800163c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	4313      	orrs	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800163c:	4a1a      	ldr	r2, [pc, #104]	; (80016a8 <HAL_GPIO_Init+0x2f0>)
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001642:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <HAL_GPIO_Init+0x2f0>)
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	43db      	mvns	r3, r3
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	4013      	ands	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4313      	orrs	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001666:	4a10      	ldr	r2, [pc, #64]	; (80016a8 <HAL_GPIO_Init+0x2f0>)
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	3301      	adds	r3, #1
 8001670:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	fa22 f303 	lsr.w	r3, r2, r3
 800167c:	2b00      	cmp	r3, #0
 800167e:	f47f aea3 	bne.w	80013c8 <HAL_GPIO_Init+0x10>
  }
}
 8001682:	bf00      	nop
 8001684:	bf00      	nop
 8001686:	371c      	adds	r7, #28
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	40021000 	.word	0x40021000
 8001694:	40010000 	.word	0x40010000
 8001698:	48000400 	.word	0x48000400
 800169c:	48000800 	.word	0x48000800
 80016a0:	48000c00 	.word	0x48000c00
 80016a4:	48001000 	.word	0x48001000
 80016a8:	40010400 	.word	0x40010400

080016ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d102      	bne.n	80016c6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	f000 bef4 	b.w	80024ae <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 816a 	beq.w	80019aa <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016d6:	4bb3      	ldr	r3, [pc, #716]	; (80019a4 <HAL_RCC_OscConfig+0x2f8>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 030c 	and.w	r3, r3, #12
 80016de:	2b04      	cmp	r3, #4
 80016e0:	d00c      	beq.n	80016fc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016e2:	4bb0      	ldr	r3, [pc, #704]	; (80019a4 <HAL_RCC_OscConfig+0x2f8>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 030c 	and.w	r3, r3, #12
 80016ea:	2b08      	cmp	r3, #8
 80016ec:	d159      	bne.n	80017a2 <HAL_RCC_OscConfig+0xf6>
 80016ee:	4bad      	ldr	r3, [pc, #692]	; (80019a4 <HAL_RCC_OscConfig+0x2f8>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016fa:	d152      	bne.n	80017a2 <HAL_RCC_OscConfig+0xf6>
 80016fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001700:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001704:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001708:	fa93 f3a3 	rbit	r3, r3
 800170c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001710:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001714:	fab3 f383 	clz	r3, r3
 8001718:	b2db      	uxtb	r3, r3
 800171a:	095b      	lsrs	r3, r3, #5
 800171c:	b2db      	uxtb	r3, r3
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b01      	cmp	r3, #1
 8001726:	d102      	bne.n	800172e <HAL_RCC_OscConfig+0x82>
 8001728:	4b9e      	ldr	r3, [pc, #632]	; (80019a4 <HAL_RCC_OscConfig+0x2f8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	e015      	b.n	800175a <HAL_RCC_OscConfig+0xae>
 800172e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001732:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001736:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800173a:	fa93 f3a3 	rbit	r3, r3
 800173e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001742:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001746:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800174a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800174e:	fa93 f3a3 	rbit	r3, r3
 8001752:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001756:	4b93      	ldr	r3, [pc, #588]	; (80019a4 <HAL_RCC_OscConfig+0x2f8>)
 8001758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800175e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001762:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001766:	fa92 f2a2 	rbit	r2, r2
 800176a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800176e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001772:	fab2 f282 	clz	r2, r2
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	f042 0220 	orr.w	r2, r2, #32
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	f002 021f 	and.w	r2, r2, #31
 8001782:	2101      	movs	r1, #1
 8001784:	fa01 f202 	lsl.w	r2, r1, r2
 8001788:	4013      	ands	r3, r2
 800178a:	2b00      	cmp	r3, #0
 800178c:	f000 810c 	beq.w	80019a8 <HAL_RCC_OscConfig+0x2fc>
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	f040 8106 	bne.w	80019a8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	f000 be86 	b.w	80024ae <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ac:	d106      	bne.n	80017bc <HAL_RCC_OscConfig+0x110>
 80017ae:	4b7d      	ldr	r3, [pc, #500]	; (80019a4 <HAL_RCC_OscConfig+0x2f8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a7c      	ldr	r2, [pc, #496]	; (80019a4 <HAL_RCC_OscConfig+0x2f8>)
 80017b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	e030      	b.n	800181e <HAL_RCC_OscConfig+0x172>
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10c      	bne.n	80017e0 <HAL_RCC_OscConfig+0x134>
 80017c6:	4b77      	ldr	r3, [pc, #476]	; (80019a4 <HAL_RCC_OscConfig+0x2f8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a76      	ldr	r2, [pc, #472]	; (80019a4 <HAL_RCC_OscConfig+0x2f8>)
 80017cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	4b74      	ldr	r3, [pc, #464]	; (80019a4 <HAL_RCC_OscConfig+0x2f8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a73      	ldr	r2, [pc, #460]	; (80019a4 <HAL_RCC_OscConfig+0x2f8>)
 80017d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	e01e      	b.n	800181e <HAL_RCC_OscConfig+0x172>
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017ea:	d10c      	bne.n	8001806 <HAL_RCC_OscConfig+0x15a>
 80017ec:	4b6d      	ldr	r3, [pc, #436]	; (80019a4 <HAL_RCC_OscConfig+0x2f8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a6c      	ldr	r2, [pc, #432]	; (80019a4 <HAL_RCC_OscConfig+0x2f8>)
 80017f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	4b6a      	ldr	r3, [pc, #424]	; (80019a4 <HAL_RCC_OscConfig+0x2f8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a69      	ldr	r2, [pc, #420]	; (80019a4 <HAL_RCC_OscConfig+0x2f8>)
 80017fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	e00b      	b.n	800181e <HAL_RCC_OscConfig+0x172>
 8001806:	4b67      	ldr	r3, [pc, #412]	; (80019a4 <HAL_RCC_OscConfig+0x2f8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a66      	ldr	r2, [pc, #408]	; (80019a4 <HAL_RCC_OscConfig+0x2f8>)
 800180c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b64      	ldr	r3, [pc, #400]	; (80019a4 <HAL_RCC_OscConfig+0x2f8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a63      	ldr	r2, [pc, #396]	; (80019a4 <HAL_RCC_OscConfig+0x2f8>)
 8001818:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800181c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800181e:	4b61      	ldr	r3, [pc, #388]	; (80019a4 <HAL_RCC_OscConfig+0x2f8>)
 8001820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001822:	f023 020f 	bic.w	r2, r3, #15
 8001826:	1d3b      	adds	r3, r7, #4
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	495d      	ldr	r1, [pc, #372]	; (80019a4 <HAL_RCC_OscConfig+0x2f8>)
 800182e:	4313      	orrs	r3, r2
 8001830:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d059      	beq.n	80018f0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183c:	f7ff fc7a 	bl	8001134 <HAL_GetTick>
 8001840:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001844:	e00a      	b.n	800185c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001846:	f7ff fc75 	bl	8001134 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b64      	cmp	r3, #100	; 0x64
 8001854:	d902      	bls.n	800185c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	f000 be29 	b.w	80024ae <HAL_RCC_OscConfig+0xe02>
 800185c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001860:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001864:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001868:	fa93 f3a3 	rbit	r3, r3
 800186c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001870:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001874:	fab3 f383 	clz	r3, r3
 8001878:	b2db      	uxtb	r3, r3
 800187a:	095b      	lsrs	r3, r3, #5
 800187c:	b2db      	uxtb	r3, r3
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b01      	cmp	r3, #1
 8001886:	d102      	bne.n	800188e <HAL_RCC_OscConfig+0x1e2>
 8001888:	4b46      	ldr	r3, [pc, #280]	; (80019a4 <HAL_RCC_OscConfig+0x2f8>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	e015      	b.n	80018ba <HAL_RCC_OscConfig+0x20e>
 800188e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001892:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001896:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800189a:	fa93 f3a3 	rbit	r3, r3
 800189e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80018a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018a6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80018aa:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80018ae:	fa93 f3a3 	rbit	r3, r3
 80018b2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80018b6:	4b3b      	ldr	r3, [pc, #236]	; (80019a4 <HAL_RCC_OscConfig+0x2f8>)
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018be:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80018c2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80018c6:	fa92 f2a2 	rbit	r2, r2
 80018ca:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80018ce:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80018d2:	fab2 f282 	clz	r2, r2
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	f042 0220 	orr.w	r2, r2, #32
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	f002 021f 	and.w	r2, r2, #31
 80018e2:	2101      	movs	r1, #1
 80018e4:	fa01 f202 	lsl.w	r2, r1, r2
 80018e8:	4013      	ands	r3, r2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0ab      	beq.n	8001846 <HAL_RCC_OscConfig+0x19a>
 80018ee:	e05c      	b.n	80019aa <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f0:	f7ff fc20 	bl	8001134 <HAL_GetTick>
 80018f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018f8:	e00a      	b.n	8001910 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018fa:	f7ff fc1b 	bl	8001134 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b64      	cmp	r3, #100	; 0x64
 8001908:	d902      	bls.n	8001910 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	f000 bdcf 	b.w	80024ae <HAL_RCC_OscConfig+0xe02>
 8001910:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001914:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001918:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800191c:	fa93 f3a3 	rbit	r3, r3
 8001920:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001924:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001928:	fab3 f383 	clz	r3, r3
 800192c:	b2db      	uxtb	r3, r3
 800192e:	095b      	lsrs	r3, r3, #5
 8001930:	b2db      	uxtb	r3, r3
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b01      	cmp	r3, #1
 800193a:	d102      	bne.n	8001942 <HAL_RCC_OscConfig+0x296>
 800193c:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <HAL_RCC_OscConfig+0x2f8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	e015      	b.n	800196e <HAL_RCC_OscConfig+0x2c2>
 8001942:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001946:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800194e:	fa93 f3a3 	rbit	r3, r3
 8001952:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001956:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800195a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800195e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001962:	fa93 f3a3 	rbit	r3, r3
 8001966:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <HAL_RCC_OscConfig+0x2f8>)
 800196c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001972:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001976:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800197a:	fa92 f2a2 	rbit	r2, r2
 800197e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001982:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001986:	fab2 f282 	clz	r2, r2
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	f042 0220 	orr.w	r2, r2, #32
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	f002 021f 	and.w	r2, r2, #31
 8001996:	2101      	movs	r1, #1
 8001998:	fa01 f202 	lsl.w	r2, r1, r2
 800199c:	4013      	ands	r3, r2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1ab      	bne.n	80018fa <HAL_RCC_OscConfig+0x24e>
 80019a2:	e002      	b.n	80019aa <HAL_RCC_OscConfig+0x2fe>
 80019a4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 816f 	beq.w	8001c98 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019ba:	4bd0      	ldr	r3, [pc, #832]	; (8001cfc <HAL_RCC_OscConfig+0x650>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 030c 	and.w	r3, r3, #12
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00b      	beq.n	80019de <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019c6:	4bcd      	ldr	r3, [pc, #820]	; (8001cfc <HAL_RCC_OscConfig+0x650>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 030c 	and.w	r3, r3, #12
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	d16c      	bne.n	8001aac <HAL_RCC_OscConfig+0x400>
 80019d2:	4bca      	ldr	r3, [pc, #808]	; (8001cfc <HAL_RCC_OscConfig+0x650>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d166      	bne.n	8001aac <HAL_RCC_OscConfig+0x400>
 80019de:	2302      	movs	r3, #2
 80019e0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80019e8:	fa93 f3a3 	rbit	r3, r3
 80019ec:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80019f0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f4:	fab3 f383 	clz	r3, r3
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	095b      	lsrs	r3, r3, #5
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d102      	bne.n	8001a0e <HAL_RCC_OscConfig+0x362>
 8001a08:	4bbc      	ldr	r3, [pc, #752]	; (8001cfc <HAL_RCC_OscConfig+0x650>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	e013      	b.n	8001a36 <HAL_RCC_OscConfig+0x38a>
 8001a0e:	2302      	movs	r3, #2
 8001a10:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a14:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001a18:	fa93 f3a3 	rbit	r3, r3
 8001a1c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001a20:	2302      	movs	r3, #2
 8001a22:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001a26:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001a2a:	fa93 f3a3 	rbit	r3, r3
 8001a2e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001a32:	4bb2      	ldr	r3, [pc, #712]	; (8001cfc <HAL_RCC_OscConfig+0x650>)
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	2202      	movs	r2, #2
 8001a38:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001a3c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001a40:	fa92 f2a2 	rbit	r2, r2
 8001a44:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001a48:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001a4c:	fab2 f282 	clz	r2, r2
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	f042 0220 	orr.w	r2, r2, #32
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	f002 021f 	and.w	r2, r2, #31
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d007      	beq.n	8001a78 <HAL_RCC_OscConfig+0x3cc>
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d002      	beq.n	8001a78 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	f000 bd1b 	b.w	80024ae <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a78:	4ba0      	ldr	r3, [pc, #640]	; (8001cfc <HAL_RCC_OscConfig+0x650>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a80:	1d3b      	adds	r3, r7, #4
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	21f8      	movs	r1, #248	; 0xf8
 8001a88:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001a90:	fa91 f1a1 	rbit	r1, r1
 8001a94:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001a98:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001a9c:	fab1 f181 	clz	r1, r1
 8001aa0:	b2c9      	uxtb	r1, r1
 8001aa2:	408b      	lsls	r3, r1
 8001aa4:	4995      	ldr	r1, [pc, #596]	; (8001cfc <HAL_RCC_OscConfig+0x650>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aaa:	e0f5      	b.n	8001c98 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 8085 	beq.w	8001bc2 <HAL_RCC_OscConfig+0x516>
 8001ab8:	2301      	movs	r3, #1
 8001aba:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001ac2:	fa93 f3a3 	rbit	r3, r3
 8001ac6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001aca:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ace:	fab3 f383 	clz	r3, r3
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ad8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	461a      	mov	r2, r3
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae4:	f7ff fb26 	bl	8001134 <HAL_GetTick>
 8001ae8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aec:	e00a      	b.n	8001b04 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aee:	f7ff fb21 	bl	8001134 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d902      	bls.n	8001b04 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	f000 bcd5 	b.w	80024ae <HAL_RCC_OscConfig+0xe02>
 8001b04:	2302      	movs	r3, #2
 8001b06:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001b0e:	fa93 f3a3 	rbit	r3, r3
 8001b12:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001b16:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1a:	fab3 f383 	clz	r3, r3
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	095b      	lsrs	r3, r3, #5
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d102      	bne.n	8001b34 <HAL_RCC_OscConfig+0x488>
 8001b2e:	4b73      	ldr	r3, [pc, #460]	; (8001cfc <HAL_RCC_OscConfig+0x650>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	e013      	b.n	8001b5c <HAL_RCC_OscConfig+0x4b0>
 8001b34:	2302      	movs	r3, #2
 8001b36:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001b3e:	fa93 f3a3 	rbit	r3, r3
 8001b42:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001b46:	2302      	movs	r3, #2
 8001b48:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001b4c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001b50:	fa93 f3a3 	rbit	r3, r3
 8001b54:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001b58:	4b68      	ldr	r3, [pc, #416]	; (8001cfc <HAL_RCC_OscConfig+0x650>)
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001b62:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001b66:	fa92 f2a2 	rbit	r2, r2
 8001b6a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001b6e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001b72:	fab2 f282 	clz	r2, r2
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	f042 0220 	orr.w	r2, r2, #32
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	f002 021f 	and.w	r2, r2, #31
 8001b82:	2101      	movs	r1, #1
 8001b84:	fa01 f202 	lsl.w	r2, r1, r2
 8001b88:	4013      	ands	r3, r2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0af      	beq.n	8001aee <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8e:	4b5b      	ldr	r3, [pc, #364]	; (8001cfc <HAL_RCC_OscConfig+0x650>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	21f8      	movs	r1, #248	; 0xf8
 8001b9e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001ba6:	fa91 f1a1 	rbit	r1, r1
 8001baa:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001bae:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001bb2:	fab1 f181 	clz	r1, r1
 8001bb6:	b2c9      	uxtb	r1, r1
 8001bb8:	408b      	lsls	r3, r1
 8001bba:	4950      	ldr	r1, [pc, #320]	; (8001cfc <HAL_RCC_OscConfig+0x650>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	600b      	str	r3, [r1, #0]
 8001bc0:	e06a      	b.n	8001c98 <HAL_RCC_OscConfig+0x5ec>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001bcc:	fa93 f3a3 	rbit	r3, r3
 8001bd0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001bd4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bd8:	fab3 f383 	clz	r3, r3
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001be2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	461a      	mov	r2, r3
 8001bea:	2300      	movs	r3, #0
 8001bec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bee:	f7ff faa1 	bl	8001134 <HAL_GetTick>
 8001bf2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bf6:	e00a      	b.n	8001c0e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bf8:	f7ff fa9c 	bl	8001134 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d902      	bls.n	8001c0e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	f000 bc50 	b.w	80024ae <HAL_RCC_OscConfig+0xe02>
 8001c0e:	2302      	movs	r3, #2
 8001c10:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c14:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001c18:	fa93 f3a3 	rbit	r3, r3
 8001c1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001c20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c24:	fab3 f383 	clz	r3, r3
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	095b      	lsrs	r3, r3, #5
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d102      	bne.n	8001c3e <HAL_RCC_OscConfig+0x592>
 8001c38:	4b30      	ldr	r3, [pc, #192]	; (8001cfc <HAL_RCC_OscConfig+0x650>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	e013      	b.n	8001c66 <HAL_RCC_OscConfig+0x5ba>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001c48:	fa93 f3a3 	rbit	r3, r3
 8001c4c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001c50:	2302      	movs	r3, #2
 8001c52:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001c56:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001c5a:	fa93 f3a3 	rbit	r3, r3
 8001c5e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001c62:	4b26      	ldr	r3, [pc, #152]	; (8001cfc <HAL_RCC_OscConfig+0x650>)
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c66:	2202      	movs	r2, #2
 8001c68:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001c6c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001c70:	fa92 f2a2 	rbit	r2, r2
 8001c74:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001c78:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001c7c:	fab2 f282 	clz	r2, r2
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	f042 0220 	orr.w	r2, r2, #32
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	f002 021f 	and.w	r2, r2, #31
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1af      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c98:	1d3b      	adds	r3, r7, #4
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f000 80da 	beq.w	8001e5c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d069      	beq.n	8001d86 <HAL_RCC_OscConfig+0x6da>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001cbc:	fa93 f3a3 	rbit	r3, r3
 8001cc0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cc8:	fab3 f383 	clz	r3, r3
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <HAL_RCC_OscConfig+0x654>)
 8001cd2:	4413      	add	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	2301      	movs	r3, #1
 8001cda:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cdc:	f7ff fa2a 	bl	8001134 <HAL_GetTick>
 8001ce0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce4:	e00e      	b.n	8001d04 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ce6:	f7ff fa25 	bl	8001134 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d906      	bls.n	8001d04 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e3d9      	b.n	80024ae <HAL_RCC_OscConfig+0xe02>
 8001cfa:	bf00      	nop
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	10908120 	.word	0x10908120
 8001d04:	2302      	movs	r3, #2
 8001d06:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001d0e:	fa93 f3a3 	rbit	r3, r3
 8001d12:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001d16:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	fa93 f2a3 	rbit	r2, r3
 8001d28:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001d32:	2202      	movs	r2, #2
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	fa93 f2a3 	rbit	r2, r3
 8001d40:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001d44:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d46:	4ba5      	ldr	r3, [pc, #660]	; (8001fdc <HAL_RCC_OscConfig+0x930>)
 8001d48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d4a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001d4e:	2102      	movs	r1, #2
 8001d50:	6019      	str	r1, [r3, #0]
 8001d52:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	fa93 f1a3 	rbit	r1, r3
 8001d5c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001d60:	6019      	str	r1, [r3, #0]
  return result;
 8001d62:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	fab3 f383 	clz	r3, r3
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	f003 031f 	and.w	r3, r3, #31
 8001d78:	2101      	movs	r1, #1
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0b0      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x63a>
 8001d84:	e06a      	b.n	8001e5c <HAL_RCC_OscConfig+0x7b0>
 8001d86:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	fa93 f2a3 	rbit	r2, r3
 8001d98:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001d9c:	601a      	str	r2, [r3, #0]
  return result;
 8001d9e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001da2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001da4:	fab3 f383 	clz	r3, r3
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	461a      	mov	r2, r3
 8001dac:	4b8c      	ldr	r3, [pc, #560]	; (8001fe0 <HAL_RCC_OscConfig+0x934>)
 8001dae:	4413      	add	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	461a      	mov	r2, r3
 8001db4:	2300      	movs	r3, #0
 8001db6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db8:	f7ff f9bc 	bl	8001134 <HAL_GetTick>
 8001dbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dc0:	e009      	b.n	8001dd6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dc2:	f7ff f9b7 	bl	8001134 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e36b      	b.n	80024ae <HAL_RCC_OscConfig+0xe02>
 8001dd6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001dda:	2202      	movs	r2, #2
 8001ddc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dde:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	fa93 f2a3 	rbit	r2, r3
 8001de8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001df2:	2202      	movs	r2, #2
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	fa93 f2a3 	rbit	r2, r3
 8001e00:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	fa93 f2a3 	rbit	r2, r3
 8001e18:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e1c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e1e:	4b6f      	ldr	r3, [pc, #444]	; (8001fdc <HAL_RCC_OscConfig+0x930>)
 8001e20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e22:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001e26:	2102      	movs	r1, #2
 8001e28:	6019      	str	r1, [r3, #0]
 8001e2a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	fa93 f1a3 	rbit	r1, r3
 8001e34:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e38:	6019      	str	r1, [r3, #0]
  return result;
 8001e3a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	fab3 f383 	clz	r3, r3
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	f003 031f 	and.w	r3, r3, #31
 8001e50:	2101      	movs	r1, #1
 8001e52:	fa01 f303 	lsl.w	r3, r1, r3
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1b2      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e5c:	1d3b      	adds	r3, r7, #4
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 8158 	beq.w	800211c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e72:	4b5a      	ldr	r3, [pc, #360]	; (8001fdc <HAL_RCC_OscConfig+0x930>)
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d112      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e7e:	4b57      	ldr	r3, [pc, #348]	; (8001fdc <HAL_RCC_OscConfig+0x930>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	4a56      	ldr	r2, [pc, #344]	; (8001fdc <HAL_RCC_OscConfig+0x930>)
 8001e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e88:	61d3      	str	r3, [r2, #28]
 8001e8a:	4b54      	ldr	r3, [pc, #336]	; (8001fdc <HAL_RCC_OscConfig+0x930>)
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001e92:	f107 0308 	add.w	r3, r7, #8
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	f107 0308 	add.w	r3, r7, #8
 8001e9c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea4:	4b4f      	ldr	r3, [pc, #316]	; (8001fe4 <HAL_RCC_OscConfig+0x938>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d11a      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eb0:	4b4c      	ldr	r3, [pc, #304]	; (8001fe4 <HAL_RCC_OscConfig+0x938>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a4b      	ldr	r2, [pc, #300]	; (8001fe4 <HAL_RCC_OscConfig+0x938>)
 8001eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eba:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ebc:	f7ff f93a 	bl	8001134 <HAL_GetTick>
 8001ec0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec4:	e009      	b.n	8001eda <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec6:	f7ff f935 	bl	8001134 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b64      	cmp	r3, #100	; 0x64
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e2e9      	b.n	80024ae <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eda:	4b42      	ldr	r3, [pc, #264]	; (8001fe4 <HAL_RCC_OscConfig+0x938>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0ef      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d106      	bne.n	8001efe <HAL_RCC_OscConfig+0x852>
 8001ef0:	4b3a      	ldr	r3, [pc, #232]	; (8001fdc <HAL_RCC_OscConfig+0x930>)
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	4a39      	ldr	r2, [pc, #228]	; (8001fdc <HAL_RCC_OscConfig+0x930>)
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	6213      	str	r3, [r2, #32]
 8001efc:	e02f      	b.n	8001f5e <HAL_RCC_OscConfig+0x8b2>
 8001efe:	1d3b      	adds	r3, r7, #4
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10c      	bne.n	8001f22 <HAL_RCC_OscConfig+0x876>
 8001f08:	4b34      	ldr	r3, [pc, #208]	; (8001fdc <HAL_RCC_OscConfig+0x930>)
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	4a33      	ldr	r2, [pc, #204]	; (8001fdc <HAL_RCC_OscConfig+0x930>)
 8001f0e:	f023 0301 	bic.w	r3, r3, #1
 8001f12:	6213      	str	r3, [r2, #32]
 8001f14:	4b31      	ldr	r3, [pc, #196]	; (8001fdc <HAL_RCC_OscConfig+0x930>)
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	4a30      	ldr	r2, [pc, #192]	; (8001fdc <HAL_RCC_OscConfig+0x930>)
 8001f1a:	f023 0304 	bic.w	r3, r3, #4
 8001f1e:	6213      	str	r3, [r2, #32]
 8001f20:	e01d      	b.n	8001f5e <HAL_RCC_OscConfig+0x8b2>
 8001f22:	1d3b      	adds	r3, r7, #4
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	2b05      	cmp	r3, #5
 8001f2a:	d10c      	bne.n	8001f46 <HAL_RCC_OscConfig+0x89a>
 8001f2c:	4b2b      	ldr	r3, [pc, #172]	; (8001fdc <HAL_RCC_OscConfig+0x930>)
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	4a2a      	ldr	r2, [pc, #168]	; (8001fdc <HAL_RCC_OscConfig+0x930>)
 8001f32:	f043 0304 	orr.w	r3, r3, #4
 8001f36:	6213      	str	r3, [r2, #32]
 8001f38:	4b28      	ldr	r3, [pc, #160]	; (8001fdc <HAL_RCC_OscConfig+0x930>)
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	4a27      	ldr	r2, [pc, #156]	; (8001fdc <HAL_RCC_OscConfig+0x930>)
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	6213      	str	r3, [r2, #32]
 8001f44:	e00b      	b.n	8001f5e <HAL_RCC_OscConfig+0x8b2>
 8001f46:	4b25      	ldr	r3, [pc, #148]	; (8001fdc <HAL_RCC_OscConfig+0x930>)
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	4a24      	ldr	r2, [pc, #144]	; (8001fdc <HAL_RCC_OscConfig+0x930>)
 8001f4c:	f023 0301 	bic.w	r3, r3, #1
 8001f50:	6213      	str	r3, [r2, #32]
 8001f52:	4b22      	ldr	r3, [pc, #136]	; (8001fdc <HAL_RCC_OscConfig+0x930>)
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	4a21      	ldr	r2, [pc, #132]	; (8001fdc <HAL_RCC_OscConfig+0x930>)
 8001f58:	f023 0304 	bic.w	r3, r3, #4
 8001f5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d06b      	beq.n	8002040 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f68:	f7ff f8e4 	bl	8001134 <HAL_GetTick>
 8001f6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f70:	e00b      	b.n	8001f8a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f72:	f7ff f8df 	bl	8001134 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e291      	b.n	80024ae <HAL_RCC_OscConfig+0xe02>
 8001f8a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001f8e:	2202      	movs	r2, #2
 8001f90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	fa93 f2a3 	rbit	r2, r3
 8001f9c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	fa93 f2a3 	rbit	r2, r3
 8001fb4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001fb8:	601a      	str	r2, [r3, #0]
  return result;
 8001fba:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001fbe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc0:	fab3 f383 	clz	r3, r3
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	095b      	lsrs	r3, r3, #5
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	f043 0302 	orr.w	r3, r3, #2
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d109      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x93c>
 8001fd4:	4b01      	ldr	r3, [pc, #4]	; (8001fdc <HAL_RCC_OscConfig+0x930>)
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	e014      	b.n	8002004 <HAL_RCC_OscConfig+0x958>
 8001fda:	bf00      	nop
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	10908120 	.word	0x10908120
 8001fe4:	40007000 	.word	0x40007000
 8001fe8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001fec:	2202      	movs	r2, #2
 8001fee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	fa93 f2a3 	rbit	r2, r3
 8001ffa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	4bbb      	ldr	r3, [pc, #748]	; (80022f0 <HAL_RCC_OscConfig+0xc44>)
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002008:	2102      	movs	r1, #2
 800200a:	6011      	str	r1, [r2, #0]
 800200c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002010:	6812      	ldr	r2, [r2, #0]
 8002012:	fa92 f1a2 	rbit	r1, r2
 8002016:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800201a:	6011      	str	r1, [r2, #0]
  return result;
 800201c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002020:	6812      	ldr	r2, [r2, #0]
 8002022:	fab2 f282 	clz	r2, r2
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	f002 021f 	and.w	r2, r2, #31
 8002032:	2101      	movs	r1, #1
 8002034:	fa01 f202 	lsl.w	r2, r1, r2
 8002038:	4013      	ands	r3, r2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d099      	beq.n	8001f72 <HAL_RCC_OscConfig+0x8c6>
 800203e:	e063      	b.n	8002108 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002040:	f7ff f878 	bl	8001134 <HAL_GetTick>
 8002044:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002048:	e00b      	b.n	8002062 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800204a:	f7ff f873 	bl	8001134 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	f241 3288 	movw	r2, #5000	; 0x1388
 800205a:	4293      	cmp	r3, r2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e225      	b.n	80024ae <HAL_RCC_OscConfig+0xe02>
 8002062:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002066:	2202      	movs	r2, #2
 8002068:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	fa93 f2a3 	rbit	r2, r3
 8002074:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800207e:	2202      	movs	r2, #2
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	fa93 f2a3 	rbit	r2, r3
 800208c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002090:	601a      	str	r2, [r3, #0]
  return result;
 8002092:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002096:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002098:	fab3 f383 	clz	r3, r3
 800209c:	b2db      	uxtb	r3, r3
 800209e:	095b      	lsrs	r3, r3, #5
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	f043 0302 	orr.w	r3, r3, #2
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d102      	bne.n	80020b2 <HAL_RCC_OscConfig+0xa06>
 80020ac:	4b90      	ldr	r3, [pc, #576]	; (80022f0 <HAL_RCC_OscConfig+0xc44>)
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	e00d      	b.n	80020ce <HAL_RCC_OscConfig+0xa22>
 80020b2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80020b6:	2202      	movs	r2, #2
 80020b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	fa93 f2a3 	rbit	r2, r3
 80020c4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	4b89      	ldr	r3, [pc, #548]	; (80022f0 <HAL_RCC_OscConfig+0xc44>)
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ce:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80020d2:	2102      	movs	r1, #2
 80020d4:	6011      	str	r1, [r2, #0]
 80020d6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80020da:	6812      	ldr	r2, [r2, #0]
 80020dc:	fa92 f1a2 	rbit	r1, r2
 80020e0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80020e4:	6011      	str	r1, [r2, #0]
  return result;
 80020e6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80020ea:	6812      	ldr	r2, [r2, #0]
 80020ec:	fab2 f282 	clz	r2, r2
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	f002 021f 	and.w	r2, r2, #31
 80020fc:	2101      	movs	r1, #1
 80020fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002102:	4013      	ands	r3, r2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1a0      	bne.n	800204a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002108:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800210c:	2b01      	cmp	r3, #1
 800210e:	d105      	bne.n	800211c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002110:	4b77      	ldr	r3, [pc, #476]	; (80022f0 <HAL_RCC_OscConfig+0xc44>)
 8002112:	69db      	ldr	r3, [r3, #28]
 8002114:	4a76      	ldr	r2, [pc, #472]	; (80022f0 <HAL_RCC_OscConfig+0xc44>)
 8002116:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800211a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800211c:	1d3b      	adds	r3, r7, #4
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 81c2 	beq.w	80024ac <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002128:	4b71      	ldr	r3, [pc, #452]	; (80022f0 <HAL_RCC_OscConfig+0xc44>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 030c 	and.w	r3, r3, #12
 8002130:	2b08      	cmp	r3, #8
 8002132:	f000 819c 	beq.w	800246e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002136:	1d3b      	adds	r3, r7, #4
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	2b02      	cmp	r3, #2
 800213e:	f040 8114 	bne.w	800236a <HAL_RCC_OscConfig+0xcbe>
 8002142:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002146:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800214a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	fa93 f2a3 	rbit	r2, r3
 8002156:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800215a:	601a      	str	r2, [r3, #0]
  return result;
 800215c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002160:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002162:	fab3 f383 	clz	r3, r3
 8002166:	b2db      	uxtb	r3, r3
 8002168:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800216c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	461a      	mov	r2, r3
 8002174:	2300      	movs	r3, #0
 8002176:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002178:	f7fe ffdc 	bl	8001134 <HAL_GetTick>
 800217c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002180:	e009      	b.n	8002196 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002182:	f7fe ffd7 	bl	8001134 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e18b      	b.n	80024ae <HAL_RCC_OscConfig+0xe02>
 8002196:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800219a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800219e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	fa93 f2a3 	rbit	r2, r3
 80021aa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80021ae:	601a      	str	r2, [r3, #0]
  return result;
 80021b0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80021b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b6:	fab3 f383 	clz	r3, r3
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	095b      	lsrs	r3, r3, #5
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d102      	bne.n	80021d0 <HAL_RCC_OscConfig+0xb24>
 80021ca:	4b49      	ldr	r3, [pc, #292]	; (80022f0 <HAL_RCC_OscConfig+0xc44>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	e01b      	b.n	8002208 <HAL_RCC_OscConfig+0xb5c>
 80021d0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80021d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021da:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	fa93 f2a3 	rbit	r2, r3
 80021e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80021ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	fa93 f2a3 	rbit	r2, r3
 80021fe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	4b3a      	ldr	r3, [pc, #232]	; (80022f0 <HAL_RCC_OscConfig+0xc44>)
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800220c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002210:	6011      	str	r1, [r2, #0]
 8002212:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	fa92 f1a2 	rbit	r1, r2
 800221c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002220:	6011      	str	r1, [r2, #0]
  return result;
 8002222:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002226:	6812      	ldr	r2, [r2, #0]
 8002228:	fab2 f282 	clz	r2, r2
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	f042 0220 	orr.w	r2, r2, #32
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	f002 021f 	and.w	r2, r2, #31
 8002238:	2101      	movs	r1, #1
 800223a:	fa01 f202 	lsl.w	r2, r1, r2
 800223e:	4013      	ands	r3, r2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d19e      	bne.n	8002182 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002244:	4b2a      	ldr	r3, [pc, #168]	; (80022f0 <HAL_RCC_OscConfig+0xc44>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800224c:	1d3b      	adds	r3, r7, #4
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002252:	1d3b      	adds	r3, r7, #4
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	430b      	orrs	r3, r1
 800225a:	4925      	ldr	r1, [pc, #148]	; (80022f0 <HAL_RCC_OscConfig+0xc44>)
 800225c:	4313      	orrs	r3, r2
 800225e:	604b      	str	r3, [r1, #4]
 8002260:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002264:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002268:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	fa93 f2a3 	rbit	r2, r3
 8002274:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002278:	601a      	str	r2, [r3, #0]
  return result;
 800227a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800227e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002280:	fab3 f383 	clz	r3, r3
 8002284:	b2db      	uxtb	r3, r3
 8002286:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800228a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	461a      	mov	r2, r3
 8002292:	2301      	movs	r3, #1
 8002294:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002296:	f7fe ff4d 	bl	8001134 <HAL_GetTick>
 800229a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800229e:	e009      	b.n	80022b4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022a0:	f7fe ff48 	bl	8001134 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e0fc      	b.n	80024ae <HAL_RCC_OscConfig+0xe02>
 80022b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80022b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	fa93 f2a3 	rbit	r2, r3
 80022c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80022cc:	601a      	str	r2, [r3, #0]
  return result;
 80022ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80022d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022d4:	fab3 f383 	clz	r3, r3
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	095b      	lsrs	r3, r3, #5
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d105      	bne.n	80022f4 <HAL_RCC_OscConfig+0xc48>
 80022e8:	4b01      	ldr	r3, [pc, #4]	; (80022f0 <HAL_RCC_OscConfig+0xc44>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	e01e      	b.n	800232c <HAL_RCC_OscConfig+0xc80>
 80022ee:	bf00      	nop
 80022f0:	40021000 	.word	0x40021000
 80022f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	fa93 f2a3 	rbit	r2, r3
 8002308:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002312:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	fa93 f2a3 	rbit	r2, r3
 8002322:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	4b63      	ldr	r3, [pc, #396]	; (80024b8 <HAL_RCC_OscConfig+0xe0c>)
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002330:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002334:	6011      	str	r1, [r2, #0]
 8002336:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800233a:	6812      	ldr	r2, [r2, #0]
 800233c:	fa92 f1a2 	rbit	r1, r2
 8002340:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002344:	6011      	str	r1, [r2, #0]
  return result;
 8002346:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800234a:	6812      	ldr	r2, [r2, #0]
 800234c:	fab2 f282 	clz	r2, r2
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	f042 0220 	orr.w	r2, r2, #32
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	f002 021f 	and.w	r2, r2, #31
 800235c:	2101      	movs	r1, #1
 800235e:	fa01 f202 	lsl.w	r2, r1, r2
 8002362:	4013      	ands	r3, r2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d09b      	beq.n	80022a0 <HAL_RCC_OscConfig+0xbf4>
 8002368:	e0a0      	b.n	80024ac <HAL_RCC_OscConfig+0xe00>
 800236a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800236e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002372:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002374:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	fa93 f2a3 	rbit	r2, r3
 800237e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002382:	601a      	str	r2, [r3, #0]
  return result;
 8002384:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002388:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800238a:	fab3 f383 	clz	r3, r3
 800238e:	b2db      	uxtb	r3, r3
 8002390:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002394:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	461a      	mov	r2, r3
 800239c:	2300      	movs	r3, #0
 800239e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a0:	f7fe fec8 	bl	8001134 <HAL_GetTick>
 80023a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023a8:	e009      	b.n	80023be <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023aa:	f7fe fec3 	bl	8001134 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e077      	b.n	80024ae <HAL_RCC_OscConfig+0xe02>
 80023be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	fa93 f2a3 	rbit	r2, r3
 80023d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023d6:	601a      	str	r2, [r3, #0]
  return result;
 80023d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023dc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023de:	fab3 f383 	clz	r3, r3
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	095b      	lsrs	r3, r3, #5
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d102      	bne.n	80023f8 <HAL_RCC_OscConfig+0xd4c>
 80023f2:	4b31      	ldr	r3, [pc, #196]	; (80024b8 <HAL_RCC_OscConfig+0xe0c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	e01b      	b.n	8002430 <HAL_RCC_OscConfig+0xd84>
 80023f8:	f107 0320 	add.w	r3, r7, #32
 80023fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002400:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002402:	f107 0320 	add.w	r3, r7, #32
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	fa93 f2a3 	rbit	r2, r3
 800240c:	f107 031c 	add.w	r3, r7, #28
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	f107 0318 	add.w	r3, r7, #24
 8002416:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	f107 0318 	add.w	r3, r7, #24
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	fa93 f2a3 	rbit	r2, r3
 8002426:	f107 0314 	add.w	r3, r7, #20
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	4b22      	ldr	r3, [pc, #136]	; (80024b8 <HAL_RCC_OscConfig+0xe0c>)
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	f107 0210 	add.w	r2, r7, #16
 8002434:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002438:	6011      	str	r1, [r2, #0]
 800243a:	f107 0210 	add.w	r2, r7, #16
 800243e:	6812      	ldr	r2, [r2, #0]
 8002440:	fa92 f1a2 	rbit	r1, r2
 8002444:	f107 020c 	add.w	r2, r7, #12
 8002448:	6011      	str	r1, [r2, #0]
  return result;
 800244a:	f107 020c 	add.w	r2, r7, #12
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	fab2 f282 	clz	r2, r2
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	f042 0220 	orr.w	r2, r2, #32
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	f002 021f 	and.w	r2, r2, #31
 8002460:	2101      	movs	r1, #1
 8002462:	fa01 f202 	lsl.w	r2, r1, r2
 8002466:	4013      	ands	r3, r2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d19e      	bne.n	80023aa <HAL_RCC_OscConfig+0xcfe>
 800246c:	e01e      	b.n	80024ac <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800246e:	1d3b      	adds	r3, r7, #4
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d101      	bne.n	800247c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e018      	b.n	80024ae <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800247c:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <HAL_RCC_OscConfig+0xe0c>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002484:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002488:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800248c:	1d3b      	adds	r3, r7, #4
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	429a      	cmp	r2, r3
 8002494:	d108      	bne.n	80024a8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002496:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800249a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800249e:	1d3b      	adds	r3, r7, #4
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d001      	beq.n	80024ac <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e000      	b.n	80024ae <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40021000 	.word	0x40021000

080024bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b09e      	sub	sp, #120	; 0x78
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e162      	b.n	800279a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024d4:	4b90      	ldr	r3, [pc, #576]	; (8002718 <HAL_RCC_ClockConfig+0x25c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d910      	bls.n	8002504 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e2:	4b8d      	ldr	r3, [pc, #564]	; (8002718 <HAL_RCC_ClockConfig+0x25c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f023 0207 	bic.w	r2, r3, #7
 80024ea:	498b      	ldr	r1, [pc, #556]	; (8002718 <HAL_RCC_ClockConfig+0x25c>)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f2:	4b89      	ldr	r3, [pc, #548]	; (8002718 <HAL_RCC_ClockConfig+0x25c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d001      	beq.n	8002504 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e14a      	b.n	800279a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d008      	beq.n	8002522 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002510:	4b82      	ldr	r3, [pc, #520]	; (800271c <HAL_RCC_ClockConfig+0x260>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	497f      	ldr	r1, [pc, #508]	; (800271c <HAL_RCC_ClockConfig+0x260>)
 800251e:	4313      	orrs	r3, r2
 8002520:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 80dc 	beq.w	80026e8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d13c      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xf6>
 8002538:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800253c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002540:	fa93 f3a3 	rbit	r3, r3
 8002544:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002548:	fab3 f383 	clz	r3, r3
 800254c:	b2db      	uxtb	r3, r3
 800254e:	095b      	lsrs	r3, r3, #5
 8002550:	b2db      	uxtb	r3, r3
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b01      	cmp	r3, #1
 800255a:	d102      	bne.n	8002562 <HAL_RCC_ClockConfig+0xa6>
 800255c:	4b6f      	ldr	r3, [pc, #444]	; (800271c <HAL_RCC_ClockConfig+0x260>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	e00f      	b.n	8002582 <HAL_RCC_ClockConfig+0xc6>
 8002562:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002566:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002568:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800256a:	fa93 f3a3 	rbit	r3, r3
 800256e:	667b      	str	r3, [r7, #100]	; 0x64
 8002570:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002574:	663b      	str	r3, [r7, #96]	; 0x60
 8002576:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002578:	fa93 f3a3 	rbit	r3, r3
 800257c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800257e:	4b67      	ldr	r3, [pc, #412]	; (800271c <HAL_RCC_ClockConfig+0x260>)
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002582:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002586:	65ba      	str	r2, [r7, #88]	; 0x58
 8002588:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800258a:	fa92 f2a2 	rbit	r2, r2
 800258e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002590:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002592:	fab2 f282 	clz	r2, r2
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	f042 0220 	orr.w	r2, r2, #32
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	f002 021f 	and.w	r2, r2, #31
 80025a2:	2101      	movs	r1, #1
 80025a4:	fa01 f202 	lsl.w	r2, r1, r2
 80025a8:	4013      	ands	r3, r2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d17b      	bne.n	80026a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e0f3      	b.n	800279a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d13c      	bne.n	8002634 <HAL_RCC_ClockConfig+0x178>
 80025ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025c2:	fa93 f3a3 	rbit	r3, r3
 80025c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80025c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ca:	fab3 f383 	clz	r3, r3
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	095b      	lsrs	r3, r3, #5
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d102      	bne.n	80025e4 <HAL_RCC_ClockConfig+0x128>
 80025de:	4b4f      	ldr	r3, [pc, #316]	; (800271c <HAL_RCC_ClockConfig+0x260>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	e00f      	b.n	8002604 <HAL_RCC_ClockConfig+0x148>
 80025e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025ec:	fa93 f3a3 	rbit	r3, r3
 80025f0:	647b      	str	r3, [r7, #68]	; 0x44
 80025f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025f6:	643b      	str	r3, [r7, #64]	; 0x40
 80025f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025fa:	fa93 f3a3 	rbit	r3, r3
 80025fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002600:	4b46      	ldr	r3, [pc, #280]	; (800271c <HAL_RCC_ClockConfig+0x260>)
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002608:	63ba      	str	r2, [r7, #56]	; 0x38
 800260a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800260c:	fa92 f2a2 	rbit	r2, r2
 8002610:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002612:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002614:	fab2 f282 	clz	r2, r2
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	f042 0220 	orr.w	r2, r2, #32
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	f002 021f 	and.w	r2, r2, #31
 8002624:	2101      	movs	r1, #1
 8002626:	fa01 f202 	lsl.w	r2, r1, r2
 800262a:	4013      	ands	r3, r2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d13a      	bne.n	80026a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0b2      	b.n	800279a <HAL_RCC_ClockConfig+0x2de>
 8002634:	2302      	movs	r3, #2
 8002636:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263a:	fa93 f3a3 	rbit	r3, r3
 800263e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002642:	fab3 f383 	clz	r3, r3
 8002646:	b2db      	uxtb	r3, r3
 8002648:	095b      	lsrs	r3, r3, #5
 800264a:	b2db      	uxtb	r3, r3
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b01      	cmp	r3, #1
 8002654:	d102      	bne.n	800265c <HAL_RCC_ClockConfig+0x1a0>
 8002656:	4b31      	ldr	r3, [pc, #196]	; (800271c <HAL_RCC_ClockConfig+0x260>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	e00d      	b.n	8002678 <HAL_RCC_ClockConfig+0x1bc>
 800265c:	2302      	movs	r3, #2
 800265e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002662:	fa93 f3a3 	rbit	r3, r3
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
 8002668:	2302      	movs	r3, #2
 800266a:	623b      	str	r3, [r7, #32]
 800266c:	6a3b      	ldr	r3, [r7, #32]
 800266e:	fa93 f3a3 	rbit	r3, r3
 8002672:	61fb      	str	r3, [r7, #28]
 8002674:	4b29      	ldr	r3, [pc, #164]	; (800271c <HAL_RCC_ClockConfig+0x260>)
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	2202      	movs	r2, #2
 800267a:	61ba      	str	r2, [r7, #24]
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	fa92 f2a2 	rbit	r2, r2
 8002682:	617a      	str	r2, [r7, #20]
  return result;
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	fab2 f282 	clz	r2, r2
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	f042 0220 	orr.w	r2, r2, #32
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	f002 021f 	and.w	r2, r2, #31
 8002696:	2101      	movs	r1, #1
 8002698:	fa01 f202 	lsl.w	r2, r1, r2
 800269c:	4013      	ands	r3, r2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e079      	b.n	800279a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026a6:	4b1d      	ldr	r3, [pc, #116]	; (800271c <HAL_RCC_ClockConfig+0x260>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f023 0203 	bic.w	r2, r3, #3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	491a      	ldr	r1, [pc, #104]	; (800271c <HAL_RCC_ClockConfig+0x260>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026b8:	f7fe fd3c 	bl	8001134 <HAL_GetTick>
 80026bc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026be:	e00a      	b.n	80026d6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c0:	f7fe fd38 	bl	8001134 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e061      	b.n	800279a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d6:	4b11      	ldr	r3, [pc, #68]	; (800271c <HAL_RCC_ClockConfig+0x260>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f003 020c 	and.w	r2, r3, #12
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d1eb      	bne.n	80026c0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026e8:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <HAL_RCC_ClockConfig+0x25c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d214      	bcs.n	8002720 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f6:	4b08      	ldr	r3, [pc, #32]	; (8002718 <HAL_RCC_ClockConfig+0x25c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f023 0207 	bic.w	r2, r3, #7
 80026fe:	4906      	ldr	r1, [pc, #24]	; (8002718 <HAL_RCC_ClockConfig+0x25c>)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	4313      	orrs	r3, r2
 8002704:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002706:	4b04      	ldr	r3, [pc, #16]	; (8002718 <HAL_RCC_ClockConfig+0x25c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d005      	beq.n	8002720 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e040      	b.n	800279a <HAL_RCC_ClockConfig+0x2de>
 8002718:	40022000 	.word	0x40022000
 800271c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800272c:	4b1d      	ldr	r3, [pc, #116]	; (80027a4 <HAL_RCC_ClockConfig+0x2e8>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	491a      	ldr	r1, [pc, #104]	; (80027a4 <HAL_RCC_ClockConfig+0x2e8>)
 800273a:	4313      	orrs	r3, r2
 800273c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d009      	beq.n	800275e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800274a:	4b16      	ldr	r3, [pc, #88]	; (80027a4 <HAL_RCC_ClockConfig+0x2e8>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4912      	ldr	r1, [pc, #72]	; (80027a4 <HAL_RCC_ClockConfig+0x2e8>)
 800275a:	4313      	orrs	r3, r2
 800275c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800275e:	f000 f829 	bl	80027b4 <HAL_RCC_GetSysClockFreq>
 8002762:	4601      	mov	r1, r0
 8002764:	4b0f      	ldr	r3, [pc, #60]	; (80027a4 <HAL_RCC_ClockConfig+0x2e8>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800276c:	22f0      	movs	r2, #240	; 0xf0
 800276e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	fa92 f2a2 	rbit	r2, r2
 8002776:	60fa      	str	r2, [r7, #12]
  return result;
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	fab2 f282 	clz	r2, r2
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	40d3      	lsrs	r3, r2
 8002782:	4a09      	ldr	r2, [pc, #36]	; (80027a8 <HAL_RCC_ClockConfig+0x2ec>)
 8002784:	5cd3      	ldrb	r3, [r2, r3]
 8002786:	fa21 f303 	lsr.w	r3, r1, r3
 800278a:	4a08      	ldr	r2, [pc, #32]	; (80027ac <HAL_RCC_ClockConfig+0x2f0>)
 800278c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800278e:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <HAL_RCC_ClockConfig+0x2f4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f7fe fc8a 	bl	80010ac <HAL_InitTick>
  
  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3778      	adds	r7, #120	; 0x78
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40021000 	.word	0x40021000
 80027a8:	0800476c 	.word	0x0800476c
 80027ac:	20000008 	.word	0x20000008
 80027b0:	2000000c 	.word	0x2000000c

080027b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b08b      	sub	sp, #44	; 0x2c
 80027b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61fb      	str	r3, [r7, #28]
 80027be:	2300      	movs	r3, #0
 80027c0:	61bb      	str	r3, [r7, #24]
 80027c2:	2300      	movs	r3, #0
 80027c4:	627b      	str	r3, [r7, #36]	; 0x24
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80027ce:	4b29      	ldr	r3, [pc, #164]	; (8002874 <HAL_RCC_GetSysClockFreq+0xc0>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	f003 030c 	and.w	r3, r3, #12
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d002      	beq.n	80027e4 <HAL_RCC_GetSysClockFreq+0x30>
 80027de:	2b08      	cmp	r3, #8
 80027e0:	d003      	beq.n	80027ea <HAL_RCC_GetSysClockFreq+0x36>
 80027e2:	e03c      	b.n	800285e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027e4:	4b24      	ldr	r3, [pc, #144]	; (8002878 <HAL_RCC_GetSysClockFreq+0xc4>)
 80027e6:	623b      	str	r3, [r7, #32]
      break;
 80027e8:	e03c      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80027f0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80027f4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	fa92 f2a2 	rbit	r2, r2
 80027fc:	607a      	str	r2, [r7, #4]
  return result;
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	fab2 f282 	clz	r2, r2
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	40d3      	lsrs	r3, r2
 8002808:	4a1c      	ldr	r2, [pc, #112]	; (800287c <HAL_RCC_GetSysClockFreq+0xc8>)
 800280a:	5cd3      	ldrb	r3, [r2, r3]
 800280c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800280e:	4b19      	ldr	r3, [pc, #100]	; (8002874 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	220f      	movs	r2, #15
 8002818:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	fa92 f2a2 	rbit	r2, r2
 8002820:	60fa      	str	r2, [r7, #12]
  return result;
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	fab2 f282 	clz	r2, r2
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	40d3      	lsrs	r3, r2
 800282c:	4a14      	ldr	r2, [pc, #80]	; (8002880 <HAL_RCC_GetSysClockFreq+0xcc>)
 800282e:	5cd3      	ldrb	r3, [r2, r3]
 8002830:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d008      	beq.n	800284e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800283c:	4a0e      	ldr	r2, [pc, #56]	; (8002878 <HAL_RCC_GetSysClockFreq+0xc4>)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	fbb2 f2f3 	udiv	r2, r2, r3
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	fb02 f303 	mul.w	r3, r2, r3
 800284a:	627b      	str	r3, [r7, #36]	; 0x24
 800284c:	e004      	b.n	8002858 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	4a0c      	ldr	r2, [pc, #48]	; (8002884 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002852:	fb02 f303 	mul.w	r3, r2, r3
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	623b      	str	r3, [r7, #32]
      break;
 800285c:	e002      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800285e:	4b06      	ldr	r3, [pc, #24]	; (8002878 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002860:	623b      	str	r3, [r7, #32]
      break;
 8002862:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002864:	6a3b      	ldr	r3, [r7, #32]
}
 8002866:	4618      	mov	r0, r3
 8002868:	372c      	adds	r7, #44	; 0x2c
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40021000 	.word	0x40021000
 8002878:	007a1200 	.word	0x007a1200
 800287c:	08004784 	.word	0x08004784
 8002880:	08004794 	.word	0x08004794
 8002884:	003d0900 	.word	0x003d0900

08002888 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800288c:	4b03      	ldr	r3, [pc, #12]	; (800289c <HAL_RCC_GetHCLKFreq+0x14>)
 800288e:	681b      	ldr	r3, [r3, #0]
}
 8002890:	4618      	mov	r0, r3
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	20000008 	.word	0x20000008

080028a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80028a6:	f7ff ffef 	bl	8002888 <HAL_RCC_GetHCLKFreq>
 80028aa:	4601      	mov	r1, r0
 80028ac:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028b4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80028b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	fa92 f2a2 	rbit	r2, r2
 80028c0:	603a      	str	r2, [r7, #0]
  return result;
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	fab2 f282 	clz	r2, r2
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	40d3      	lsrs	r3, r2
 80028cc:	4a04      	ldr	r2, [pc, #16]	; (80028e0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80028ce:	5cd3      	ldrb	r3, [r2, r3]
 80028d0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80028d4:	4618      	mov	r0, r3
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40021000 	.word	0x40021000
 80028e0:	0800477c 	.word	0x0800477c

080028e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80028ea:	f7ff ffcd 	bl	8002888 <HAL_RCC_GetHCLKFreq>
 80028ee:	4601      	mov	r1, r0
 80028f0:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80028f8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80028fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	fa92 f2a2 	rbit	r2, r2
 8002904:	603a      	str	r2, [r7, #0]
  return result;
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	fab2 f282 	clz	r2, r2
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	40d3      	lsrs	r3, r2
 8002910:	4a04      	ldr	r2, [pc, #16]	; (8002924 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002912:	5cd3      	ldrb	r3, [r2, r3]
 8002914:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002918:	4618      	mov	r0, r3
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40021000 	.word	0x40021000
 8002924:	0800477c 	.word	0x0800477c

08002928 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b092      	sub	sp, #72	; 0x48
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002934:	2300      	movs	r3, #0
 8002936:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002938:	2300      	movs	r3, #0
 800293a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 80d4 	beq.w	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800294c:	4b4e      	ldr	r3, [pc, #312]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10e      	bne.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002958:	4b4b      	ldr	r3, [pc, #300]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	4a4a      	ldr	r2, [pc, #296]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800295e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002962:	61d3      	str	r3, [r2, #28]
 8002964:	4b48      	ldr	r3, [pc, #288]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002970:	2301      	movs	r3, #1
 8002972:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002976:	4b45      	ldr	r3, [pc, #276]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297e:	2b00      	cmp	r3, #0
 8002980:	d118      	bne.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002982:	4b42      	ldr	r3, [pc, #264]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a41      	ldr	r2, [pc, #260]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800298c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800298e:	f7fe fbd1 	bl	8001134 <HAL_GetTick>
 8002992:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002994:	e008      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002996:	f7fe fbcd 	bl	8001134 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b64      	cmp	r3, #100	; 0x64
 80029a2:	d901      	bls.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e169      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a8:	4b38      	ldr	r3, [pc, #224]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0f0      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029b4:	4b34      	ldr	r3, [pc, #208]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 8084 	beq.w	8002ace <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d07c      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029d4:	4b2c      	ldr	r3, [pc, #176]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e6:	fa93 f3a3 	rbit	r3, r3
 80029ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80029ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029ee:	fab3 f383 	clz	r3, r3
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	461a      	mov	r2, r3
 80029f6:	4b26      	ldr	r3, [pc, #152]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029f8:	4413      	add	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	461a      	mov	r2, r3
 80029fe:	2301      	movs	r3, #1
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a06:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0a:	fa93 f3a3 	rbit	r3, r3
 8002a0e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a12:	fab3 f383 	clz	r3, r3
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4b1d      	ldr	r3, [pc, #116]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a1c:	4413      	add	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	461a      	mov	r2, r3
 8002a22:	2300      	movs	r3, #0
 8002a24:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a26:	4a18      	ldr	r2, [pc, #96]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a2a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d04b      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a36:	f7fe fb7d 	bl	8001134 <HAL_GetTick>
 8002a3a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a3c:	e00a      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a3e:	f7fe fb79 	bl	8001134 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e113      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002a54:	2302      	movs	r3, #2
 8002a56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5a:	fa93 f3a3 	rbit	r3, r3
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a60:	2302      	movs	r3, #2
 8002a62:	623b      	str	r3, [r7, #32]
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	fa93 f3a3 	rbit	r3, r3
 8002a6a:	61fb      	str	r3, [r7, #28]
  return result;
 8002a6c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a6e:	fab3 f383 	clz	r3, r3
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	095b      	lsrs	r3, r3, #5
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	f043 0302 	orr.w	r3, r3, #2
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d108      	bne.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002a82:	4b01      	ldr	r3, [pc, #4]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	e00d      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	40007000 	.word	0x40007000
 8002a90:	10908100 	.word	0x10908100
 8002a94:	2302      	movs	r3, #2
 8002a96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	fa93 f3a3 	rbit	r3, r3
 8002a9e:	617b      	str	r3, [r7, #20]
 8002aa0:	4b78      	ldr	r3, [pc, #480]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	613a      	str	r2, [r7, #16]
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	fa92 f2a2 	rbit	r2, r2
 8002aae:	60fa      	str	r2, [r7, #12]
  return result;
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	fab2 f282 	clz	r2, r2
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	f002 021f 	and.w	r2, r2, #31
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac8:	4013      	ands	r3, r2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0b7      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002ace:	4b6d      	ldr	r3, [pc, #436]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	496a      	ldr	r1, [pc, #424]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ae0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d105      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae8:	4b66      	ldr	r3, [pc, #408]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	4a65      	ldr	r2, [pc, #404]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002aee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002af2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d008      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b00:	4b60      	ldr	r3, [pc, #384]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b04:	f023 0203 	bic.w	r2, r3, #3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	495d      	ldr	r1, [pc, #372]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d008      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b1e:	4b59      	ldr	r3, [pc, #356]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	4956      	ldr	r1, [pc, #344]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d008      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b3c:	4b51      	ldr	r3, [pc, #324]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	494e      	ldr	r1, [pc, #312]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0320 	and.w	r3, r3, #32
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d008      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b5a:	4b4a      	ldr	r3, [pc, #296]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	f023 0210 	bic.w	r2, r3, #16
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	4947      	ldr	r1, [pc, #284]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d008      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002b78:	4b42      	ldr	r3, [pc, #264]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b84:	493f      	ldr	r1, [pc, #252]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d008      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b96:	4b3b      	ldr	r3, [pc, #236]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	f023 0220 	bic.w	r2, r3, #32
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	4938      	ldr	r1, [pc, #224]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d008      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bb4:	4b33      	ldr	r3, [pc, #204]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	4930      	ldr	r1, [pc, #192]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0310 	and.w	r3, r3, #16
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d008      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bd2:	4b2c      	ldr	r3, [pc, #176]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	4929      	ldr	r1, [pc, #164]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d008      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002bf0:	4b24      	ldr	r3, [pc, #144]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfc:	4921      	ldr	r1, [pc, #132]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d008      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c0e:	4b1d      	ldr	r3, [pc, #116]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c12:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	491a      	ldr	r1, [pc, #104]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d008      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002c2c:	4b15      	ldr	r3, [pc, #84]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c30:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c38:	4912      	ldr	r1, [pc, #72]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d008      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002c4a:	4b0e      	ldr	r3, [pc, #56]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	490b      	ldr	r1, [pc, #44]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d008      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002c68:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c74:	4903      	ldr	r1, [pc, #12]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3748      	adds	r7, #72	; 0x48
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40021000 	.word	0x40021000

08002c88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e049      	b.n	8002d2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d106      	bne.n	8002cb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7fe f8d8 	bl	8000e64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3304      	adds	r3, #4
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4610      	mov	r0, r2
 8002cc8:	f000 fab2 	bl	8003230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
	...

08002d38 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d001      	beq.n	8002d50 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e042      	b.n	8002dd6 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a21      	ldr	r2, [pc, #132]	; (8002de4 <HAL_TIM_Base_Start+0xac>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d018      	beq.n	8002d94 <HAL_TIM_Base_Start+0x5c>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d6a:	d013      	beq.n	8002d94 <HAL_TIM_Base_Start+0x5c>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a1d      	ldr	r2, [pc, #116]	; (8002de8 <HAL_TIM_Base_Start+0xb0>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d00e      	beq.n	8002d94 <HAL_TIM_Base_Start+0x5c>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a1c      	ldr	r2, [pc, #112]	; (8002dec <HAL_TIM_Base_Start+0xb4>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d009      	beq.n	8002d94 <HAL_TIM_Base_Start+0x5c>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a1a      	ldr	r2, [pc, #104]	; (8002df0 <HAL_TIM_Base_Start+0xb8>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d004      	beq.n	8002d94 <HAL_TIM_Base_Start+0x5c>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a19      	ldr	r2, [pc, #100]	; (8002df4 <HAL_TIM_Base_Start+0xbc>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d115      	bne.n	8002dc0 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	4b17      	ldr	r3, [pc, #92]	; (8002df8 <HAL_TIM_Base_Start+0xc0>)
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2b06      	cmp	r3, #6
 8002da4:	d015      	beq.n	8002dd2 <HAL_TIM_Base_Start+0x9a>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dac:	d011      	beq.n	8002dd2 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f042 0201 	orr.w	r2, r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dbe:	e008      	b.n	8002dd2 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0201 	orr.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	e000      	b.n	8002dd4 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	40012c00 	.word	0x40012c00
 8002de8:	40000400 	.word	0x40000400
 8002dec:	40000800 	.word	0x40000800
 8002df0:	40013400 	.word	0x40013400
 8002df4:	40014000 	.word	0x40014000
 8002df8:	00010007 	.word	0x00010007

08002dfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d122      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d11b      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f06f 0202 	mvn.w	r2, #2
 8002e28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f9d8 	bl	80031f4 <HAL_TIM_IC_CaptureCallback>
 8002e44:	e005      	b.n	8002e52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f9ca 	bl	80031e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f9db 	bl	8003208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d122      	bne.n	8002eac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d11b      	bne.n	8002eac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f06f 0204 	mvn.w	r2, #4
 8002e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2202      	movs	r2, #2
 8002e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f9ae 	bl	80031f4 <HAL_TIM_IC_CaptureCallback>
 8002e98:	e005      	b.n	8002ea6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f9a0 	bl	80031e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f9b1 	bl	8003208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d122      	bne.n	8002f00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f003 0308 	and.w	r3, r3, #8
 8002ec4:	2b08      	cmp	r3, #8
 8002ec6:	d11b      	bne.n	8002f00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f06f 0208 	mvn.w	r2, #8
 8002ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2204      	movs	r2, #4
 8002ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	f003 0303 	and.w	r3, r3, #3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f984 	bl	80031f4 <HAL_TIM_IC_CaptureCallback>
 8002eec:	e005      	b.n	8002efa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f976 	bl	80031e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f987 	bl	8003208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	f003 0310 	and.w	r3, r3, #16
 8002f0a:	2b10      	cmp	r3, #16
 8002f0c:	d122      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f003 0310 	and.w	r3, r3, #16
 8002f18:	2b10      	cmp	r3, #16
 8002f1a:	d11b      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f06f 0210 	mvn.w	r2, #16
 8002f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2208      	movs	r2, #8
 8002f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f95a 	bl	80031f4 <HAL_TIM_IC_CaptureCallback>
 8002f40:	e005      	b.n	8002f4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f94c 	bl	80031e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f95d 	bl	8003208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d10e      	bne.n	8002f80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d107      	bne.n	8002f80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f06f 0201 	mvn.w	r2, #1
 8002f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f926 	bl	80031cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8a:	2b80      	cmp	r3, #128	; 0x80
 8002f8c:	d10e      	bne.n	8002fac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f98:	2b80      	cmp	r3, #128	; 0x80
 8002f9a:	d107      	bne.n	8002fac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 faf6 	bl	8003598 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fba:	d10e      	bne.n	8002fda <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc6:	2b80      	cmp	r3, #128	; 0x80
 8002fc8:	d107      	bne.n	8002fda <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002fd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 fae9 	bl	80035ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe4:	2b40      	cmp	r3, #64	; 0x40
 8002fe6:	d10e      	bne.n	8003006 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff2:	2b40      	cmp	r3, #64	; 0x40
 8002ff4:	d107      	bne.n	8003006 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f90b 	bl	800321c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	f003 0320 	and.w	r3, r3, #32
 8003010:	2b20      	cmp	r3, #32
 8003012:	d10e      	bne.n	8003032 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f003 0320 	and.w	r3, r3, #32
 800301e:	2b20      	cmp	r3, #32
 8003020:	d107      	bne.n	8003032 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f06f 0220 	mvn.w	r2, #32
 800302a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 faa9 	bl	8003584 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003032:	bf00      	nop
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b084      	sub	sp, #16
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
 8003042:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_TIM_ConfigClockSource+0x1c>
 8003052:	2302      	movs	r3, #2
 8003054:	e0b6      	b.n	80031c4 <HAL_TIM_ConfigClockSource+0x18a>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2202      	movs	r2, #2
 8003062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003074:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003078:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003080:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003092:	d03e      	beq.n	8003112 <HAL_TIM_ConfigClockSource+0xd8>
 8003094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003098:	f200 8087 	bhi.w	80031aa <HAL_TIM_ConfigClockSource+0x170>
 800309c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a0:	f000 8086 	beq.w	80031b0 <HAL_TIM_ConfigClockSource+0x176>
 80030a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a8:	d87f      	bhi.n	80031aa <HAL_TIM_ConfigClockSource+0x170>
 80030aa:	2b70      	cmp	r3, #112	; 0x70
 80030ac:	d01a      	beq.n	80030e4 <HAL_TIM_ConfigClockSource+0xaa>
 80030ae:	2b70      	cmp	r3, #112	; 0x70
 80030b0:	d87b      	bhi.n	80031aa <HAL_TIM_ConfigClockSource+0x170>
 80030b2:	2b60      	cmp	r3, #96	; 0x60
 80030b4:	d050      	beq.n	8003158 <HAL_TIM_ConfigClockSource+0x11e>
 80030b6:	2b60      	cmp	r3, #96	; 0x60
 80030b8:	d877      	bhi.n	80031aa <HAL_TIM_ConfigClockSource+0x170>
 80030ba:	2b50      	cmp	r3, #80	; 0x50
 80030bc:	d03c      	beq.n	8003138 <HAL_TIM_ConfigClockSource+0xfe>
 80030be:	2b50      	cmp	r3, #80	; 0x50
 80030c0:	d873      	bhi.n	80031aa <HAL_TIM_ConfigClockSource+0x170>
 80030c2:	2b40      	cmp	r3, #64	; 0x40
 80030c4:	d058      	beq.n	8003178 <HAL_TIM_ConfigClockSource+0x13e>
 80030c6:	2b40      	cmp	r3, #64	; 0x40
 80030c8:	d86f      	bhi.n	80031aa <HAL_TIM_ConfigClockSource+0x170>
 80030ca:	2b30      	cmp	r3, #48	; 0x30
 80030cc:	d064      	beq.n	8003198 <HAL_TIM_ConfigClockSource+0x15e>
 80030ce:	2b30      	cmp	r3, #48	; 0x30
 80030d0:	d86b      	bhi.n	80031aa <HAL_TIM_ConfigClockSource+0x170>
 80030d2:	2b20      	cmp	r3, #32
 80030d4:	d060      	beq.n	8003198 <HAL_TIM_ConfigClockSource+0x15e>
 80030d6:	2b20      	cmp	r3, #32
 80030d8:	d867      	bhi.n	80031aa <HAL_TIM_ConfigClockSource+0x170>
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d05c      	beq.n	8003198 <HAL_TIM_ConfigClockSource+0x15e>
 80030de:	2b10      	cmp	r3, #16
 80030e0:	d05a      	beq.n	8003198 <HAL_TIM_ConfigClockSource+0x15e>
 80030e2:	e062      	b.n	80031aa <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6818      	ldr	r0, [r3, #0]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	6899      	ldr	r1, [r3, #8]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f000 f9a6 	bl	8003444 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003106:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	609a      	str	r2, [r3, #8]
      break;
 8003110:	e04f      	b.n	80031b2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6818      	ldr	r0, [r3, #0]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	6899      	ldr	r1, [r3, #8]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	f000 f98f 	bl	8003444 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003134:	609a      	str	r2, [r3, #8]
      break;
 8003136:	e03c      	b.n	80031b2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6818      	ldr	r0, [r3, #0]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	6859      	ldr	r1, [r3, #4]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	461a      	mov	r2, r3
 8003146:	f000 f903 	bl	8003350 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2150      	movs	r1, #80	; 0x50
 8003150:	4618      	mov	r0, r3
 8003152:	f000 f95c 	bl	800340e <TIM_ITRx_SetConfig>
      break;
 8003156:	e02c      	b.n	80031b2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6818      	ldr	r0, [r3, #0]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	6859      	ldr	r1, [r3, #4]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	461a      	mov	r2, r3
 8003166:	f000 f922 	bl	80033ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2160      	movs	r1, #96	; 0x60
 8003170:	4618      	mov	r0, r3
 8003172:	f000 f94c 	bl	800340e <TIM_ITRx_SetConfig>
      break;
 8003176:	e01c      	b.n	80031b2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6818      	ldr	r0, [r3, #0]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	6859      	ldr	r1, [r3, #4]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	461a      	mov	r2, r3
 8003186:	f000 f8e3 	bl	8003350 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2140      	movs	r1, #64	; 0x40
 8003190:	4618      	mov	r0, r3
 8003192:	f000 f93c 	bl	800340e <TIM_ITRx_SetConfig>
      break;
 8003196:	e00c      	b.n	80031b2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4619      	mov	r1, r3
 80031a2:	4610      	mov	r0, r2
 80031a4:	f000 f933 	bl	800340e <TIM_ITRx_SetConfig>
      break;
 80031a8:	e003      	b.n	80031b2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	73fb      	strb	r3, [r7, #15]
      break;
 80031ae:	e000      	b.n	80031b2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80031b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a3c      	ldr	r2, [pc, #240]	; (8003334 <TIM_Base_SetConfig+0x104>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d00f      	beq.n	8003268 <TIM_Base_SetConfig+0x38>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800324e:	d00b      	beq.n	8003268 <TIM_Base_SetConfig+0x38>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a39      	ldr	r2, [pc, #228]	; (8003338 <TIM_Base_SetConfig+0x108>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d007      	beq.n	8003268 <TIM_Base_SetConfig+0x38>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a38      	ldr	r2, [pc, #224]	; (800333c <TIM_Base_SetConfig+0x10c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d003      	beq.n	8003268 <TIM_Base_SetConfig+0x38>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a37      	ldr	r2, [pc, #220]	; (8003340 <TIM_Base_SetConfig+0x110>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d108      	bne.n	800327a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4313      	orrs	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a2d      	ldr	r2, [pc, #180]	; (8003334 <TIM_Base_SetConfig+0x104>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d01b      	beq.n	80032ba <TIM_Base_SetConfig+0x8a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003288:	d017      	beq.n	80032ba <TIM_Base_SetConfig+0x8a>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a2a      	ldr	r2, [pc, #168]	; (8003338 <TIM_Base_SetConfig+0x108>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d013      	beq.n	80032ba <TIM_Base_SetConfig+0x8a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a29      	ldr	r2, [pc, #164]	; (800333c <TIM_Base_SetConfig+0x10c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d00f      	beq.n	80032ba <TIM_Base_SetConfig+0x8a>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a28      	ldr	r2, [pc, #160]	; (8003340 <TIM_Base_SetConfig+0x110>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d00b      	beq.n	80032ba <TIM_Base_SetConfig+0x8a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a27      	ldr	r2, [pc, #156]	; (8003344 <TIM_Base_SetConfig+0x114>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d007      	beq.n	80032ba <TIM_Base_SetConfig+0x8a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a26      	ldr	r2, [pc, #152]	; (8003348 <TIM_Base_SetConfig+0x118>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d003      	beq.n	80032ba <TIM_Base_SetConfig+0x8a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a25      	ldr	r2, [pc, #148]	; (800334c <TIM_Base_SetConfig+0x11c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d108      	bne.n	80032cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a10      	ldr	r2, [pc, #64]	; (8003334 <TIM_Base_SetConfig+0x104>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d00f      	beq.n	8003318 <TIM_Base_SetConfig+0xe8>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a11      	ldr	r2, [pc, #68]	; (8003340 <TIM_Base_SetConfig+0x110>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d00b      	beq.n	8003318 <TIM_Base_SetConfig+0xe8>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a10      	ldr	r2, [pc, #64]	; (8003344 <TIM_Base_SetConfig+0x114>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d007      	beq.n	8003318 <TIM_Base_SetConfig+0xe8>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a0f      	ldr	r2, [pc, #60]	; (8003348 <TIM_Base_SetConfig+0x118>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d003      	beq.n	8003318 <TIM_Base_SetConfig+0xe8>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a0e      	ldr	r2, [pc, #56]	; (800334c <TIM_Base_SetConfig+0x11c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d103      	bne.n	8003320 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	691a      	ldr	r2, [r3, #16]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	615a      	str	r2, [r3, #20]
}
 8003326:	bf00      	nop
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	40012c00 	.word	0x40012c00
 8003338:	40000400 	.word	0x40000400
 800333c:	40000800 	.word	0x40000800
 8003340:	40013400 	.word	0x40013400
 8003344:	40014000 	.word	0x40014000
 8003348:	40014400 	.word	0x40014400
 800334c:	40014800 	.word	0x40014800

08003350 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003350:	b480      	push	{r7}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	f023 0201 	bic.w	r2, r3, #1
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800337a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	4313      	orrs	r3, r2
 8003384:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f023 030a 	bic.w	r3, r3, #10
 800338c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	4313      	orrs	r3, r2
 8003394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	621a      	str	r2, [r3, #32]
}
 80033a2:	bf00      	nop
 80033a4:	371c      	adds	r7, #28
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b087      	sub	sp, #28
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	60f8      	str	r0, [r7, #12]
 80033b6:	60b9      	str	r1, [r7, #8]
 80033b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	f023 0210 	bic.w	r2, r3, #16
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	031b      	lsls	r3, r3, #12
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	621a      	str	r2, [r3, #32]
}
 8003402:	bf00      	nop
 8003404:	371c      	adds	r7, #28
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800340e:	b480      	push	{r7}
 8003410:	b085      	sub	sp, #20
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003424:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4313      	orrs	r3, r2
 800342c:	f043 0307 	orr.w	r3, r3, #7
 8003430:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	609a      	str	r2, [r3, #8]
}
 8003438:	bf00      	nop
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003444:	b480      	push	{r7}
 8003446:	b087      	sub	sp, #28
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
 8003450:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800345e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	021a      	lsls	r2, r3, #8
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	431a      	orrs	r2, r3
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	4313      	orrs	r3, r2
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	4313      	orrs	r3, r2
 8003470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	609a      	str	r2, [r3, #8]
}
 8003478:	bf00      	nop
 800347a:	371c      	adds	r7, #28
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003498:	2302      	movs	r3, #2
 800349a:	e063      	b.n	8003564 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2202      	movs	r2, #2
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a2b      	ldr	r2, [pc, #172]	; (8003570 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d004      	beq.n	80034d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a2a      	ldr	r2, [pc, #168]	; (8003574 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d108      	bne.n	80034e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80034d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	4313      	orrs	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a1b      	ldr	r2, [pc, #108]	; (8003570 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d018      	beq.n	8003538 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800350e:	d013      	beq.n	8003538 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a18      	ldr	r2, [pc, #96]	; (8003578 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d00e      	beq.n	8003538 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a17      	ldr	r2, [pc, #92]	; (800357c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d009      	beq.n	8003538 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a12      	ldr	r2, [pc, #72]	; (8003574 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d004      	beq.n	8003538 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a13      	ldr	r2, [pc, #76]	; (8003580 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d10c      	bne.n	8003552 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800353e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	4313      	orrs	r3, r2
 8003548:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	40012c00 	.word	0x40012c00
 8003574:	40013400 	.word	0x40013400
 8003578:	40000400 	.word	0x40000400
 800357c:	40000800 	.word	0x40000800
 8003580:	40014000 	.word	0x40014000

08003584 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e040      	b.n	8003654 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d106      	bne.n	80035e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7fd fc62 	bl	8000eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2224      	movs	r2, #36	; 0x24
 80035ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0201 	bic.w	r2, r2, #1
 80035fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f8c0 	bl	8003784 <UART_SetConfig>
 8003604:	4603      	mov	r3, r0
 8003606:	2b01      	cmp	r3, #1
 8003608:	d101      	bne.n	800360e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e022      	b.n	8003654 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fa88 	bl	8003b2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800362a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800363a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0201 	orr.w	r2, r2, #1
 800364a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 fb0f 	bl	8003c70 <UART_CheckIdleState>
 8003652:	4603      	mov	r3, r0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b08a      	sub	sp, #40	; 0x28
 8003660:	af02      	add	r7, sp, #8
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	603b      	str	r3, [r7, #0]
 8003668:	4613      	mov	r3, r2
 800366a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003670:	2b20      	cmp	r3, #32
 8003672:	f040 8082 	bne.w	800377a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <HAL_UART_Transmit+0x26>
 800367c:	88fb      	ldrh	r3, [r7, #6]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e07a      	b.n	800377c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800368c:	2b01      	cmp	r3, #1
 800368e:	d101      	bne.n	8003694 <HAL_UART_Transmit+0x38>
 8003690:	2302      	movs	r3, #2
 8003692:	e073      	b.n	800377c <HAL_UART_Transmit+0x120>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2221      	movs	r2, #33	; 0x21
 80036a8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036aa:	f7fd fd43 	bl	8001134 <HAL_GetTick>
 80036ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	88fa      	ldrh	r2, [r7, #6]
 80036b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	88fa      	ldrh	r2, [r7, #6]
 80036bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036c8:	d108      	bne.n	80036dc <HAL_UART_Transmit+0x80>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d104      	bne.n	80036dc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80036d2:	2300      	movs	r3, #0
 80036d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	61bb      	str	r3, [r7, #24]
 80036da:	e003      	b.n	80036e4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036e0:	2300      	movs	r3, #0
 80036e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80036ec:	e02d      	b.n	800374a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	2200      	movs	r2, #0
 80036f6:	2180      	movs	r1, #128	; 0x80
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 fb02 	bl	8003d02 <UART_WaitOnFlagUntilTimeout>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e039      	b.n	800377c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10b      	bne.n	8003726 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	881a      	ldrh	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800371a:	b292      	uxth	r2, r2
 800371c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	3302      	adds	r3, #2
 8003722:	61bb      	str	r3, [r7, #24]
 8003724:	e008      	b.n	8003738 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	781a      	ldrb	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	b292      	uxth	r2, r2
 8003730:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	3301      	adds	r3, #1
 8003736:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800373e:	b29b      	uxth	r3, r3
 8003740:	3b01      	subs	r3, #1
 8003742:	b29a      	uxth	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003750:	b29b      	uxth	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1cb      	bne.n	80036ee <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2200      	movs	r2, #0
 800375e:	2140      	movs	r1, #64	; 0x40
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 face 	bl	8003d02 <UART_WaitOnFlagUntilTimeout>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e005      	b.n	800377c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2220      	movs	r2, #32
 8003774:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003776:	2300      	movs	r3, #0
 8003778:	e000      	b.n	800377c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800377a:	2302      	movs	r3, #2
  }
}
 800377c:	4618      	mov	r0, r3
 800377e:	3720      	adds	r7, #32
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b088      	sub	sp, #32
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800378c:	2300      	movs	r3, #0
 800378e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	431a      	orrs	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	431a      	orrs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80037b2:	f023 030c 	bic.w	r3, r3, #12
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6812      	ldr	r2, [r2, #0]
 80037ba:	6979      	ldr	r1, [r7, #20]
 80037bc:	430b      	orrs	r3, r1
 80037be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4aae      	ldr	r2, [pc, #696]	; (8003ab8 <UART_SetConfig+0x334>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d120      	bne.n	8003846 <UART_SetConfig+0xc2>
 8003804:	4bad      	ldr	r3, [pc, #692]	; (8003abc <UART_SetConfig+0x338>)
 8003806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003808:	f003 0303 	and.w	r3, r3, #3
 800380c:	2b03      	cmp	r3, #3
 800380e:	d817      	bhi.n	8003840 <UART_SetConfig+0xbc>
 8003810:	a201      	add	r2, pc, #4	; (adr r2, 8003818 <UART_SetConfig+0x94>)
 8003812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003816:	bf00      	nop
 8003818:	08003829 	.word	0x08003829
 800381c:	08003835 	.word	0x08003835
 8003820:	0800383b 	.word	0x0800383b
 8003824:	0800382f 	.word	0x0800382f
 8003828:	2301      	movs	r3, #1
 800382a:	77fb      	strb	r3, [r7, #31]
 800382c:	e0b5      	b.n	800399a <UART_SetConfig+0x216>
 800382e:	2302      	movs	r3, #2
 8003830:	77fb      	strb	r3, [r7, #31]
 8003832:	e0b2      	b.n	800399a <UART_SetConfig+0x216>
 8003834:	2304      	movs	r3, #4
 8003836:	77fb      	strb	r3, [r7, #31]
 8003838:	e0af      	b.n	800399a <UART_SetConfig+0x216>
 800383a:	2308      	movs	r3, #8
 800383c:	77fb      	strb	r3, [r7, #31]
 800383e:	e0ac      	b.n	800399a <UART_SetConfig+0x216>
 8003840:	2310      	movs	r3, #16
 8003842:	77fb      	strb	r3, [r7, #31]
 8003844:	e0a9      	b.n	800399a <UART_SetConfig+0x216>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a9d      	ldr	r2, [pc, #628]	; (8003ac0 <UART_SetConfig+0x33c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d124      	bne.n	800389a <UART_SetConfig+0x116>
 8003850:	4b9a      	ldr	r3, [pc, #616]	; (8003abc <UART_SetConfig+0x338>)
 8003852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003854:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003858:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800385c:	d011      	beq.n	8003882 <UART_SetConfig+0xfe>
 800385e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003862:	d817      	bhi.n	8003894 <UART_SetConfig+0x110>
 8003864:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003868:	d011      	beq.n	800388e <UART_SetConfig+0x10a>
 800386a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800386e:	d811      	bhi.n	8003894 <UART_SetConfig+0x110>
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <UART_SetConfig+0xf8>
 8003874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003878:	d006      	beq.n	8003888 <UART_SetConfig+0x104>
 800387a:	e00b      	b.n	8003894 <UART_SetConfig+0x110>
 800387c:	2300      	movs	r3, #0
 800387e:	77fb      	strb	r3, [r7, #31]
 8003880:	e08b      	b.n	800399a <UART_SetConfig+0x216>
 8003882:	2302      	movs	r3, #2
 8003884:	77fb      	strb	r3, [r7, #31]
 8003886:	e088      	b.n	800399a <UART_SetConfig+0x216>
 8003888:	2304      	movs	r3, #4
 800388a:	77fb      	strb	r3, [r7, #31]
 800388c:	e085      	b.n	800399a <UART_SetConfig+0x216>
 800388e:	2308      	movs	r3, #8
 8003890:	77fb      	strb	r3, [r7, #31]
 8003892:	e082      	b.n	800399a <UART_SetConfig+0x216>
 8003894:	2310      	movs	r3, #16
 8003896:	77fb      	strb	r3, [r7, #31]
 8003898:	e07f      	b.n	800399a <UART_SetConfig+0x216>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a89      	ldr	r2, [pc, #548]	; (8003ac4 <UART_SetConfig+0x340>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d124      	bne.n	80038ee <UART_SetConfig+0x16a>
 80038a4:	4b85      	ldr	r3, [pc, #532]	; (8003abc <UART_SetConfig+0x338>)
 80038a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80038ac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80038b0:	d011      	beq.n	80038d6 <UART_SetConfig+0x152>
 80038b2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80038b6:	d817      	bhi.n	80038e8 <UART_SetConfig+0x164>
 80038b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80038bc:	d011      	beq.n	80038e2 <UART_SetConfig+0x15e>
 80038be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80038c2:	d811      	bhi.n	80038e8 <UART_SetConfig+0x164>
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <UART_SetConfig+0x14c>
 80038c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038cc:	d006      	beq.n	80038dc <UART_SetConfig+0x158>
 80038ce:	e00b      	b.n	80038e8 <UART_SetConfig+0x164>
 80038d0:	2300      	movs	r3, #0
 80038d2:	77fb      	strb	r3, [r7, #31]
 80038d4:	e061      	b.n	800399a <UART_SetConfig+0x216>
 80038d6:	2302      	movs	r3, #2
 80038d8:	77fb      	strb	r3, [r7, #31]
 80038da:	e05e      	b.n	800399a <UART_SetConfig+0x216>
 80038dc:	2304      	movs	r3, #4
 80038de:	77fb      	strb	r3, [r7, #31]
 80038e0:	e05b      	b.n	800399a <UART_SetConfig+0x216>
 80038e2:	2308      	movs	r3, #8
 80038e4:	77fb      	strb	r3, [r7, #31]
 80038e6:	e058      	b.n	800399a <UART_SetConfig+0x216>
 80038e8:	2310      	movs	r3, #16
 80038ea:	77fb      	strb	r3, [r7, #31]
 80038ec:	e055      	b.n	800399a <UART_SetConfig+0x216>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a75      	ldr	r2, [pc, #468]	; (8003ac8 <UART_SetConfig+0x344>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d124      	bne.n	8003942 <UART_SetConfig+0x1be>
 80038f8:	4b70      	ldr	r3, [pc, #448]	; (8003abc <UART_SetConfig+0x338>)
 80038fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003900:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003904:	d011      	beq.n	800392a <UART_SetConfig+0x1a6>
 8003906:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800390a:	d817      	bhi.n	800393c <UART_SetConfig+0x1b8>
 800390c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003910:	d011      	beq.n	8003936 <UART_SetConfig+0x1b2>
 8003912:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003916:	d811      	bhi.n	800393c <UART_SetConfig+0x1b8>
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <UART_SetConfig+0x1a0>
 800391c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003920:	d006      	beq.n	8003930 <UART_SetConfig+0x1ac>
 8003922:	e00b      	b.n	800393c <UART_SetConfig+0x1b8>
 8003924:	2300      	movs	r3, #0
 8003926:	77fb      	strb	r3, [r7, #31]
 8003928:	e037      	b.n	800399a <UART_SetConfig+0x216>
 800392a:	2302      	movs	r3, #2
 800392c:	77fb      	strb	r3, [r7, #31]
 800392e:	e034      	b.n	800399a <UART_SetConfig+0x216>
 8003930:	2304      	movs	r3, #4
 8003932:	77fb      	strb	r3, [r7, #31]
 8003934:	e031      	b.n	800399a <UART_SetConfig+0x216>
 8003936:	2308      	movs	r3, #8
 8003938:	77fb      	strb	r3, [r7, #31]
 800393a:	e02e      	b.n	800399a <UART_SetConfig+0x216>
 800393c:	2310      	movs	r3, #16
 800393e:	77fb      	strb	r3, [r7, #31]
 8003940:	e02b      	b.n	800399a <UART_SetConfig+0x216>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a61      	ldr	r2, [pc, #388]	; (8003acc <UART_SetConfig+0x348>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d124      	bne.n	8003996 <UART_SetConfig+0x212>
 800394c:	4b5b      	ldr	r3, [pc, #364]	; (8003abc <UART_SetConfig+0x338>)
 800394e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003950:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003954:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003958:	d011      	beq.n	800397e <UART_SetConfig+0x1fa>
 800395a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800395e:	d817      	bhi.n	8003990 <UART_SetConfig+0x20c>
 8003960:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003964:	d011      	beq.n	800398a <UART_SetConfig+0x206>
 8003966:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800396a:	d811      	bhi.n	8003990 <UART_SetConfig+0x20c>
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <UART_SetConfig+0x1f4>
 8003970:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003974:	d006      	beq.n	8003984 <UART_SetConfig+0x200>
 8003976:	e00b      	b.n	8003990 <UART_SetConfig+0x20c>
 8003978:	2300      	movs	r3, #0
 800397a:	77fb      	strb	r3, [r7, #31]
 800397c:	e00d      	b.n	800399a <UART_SetConfig+0x216>
 800397e:	2302      	movs	r3, #2
 8003980:	77fb      	strb	r3, [r7, #31]
 8003982:	e00a      	b.n	800399a <UART_SetConfig+0x216>
 8003984:	2304      	movs	r3, #4
 8003986:	77fb      	strb	r3, [r7, #31]
 8003988:	e007      	b.n	800399a <UART_SetConfig+0x216>
 800398a:	2308      	movs	r3, #8
 800398c:	77fb      	strb	r3, [r7, #31]
 800398e:	e004      	b.n	800399a <UART_SetConfig+0x216>
 8003990:	2310      	movs	r3, #16
 8003992:	77fb      	strb	r3, [r7, #31]
 8003994:	e001      	b.n	800399a <UART_SetConfig+0x216>
 8003996:	2310      	movs	r3, #16
 8003998:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039a2:	d15c      	bne.n	8003a5e <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 80039a4:	7ffb      	ldrb	r3, [r7, #31]
 80039a6:	2b08      	cmp	r3, #8
 80039a8:	d827      	bhi.n	80039fa <UART_SetConfig+0x276>
 80039aa:	a201      	add	r2, pc, #4	; (adr r2, 80039b0 <UART_SetConfig+0x22c>)
 80039ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b0:	080039d5 	.word	0x080039d5
 80039b4:	080039dd 	.word	0x080039dd
 80039b8:	080039e5 	.word	0x080039e5
 80039bc:	080039fb 	.word	0x080039fb
 80039c0:	080039eb 	.word	0x080039eb
 80039c4:	080039fb 	.word	0x080039fb
 80039c8:	080039fb 	.word	0x080039fb
 80039cc:	080039fb 	.word	0x080039fb
 80039d0:	080039f3 	.word	0x080039f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039d4:	f7fe ff64 	bl	80028a0 <HAL_RCC_GetPCLK1Freq>
 80039d8:	61b8      	str	r0, [r7, #24]
        break;
 80039da:	e013      	b.n	8003a04 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039dc:	f7fe ff82 	bl	80028e4 <HAL_RCC_GetPCLK2Freq>
 80039e0:	61b8      	str	r0, [r7, #24]
        break;
 80039e2:	e00f      	b.n	8003a04 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039e4:	4b3a      	ldr	r3, [pc, #232]	; (8003ad0 <UART_SetConfig+0x34c>)
 80039e6:	61bb      	str	r3, [r7, #24]
        break;
 80039e8:	e00c      	b.n	8003a04 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ea:	f7fe fee3 	bl	80027b4 <HAL_RCC_GetSysClockFreq>
 80039ee:	61b8      	str	r0, [r7, #24]
        break;
 80039f0:	e008      	b.n	8003a04 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039f6:	61bb      	str	r3, [r7, #24]
        break;
 80039f8:	e004      	b.n	8003a04 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	77bb      	strb	r3, [r7, #30]
        break;
 8003a02:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 8085 	beq.w	8003b16 <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	005a      	lsls	r2, r3, #1
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	085b      	lsrs	r3, r3, #1
 8003a16:	441a      	add	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	2b0f      	cmp	r3, #15
 8003a28:	d916      	bls.n	8003a58 <UART_SetConfig+0x2d4>
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a30:	d212      	bcs.n	8003a58 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	f023 030f 	bic.w	r3, r3, #15
 8003a3a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	085b      	lsrs	r3, r3, #1
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	89fb      	ldrh	r3, [r7, #14]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	89fa      	ldrh	r2, [r7, #14]
 8003a54:	60da      	str	r2, [r3, #12]
 8003a56:	e05e      	b.n	8003b16 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	77bb      	strb	r3, [r7, #30]
 8003a5c:	e05b      	b.n	8003b16 <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a5e:	7ffb      	ldrb	r3, [r7, #31]
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d837      	bhi.n	8003ad4 <UART_SetConfig+0x350>
 8003a64:	a201      	add	r2, pc, #4	; (adr r2, 8003a6c <UART_SetConfig+0x2e8>)
 8003a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6a:	bf00      	nop
 8003a6c:	08003a91 	.word	0x08003a91
 8003a70:	08003a99 	.word	0x08003a99
 8003a74:	08003aa1 	.word	0x08003aa1
 8003a78:	08003ad5 	.word	0x08003ad5
 8003a7c:	08003aa7 	.word	0x08003aa7
 8003a80:	08003ad5 	.word	0x08003ad5
 8003a84:	08003ad5 	.word	0x08003ad5
 8003a88:	08003ad5 	.word	0x08003ad5
 8003a8c:	08003aaf 	.word	0x08003aaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a90:	f7fe ff06 	bl	80028a0 <HAL_RCC_GetPCLK1Freq>
 8003a94:	61b8      	str	r0, [r7, #24]
        break;
 8003a96:	e022      	b.n	8003ade <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a98:	f7fe ff24 	bl	80028e4 <HAL_RCC_GetPCLK2Freq>
 8003a9c:	61b8      	str	r0, [r7, #24]
        break;
 8003a9e:	e01e      	b.n	8003ade <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <UART_SetConfig+0x34c>)
 8003aa2:	61bb      	str	r3, [r7, #24]
        break;
 8003aa4:	e01b      	b.n	8003ade <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aa6:	f7fe fe85 	bl	80027b4 <HAL_RCC_GetSysClockFreq>
 8003aaa:	61b8      	str	r0, [r7, #24]
        break;
 8003aac:	e017      	b.n	8003ade <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ab2:	61bb      	str	r3, [r7, #24]
        break;
 8003ab4:	e013      	b.n	8003ade <UART_SetConfig+0x35a>
 8003ab6:	bf00      	nop
 8003ab8:	40013800 	.word	0x40013800
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	40004400 	.word	0x40004400
 8003ac4:	40004800 	.word	0x40004800
 8003ac8:	40004c00 	.word	0x40004c00
 8003acc:	40005000 	.word	0x40005000
 8003ad0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	77bb      	strb	r3, [r7, #30]
        break;
 8003adc:	bf00      	nop
    }

    if (pclk != 0U)
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d018      	beq.n	8003b16 <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	085a      	lsrs	r2, r3, #1
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	441a      	add	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	2b0f      	cmp	r3, #15
 8003afe:	d908      	bls.n	8003b12 <UART_SetConfig+0x38e>
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b06:	d204      	bcs.n	8003b12 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	60da      	str	r2, [r3, #12]
 8003b10:	e001      	b.n	8003b16 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b22:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3720      	adds	r7, #32
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00a      	beq.n	8003b56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00a      	beq.n	8003b78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00a      	beq.n	8003b9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00a      	beq.n	8003bbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	f003 0310 	and.w	r3, r3, #16
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00a      	beq.n	8003bde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00a      	beq.n	8003c00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d01a      	beq.n	8003c42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c2a:	d10a      	bne.n	8003c42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00a      	beq.n	8003c64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	605a      	str	r2, [r3, #4]
  }
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af02      	add	r7, sp, #8
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c80:	f7fd fa58 	bl	8001134 <HAL_GetTick>
 8003c84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0308 	and.w	r3, r3, #8
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d10e      	bne.n	8003cb2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f82d 	bl	8003d02 <UART_WaitOnFlagUntilTimeout>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e023      	b.n	8003cfa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b04      	cmp	r3, #4
 8003cbe:	d10e      	bne.n	8003cde <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f817 	bl	8003d02 <UART_WaitOnFlagUntilTimeout>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e00d      	b.n	8003cfa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b09c      	sub	sp, #112	; 0x70
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	60f8      	str	r0, [r7, #12]
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	603b      	str	r3, [r7, #0]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d12:	e0a5      	b.n	8003e60 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d1a:	f000 80a1 	beq.w	8003e60 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d1e:	f7fd fa09 	bl	8001134 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d302      	bcc.n	8003d34 <UART_WaitOnFlagUntilTimeout+0x32>
 8003d2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d13e      	bne.n	8003db2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d3c:	e853 3f00 	ldrex	r3, [r3]
 8003d40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d48:	667b      	str	r3, [r7, #100]	; 0x64
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d54:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d5a:	e841 2300 	strex	r3, r2, [r1]
 8003d5e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1e6      	bne.n	8003d34 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	3308      	adds	r3, #8
 8003d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d70:	e853 3f00 	ldrex	r3, [r3]
 8003d74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d78:	f023 0301 	bic.w	r3, r3, #1
 8003d7c:	663b      	str	r3, [r7, #96]	; 0x60
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	3308      	adds	r3, #8
 8003d84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d86:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d8e:	e841 2300 	strex	r3, r2, [r1]
 8003d92:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1e5      	bne.n	8003d66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2220      	movs	r2, #32
 8003da4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e067      	b.n	8003e82 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0304 	and.w	r3, r3, #4
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d04f      	beq.n	8003e60 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dce:	d147      	bne.n	8003e60 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dd8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de2:	e853 3f00 	ldrex	r3, [r3]
 8003de6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003dee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	461a      	mov	r2, r3
 8003df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df8:	637b      	str	r3, [r7, #52]	; 0x34
 8003dfa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e00:	e841 2300 	strex	r3, r2, [r1]
 8003e04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1e6      	bne.n	8003dda <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	3308      	adds	r3, #8
 8003e12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	e853 3f00 	ldrex	r3, [r3]
 8003e1a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	f023 0301 	bic.w	r3, r3, #1
 8003e22:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3308      	adds	r3, #8
 8003e2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e2c:	623a      	str	r2, [r7, #32]
 8003e2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e30:	69f9      	ldr	r1, [r7, #28]
 8003e32:	6a3a      	ldr	r2, [r7, #32]
 8003e34:	e841 2300 	strex	r3, r2, [r1]
 8003e38:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1e5      	bne.n	8003e0c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2220      	movs	r2, #32
 8003e44:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e010      	b.n	8003e82 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	69da      	ldr	r2, [r3, #28]
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	bf0c      	ite	eq
 8003e70:	2301      	moveq	r3, #1
 8003e72:	2300      	movne	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	461a      	mov	r2, r3
 8003e78:	79fb      	ldrb	r3, [r7, #7]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	f43f af4a 	beq.w	8003d14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3770      	adds	r7, #112	; 0x70
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
	...

08003e8c <__errno>:
 8003e8c:	4b01      	ldr	r3, [pc, #4]	; (8003e94 <__errno+0x8>)
 8003e8e:	6818      	ldr	r0, [r3, #0]
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	20000014 	.word	0x20000014

08003e98 <__libc_init_array>:
 8003e98:	b570      	push	{r4, r5, r6, lr}
 8003e9a:	4d0d      	ldr	r5, [pc, #52]	; (8003ed0 <__libc_init_array+0x38>)
 8003e9c:	4c0d      	ldr	r4, [pc, #52]	; (8003ed4 <__libc_init_array+0x3c>)
 8003e9e:	1b64      	subs	r4, r4, r5
 8003ea0:	10a4      	asrs	r4, r4, #2
 8003ea2:	2600      	movs	r6, #0
 8003ea4:	42a6      	cmp	r6, r4
 8003ea6:	d109      	bne.n	8003ebc <__libc_init_array+0x24>
 8003ea8:	4d0b      	ldr	r5, [pc, #44]	; (8003ed8 <__libc_init_array+0x40>)
 8003eaa:	4c0c      	ldr	r4, [pc, #48]	; (8003edc <__libc_init_array+0x44>)
 8003eac:	f000 fc4e 	bl	800474c <_init>
 8003eb0:	1b64      	subs	r4, r4, r5
 8003eb2:	10a4      	asrs	r4, r4, #2
 8003eb4:	2600      	movs	r6, #0
 8003eb6:	42a6      	cmp	r6, r4
 8003eb8:	d105      	bne.n	8003ec6 <__libc_init_array+0x2e>
 8003eba:	bd70      	pop	{r4, r5, r6, pc}
 8003ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ec0:	4798      	blx	r3
 8003ec2:	3601      	adds	r6, #1
 8003ec4:	e7ee      	b.n	8003ea4 <__libc_init_array+0xc>
 8003ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eca:	4798      	blx	r3
 8003ecc:	3601      	adds	r6, #1
 8003ece:	e7f2      	b.n	8003eb6 <__libc_init_array+0x1e>
 8003ed0:	080047d8 	.word	0x080047d8
 8003ed4:	080047d8 	.word	0x080047d8
 8003ed8:	080047d8 	.word	0x080047d8
 8003edc:	080047dc 	.word	0x080047dc

08003ee0 <memset>:
 8003ee0:	4402      	add	r2, r0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d100      	bne.n	8003eea <memset+0xa>
 8003ee8:	4770      	bx	lr
 8003eea:	f803 1b01 	strb.w	r1, [r3], #1
 8003eee:	e7f9      	b.n	8003ee4 <memset+0x4>

08003ef0 <siprintf>:
 8003ef0:	b40e      	push	{r1, r2, r3}
 8003ef2:	b500      	push	{lr}
 8003ef4:	b09c      	sub	sp, #112	; 0x70
 8003ef6:	ab1d      	add	r3, sp, #116	; 0x74
 8003ef8:	9002      	str	r0, [sp, #8]
 8003efa:	9006      	str	r0, [sp, #24]
 8003efc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f00:	4809      	ldr	r0, [pc, #36]	; (8003f28 <siprintf+0x38>)
 8003f02:	9107      	str	r1, [sp, #28]
 8003f04:	9104      	str	r1, [sp, #16]
 8003f06:	4909      	ldr	r1, [pc, #36]	; (8003f2c <siprintf+0x3c>)
 8003f08:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f0c:	9105      	str	r1, [sp, #20]
 8003f0e:	6800      	ldr	r0, [r0, #0]
 8003f10:	9301      	str	r3, [sp, #4]
 8003f12:	a902      	add	r1, sp, #8
 8003f14:	f000 f868 	bl	8003fe8 <_svfiprintf_r>
 8003f18:	9b02      	ldr	r3, [sp, #8]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	701a      	strb	r2, [r3, #0]
 8003f1e:	b01c      	add	sp, #112	; 0x70
 8003f20:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f24:	b003      	add	sp, #12
 8003f26:	4770      	bx	lr
 8003f28:	20000014 	.word	0x20000014
 8003f2c:	ffff0208 	.word	0xffff0208

08003f30 <__ssputs_r>:
 8003f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f34:	688e      	ldr	r6, [r1, #8]
 8003f36:	429e      	cmp	r6, r3
 8003f38:	4682      	mov	sl, r0
 8003f3a:	460c      	mov	r4, r1
 8003f3c:	4690      	mov	r8, r2
 8003f3e:	461f      	mov	r7, r3
 8003f40:	d838      	bhi.n	8003fb4 <__ssputs_r+0x84>
 8003f42:	898a      	ldrh	r2, [r1, #12]
 8003f44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f48:	d032      	beq.n	8003fb0 <__ssputs_r+0x80>
 8003f4a:	6825      	ldr	r5, [r4, #0]
 8003f4c:	6909      	ldr	r1, [r1, #16]
 8003f4e:	eba5 0901 	sub.w	r9, r5, r1
 8003f52:	6965      	ldr	r5, [r4, #20]
 8003f54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	444b      	add	r3, r9
 8003f60:	106d      	asrs	r5, r5, #1
 8003f62:	429d      	cmp	r5, r3
 8003f64:	bf38      	it	cc
 8003f66:	461d      	movcc	r5, r3
 8003f68:	0553      	lsls	r3, r2, #21
 8003f6a:	d531      	bpl.n	8003fd0 <__ssputs_r+0xa0>
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	f000 fb47 	bl	8004600 <_malloc_r>
 8003f72:	4606      	mov	r6, r0
 8003f74:	b950      	cbnz	r0, 8003f8c <__ssputs_r+0x5c>
 8003f76:	230c      	movs	r3, #12
 8003f78:	f8ca 3000 	str.w	r3, [sl]
 8003f7c:	89a3      	ldrh	r3, [r4, #12]
 8003f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f82:	81a3      	strh	r3, [r4, #12]
 8003f84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f8c:	6921      	ldr	r1, [r4, #16]
 8003f8e:	464a      	mov	r2, r9
 8003f90:	f000 fabe 	bl	8004510 <memcpy>
 8003f94:	89a3      	ldrh	r3, [r4, #12]
 8003f96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f9e:	81a3      	strh	r3, [r4, #12]
 8003fa0:	6126      	str	r6, [r4, #16]
 8003fa2:	6165      	str	r5, [r4, #20]
 8003fa4:	444e      	add	r6, r9
 8003fa6:	eba5 0509 	sub.w	r5, r5, r9
 8003faa:	6026      	str	r6, [r4, #0]
 8003fac:	60a5      	str	r5, [r4, #8]
 8003fae:	463e      	mov	r6, r7
 8003fb0:	42be      	cmp	r6, r7
 8003fb2:	d900      	bls.n	8003fb6 <__ssputs_r+0x86>
 8003fb4:	463e      	mov	r6, r7
 8003fb6:	4632      	mov	r2, r6
 8003fb8:	6820      	ldr	r0, [r4, #0]
 8003fba:	4641      	mov	r1, r8
 8003fbc:	f000 fab6 	bl	800452c <memmove>
 8003fc0:	68a3      	ldr	r3, [r4, #8]
 8003fc2:	6822      	ldr	r2, [r4, #0]
 8003fc4:	1b9b      	subs	r3, r3, r6
 8003fc6:	4432      	add	r2, r6
 8003fc8:	60a3      	str	r3, [r4, #8]
 8003fca:	6022      	str	r2, [r4, #0]
 8003fcc:	2000      	movs	r0, #0
 8003fce:	e7db      	b.n	8003f88 <__ssputs_r+0x58>
 8003fd0:	462a      	mov	r2, r5
 8003fd2:	f000 fb6f 	bl	80046b4 <_realloc_r>
 8003fd6:	4606      	mov	r6, r0
 8003fd8:	2800      	cmp	r0, #0
 8003fda:	d1e1      	bne.n	8003fa0 <__ssputs_r+0x70>
 8003fdc:	6921      	ldr	r1, [r4, #16]
 8003fde:	4650      	mov	r0, sl
 8003fe0:	f000 fabe 	bl	8004560 <_free_r>
 8003fe4:	e7c7      	b.n	8003f76 <__ssputs_r+0x46>
	...

08003fe8 <_svfiprintf_r>:
 8003fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fec:	4698      	mov	r8, r3
 8003fee:	898b      	ldrh	r3, [r1, #12]
 8003ff0:	061b      	lsls	r3, r3, #24
 8003ff2:	b09d      	sub	sp, #116	; 0x74
 8003ff4:	4607      	mov	r7, r0
 8003ff6:	460d      	mov	r5, r1
 8003ff8:	4614      	mov	r4, r2
 8003ffa:	d50e      	bpl.n	800401a <_svfiprintf_r+0x32>
 8003ffc:	690b      	ldr	r3, [r1, #16]
 8003ffe:	b963      	cbnz	r3, 800401a <_svfiprintf_r+0x32>
 8004000:	2140      	movs	r1, #64	; 0x40
 8004002:	f000 fafd 	bl	8004600 <_malloc_r>
 8004006:	6028      	str	r0, [r5, #0]
 8004008:	6128      	str	r0, [r5, #16]
 800400a:	b920      	cbnz	r0, 8004016 <_svfiprintf_r+0x2e>
 800400c:	230c      	movs	r3, #12
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004014:	e0d1      	b.n	80041ba <_svfiprintf_r+0x1d2>
 8004016:	2340      	movs	r3, #64	; 0x40
 8004018:	616b      	str	r3, [r5, #20]
 800401a:	2300      	movs	r3, #0
 800401c:	9309      	str	r3, [sp, #36]	; 0x24
 800401e:	2320      	movs	r3, #32
 8004020:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004024:	f8cd 800c 	str.w	r8, [sp, #12]
 8004028:	2330      	movs	r3, #48	; 0x30
 800402a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80041d4 <_svfiprintf_r+0x1ec>
 800402e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004032:	f04f 0901 	mov.w	r9, #1
 8004036:	4623      	mov	r3, r4
 8004038:	469a      	mov	sl, r3
 800403a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800403e:	b10a      	cbz	r2, 8004044 <_svfiprintf_r+0x5c>
 8004040:	2a25      	cmp	r2, #37	; 0x25
 8004042:	d1f9      	bne.n	8004038 <_svfiprintf_r+0x50>
 8004044:	ebba 0b04 	subs.w	fp, sl, r4
 8004048:	d00b      	beq.n	8004062 <_svfiprintf_r+0x7a>
 800404a:	465b      	mov	r3, fp
 800404c:	4622      	mov	r2, r4
 800404e:	4629      	mov	r1, r5
 8004050:	4638      	mov	r0, r7
 8004052:	f7ff ff6d 	bl	8003f30 <__ssputs_r>
 8004056:	3001      	adds	r0, #1
 8004058:	f000 80aa 	beq.w	80041b0 <_svfiprintf_r+0x1c8>
 800405c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800405e:	445a      	add	r2, fp
 8004060:	9209      	str	r2, [sp, #36]	; 0x24
 8004062:	f89a 3000 	ldrb.w	r3, [sl]
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 80a2 	beq.w	80041b0 <_svfiprintf_r+0x1c8>
 800406c:	2300      	movs	r3, #0
 800406e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004072:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004076:	f10a 0a01 	add.w	sl, sl, #1
 800407a:	9304      	str	r3, [sp, #16]
 800407c:	9307      	str	r3, [sp, #28]
 800407e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004082:	931a      	str	r3, [sp, #104]	; 0x68
 8004084:	4654      	mov	r4, sl
 8004086:	2205      	movs	r2, #5
 8004088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800408c:	4851      	ldr	r0, [pc, #324]	; (80041d4 <_svfiprintf_r+0x1ec>)
 800408e:	f7fc f89f 	bl	80001d0 <memchr>
 8004092:	9a04      	ldr	r2, [sp, #16]
 8004094:	b9d8      	cbnz	r0, 80040ce <_svfiprintf_r+0xe6>
 8004096:	06d0      	lsls	r0, r2, #27
 8004098:	bf44      	itt	mi
 800409a:	2320      	movmi	r3, #32
 800409c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040a0:	0711      	lsls	r1, r2, #28
 80040a2:	bf44      	itt	mi
 80040a4:	232b      	movmi	r3, #43	; 0x2b
 80040a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040aa:	f89a 3000 	ldrb.w	r3, [sl]
 80040ae:	2b2a      	cmp	r3, #42	; 0x2a
 80040b0:	d015      	beq.n	80040de <_svfiprintf_r+0xf6>
 80040b2:	9a07      	ldr	r2, [sp, #28]
 80040b4:	4654      	mov	r4, sl
 80040b6:	2000      	movs	r0, #0
 80040b8:	f04f 0c0a 	mov.w	ip, #10
 80040bc:	4621      	mov	r1, r4
 80040be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040c2:	3b30      	subs	r3, #48	; 0x30
 80040c4:	2b09      	cmp	r3, #9
 80040c6:	d94e      	bls.n	8004166 <_svfiprintf_r+0x17e>
 80040c8:	b1b0      	cbz	r0, 80040f8 <_svfiprintf_r+0x110>
 80040ca:	9207      	str	r2, [sp, #28]
 80040cc:	e014      	b.n	80040f8 <_svfiprintf_r+0x110>
 80040ce:	eba0 0308 	sub.w	r3, r0, r8
 80040d2:	fa09 f303 	lsl.w	r3, r9, r3
 80040d6:	4313      	orrs	r3, r2
 80040d8:	9304      	str	r3, [sp, #16]
 80040da:	46a2      	mov	sl, r4
 80040dc:	e7d2      	b.n	8004084 <_svfiprintf_r+0x9c>
 80040de:	9b03      	ldr	r3, [sp, #12]
 80040e0:	1d19      	adds	r1, r3, #4
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	9103      	str	r1, [sp, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	bfbb      	ittet	lt
 80040ea:	425b      	neglt	r3, r3
 80040ec:	f042 0202 	orrlt.w	r2, r2, #2
 80040f0:	9307      	strge	r3, [sp, #28]
 80040f2:	9307      	strlt	r3, [sp, #28]
 80040f4:	bfb8      	it	lt
 80040f6:	9204      	strlt	r2, [sp, #16]
 80040f8:	7823      	ldrb	r3, [r4, #0]
 80040fa:	2b2e      	cmp	r3, #46	; 0x2e
 80040fc:	d10c      	bne.n	8004118 <_svfiprintf_r+0x130>
 80040fe:	7863      	ldrb	r3, [r4, #1]
 8004100:	2b2a      	cmp	r3, #42	; 0x2a
 8004102:	d135      	bne.n	8004170 <_svfiprintf_r+0x188>
 8004104:	9b03      	ldr	r3, [sp, #12]
 8004106:	1d1a      	adds	r2, r3, #4
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	9203      	str	r2, [sp, #12]
 800410c:	2b00      	cmp	r3, #0
 800410e:	bfb8      	it	lt
 8004110:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004114:	3402      	adds	r4, #2
 8004116:	9305      	str	r3, [sp, #20]
 8004118:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80041e4 <_svfiprintf_r+0x1fc>
 800411c:	7821      	ldrb	r1, [r4, #0]
 800411e:	2203      	movs	r2, #3
 8004120:	4650      	mov	r0, sl
 8004122:	f7fc f855 	bl	80001d0 <memchr>
 8004126:	b140      	cbz	r0, 800413a <_svfiprintf_r+0x152>
 8004128:	2340      	movs	r3, #64	; 0x40
 800412a:	eba0 000a 	sub.w	r0, r0, sl
 800412e:	fa03 f000 	lsl.w	r0, r3, r0
 8004132:	9b04      	ldr	r3, [sp, #16]
 8004134:	4303      	orrs	r3, r0
 8004136:	3401      	adds	r4, #1
 8004138:	9304      	str	r3, [sp, #16]
 800413a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800413e:	4826      	ldr	r0, [pc, #152]	; (80041d8 <_svfiprintf_r+0x1f0>)
 8004140:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004144:	2206      	movs	r2, #6
 8004146:	f7fc f843 	bl	80001d0 <memchr>
 800414a:	2800      	cmp	r0, #0
 800414c:	d038      	beq.n	80041c0 <_svfiprintf_r+0x1d8>
 800414e:	4b23      	ldr	r3, [pc, #140]	; (80041dc <_svfiprintf_r+0x1f4>)
 8004150:	bb1b      	cbnz	r3, 800419a <_svfiprintf_r+0x1b2>
 8004152:	9b03      	ldr	r3, [sp, #12]
 8004154:	3307      	adds	r3, #7
 8004156:	f023 0307 	bic.w	r3, r3, #7
 800415a:	3308      	adds	r3, #8
 800415c:	9303      	str	r3, [sp, #12]
 800415e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004160:	4433      	add	r3, r6
 8004162:	9309      	str	r3, [sp, #36]	; 0x24
 8004164:	e767      	b.n	8004036 <_svfiprintf_r+0x4e>
 8004166:	fb0c 3202 	mla	r2, ip, r2, r3
 800416a:	460c      	mov	r4, r1
 800416c:	2001      	movs	r0, #1
 800416e:	e7a5      	b.n	80040bc <_svfiprintf_r+0xd4>
 8004170:	2300      	movs	r3, #0
 8004172:	3401      	adds	r4, #1
 8004174:	9305      	str	r3, [sp, #20]
 8004176:	4619      	mov	r1, r3
 8004178:	f04f 0c0a 	mov.w	ip, #10
 800417c:	4620      	mov	r0, r4
 800417e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004182:	3a30      	subs	r2, #48	; 0x30
 8004184:	2a09      	cmp	r2, #9
 8004186:	d903      	bls.n	8004190 <_svfiprintf_r+0x1a8>
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0c5      	beq.n	8004118 <_svfiprintf_r+0x130>
 800418c:	9105      	str	r1, [sp, #20]
 800418e:	e7c3      	b.n	8004118 <_svfiprintf_r+0x130>
 8004190:	fb0c 2101 	mla	r1, ip, r1, r2
 8004194:	4604      	mov	r4, r0
 8004196:	2301      	movs	r3, #1
 8004198:	e7f0      	b.n	800417c <_svfiprintf_r+0x194>
 800419a:	ab03      	add	r3, sp, #12
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	462a      	mov	r2, r5
 80041a0:	4b0f      	ldr	r3, [pc, #60]	; (80041e0 <_svfiprintf_r+0x1f8>)
 80041a2:	a904      	add	r1, sp, #16
 80041a4:	4638      	mov	r0, r7
 80041a6:	f3af 8000 	nop.w
 80041aa:	1c42      	adds	r2, r0, #1
 80041ac:	4606      	mov	r6, r0
 80041ae:	d1d6      	bne.n	800415e <_svfiprintf_r+0x176>
 80041b0:	89ab      	ldrh	r3, [r5, #12]
 80041b2:	065b      	lsls	r3, r3, #25
 80041b4:	f53f af2c 	bmi.w	8004010 <_svfiprintf_r+0x28>
 80041b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041ba:	b01d      	add	sp, #116	; 0x74
 80041bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041c0:	ab03      	add	r3, sp, #12
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	462a      	mov	r2, r5
 80041c6:	4b06      	ldr	r3, [pc, #24]	; (80041e0 <_svfiprintf_r+0x1f8>)
 80041c8:	a904      	add	r1, sp, #16
 80041ca:	4638      	mov	r0, r7
 80041cc:	f000 f87a 	bl	80042c4 <_printf_i>
 80041d0:	e7eb      	b.n	80041aa <_svfiprintf_r+0x1c2>
 80041d2:	bf00      	nop
 80041d4:	080047a4 	.word	0x080047a4
 80041d8:	080047ae 	.word	0x080047ae
 80041dc:	00000000 	.word	0x00000000
 80041e0:	08003f31 	.word	0x08003f31
 80041e4:	080047aa 	.word	0x080047aa

080041e8 <_printf_common>:
 80041e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041ec:	4616      	mov	r6, r2
 80041ee:	4699      	mov	r9, r3
 80041f0:	688a      	ldr	r2, [r1, #8]
 80041f2:	690b      	ldr	r3, [r1, #16]
 80041f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041f8:	4293      	cmp	r3, r2
 80041fa:	bfb8      	it	lt
 80041fc:	4613      	movlt	r3, r2
 80041fe:	6033      	str	r3, [r6, #0]
 8004200:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004204:	4607      	mov	r7, r0
 8004206:	460c      	mov	r4, r1
 8004208:	b10a      	cbz	r2, 800420e <_printf_common+0x26>
 800420a:	3301      	adds	r3, #1
 800420c:	6033      	str	r3, [r6, #0]
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	0699      	lsls	r1, r3, #26
 8004212:	bf42      	ittt	mi
 8004214:	6833      	ldrmi	r3, [r6, #0]
 8004216:	3302      	addmi	r3, #2
 8004218:	6033      	strmi	r3, [r6, #0]
 800421a:	6825      	ldr	r5, [r4, #0]
 800421c:	f015 0506 	ands.w	r5, r5, #6
 8004220:	d106      	bne.n	8004230 <_printf_common+0x48>
 8004222:	f104 0a19 	add.w	sl, r4, #25
 8004226:	68e3      	ldr	r3, [r4, #12]
 8004228:	6832      	ldr	r2, [r6, #0]
 800422a:	1a9b      	subs	r3, r3, r2
 800422c:	42ab      	cmp	r3, r5
 800422e:	dc26      	bgt.n	800427e <_printf_common+0x96>
 8004230:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004234:	1e13      	subs	r3, r2, #0
 8004236:	6822      	ldr	r2, [r4, #0]
 8004238:	bf18      	it	ne
 800423a:	2301      	movne	r3, #1
 800423c:	0692      	lsls	r2, r2, #26
 800423e:	d42b      	bmi.n	8004298 <_printf_common+0xb0>
 8004240:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004244:	4649      	mov	r1, r9
 8004246:	4638      	mov	r0, r7
 8004248:	47c0      	blx	r8
 800424a:	3001      	adds	r0, #1
 800424c:	d01e      	beq.n	800428c <_printf_common+0xa4>
 800424e:	6823      	ldr	r3, [r4, #0]
 8004250:	68e5      	ldr	r5, [r4, #12]
 8004252:	6832      	ldr	r2, [r6, #0]
 8004254:	f003 0306 	and.w	r3, r3, #6
 8004258:	2b04      	cmp	r3, #4
 800425a:	bf08      	it	eq
 800425c:	1aad      	subeq	r5, r5, r2
 800425e:	68a3      	ldr	r3, [r4, #8]
 8004260:	6922      	ldr	r2, [r4, #16]
 8004262:	bf0c      	ite	eq
 8004264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004268:	2500      	movne	r5, #0
 800426a:	4293      	cmp	r3, r2
 800426c:	bfc4      	itt	gt
 800426e:	1a9b      	subgt	r3, r3, r2
 8004270:	18ed      	addgt	r5, r5, r3
 8004272:	2600      	movs	r6, #0
 8004274:	341a      	adds	r4, #26
 8004276:	42b5      	cmp	r5, r6
 8004278:	d11a      	bne.n	80042b0 <_printf_common+0xc8>
 800427a:	2000      	movs	r0, #0
 800427c:	e008      	b.n	8004290 <_printf_common+0xa8>
 800427e:	2301      	movs	r3, #1
 8004280:	4652      	mov	r2, sl
 8004282:	4649      	mov	r1, r9
 8004284:	4638      	mov	r0, r7
 8004286:	47c0      	blx	r8
 8004288:	3001      	adds	r0, #1
 800428a:	d103      	bne.n	8004294 <_printf_common+0xac>
 800428c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004294:	3501      	adds	r5, #1
 8004296:	e7c6      	b.n	8004226 <_printf_common+0x3e>
 8004298:	18e1      	adds	r1, r4, r3
 800429a:	1c5a      	adds	r2, r3, #1
 800429c:	2030      	movs	r0, #48	; 0x30
 800429e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042a2:	4422      	add	r2, r4
 80042a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042ac:	3302      	adds	r3, #2
 80042ae:	e7c7      	b.n	8004240 <_printf_common+0x58>
 80042b0:	2301      	movs	r3, #1
 80042b2:	4622      	mov	r2, r4
 80042b4:	4649      	mov	r1, r9
 80042b6:	4638      	mov	r0, r7
 80042b8:	47c0      	blx	r8
 80042ba:	3001      	adds	r0, #1
 80042bc:	d0e6      	beq.n	800428c <_printf_common+0xa4>
 80042be:	3601      	adds	r6, #1
 80042c0:	e7d9      	b.n	8004276 <_printf_common+0x8e>
	...

080042c4 <_printf_i>:
 80042c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042c8:	460c      	mov	r4, r1
 80042ca:	4691      	mov	r9, r2
 80042cc:	7e27      	ldrb	r7, [r4, #24]
 80042ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 80042d0:	2f78      	cmp	r7, #120	; 0x78
 80042d2:	4680      	mov	r8, r0
 80042d4:	469a      	mov	sl, r3
 80042d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042da:	d807      	bhi.n	80042ec <_printf_i+0x28>
 80042dc:	2f62      	cmp	r7, #98	; 0x62
 80042de:	d80a      	bhi.n	80042f6 <_printf_i+0x32>
 80042e0:	2f00      	cmp	r7, #0
 80042e2:	f000 80d8 	beq.w	8004496 <_printf_i+0x1d2>
 80042e6:	2f58      	cmp	r7, #88	; 0x58
 80042e8:	f000 80a3 	beq.w	8004432 <_printf_i+0x16e>
 80042ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80042f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042f4:	e03a      	b.n	800436c <_printf_i+0xa8>
 80042f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042fa:	2b15      	cmp	r3, #21
 80042fc:	d8f6      	bhi.n	80042ec <_printf_i+0x28>
 80042fe:	a001      	add	r0, pc, #4	; (adr r0, 8004304 <_printf_i+0x40>)
 8004300:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004304:	0800435d 	.word	0x0800435d
 8004308:	08004371 	.word	0x08004371
 800430c:	080042ed 	.word	0x080042ed
 8004310:	080042ed 	.word	0x080042ed
 8004314:	080042ed 	.word	0x080042ed
 8004318:	080042ed 	.word	0x080042ed
 800431c:	08004371 	.word	0x08004371
 8004320:	080042ed 	.word	0x080042ed
 8004324:	080042ed 	.word	0x080042ed
 8004328:	080042ed 	.word	0x080042ed
 800432c:	080042ed 	.word	0x080042ed
 8004330:	0800447d 	.word	0x0800447d
 8004334:	080043a1 	.word	0x080043a1
 8004338:	0800445f 	.word	0x0800445f
 800433c:	080042ed 	.word	0x080042ed
 8004340:	080042ed 	.word	0x080042ed
 8004344:	0800449f 	.word	0x0800449f
 8004348:	080042ed 	.word	0x080042ed
 800434c:	080043a1 	.word	0x080043a1
 8004350:	080042ed 	.word	0x080042ed
 8004354:	080042ed 	.word	0x080042ed
 8004358:	08004467 	.word	0x08004467
 800435c:	680b      	ldr	r3, [r1, #0]
 800435e:	1d1a      	adds	r2, r3, #4
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	600a      	str	r2, [r1, #0]
 8004364:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004368:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800436c:	2301      	movs	r3, #1
 800436e:	e0a3      	b.n	80044b8 <_printf_i+0x1f4>
 8004370:	6825      	ldr	r5, [r4, #0]
 8004372:	6808      	ldr	r0, [r1, #0]
 8004374:	062e      	lsls	r6, r5, #24
 8004376:	f100 0304 	add.w	r3, r0, #4
 800437a:	d50a      	bpl.n	8004392 <_printf_i+0xce>
 800437c:	6805      	ldr	r5, [r0, #0]
 800437e:	600b      	str	r3, [r1, #0]
 8004380:	2d00      	cmp	r5, #0
 8004382:	da03      	bge.n	800438c <_printf_i+0xc8>
 8004384:	232d      	movs	r3, #45	; 0x2d
 8004386:	426d      	negs	r5, r5
 8004388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800438c:	485e      	ldr	r0, [pc, #376]	; (8004508 <_printf_i+0x244>)
 800438e:	230a      	movs	r3, #10
 8004390:	e019      	b.n	80043c6 <_printf_i+0x102>
 8004392:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004396:	6805      	ldr	r5, [r0, #0]
 8004398:	600b      	str	r3, [r1, #0]
 800439a:	bf18      	it	ne
 800439c:	b22d      	sxthne	r5, r5
 800439e:	e7ef      	b.n	8004380 <_printf_i+0xbc>
 80043a0:	680b      	ldr	r3, [r1, #0]
 80043a2:	6825      	ldr	r5, [r4, #0]
 80043a4:	1d18      	adds	r0, r3, #4
 80043a6:	6008      	str	r0, [r1, #0]
 80043a8:	0628      	lsls	r0, r5, #24
 80043aa:	d501      	bpl.n	80043b0 <_printf_i+0xec>
 80043ac:	681d      	ldr	r5, [r3, #0]
 80043ae:	e002      	b.n	80043b6 <_printf_i+0xf2>
 80043b0:	0669      	lsls	r1, r5, #25
 80043b2:	d5fb      	bpl.n	80043ac <_printf_i+0xe8>
 80043b4:	881d      	ldrh	r5, [r3, #0]
 80043b6:	4854      	ldr	r0, [pc, #336]	; (8004508 <_printf_i+0x244>)
 80043b8:	2f6f      	cmp	r7, #111	; 0x6f
 80043ba:	bf0c      	ite	eq
 80043bc:	2308      	moveq	r3, #8
 80043be:	230a      	movne	r3, #10
 80043c0:	2100      	movs	r1, #0
 80043c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043c6:	6866      	ldr	r6, [r4, #4]
 80043c8:	60a6      	str	r6, [r4, #8]
 80043ca:	2e00      	cmp	r6, #0
 80043cc:	bfa2      	ittt	ge
 80043ce:	6821      	ldrge	r1, [r4, #0]
 80043d0:	f021 0104 	bicge.w	r1, r1, #4
 80043d4:	6021      	strge	r1, [r4, #0]
 80043d6:	b90d      	cbnz	r5, 80043dc <_printf_i+0x118>
 80043d8:	2e00      	cmp	r6, #0
 80043da:	d04d      	beq.n	8004478 <_printf_i+0x1b4>
 80043dc:	4616      	mov	r6, r2
 80043de:	fbb5 f1f3 	udiv	r1, r5, r3
 80043e2:	fb03 5711 	mls	r7, r3, r1, r5
 80043e6:	5dc7      	ldrb	r7, [r0, r7]
 80043e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043ec:	462f      	mov	r7, r5
 80043ee:	42bb      	cmp	r3, r7
 80043f0:	460d      	mov	r5, r1
 80043f2:	d9f4      	bls.n	80043de <_printf_i+0x11a>
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d10b      	bne.n	8004410 <_printf_i+0x14c>
 80043f8:	6823      	ldr	r3, [r4, #0]
 80043fa:	07df      	lsls	r7, r3, #31
 80043fc:	d508      	bpl.n	8004410 <_printf_i+0x14c>
 80043fe:	6923      	ldr	r3, [r4, #16]
 8004400:	6861      	ldr	r1, [r4, #4]
 8004402:	4299      	cmp	r1, r3
 8004404:	bfde      	ittt	le
 8004406:	2330      	movle	r3, #48	; 0x30
 8004408:	f806 3c01 	strble.w	r3, [r6, #-1]
 800440c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004410:	1b92      	subs	r2, r2, r6
 8004412:	6122      	str	r2, [r4, #16]
 8004414:	f8cd a000 	str.w	sl, [sp]
 8004418:	464b      	mov	r3, r9
 800441a:	aa03      	add	r2, sp, #12
 800441c:	4621      	mov	r1, r4
 800441e:	4640      	mov	r0, r8
 8004420:	f7ff fee2 	bl	80041e8 <_printf_common>
 8004424:	3001      	adds	r0, #1
 8004426:	d14c      	bne.n	80044c2 <_printf_i+0x1fe>
 8004428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800442c:	b004      	add	sp, #16
 800442e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004432:	4835      	ldr	r0, [pc, #212]	; (8004508 <_printf_i+0x244>)
 8004434:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004438:	6823      	ldr	r3, [r4, #0]
 800443a:	680e      	ldr	r6, [r1, #0]
 800443c:	061f      	lsls	r7, r3, #24
 800443e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004442:	600e      	str	r6, [r1, #0]
 8004444:	d514      	bpl.n	8004470 <_printf_i+0x1ac>
 8004446:	07d9      	lsls	r1, r3, #31
 8004448:	bf44      	itt	mi
 800444a:	f043 0320 	orrmi.w	r3, r3, #32
 800444e:	6023      	strmi	r3, [r4, #0]
 8004450:	b91d      	cbnz	r5, 800445a <_printf_i+0x196>
 8004452:	6823      	ldr	r3, [r4, #0]
 8004454:	f023 0320 	bic.w	r3, r3, #32
 8004458:	6023      	str	r3, [r4, #0]
 800445a:	2310      	movs	r3, #16
 800445c:	e7b0      	b.n	80043c0 <_printf_i+0xfc>
 800445e:	6823      	ldr	r3, [r4, #0]
 8004460:	f043 0320 	orr.w	r3, r3, #32
 8004464:	6023      	str	r3, [r4, #0]
 8004466:	2378      	movs	r3, #120	; 0x78
 8004468:	4828      	ldr	r0, [pc, #160]	; (800450c <_printf_i+0x248>)
 800446a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800446e:	e7e3      	b.n	8004438 <_printf_i+0x174>
 8004470:	065e      	lsls	r6, r3, #25
 8004472:	bf48      	it	mi
 8004474:	b2ad      	uxthmi	r5, r5
 8004476:	e7e6      	b.n	8004446 <_printf_i+0x182>
 8004478:	4616      	mov	r6, r2
 800447a:	e7bb      	b.n	80043f4 <_printf_i+0x130>
 800447c:	680b      	ldr	r3, [r1, #0]
 800447e:	6826      	ldr	r6, [r4, #0]
 8004480:	6960      	ldr	r0, [r4, #20]
 8004482:	1d1d      	adds	r5, r3, #4
 8004484:	600d      	str	r5, [r1, #0]
 8004486:	0635      	lsls	r5, r6, #24
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	d501      	bpl.n	8004490 <_printf_i+0x1cc>
 800448c:	6018      	str	r0, [r3, #0]
 800448e:	e002      	b.n	8004496 <_printf_i+0x1d2>
 8004490:	0671      	lsls	r1, r6, #25
 8004492:	d5fb      	bpl.n	800448c <_printf_i+0x1c8>
 8004494:	8018      	strh	r0, [r3, #0]
 8004496:	2300      	movs	r3, #0
 8004498:	6123      	str	r3, [r4, #16]
 800449a:	4616      	mov	r6, r2
 800449c:	e7ba      	b.n	8004414 <_printf_i+0x150>
 800449e:	680b      	ldr	r3, [r1, #0]
 80044a0:	1d1a      	adds	r2, r3, #4
 80044a2:	600a      	str	r2, [r1, #0]
 80044a4:	681e      	ldr	r6, [r3, #0]
 80044a6:	6862      	ldr	r2, [r4, #4]
 80044a8:	2100      	movs	r1, #0
 80044aa:	4630      	mov	r0, r6
 80044ac:	f7fb fe90 	bl	80001d0 <memchr>
 80044b0:	b108      	cbz	r0, 80044b6 <_printf_i+0x1f2>
 80044b2:	1b80      	subs	r0, r0, r6
 80044b4:	6060      	str	r0, [r4, #4]
 80044b6:	6863      	ldr	r3, [r4, #4]
 80044b8:	6123      	str	r3, [r4, #16]
 80044ba:	2300      	movs	r3, #0
 80044bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044c0:	e7a8      	b.n	8004414 <_printf_i+0x150>
 80044c2:	6923      	ldr	r3, [r4, #16]
 80044c4:	4632      	mov	r2, r6
 80044c6:	4649      	mov	r1, r9
 80044c8:	4640      	mov	r0, r8
 80044ca:	47d0      	blx	sl
 80044cc:	3001      	adds	r0, #1
 80044ce:	d0ab      	beq.n	8004428 <_printf_i+0x164>
 80044d0:	6823      	ldr	r3, [r4, #0]
 80044d2:	079b      	lsls	r3, r3, #30
 80044d4:	d413      	bmi.n	80044fe <_printf_i+0x23a>
 80044d6:	68e0      	ldr	r0, [r4, #12]
 80044d8:	9b03      	ldr	r3, [sp, #12]
 80044da:	4298      	cmp	r0, r3
 80044dc:	bfb8      	it	lt
 80044de:	4618      	movlt	r0, r3
 80044e0:	e7a4      	b.n	800442c <_printf_i+0x168>
 80044e2:	2301      	movs	r3, #1
 80044e4:	4632      	mov	r2, r6
 80044e6:	4649      	mov	r1, r9
 80044e8:	4640      	mov	r0, r8
 80044ea:	47d0      	blx	sl
 80044ec:	3001      	adds	r0, #1
 80044ee:	d09b      	beq.n	8004428 <_printf_i+0x164>
 80044f0:	3501      	adds	r5, #1
 80044f2:	68e3      	ldr	r3, [r4, #12]
 80044f4:	9903      	ldr	r1, [sp, #12]
 80044f6:	1a5b      	subs	r3, r3, r1
 80044f8:	42ab      	cmp	r3, r5
 80044fa:	dcf2      	bgt.n	80044e2 <_printf_i+0x21e>
 80044fc:	e7eb      	b.n	80044d6 <_printf_i+0x212>
 80044fe:	2500      	movs	r5, #0
 8004500:	f104 0619 	add.w	r6, r4, #25
 8004504:	e7f5      	b.n	80044f2 <_printf_i+0x22e>
 8004506:	bf00      	nop
 8004508:	080047b5 	.word	0x080047b5
 800450c:	080047c6 	.word	0x080047c6

08004510 <memcpy>:
 8004510:	440a      	add	r2, r1
 8004512:	4291      	cmp	r1, r2
 8004514:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004518:	d100      	bne.n	800451c <memcpy+0xc>
 800451a:	4770      	bx	lr
 800451c:	b510      	push	{r4, lr}
 800451e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004522:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004526:	4291      	cmp	r1, r2
 8004528:	d1f9      	bne.n	800451e <memcpy+0xe>
 800452a:	bd10      	pop	{r4, pc}

0800452c <memmove>:
 800452c:	4288      	cmp	r0, r1
 800452e:	b510      	push	{r4, lr}
 8004530:	eb01 0402 	add.w	r4, r1, r2
 8004534:	d902      	bls.n	800453c <memmove+0x10>
 8004536:	4284      	cmp	r4, r0
 8004538:	4623      	mov	r3, r4
 800453a:	d807      	bhi.n	800454c <memmove+0x20>
 800453c:	1e43      	subs	r3, r0, #1
 800453e:	42a1      	cmp	r1, r4
 8004540:	d008      	beq.n	8004554 <memmove+0x28>
 8004542:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004546:	f803 2f01 	strb.w	r2, [r3, #1]!
 800454a:	e7f8      	b.n	800453e <memmove+0x12>
 800454c:	4402      	add	r2, r0
 800454e:	4601      	mov	r1, r0
 8004550:	428a      	cmp	r2, r1
 8004552:	d100      	bne.n	8004556 <memmove+0x2a>
 8004554:	bd10      	pop	{r4, pc}
 8004556:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800455a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800455e:	e7f7      	b.n	8004550 <memmove+0x24>

08004560 <_free_r>:
 8004560:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004562:	2900      	cmp	r1, #0
 8004564:	d048      	beq.n	80045f8 <_free_r+0x98>
 8004566:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800456a:	9001      	str	r0, [sp, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	f1a1 0404 	sub.w	r4, r1, #4
 8004572:	bfb8      	it	lt
 8004574:	18e4      	addlt	r4, r4, r3
 8004576:	f000 f8d3 	bl	8004720 <__malloc_lock>
 800457a:	4a20      	ldr	r2, [pc, #128]	; (80045fc <_free_r+0x9c>)
 800457c:	9801      	ldr	r0, [sp, #4]
 800457e:	6813      	ldr	r3, [r2, #0]
 8004580:	4615      	mov	r5, r2
 8004582:	b933      	cbnz	r3, 8004592 <_free_r+0x32>
 8004584:	6063      	str	r3, [r4, #4]
 8004586:	6014      	str	r4, [r2, #0]
 8004588:	b003      	add	sp, #12
 800458a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800458e:	f000 b8cd 	b.w	800472c <__malloc_unlock>
 8004592:	42a3      	cmp	r3, r4
 8004594:	d90b      	bls.n	80045ae <_free_r+0x4e>
 8004596:	6821      	ldr	r1, [r4, #0]
 8004598:	1862      	adds	r2, r4, r1
 800459a:	4293      	cmp	r3, r2
 800459c:	bf04      	itt	eq
 800459e:	681a      	ldreq	r2, [r3, #0]
 80045a0:	685b      	ldreq	r3, [r3, #4]
 80045a2:	6063      	str	r3, [r4, #4]
 80045a4:	bf04      	itt	eq
 80045a6:	1852      	addeq	r2, r2, r1
 80045a8:	6022      	streq	r2, [r4, #0]
 80045aa:	602c      	str	r4, [r5, #0]
 80045ac:	e7ec      	b.n	8004588 <_free_r+0x28>
 80045ae:	461a      	mov	r2, r3
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	b10b      	cbz	r3, 80045b8 <_free_r+0x58>
 80045b4:	42a3      	cmp	r3, r4
 80045b6:	d9fa      	bls.n	80045ae <_free_r+0x4e>
 80045b8:	6811      	ldr	r1, [r2, #0]
 80045ba:	1855      	adds	r5, r2, r1
 80045bc:	42a5      	cmp	r5, r4
 80045be:	d10b      	bne.n	80045d8 <_free_r+0x78>
 80045c0:	6824      	ldr	r4, [r4, #0]
 80045c2:	4421      	add	r1, r4
 80045c4:	1854      	adds	r4, r2, r1
 80045c6:	42a3      	cmp	r3, r4
 80045c8:	6011      	str	r1, [r2, #0]
 80045ca:	d1dd      	bne.n	8004588 <_free_r+0x28>
 80045cc:	681c      	ldr	r4, [r3, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	6053      	str	r3, [r2, #4]
 80045d2:	4421      	add	r1, r4
 80045d4:	6011      	str	r1, [r2, #0]
 80045d6:	e7d7      	b.n	8004588 <_free_r+0x28>
 80045d8:	d902      	bls.n	80045e0 <_free_r+0x80>
 80045da:	230c      	movs	r3, #12
 80045dc:	6003      	str	r3, [r0, #0]
 80045de:	e7d3      	b.n	8004588 <_free_r+0x28>
 80045e0:	6825      	ldr	r5, [r4, #0]
 80045e2:	1961      	adds	r1, r4, r5
 80045e4:	428b      	cmp	r3, r1
 80045e6:	bf04      	itt	eq
 80045e8:	6819      	ldreq	r1, [r3, #0]
 80045ea:	685b      	ldreq	r3, [r3, #4]
 80045ec:	6063      	str	r3, [r4, #4]
 80045ee:	bf04      	itt	eq
 80045f0:	1949      	addeq	r1, r1, r5
 80045f2:	6021      	streq	r1, [r4, #0]
 80045f4:	6054      	str	r4, [r2, #4]
 80045f6:	e7c7      	b.n	8004588 <_free_r+0x28>
 80045f8:	b003      	add	sp, #12
 80045fa:	bd30      	pop	{r4, r5, pc}
 80045fc:	2000009c 	.word	0x2000009c

08004600 <_malloc_r>:
 8004600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004602:	1ccd      	adds	r5, r1, #3
 8004604:	f025 0503 	bic.w	r5, r5, #3
 8004608:	3508      	adds	r5, #8
 800460a:	2d0c      	cmp	r5, #12
 800460c:	bf38      	it	cc
 800460e:	250c      	movcc	r5, #12
 8004610:	2d00      	cmp	r5, #0
 8004612:	4606      	mov	r6, r0
 8004614:	db01      	blt.n	800461a <_malloc_r+0x1a>
 8004616:	42a9      	cmp	r1, r5
 8004618:	d903      	bls.n	8004622 <_malloc_r+0x22>
 800461a:	230c      	movs	r3, #12
 800461c:	6033      	str	r3, [r6, #0]
 800461e:	2000      	movs	r0, #0
 8004620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004622:	f000 f87d 	bl	8004720 <__malloc_lock>
 8004626:	4921      	ldr	r1, [pc, #132]	; (80046ac <_malloc_r+0xac>)
 8004628:	680a      	ldr	r2, [r1, #0]
 800462a:	4614      	mov	r4, r2
 800462c:	b99c      	cbnz	r4, 8004656 <_malloc_r+0x56>
 800462e:	4f20      	ldr	r7, [pc, #128]	; (80046b0 <_malloc_r+0xb0>)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	b923      	cbnz	r3, 800463e <_malloc_r+0x3e>
 8004634:	4621      	mov	r1, r4
 8004636:	4630      	mov	r0, r6
 8004638:	f000 f862 	bl	8004700 <_sbrk_r>
 800463c:	6038      	str	r0, [r7, #0]
 800463e:	4629      	mov	r1, r5
 8004640:	4630      	mov	r0, r6
 8004642:	f000 f85d 	bl	8004700 <_sbrk_r>
 8004646:	1c43      	adds	r3, r0, #1
 8004648:	d123      	bne.n	8004692 <_malloc_r+0x92>
 800464a:	230c      	movs	r3, #12
 800464c:	6033      	str	r3, [r6, #0]
 800464e:	4630      	mov	r0, r6
 8004650:	f000 f86c 	bl	800472c <__malloc_unlock>
 8004654:	e7e3      	b.n	800461e <_malloc_r+0x1e>
 8004656:	6823      	ldr	r3, [r4, #0]
 8004658:	1b5b      	subs	r3, r3, r5
 800465a:	d417      	bmi.n	800468c <_malloc_r+0x8c>
 800465c:	2b0b      	cmp	r3, #11
 800465e:	d903      	bls.n	8004668 <_malloc_r+0x68>
 8004660:	6023      	str	r3, [r4, #0]
 8004662:	441c      	add	r4, r3
 8004664:	6025      	str	r5, [r4, #0]
 8004666:	e004      	b.n	8004672 <_malloc_r+0x72>
 8004668:	6863      	ldr	r3, [r4, #4]
 800466a:	42a2      	cmp	r2, r4
 800466c:	bf0c      	ite	eq
 800466e:	600b      	streq	r3, [r1, #0]
 8004670:	6053      	strne	r3, [r2, #4]
 8004672:	4630      	mov	r0, r6
 8004674:	f000 f85a 	bl	800472c <__malloc_unlock>
 8004678:	f104 000b 	add.w	r0, r4, #11
 800467c:	1d23      	adds	r3, r4, #4
 800467e:	f020 0007 	bic.w	r0, r0, #7
 8004682:	1ac2      	subs	r2, r0, r3
 8004684:	d0cc      	beq.n	8004620 <_malloc_r+0x20>
 8004686:	1a1b      	subs	r3, r3, r0
 8004688:	50a3      	str	r3, [r4, r2]
 800468a:	e7c9      	b.n	8004620 <_malloc_r+0x20>
 800468c:	4622      	mov	r2, r4
 800468e:	6864      	ldr	r4, [r4, #4]
 8004690:	e7cc      	b.n	800462c <_malloc_r+0x2c>
 8004692:	1cc4      	adds	r4, r0, #3
 8004694:	f024 0403 	bic.w	r4, r4, #3
 8004698:	42a0      	cmp	r0, r4
 800469a:	d0e3      	beq.n	8004664 <_malloc_r+0x64>
 800469c:	1a21      	subs	r1, r4, r0
 800469e:	4630      	mov	r0, r6
 80046a0:	f000 f82e 	bl	8004700 <_sbrk_r>
 80046a4:	3001      	adds	r0, #1
 80046a6:	d1dd      	bne.n	8004664 <_malloc_r+0x64>
 80046a8:	e7cf      	b.n	800464a <_malloc_r+0x4a>
 80046aa:	bf00      	nop
 80046ac:	2000009c 	.word	0x2000009c
 80046b0:	200000a0 	.word	0x200000a0

080046b4 <_realloc_r>:
 80046b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b6:	4607      	mov	r7, r0
 80046b8:	4614      	mov	r4, r2
 80046ba:	460e      	mov	r6, r1
 80046bc:	b921      	cbnz	r1, 80046c8 <_realloc_r+0x14>
 80046be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80046c2:	4611      	mov	r1, r2
 80046c4:	f7ff bf9c 	b.w	8004600 <_malloc_r>
 80046c8:	b922      	cbnz	r2, 80046d4 <_realloc_r+0x20>
 80046ca:	f7ff ff49 	bl	8004560 <_free_r>
 80046ce:	4625      	mov	r5, r4
 80046d0:	4628      	mov	r0, r5
 80046d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046d4:	f000 f830 	bl	8004738 <_malloc_usable_size_r>
 80046d8:	42a0      	cmp	r0, r4
 80046da:	d20f      	bcs.n	80046fc <_realloc_r+0x48>
 80046dc:	4621      	mov	r1, r4
 80046de:	4638      	mov	r0, r7
 80046e0:	f7ff ff8e 	bl	8004600 <_malloc_r>
 80046e4:	4605      	mov	r5, r0
 80046e6:	2800      	cmp	r0, #0
 80046e8:	d0f2      	beq.n	80046d0 <_realloc_r+0x1c>
 80046ea:	4631      	mov	r1, r6
 80046ec:	4622      	mov	r2, r4
 80046ee:	f7ff ff0f 	bl	8004510 <memcpy>
 80046f2:	4631      	mov	r1, r6
 80046f4:	4638      	mov	r0, r7
 80046f6:	f7ff ff33 	bl	8004560 <_free_r>
 80046fa:	e7e9      	b.n	80046d0 <_realloc_r+0x1c>
 80046fc:	4635      	mov	r5, r6
 80046fe:	e7e7      	b.n	80046d0 <_realloc_r+0x1c>

08004700 <_sbrk_r>:
 8004700:	b538      	push	{r3, r4, r5, lr}
 8004702:	4d06      	ldr	r5, [pc, #24]	; (800471c <_sbrk_r+0x1c>)
 8004704:	2300      	movs	r3, #0
 8004706:	4604      	mov	r4, r0
 8004708:	4608      	mov	r0, r1
 800470a:	602b      	str	r3, [r5, #0]
 800470c:	f7fc fc46 	bl	8000f9c <_sbrk>
 8004710:	1c43      	adds	r3, r0, #1
 8004712:	d102      	bne.n	800471a <_sbrk_r+0x1a>
 8004714:	682b      	ldr	r3, [r5, #0]
 8004716:	b103      	cbz	r3, 800471a <_sbrk_r+0x1a>
 8004718:	6023      	str	r3, [r4, #0]
 800471a:	bd38      	pop	{r3, r4, r5, pc}
 800471c:	20000180 	.word	0x20000180

08004720 <__malloc_lock>:
 8004720:	4801      	ldr	r0, [pc, #4]	; (8004728 <__malloc_lock+0x8>)
 8004722:	f000 b811 	b.w	8004748 <__retarget_lock_acquire_recursive>
 8004726:	bf00      	nop
 8004728:	20000188 	.word	0x20000188

0800472c <__malloc_unlock>:
 800472c:	4801      	ldr	r0, [pc, #4]	; (8004734 <__malloc_unlock+0x8>)
 800472e:	f000 b80c 	b.w	800474a <__retarget_lock_release_recursive>
 8004732:	bf00      	nop
 8004734:	20000188 	.word	0x20000188

08004738 <_malloc_usable_size_r>:
 8004738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800473c:	1f18      	subs	r0, r3, #4
 800473e:	2b00      	cmp	r3, #0
 8004740:	bfbc      	itt	lt
 8004742:	580b      	ldrlt	r3, [r1, r0]
 8004744:	18c0      	addlt	r0, r0, r3
 8004746:	4770      	bx	lr

08004748 <__retarget_lock_acquire_recursive>:
 8004748:	4770      	bx	lr

0800474a <__retarget_lock_release_recursive>:
 800474a:	4770      	bx	lr

0800474c <_init>:
 800474c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474e:	bf00      	nop
 8004750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004752:	bc08      	pop	{r3}
 8004754:	469e      	mov	lr, r3
 8004756:	4770      	bx	lr

08004758 <_fini>:
 8004758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475a:	bf00      	nop
 800475c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800475e:	bc08      	pop	{r3}
 8004760:	469e      	mov	lr, r3
 8004762:	4770      	bx	lr
