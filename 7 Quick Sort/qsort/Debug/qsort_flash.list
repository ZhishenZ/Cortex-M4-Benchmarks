
qsort_flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dd4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008cd0  08002f5c  08002f5c  00012f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc2c  0800bc2c  00030040  2**0
                  CONTENTS
  4 .ARM          00000000  0800bc2c  0800bc2c  00030040  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bc2c  0800bc2c  00030040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc2c  0800bc2c  0001bc2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc30  0800bc30  0001bc30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800bc34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000040  10000000  10000000  00030000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .bss          00000080  20000010  20000010  00040010  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000090  20000090  00040010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009c47  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000148a  00000000  00000000  00039cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000910  00000000  00000000  0003b148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000878  00000000  00000000  0003ba58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cfd1  00000000  00000000  0003c2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009f67  00000000  00000000  000592a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b201f  00000000  00000000  00063208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00115227  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002788  00000000  00000000  0011527c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002f44 	.word	0x08002f44

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08002f44 	.word	0x08002f44

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__aeabi_drsub>:
 80001dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e0:	e002      	b.n	80001e8 <__adddf3>
 80001e2:	bf00      	nop

080001e4 <__aeabi_dsub>:
 80001e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e8 <__adddf3>:
 80001e8:	b530      	push	{r4, r5, lr}
 80001ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f2:	ea94 0f05 	teq	r4, r5
 80001f6:	bf08      	it	eq
 80001f8:	ea90 0f02 	teqeq	r0, r2
 80001fc:	bf1f      	itttt	ne
 80001fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000202:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000206:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020e:	f000 80e2 	beq.w	80003d6 <__adddf3+0x1ee>
 8000212:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000216:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021a:	bfb8      	it	lt
 800021c:	426d      	neglt	r5, r5
 800021e:	dd0c      	ble.n	800023a <__adddf3+0x52>
 8000220:	442c      	add	r4, r5
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	ea82 0000 	eor.w	r0, r2, r0
 800022e:	ea83 0101 	eor.w	r1, r3, r1
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	2d36      	cmp	r5, #54	; 0x36
 800023c:	bf88      	it	hi
 800023e:	bd30      	pophi	{r4, r5, pc}
 8000240:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000244:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000248:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800024c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x70>
 8000252:	4240      	negs	r0, r0
 8000254:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000258:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800025c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000260:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x84>
 8000266:	4252      	negs	r2, r2
 8000268:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800026c:	ea94 0f05 	teq	r4, r5
 8000270:	f000 80a7 	beq.w	80003c2 <__adddf3+0x1da>
 8000274:	f1a4 0401 	sub.w	r4, r4, #1
 8000278:	f1d5 0e20 	rsbs	lr, r5, #32
 800027c:	db0d      	blt.n	800029a <__adddf3+0xb2>
 800027e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000282:	fa22 f205 	lsr.w	r2, r2, r5
 8000286:	1880      	adds	r0, r0, r2
 8000288:	f141 0100 	adc.w	r1, r1, #0
 800028c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000290:	1880      	adds	r0, r0, r2
 8000292:	fa43 f305 	asr.w	r3, r3, r5
 8000296:	4159      	adcs	r1, r3
 8000298:	e00e      	b.n	80002b8 <__adddf3+0xd0>
 800029a:	f1a5 0520 	sub.w	r5, r5, #32
 800029e:	f10e 0e20 	add.w	lr, lr, #32
 80002a2:	2a01      	cmp	r2, #1
 80002a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a8:	bf28      	it	cs
 80002aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ae:	fa43 f305 	asr.w	r3, r3, r5
 80002b2:	18c0      	adds	r0, r0, r3
 80002b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002bc:	d507      	bpl.n	80002ce <__adddf3+0xe6>
 80002be:	f04f 0e00 	mov.w	lr, #0
 80002c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d2:	d31b      	bcc.n	800030c <__adddf3+0x124>
 80002d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d8:	d30c      	bcc.n	80002f4 <__adddf3+0x10c>
 80002da:	0849      	lsrs	r1, r1, #1
 80002dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e4:	f104 0401 	add.w	r4, r4, #1
 80002e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f0:	f080 809a 	bcs.w	8000428 <__adddf3+0x240>
 80002f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f8:	bf08      	it	eq
 80002fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fe:	f150 0000 	adcs.w	r0, r0, #0
 8000302:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000306:	ea41 0105 	orr.w	r1, r1, r5
 800030a:	bd30      	pop	{r4, r5, pc}
 800030c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000310:	4140      	adcs	r0, r0
 8000312:	eb41 0101 	adc.w	r1, r1, r1
 8000316:	3c01      	subs	r4, #1
 8000318:	bf28      	it	cs
 800031a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031e:	d2e9      	bcs.n	80002f4 <__adddf3+0x10c>
 8000320:	f091 0f00 	teq	r1, #0
 8000324:	bf04      	itt	eq
 8000326:	4601      	moveq	r1, r0
 8000328:	2000      	moveq	r0, #0
 800032a:	fab1 f381 	clz	r3, r1
 800032e:	bf08      	it	eq
 8000330:	3320      	addeq	r3, #32
 8000332:	f1a3 030b 	sub.w	r3, r3, #11
 8000336:	f1b3 0220 	subs.w	r2, r3, #32
 800033a:	da0c      	bge.n	8000356 <__adddf3+0x16e>
 800033c:	320c      	adds	r2, #12
 800033e:	dd08      	ble.n	8000352 <__adddf3+0x16a>
 8000340:	f102 0c14 	add.w	ip, r2, #20
 8000344:	f1c2 020c 	rsb	r2, r2, #12
 8000348:	fa01 f00c 	lsl.w	r0, r1, ip
 800034c:	fa21 f102 	lsr.w	r1, r1, r2
 8000350:	e00c      	b.n	800036c <__adddf3+0x184>
 8000352:	f102 0214 	add.w	r2, r2, #20
 8000356:	bfd8      	it	le
 8000358:	f1c2 0c20 	rsble	ip, r2, #32
 800035c:	fa01 f102 	lsl.w	r1, r1, r2
 8000360:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000364:	bfdc      	itt	le
 8000366:	ea41 010c 	orrle.w	r1, r1, ip
 800036a:	4090      	lslle	r0, r2
 800036c:	1ae4      	subs	r4, r4, r3
 800036e:	bfa2      	ittt	ge
 8000370:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000374:	4329      	orrge	r1, r5
 8000376:	bd30      	popge	{r4, r5, pc}
 8000378:	ea6f 0404 	mvn.w	r4, r4
 800037c:	3c1f      	subs	r4, #31
 800037e:	da1c      	bge.n	80003ba <__adddf3+0x1d2>
 8000380:	340c      	adds	r4, #12
 8000382:	dc0e      	bgt.n	80003a2 <__adddf3+0x1ba>
 8000384:	f104 0414 	add.w	r4, r4, #20
 8000388:	f1c4 0220 	rsb	r2, r4, #32
 800038c:	fa20 f004 	lsr.w	r0, r0, r4
 8000390:	fa01 f302 	lsl.w	r3, r1, r2
 8000394:	ea40 0003 	orr.w	r0, r0, r3
 8000398:	fa21 f304 	lsr.w	r3, r1, r4
 800039c:	ea45 0103 	orr.w	r1, r5, r3
 80003a0:	bd30      	pop	{r4, r5, pc}
 80003a2:	f1c4 040c 	rsb	r4, r4, #12
 80003a6:	f1c4 0220 	rsb	r2, r4, #32
 80003aa:	fa20 f002 	lsr.w	r0, r0, r2
 80003ae:	fa01 f304 	lsl.w	r3, r1, r4
 80003b2:	ea40 0003 	orr.w	r0, r0, r3
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	fa21 f004 	lsr.w	r0, r1, r4
 80003be:	4629      	mov	r1, r5
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f094 0f00 	teq	r4, #0
 80003c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ca:	bf06      	itte	eq
 80003cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d0:	3401      	addeq	r4, #1
 80003d2:	3d01      	subne	r5, #1
 80003d4:	e74e      	b.n	8000274 <__adddf3+0x8c>
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf18      	it	ne
 80003dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e0:	d029      	beq.n	8000436 <__adddf3+0x24e>
 80003e2:	ea94 0f05 	teq	r4, r5
 80003e6:	bf08      	it	eq
 80003e8:	ea90 0f02 	teqeq	r0, r2
 80003ec:	d005      	beq.n	80003fa <__adddf3+0x212>
 80003ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f2:	bf04      	itt	eq
 80003f4:	4619      	moveq	r1, r3
 80003f6:	4610      	moveq	r0, r2
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	ea91 0f03 	teq	r1, r3
 80003fe:	bf1e      	ittt	ne
 8000400:	2100      	movne	r1, #0
 8000402:	2000      	movne	r0, #0
 8000404:	bd30      	popne	{r4, r5, pc}
 8000406:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040a:	d105      	bne.n	8000418 <__adddf3+0x230>
 800040c:	0040      	lsls	r0, r0, #1
 800040e:	4149      	adcs	r1, r1
 8000410:	bf28      	it	cs
 8000412:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000416:	bd30      	pop	{r4, r5, pc}
 8000418:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800041c:	bf3c      	itt	cc
 800041e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000422:	bd30      	popcc	{r4, r5, pc}
 8000424:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000428:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800042c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043a:	bf1a      	itte	ne
 800043c:	4619      	movne	r1, r3
 800043e:	4610      	movne	r0, r2
 8000440:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000444:	bf1c      	itt	ne
 8000446:	460b      	movne	r3, r1
 8000448:	4602      	movne	r2, r0
 800044a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044e:	bf06      	itte	eq
 8000450:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000454:	ea91 0f03 	teqeq	r1, r3
 8000458:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	bf00      	nop

08000460 <__aeabi_ui2d>:
 8000460:	f090 0f00 	teq	r0, #0
 8000464:	bf04      	itt	eq
 8000466:	2100      	moveq	r1, #0
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000470:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000474:	f04f 0500 	mov.w	r5, #0
 8000478:	f04f 0100 	mov.w	r1, #0
 800047c:	e750      	b.n	8000320 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_i2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000494:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000498:	bf48      	it	mi
 800049a:	4240      	negmi	r0, r0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e73e      	b.n	8000320 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_f2d>:
 80004a4:	0042      	lsls	r2, r0, #1
 80004a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b2:	bf1f      	itttt	ne
 80004b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c0:	4770      	bxne	lr
 80004c2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c6:	bf08      	it	eq
 80004c8:	4770      	bxeq	lr
 80004ca:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ce:	bf04      	itt	eq
 80004d0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e4:	e71c      	b.n	8000320 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_ul2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f04f 0500 	mov.w	r5, #0
 80004f6:	e00a      	b.n	800050e <__aeabi_l2d+0x16>

080004f8 <__aeabi_l2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000506:	d502      	bpl.n	800050e <__aeabi_l2d+0x16>
 8000508:	4240      	negs	r0, r0
 800050a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000512:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000516:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051a:	f43f aed8 	beq.w	80002ce <__adddf3+0xe6>
 800051e:	f04f 0203 	mov.w	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	fa00 fc03 	lsl.w	ip, r0, r3
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 fe03 	lsl.w	lr, r1, r3
 8000546:	ea40 000e 	orr.w	r0, r0, lr
 800054a:	fa21 f102 	lsr.w	r1, r1, r2
 800054e:	4414      	add	r4, r2
 8000550:	e6bd      	b.n	80002ce <__adddf3+0xe6>
 8000552:	bf00      	nop

08000554 <__aeabi_dmul>:
 8000554:	b570      	push	{r4, r5, r6, lr}
 8000556:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000562:	bf1d      	ittte	ne
 8000564:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000568:	ea94 0f0c 	teqne	r4, ip
 800056c:	ea95 0f0c 	teqne	r5, ip
 8000570:	f000 f8de 	bleq	8000730 <__aeabi_dmul+0x1dc>
 8000574:	442c      	add	r4, r5
 8000576:	ea81 0603 	eor.w	r6, r1, r3
 800057a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000582:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000586:	bf18      	it	ne
 8000588:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800058c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000590:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000594:	d038      	beq.n	8000608 <__aeabi_dmul+0xb4>
 8000596:	fba0 ce02 	umull	ip, lr, r0, r2
 800059a:	f04f 0500 	mov.w	r5, #0
 800059e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005aa:	f04f 0600 	mov.w	r6, #0
 80005ae:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b2:	f09c 0f00 	teq	ip, #0
 80005b6:	bf18      	it	ne
 80005b8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005bc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c8:	d204      	bcs.n	80005d4 <__aeabi_dmul+0x80>
 80005ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ce:	416d      	adcs	r5, r5
 80005d0:	eb46 0606 	adc.w	r6, r6, r6
 80005d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005ec:	bf88      	it	hi
 80005ee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f2:	d81e      	bhi.n	8000632 <__aeabi_dmul+0xde>
 80005f4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f8:	bf08      	it	eq
 80005fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fe:	f150 0000 	adcs.w	r0, r0, #0
 8000602:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800060c:	ea46 0101 	orr.w	r1, r6, r1
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	ea81 0103 	eor.w	r1, r1, r3
 8000618:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800061c:	bfc2      	ittt	gt
 800061e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000622:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000626:	bd70      	popgt	{r4, r5, r6, pc}
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f04f 0e00 	mov.w	lr, #0
 8000630:	3c01      	subs	r4, #1
 8000632:	f300 80ab 	bgt.w	800078c <__aeabi_dmul+0x238>
 8000636:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063a:	bfde      	ittt	le
 800063c:	2000      	movle	r0, #0
 800063e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000642:	bd70      	pople	{r4, r5, r6, pc}
 8000644:	f1c4 0400 	rsb	r4, r4, #0
 8000648:	3c20      	subs	r4, #32
 800064a:	da35      	bge.n	80006b8 <__aeabi_dmul+0x164>
 800064c:	340c      	adds	r4, #12
 800064e:	dc1b      	bgt.n	8000688 <__aeabi_dmul+0x134>
 8000650:	f104 0414 	add.w	r4, r4, #20
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f305 	lsl.w	r3, r0, r5
 800065c:	fa20 f004 	lsr.w	r0, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800066c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000670:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000674:	fa21 f604 	lsr.w	r6, r1, r4
 8000678:	eb42 0106 	adc.w	r1, r2, r6
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f1c4 040c 	rsb	r4, r4, #12
 800068c:	f1c4 0520 	rsb	r5, r4, #32
 8000690:	fa00 f304 	lsl.w	r3, r0, r4
 8000694:	fa20 f005 	lsr.w	r0, r0, r5
 8000698:	fa01 f204 	lsl.w	r2, r1, r4
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	f141 0100 	adc.w	r1, r1, #0
 80006ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b0:	bf08      	it	eq
 80006b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f205 	lsl.w	r2, r0, r5
 80006c0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c4:	fa20 f304 	lsr.w	r3, r0, r4
 80006c8:	fa01 f205 	lsl.w	r2, r1, r5
 80006cc:	ea43 0302 	orr.w	r3, r3, r2
 80006d0:	fa21 f004 	lsr.w	r0, r1, r4
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	fa21 f204 	lsr.w	r2, r1, r4
 80006dc:	ea20 0002 	bic.w	r0, r0, r2
 80006e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f094 0f00 	teq	r4, #0
 80006f4:	d10f      	bne.n	8000716 <__aeabi_dmul+0x1c2>
 80006f6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fa:	0040      	lsls	r0, r0, #1
 80006fc:	eb41 0101 	adc.w	r1, r1, r1
 8000700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000704:	bf08      	it	eq
 8000706:	3c01      	subeq	r4, #1
 8000708:	d0f7      	beq.n	80006fa <__aeabi_dmul+0x1a6>
 800070a:	ea41 0106 	orr.w	r1, r1, r6
 800070e:	f095 0f00 	teq	r5, #0
 8000712:	bf18      	it	ne
 8000714:	4770      	bxne	lr
 8000716:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071a:	0052      	lsls	r2, r2, #1
 800071c:	eb43 0303 	adc.w	r3, r3, r3
 8000720:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000724:	bf08      	it	eq
 8000726:	3d01      	subeq	r5, #1
 8000728:	d0f7      	beq.n	800071a <__aeabi_dmul+0x1c6>
 800072a:	ea43 0306 	orr.w	r3, r3, r6
 800072e:	4770      	bx	lr
 8000730:	ea94 0f0c 	teq	r4, ip
 8000734:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000738:	bf18      	it	ne
 800073a:	ea95 0f0c 	teqne	r5, ip
 800073e:	d00c      	beq.n	800075a <__aeabi_dmul+0x206>
 8000740:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000744:	bf18      	it	ne
 8000746:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074a:	d1d1      	bne.n	80006f0 <__aeabi_dmul+0x19c>
 800074c:	ea81 0103 	eor.w	r1, r1, r3
 8000750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	bd70      	pop	{r4, r5, r6, pc}
 800075a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075e:	bf06      	itte	eq
 8000760:	4610      	moveq	r0, r2
 8000762:	4619      	moveq	r1, r3
 8000764:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000768:	d019      	beq.n	800079e <__aeabi_dmul+0x24a>
 800076a:	ea94 0f0c 	teq	r4, ip
 800076e:	d102      	bne.n	8000776 <__aeabi_dmul+0x222>
 8000770:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000774:	d113      	bne.n	800079e <__aeabi_dmul+0x24a>
 8000776:	ea95 0f0c 	teq	r5, ip
 800077a:	d105      	bne.n	8000788 <__aeabi_dmul+0x234>
 800077c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000780:	bf1c      	itt	ne
 8000782:	4610      	movne	r0, r2
 8000784:	4619      	movne	r1, r3
 8000786:	d10a      	bne.n	800079e <__aeabi_dmul+0x24a>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000794:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a6:	bd70      	pop	{r4, r5, r6, pc}

080007a8 <__aeabi_ddiv>:
 80007a8:	b570      	push	{r4, r5, r6, lr}
 80007aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b6:	bf1d      	ittte	ne
 80007b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007bc:	ea94 0f0c 	teqne	r4, ip
 80007c0:	ea95 0f0c 	teqne	r5, ip
 80007c4:	f000 f8a7 	bleq	8000916 <__aeabi_ddiv+0x16e>
 80007c8:	eba4 0405 	sub.w	r4, r4, r5
 80007cc:	ea81 0e03 	eor.w	lr, r1, r3
 80007d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d8:	f000 8088 	beq.w	80008ec <__aeabi_ddiv+0x144>
 80007dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007fc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000800:	429d      	cmp	r5, r3
 8000802:	bf08      	it	eq
 8000804:	4296      	cmpeq	r6, r2
 8000806:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080e:	d202      	bcs.n	8000816 <__aeabi_ddiv+0x6e>
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	1ab6      	subs	r6, r6, r2
 8000818:	eb65 0503 	sbc.w	r5, r5, r3
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000826:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 000c 	orrcs.w	r0, r0, ip
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	ebb6 0e02 	subs.w	lr, r6, r2
 8000846:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084a:	bf22      	ittt	cs
 800084c:	1ab6      	subcs	r6, r6, r2
 800084e:	4675      	movcs	r5, lr
 8000850:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	ebb6 0e02 	subs.w	lr, r6, r2
 800085e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000862:	bf22      	ittt	cs
 8000864:	1ab6      	subcs	r6, r6, r2
 8000866:	4675      	movcs	r5, lr
 8000868:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	ebb6 0e02 	subs.w	lr, r6, r2
 8000876:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087a:	bf22      	ittt	cs
 800087c:	1ab6      	subcs	r6, r6, r2
 800087e:	4675      	movcs	r5, lr
 8000880:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000884:	ea55 0e06 	orrs.w	lr, r5, r6
 8000888:	d018      	beq.n	80008bc <__aeabi_ddiv+0x114>
 800088a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000892:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000896:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a6:	d1c0      	bne.n	800082a <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	d10b      	bne.n	80008c6 <__aeabi_ddiv+0x11e>
 80008ae:	ea41 0100 	orr.w	r1, r1, r0
 80008b2:	f04f 0000 	mov.w	r0, #0
 80008b6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ba:	e7b6      	b.n	800082a <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	bf04      	itt	eq
 80008c2:	4301      	orreq	r1, r0
 80008c4:	2000      	moveq	r0, #0
 80008c6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ca:	bf88      	it	hi
 80008cc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d0:	f63f aeaf 	bhi.w	8000632 <__aeabi_dmul+0xde>
 80008d4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d8:	bf04      	itt	eq
 80008da:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e2:	f150 0000 	adcs.w	r0, r0, #0
 80008e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ea:	bd70      	pop	{r4, r5, r6, pc}
 80008ec:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f8:	bfc2      	ittt	gt
 80008fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000902:	bd70      	popgt	{r4, r5, r6, pc}
 8000904:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000908:	f04f 0e00 	mov.w	lr, #0
 800090c:	3c01      	subs	r4, #1
 800090e:	e690      	b.n	8000632 <__aeabi_dmul+0xde>
 8000910:	ea45 0e06 	orr.w	lr, r5, r6
 8000914:	e68d      	b.n	8000632 <__aeabi_dmul+0xde>
 8000916:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091a:	ea94 0f0c 	teq	r4, ip
 800091e:	bf08      	it	eq
 8000920:	ea95 0f0c 	teqeq	r5, ip
 8000924:	f43f af3b 	beq.w	800079e <__aeabi_dmul+0x24a>
 8000928:	ea94 0f0c 	teq	r4, ip
 800092c:	d10a      	bne.n	8000944 <__aeabi_ddiv+0x19c>
 800092e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000932:	f47f af34 	bne.w	800079e <__aeabi_dmul+0x24a>
 8000936:	ea95 0f0c 	teq	r5, ip
 800093a:	f47f af25 	bne.w	8000788 <__aeabi_dmul+0x234>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e72c      	b.n	800079e <__aeabi_dmul+0x24a>
 8000944:	ea95 0f0c 	teq	r5, ip
 8000948:	d106      	bne.n	8000958 <__aeabi_ddiv+0x1b0>
 800094a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094e:	f43f aefd 	beq.w	800074c <__aeabi_dmul+0x1f8>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e722      	b.n	800079e <__aeabi_dmul+0x24a>
 8000958:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800095c:	bf18      	it	ne
 800095e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000962:	f47f aec5 	bne.w	80006f0 <__aeabi_dmul+0x19c>
 8000966:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096a:	f47f af0d 	bne.w	8000788 <__aeabi_dmul+0x234>
 800096e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000972:	f47f aeeb 	bne.w	800074c <__aeabi_dmul+0x1f8>
 8000976:	e712      	b.n	800079e <__aeabi_dmul+0x24a>

08000978 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8000978:	b5b0      	push	{r4, r5, r7, lr}
 800097a:	f5ad 4d0c 	sub.w	sp, sp, #35840	; 0x8c00
 800097e:	b0ac      	sub	sp, #176	; 0xb0
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  int time1 __attribute__((aligned (4))) = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	f507 420c 	add.w	r2, r7, #35840	; 0x8c00
 8000988:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 800098c:	6013      	str	r3, [r2, #0]
  int time2 __attribute__((aligned (4))) = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	f507 420c 	add.w	r2, r7, #35840	; 0x8c00
 8000994:	f102 02a4 	add.w	r2, r2, #164	; 0xa4
 8000998:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800099a:	f000 fa1d 	bl	8000dd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800099e:	f000 f89f 	bl	8000ae0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a2:	f000 f931 	bl	8000c08 <MX_GPIO_Init>
  MX_TIM2_Init();
 80009a6:	f000 f8e1 	bl	8000b6c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // enable update interrupts
  TIM2->DIER|=TIM_DIER_UIE;
 80009aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	60d3      	str	r3, [r2, #12]

  struct myStringStruct array[NUMBER_OF_STRING];



  HAL_TIM_Base_Start(&htim2);
 80009ba:	4842      	ldr	r0, [pc, #264]	; (8000ac4 <main+0x14c>)
 80009bc:	f001 fcca 	bl	8002354 <HAL_TIM_Base_Start>
  overflow_cnt = 0;
 80009c0:	4b41      	ldr	r3, [pc, #260]	; (8000ac8 <main+0x150>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]

  time1 = TIM2->CNT;
 80009c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009cc:	f507 420c 	add.w	r2, r7, #35840	; 0x8c00
 80009d0:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 80009d4:	6013      	str	r3, [r2, #0]

  for(int i=0;i<NUMBER_OF_STRING;i++)
 80009d6:	2300      	movs	r3, #0
 80009d8:	f507 420c 	add.w	r2, r7, #35840	; 0x8c00
 80009dc:	f102 02ac 	add.w	r2, r2, #172	; 0xac
 80009e0:	6013      	str	r3, [r2, #0]
 80009e2:	e025      	b.n	8000a30 <main+0xb8>
        strcpy(array[i].qstring, arr[i]);
 80009e4:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80009e8:	3aac      	subs	r2, #172	; 0xac
 80009ea:	f507 430c 	add.w	r3, r7, #35840	; 0x8c00
 80009ee:	f103 03ac 	add.w	r3, r3, #172	; 0xac
 80009f2:	6819      	ldr	r1, [r3, #0]
 80009f4:	460b      	mov	r3, r1
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	440b      	add	r3, r1
 80009fa:	00db      	lsls	r3, r3, #3
 80009fc:	18d0      	adds	r0, r2, r3
 80009fe:	f507 430c 	add.w	r3, r7, #35840	; 0x8c00
 8000a02:	f103 03ac 	add.w	r3, r3, #172	; 0xac
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4613      	mov	r3, r2
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	4413      	add	r3, r2
 8000a0e:	00db      	lsls	r3, r3, #3
 8000a10:	4a2e      	ldr	r2, [pc, #184]	; (8000acc <main+0x154>)
 8000a12:	4413      	add	r3, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	f002 fa8d 	bl	8002f34 <strcpy>
  for(int i=0;i<NUMBER_OF_STRING;i++)
 8000a1a:	f507 430c 	add.w	r3, r7, #35840	; 0x8c00
 8000a1e:	f103 03ac 	add.w	r3, r3, #172	; 0xac
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	3301      	adds	r3, #1
 8000a26:	f507 420c 	add.w	r2, r7, #35840	; 0x8c00
 8000a2a:	f102 02ac 	add.w	r2, r2, #172	; 0xac
 8000a2e:	6013      	str	r3, [r2, #0]
 8000a30:	f507 430c 	add.w	r3, r7, #35840	; 0x8c00
 8000a34:	f103 03ac 	add.w	r3, r3, #172	; 0xac
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f240 52db 	movw	r2, #1499	; 0x5db
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	ddd0      	ble.n	80009e4 <main+0x6c>

  qsort(array,NUMBER_OF_STRING,sizeof(struct myStringStruct),compare);
 8000a42:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8000a46:	38ac      	subs	r0, #172	; 0xac
 8000a48:	4b21      	ldr	r3, [pc, #132]	; (8000ad0 <main+0x158>)
 8000a4a:	2218      	movs	r2, #24
 8000a4c:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8000a50:	f002 f91f 	bl	8002c92 <qsort>

  time2 = TIM2->CNT;
 8000a54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a5a:	f507 420c 	add.w	r2, r7, #35840	; 0x8c00
 8000a5e:	f102 02a4 	add.w	r2, r2, #164	; 0xa4
 8000a62:	6013      	str	r3, [r2, #0]
  ////////////////////////////////////////////////////////////////////end counting time

  tim_cnt = time2 -time1;
 8000a64:	f507 430c 	add.w	r3, r7, #35840	; 0x8c00
 8000a68:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	f507 430c 	add.w	r3, r7, #35840	; 0x8c00
 8000a72:	f103 03a8 	add.w	r3, r3, #168	; 0xa8
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <main+0x15c>)
 8000a7e:	601a      	str	r2, [r3, #0]
  execution_time = overflow_cnt*1000 + (double)tim_cnt/(1000);
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <main+0x150>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a88:	fb02 f303 	mul.w	r3, r2, r3
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fce7 	bl	8000460 <__aeabi_ui2d>
 8000a92:	4604      	mov	r4, r0
 8000a94:	460d      	mov	r5, r1
 8000a96:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <main+0x15c>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff fce0 	bl	8000460 <__aeabi_ui2d>
 8000aa0:	f04f 0200 	mov.w	r2, #0
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <main+0x160>)
 8000aa6:	f7ff fe7f 	bl	80007a8 <__aeabi_ddiv>
 8000aaa:	4602      	mov	r2, r0
 8000aac:	460b      	mov	r3, r1
 8000aae:	4620      	mov	r0, r4
 8000ab0:	4629      	mov	r1, r5
 8000ab2:	f7ff fb99 	bl	80001e8 <__adddf3>
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	460b      	mov	r3, r1
 8000aba:	4908      	ldr	r1, [pc, #32]	; (8000adc <main+0x164>)
 8000abc:	e9c1 2300 	strd	r2, r3, [r1]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <main+0x148>
 8000ac2:	bf00      	nop
 8000ac4:	20000040 	.word	0x20000040
 8000ac8:	20000034 	.word	0x20000034
 8000acc:	08002f5c 	.word	0x08002f5c
 8000ad0:	10000001 	.word	0x10000001
 8000ad4:	20000030 	.word	0x20000030
 8000ad8:	408f4000 	.word	0x408f4000
 8000adc:	20000038 	.word	0x20000038

08000ae0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b090      	sub	sp, #64	; 0x40
 8000ae4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae6:	f107 0318 	add.w	r3, r7, #24
 8000aea:	2228      	movs	r2, #40	; 0x28
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f002 f88e 	bl	8002c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b02:	2301      	movs	r3, #1
 8000b04:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b0a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b10:	2301      	movs	r3, #1
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b14:	2302      	movs	r3, #2
 8000b16:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b1e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b22:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b24:	f107 0318 	add.w	r3, r7, #24
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 facd 	bl	80010c8 <HAL_RCC_OscConfig>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b34:	f000 f892 	bl	8000c5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b38:	230f      	movs	r3, #15
 8000b3a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	2102      	movs	r1, #2
 8000b52:	4618      	mov	r0, r3
 8000b54:	f001 f9c0 	bl	8001ed8 <HAL_RCC_ClockConfig>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b5e:	f000 f87d 	bl	8000c5c <Error_Handler>
  }
}
 8000b62:	bf00      	nop
 8000b64:	3740      	adds	r7, #64	; 0x40
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b72:	f107 0310 	add.w	r3, r7, #16
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b8a:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <MX_TIM2_Init+0x94>)
 8000b8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b90:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = (72-1);
 8000b92:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <MX_TIM2_Init+0x94>)
 8000b94:	2247      	movs	r2, #71	; 0x47
 8000b96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b98:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <MX_TIM2_Init+0x94>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = (1000000-1);
 8000b9e:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <MX_TIM2_Init+0x94>)
 8000ba0:	4a18      	ldr	r2, [pc, #96]	; (8000c04 <MX_TIM2_Init+0x98>)
 8000ba2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba4:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <MX_TIM2_Init+0x94>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000baa:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <MX_TIM2_Init+0x94>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bb0:	4813      	ldr	r0, [pc, #76]	; (8000c00 <MX_TIM2_Init+0x94>)
 8000bb2:	f001 fb77 	bl	80022a4 <HAL_TIM_Base_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000bbc:	f000 f84e 	bl	8000c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bc6:	f107 0310 	add.w	r3, r7, #16
 8000bca:	4619      	mov	r1, r3
 8000bcc:	480c      	ldr	r0, [pc, #48]	; (8000c00 <MX_TIM2_Init+0x94>)
 8000bce:	f001 fd42 	bl	8002656 <HAL_TIM_ConfigClockSource>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000bd8:	f000 f840 	bl	8000c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_TIM2_Init+0x94>)
 8000bea:	f001 ff4f 	bl	8002a8c <HAL_TIMEx_MasterConfigSynchronization>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000bf4:	f000 f832 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	3720      	adds	r7, #32
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000040 	.word	0x20000040
 8000c04:	000f423f 	.word	0x000f423f

08000c08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <MX_GPIO_Init+0x2c>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	4a08      	ldr	r2, [pc, #32]	; (8000c34 <MX_GPIO_Init+0x2c>)
 8000c14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c18:	6153      	str	r3, [r2, #20]
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <MX_GPIO_Init+0x2c>)
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]

}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	40021000 	.word	0x40021000

08000c38 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	overflow_cnt++;
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	3301      	adds	r3, #1
 8000c46:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c48:	6013      	str	r3, [r2, #0]

}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	20000034 	.word	0x20000034

08000c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c60:	b672      	cpsid	i
}
 8000c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <Error_Handler+0x8>
	...

08000c68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <HAL_MspInit+0x44>)
 8000c70:	699b      	ldr	r3, [r3, #24]
 8000c72:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <HAL_MspInit+0x44>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6193      	str	r3, [r2, #24]
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <HAL_MspInit+0x44>)
 8000c7c:	699b      	ldr	r3, [r3, #24]
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <HAL_MspInit+0x44>)
 8000c88:	69db      	ldr	r3, [r3, #28]
 8000c8a:	4a08      	ldr	r2, [pc, #32]	; (8000cac <HAL_MspInit+0x44>)
 8000c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c90:	61d3      	str	r3, [r2, #28]
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_MspInit+0x44>)
 8000c94:	69db      	ldr	r3, [r3, #28]
 8000c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	40021000 	.word	0x40021000

08000cb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cc0:	d113      	bne.n	8000cea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <HAL_TIM_Base_MspInit+0x44>)
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	4a0b      	ldr	r2, [pc, #44]	; (8000cf4 <HAL_TIM_Base_MspInit+0x44>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	61d3      	str	r3, [r2, #28]
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <HAL_TIM_Base_MspInit+0x44>)
 8000cd0:	69db      	ldr	r3, [r3, #28]
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	201c      	movs	r0, #28
 8000ce0:	f000 f9bb 	bl	800105a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ce4:	201c      	movs	r0, #28
 8000ce6:	f000 f9d4 	bl	8001092 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40021000 	.word	0x40021000

08000cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <NMI_Handler+0x4>

08000cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <HardFault_Handler+0x4>

08000d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <MemManage_Handler+0x4>

08000d0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <BusFault_Handler+0x4>

08000d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <UsageFault_Handler+0x4>

08000d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d44:	f000 f88e 	bl	8000e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d50:	4802      	ldr	r0, [pc, #8]	; (8000d5c <TIM2_IRQHandler+0x10>)
 8000d52:	f001 fb61 	bl	8002418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000040 	.word	0x20000040

08000d60 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <SystemInit+0x20>)
 8000d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6a:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <SystemInit+0x20>)
 8000d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dbc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d88:	480d      	ldr	r0, [pc, #52]	; (8000dc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d8a:	490e      	ldr	r1, [pc, #56]	; (8000dc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d8c:	4a0e      	ldr	r2, [pc, #56]	; (8000dc8 <LoopForever+0xe>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d90:	e002      	b.n	8000d98 <LoopCopyDataInit>

08000d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d96:	3304      	adds	r3, #4

08000d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d9c:	d3f9      	bcc.n	8000d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9e:	4a0b      	ldr	r2, [pc, #44]	; (8000dcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000da0:	4c0b      	ldr	r4, [pc, #44]	; (8000dd0 <LoopForever+0x16>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da4:	e001      	b.n	8000daa <LoopFillZerobss>

08000da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da8:	3204      	adds	r2, #4

08000daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dac:	d3fb      	bcc.n	8000da6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dae:	f7ff ffd7 	bl	8000d60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000db2:	f001 ff09 	bl	8002bc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000db6:	f7ff fddf 	bl	8000978 <main>

08000dba <LoopForever>:

LoopForever:
    b LoopForever
 8000dba:	e7fe      	b.n	8000dba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000dbc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dc8:	0800bc34 	.word	0x0800bc34
  ldr r2, =_sbss
 8000dcc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000dd0:	20000090 	.word	0x20000090

08000dd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dd4:	e7fe      	b.n	8000dd4 <ADC1_2_IRQHandler>
	...

08000dd8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <HAL_Init+0x28>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <HAL_Init+0x28>)
 8000de2:	f043 0310 	orr.w	r3, r3, #16
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de8:	2003      	movs	r0, #3
 8000dea:	f000 f92b 	bl	8001044 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dee:	200f      	movs	r0, #15
 8000df0:	f000 f808 	bl	8000e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df4:	f7ff ff38 	bl	8000c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40022000 	.word	0x40022000

08000e04 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_InitTick+0x54>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <HAL_InitTick+0x58>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	4619      	mov	r1, r3
 8000e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 f943 	bl	80010ae <HAL_SYSTICK_Config>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e00e      	b.n	8000e50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2b0f      	cmp	r3, #15
 8000e36:	d80a      	bhi.n	8000e4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	6879      	ldr	r1, [r7, #4]
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e40:	f000 f90b 	bl	800105a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e44:	4a06      	ldr	r2, [pc, #24]	; (8000e60 <HAL_InitTick+0x5c>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	e000      	b.n	8000e50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000000 	.word	0x20000000
 8000e5c:	20000008 	.word	0x20000008
 8000e60:	20000004 	.word	0x20000004

08000e64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_IncTick+0x20>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_IncTick+0x24>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4413      	add	r3, r2
 8000e74:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <HAL_IncTick+0x24>)
 8000e76:	6013      	str	r3, [r2, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20000008 	.word	0x20000008
 8000e88:	2000008c 	.word	0x2000008c

08000e8c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e90:	4b03      	ldr	r3, [pc, #12]	; (8000ea0 <HAL_GetTick+0x14>)
 8000e92:	681b      	ldr	r3, [r3, #0]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	2000008c 	.word	0x2000008c

08000ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eba:	68ba      	ldr	r2, [r7, #8]
 8000ebc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ecc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed6:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	60d3      	str	r3, [r2, #12]
}
 8000edc:	bf00      	nop
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef0:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	0a1b      	lsrs	r3, r3, #8
 8000ef6:	f003 0307 	and.w	r3, r3, #7
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	db0b      	blt.n	8000f32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	f003 021f 	and.w	r2, r3, #31
 8000f20:	4907      	ldr	r1, [pc, #28]	; (8000f40 <__NVIC_EnableIRQ+0x38>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	095b      	lsrs	r3, r3, #5
 8000f28:	2001      	movs	r0, #1
 8000f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000e100 	.word	0xe000e100

08000f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	db0a      	blt.n	8000f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	490c      	ldr	r1, [pc, #48]	; (8000f90 <__NVIC_SetPriority+0x4c>)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	0112      	lsls	r2, r2, #4
 8000f64:	b2d2      	uxtb	r2, r2
 8000f66:	440b      	add	r3, r1
 8000f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f6c:	e00a      	b.n	8000f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4908      	ldr	r1, [pc, #32]	; (8000f94 <__NVIC_SetPriority+0x50>)
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	f003 030f 	and.w	r3, r3, #15
 8000f7a:	3b04      	subs	r3, #4
 8000f7c:	0112      	lsls	r2, r2, #4
 8000f7e:	b2d2      	uxtb	r2, r2
 8000f80:	440b      	add	r3, r1
 8000f82:	761a      	strb	r2, [r3, #24]
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000e100 	.word	0xe000e100
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b089      	sub	sp, #36	; 0x24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f1c3 0307 	rsb	r3, r3, #7
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	bf28      	it	cs
 8000fb6:	2304      	movcs	r3, #4
 8000fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	2b06      	cmp	r3, #6
 8000fc0:	d902      	bls.n	8000fc8 <NVIC_EncodePriority+0x30>
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3b03      	subs	r3, #3
 8000fc6:	e000      	b.n	8000fca <NVIC_EncodePriority+0x32>
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43da      	mvns	r2, r3
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	401a      	ands	r2, r3
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fea:	43d9      	mvns	r1, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	4313      	orrs	r3, r2
         );
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3724      	adds	r7, #36	; 0x24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
	...

08001000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3b01      	subs	r3, #1
 800100c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001010:	d301      	bcc.n	8001016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001012:	2301      	movs	r3, #1
 8001014:	e00f      	b.n	8001036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001016:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <SysTick_Config+0x40>)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3b01      	subs	r3, #1
 800101c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800101e:	210f      	movs	r1, #15
 8001020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001024:	f7ff ff8e 	bl	8000f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <SysTick_Config+0x40>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800102e:	4b04      	ldr	r3, [pc, #16]	; (8001040 <SysTick_Config+0x40>)
 8001030:	2207      	movs	r2, #7
 8001032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	e000e010 	.word	0xe000e010

08001044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff ff29 	bl	8000ea4 <__NVIC_SetPriorityGrouping>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b086      	sub	sp, #24
 800105e:	af00      	add	r7, sp, #0
 8001060:	4603      	mov	r3, r0
 8001062:	60b9      	str	r1, [r7, #8]
 8001064:	607a      	str	r2, [r7, #4]
 8001066:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800106c:	f7ff ff3e 	bl	8000eec <__NVIC_GetPriorityGrouping>
 8001070:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	68b9      	ldr	r1, [r7, #8]
 8001076:	6978      	ldr	r0, [r7, #20]
 8001078:	f7ff ff8e 	bl	8000f98 <NVIC_EncodePriority>
 800107c:	4602      	mov	r2, r0
 800107e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001082:	4611      	mov	r1, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff5d 	bl	8000f44 <__NVIC_SetPriority>
}
 800108a:	bf00      	nop
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800109c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ff31 	bl	8000f08 <__NVIC_EnableIRQ>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff ffa2 	bl	8001000 <SysTick_Config>
 80010bc:	4603      	mov	r3, r0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d102      	bne.n	80010e2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	f000 bef4 	b.w	8001eca <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f000 816a 	beq.w	80013c6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010f2:	4bb3      	ldr	r3, [pc, #716]	; (80013c0 <HAL_RCC_OscConfig+0x2f8>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 030c 	and.w	r3, r3, #12
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	d00c      	beq.n	8001118 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010fe:	4bb0      	ldr	r3, [pc, #704]	; (80013c0 <HAL_RCC_OscConfig+0x2f8>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 030c 	and.w	r3, r3, #12
 8001106:	2b08      	cmp	r3, #8
 8001108:	d159      	bne.n	80011be <HAL_RCC_OscConfig+0xf6>
 800110a:	4bad      	ldr	r3, [pc, #692]	; (80013c0 <HAL_RCC_OscConfig+0x2f8>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001116:	d152      	bne.n	80011be <HAL_RCC_OscConfig+0xf6>
 8001118:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800111c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001120:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001124:	fa93 f3a3 	rbit	r3, r3
 8001128:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800112c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001130:	fab3 f383 	clz	r3, r3
 8001134:	b2db      	uxtb	r3, r3
 8001136:	095b      	lsrs	r3, r3, #5
 8001138:	b2db      	uxtb	r3, r3
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b01      	cmp	r3, #1
 8001142:	d102      	bne.n	800114a <HAL_RCC_OscConfig+0x82>
 8001144:	4b9e      	ldr	r3, [pc, #632]	; (80013c0 <HAL_RCC_OscConfig+0x2f8>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	e015      	b.n	8001176 <HAL_RCC_OscConfig+0xae>
 800114a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800114e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001152:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001156:	fa93 f3a3 	rbit	r3, r3
 800115a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800115e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001162:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001166:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800116a:	fa93 f3a3 	rbit	r3, r3
 800116e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001172:	4b93      	ldr	r3, [pc, #588]	; (80013c0 <HAL_RCC_OscConfig+0x2f8>)
 8001174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001176:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800117a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800117e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001182:	fa92 f2a2 	rbit	r2, r2
 8001186:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800118a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800118e:	fab2 f282 	clz	r2, r2
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	f042 0220 	orr.w	r2, r2, #32
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	f002 021f 	and.w	r2, r2, #31
 800119e:	2101      	movs	r1, #1
 80011a0:	fa01 f202 	lsl.w	r2, r1, r2
 80011a4:	4013      	ands	r3, r2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f000 810c 	beq.w	80013c4 <HAL_RCC_OscConfig+0x2fc>
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f040 8106 	bne.w	80013c4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	f000 be86 	b.w	8001eca <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c8:	d106      	bne.n	80011d8 <HAL_RCC_OscConfig+0x110>
 80011ca:	4b7d      	ldr	r3, [pc, #500]	; (80013c0 <HAL_RCC_OscConfig+0x2f8>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a7c      	ldr	r2, [pc, #496]	; (80013c0 <HAL_RCC_OscConfig+0x2f8>)
 80011d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	e030      	b.n	800123a <HAL_RCC_OscConfig+0x172>
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10c      	bne.n	80011fc <HAL_RCC_OscConfig+0x134>
 80011e2:	4b77      	ldr	r3, [pc, #476]	; (80013c0 <HAL_RCC_OscConfig+0x2f8>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a76      	ldr	r2, [pc, #472]	; (80013c0 <HAL_RCC_OscConfig+0x2f8>)
 80011e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	4b74      	ldr	r3, [pc, #464]	; (80013c0 <HAL_RCC_OscConfig+0x2f8>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a73      	ldr	r2, [pc, #460]	; (80013c0 <HAL_RCC_OscConfig+0x2f8>)
 80011f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	e01e      	b.n	800123a <HAL_RCC_OscConfig+0x172>
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001206:	d10c      	bne.n	8001222 <HAL_RCC_OscConfig+0x15a>
 8001208:	4b6d      	ldr	r3, [pc, #436]	; (80013c0 <HAL_RCC_OscConfig+0x2f8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a6c      	ldr	r2, [pc, #432]	; (80013c0 <HAL_RCC_OscConfig+0x2f8>)
 800120e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	4b6a      	ldr	r3, [pc, #424]	; (80013c0 <HAL_RCC_OscConfig+0x2f8>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a69      	ldr	r2, [pc, #420]	; (80013c0 <HAL_RCC_OscConfig+0x2f8>)
 800121a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	e00b      	b.n	800123a <HAL_RCC_OscConfig+0x172>
 8001222:	4b67      	ldr	r3, [pc, #412]	; (80013c0 <HAL_RCC_OscConfig+0x2f8>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a66      	ldr	r2, [pc, #408]	; (80013c0 <HAL_RCC_OscConfig+0x2f8>)
 8001228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	4b64      	ldr	r3, [pc, #400]	; (80013c0 <HAL_RCC_OscConfig+0x2f8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a63      	ldr	r2, [pc, #396]	; (80013c0 <HAL_RCC_OscConfig+0x2f8>)
 8001234:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001238:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800123a:	4b61      	ldr	r3, [pc, #388]	; (80013c0 <HAL_RCC_OscConfig+0x2f8>)
 800123c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123e:	f023 020f 	bic.w	r2, r3, #15
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	495d      	ldr	r1, [pc, #372]	; (80013c0 <HAL_RCC_OscConfig+0x2f8>)
 800124a:	4313      	orrs	r3, r2
 800124c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d059      	beq.n	800130c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001258:	f7ff fe18 	bl	8000e8c <HAL_GetTick>
 800125c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001260:	e00a      	b.n	8001278 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001262:	f7ff fe13 	bl	8000e8c <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b64      	cmp	r3, #100	; 0x64
 8001270:	d902      	bls.n	8001278 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	f000 be29 	b.w	8001eca <HAL_RCC_OscConfig+0xe02>
 8001278:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800127c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001280:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001284:	fa93 f3a3 	rbit	r3, r3
 8001288:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800128c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001290:	fab3 f383 	clz	r3, r3
 8001294:	b2db      	uxtb	r3, r3
 8001296:	095b      	lsrs	r3, r3, #5
 8001298:	b2db      	uxtb	r3, r3
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d102      	bne.n	80012aa <HAL_RCC_OscConfig+0x1e2>
 80012a4:	4b46      	ldr	r3, [pc, #280]	; (80013c0 <HAL_RCC_OscConfig+0x2f8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	e015      	b.n	80012d6 <HAL_RCC_OscConfig+0x20e>
 80012aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ae:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80012b6:	fa93 f3a3 	rbit	r3, r3
 80012ba:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80012be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012c2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80012c6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80012ca:	fa93 f3a3 	rbit	r3, r3
 80012ce:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80012d2:	4b3b      	ldr	r3, [pc, #236]	; (80013c0 <HAL_RCC_OscConfig+0x2f8>)
 80012d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012da:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80012de:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80012e2:	fa92 f2a2 	rbit	r2, r2
 80012e6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80012ea:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80012ee:	fab2 f282 	clz	r2, r2
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	f042 0220 	orr.w	r2, r2, #32
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	f002 021f 	and.w	r2, r2, #31
 80012fe:	2101      	movs	r1, #1
 8001300:	fa01 f202 	lsl.w	r2, r1, r2
 8001304:	4013      	ands	r3, r2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0ab      	beq.n	8001262 <HAL_RCC_OscConfig+0x19a>
 800130a:	e05c      	b.n	80013c6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130c:	f7ff fdbe 	bl	8000e8c <HAL_GetTick>
 8001310:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001314:	e00a      	b.n	800132c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001316:	f7ff fdb9 	bl	8000e8c <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b64      	cmp	r3, #100	; 0x64
 8001324:	d902      	bls.n	800132c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	f000 bdcf 	b.w	8001eca <HAL_RCC_OscConfig+0xe02>
 800132c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001330:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001334:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001338:	fa93 f3a3 	rbit	r3, r3
 800133c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001340:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001344:	fab3 f383 	clz	r3, r3
 8001348:	b2db      	uxtb	r3, r3
 800134a:	095b      	lsrs	r3, r3, #5
 800134c:	b2db      	uxtb	r3, r3
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b01      	cmp	r3, #1
 8001356:	d102      	bne.n	800135e <HAL_RCC_OscConfig+0x296>
 8001358:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <HAL_RCC_OscConfig+0x2f8>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	e015      	b.n	800138a <HAL_RCC_OscConfig+0x2c2>
 800135e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001362:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001366:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800136a:	fa93 f3a3 	rbit	r3, r3
 800136e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001372:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001376:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800137a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800137e:	fa93 f3a3 	rbit	r3, r3
 8001382:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <HAL_RCC_OscConfig+0x2f8>)
 8001388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800138e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001392:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001396:	fa92 f2a2 	rbit	r2, r2
 800139a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800139e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80013a2:	fab2 f282 	clz	r2, r2
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	f042 0220 	orr.w	r2, r2, #32
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	f002 021f 	and.w	r2, r2, #31
 80013b2:	2101      	movs	r1, #1
 80013b4:	fa01 f202 	lsl.w	r2, r1, r2
 80013b8:	4013      	ands	r3, r2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1ab      	bne.n	8001316 <HAL_RCC_OscConfig+0x24e>
 80013be:	e002      	b.n	80013c6 <HAL_RCC_OscConfig+0x2fe>
 80013c0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f000 816f 	beq.w	80016b4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013d6:	4bd0      	ldr	r3, [pc, #832]	; (8001718 <HAL_RCC_OscConfig+0x650>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 030c 	and.w	r3, r3, #12
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00b      	beq.n	80013fa <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013e2:	4bcd      	ldr	r3, [pc, #820]	; (8001718 <HAL_RCC_OscConfig+0x650>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f003 030c 	and.w	r3, r3, #12
 80013ea:	2b08      	cmp	r3, #8
 80013ec:	d16c      	bne.n	80014c8 <HAL_RCC_OscConfig+0x400>
 80013ee:	4bca      	ldr	r3, [pc, #808]	; (8001718 <HAL_RCC_OscConfig+0x650>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d166      	bne.n	80014c8 <HAL_RCC_OscConfig+0x400>
 80013fa:	2302      	movs	r3, #2
 80013fc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001400:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001404:	fa93 f3a3 	rbit	r3, r3
 8001408:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800140c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001410:	fab3 f383 	clz	r3, r3
 8001414:	b2db      	uxtb	r3, r3
 8001416:	095b      	lsrs	r3, r3, #5
 8001418:	b2db      	uxtb	r3, r3
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b01      	cmp	r3, #1
 8001422:	d102      	bne.n	800142a <HAL_RCC_OscConfig+0x362>
 8001424:	4bbc      	ldr	r3, [pc, #752]	; (8001718 <HAL_RCC_OscConfig+0x650>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	e013      	b.n	8001452 <HAL_RCC_OscConfig+0x38a>
 800142a:	2302      	movs	r3, #2
 800142c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001430:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001434:	fa93 f3a3 	rbit	r3, r3
 8001438:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800143c:	2302      	movs	r3, #2
 800143e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001442:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001446:	fa93 f3a3 	rbit	r3, r3
 800144a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800144e:	4bb2      	ldr	r3, [pc, #712]	; (8001718 <HAL_RCC_OscConfig+0x650>)
 8001450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001452:	2202      	movs	r2, #2
 8001454:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001458:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800145c:	fa92 f2a2 	rbit	r2, r2
 8001460:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001464:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001468:	fab2 f282 	clz	r2, r2
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	f042 0220 	orr.w	r2, r2, #32
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	f002 021f 	and.w	r2, r2, #31
 8001478:	2101      	movs	r1, #1
 800147a:	fa01 f202 	lsl.w	r2, r1, r2
 800147e:	4013      	ands	r3, r2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d007      	beq.n	8001494 <HAL_RCC_OscConfig+0x3cc>
 8001484:	1d3b      	adds	r3, r7, #4
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d002      	beq.n	8001494 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	f000 bd1b 	b.w	8001eca <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001494:	4ba0      	ldr	r3, [pc, #640]	; (8001718 <HAL_RCC_OscConfig+0x650>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	21f8      	movs	r1, #248	; 0xf8
 80014a4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80014ac:	fa91 f1a1 	rbit	r1, r1
 80014b0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80014b4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80014b8:	fab1 f181 	clz	r1, r1
 80014bc:	b2c9      	uxtb	r1, r1
 80014be:	408b      	lsls	r3, r1
 80014c0:	4995      	ldr	r1, [pc, #596]	; (8001718 <HAL_RCC_OscConfig+0x650>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c6:	e0f5      	b.n	80016b4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 8085 	beq.w	80015de <HAL_RCC_OscConfig+0x516>
 80014d4:	2301      	movs	r3, #1
 80014d6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014da:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80014de:	fa93 f3a3 	rbit	r3, r3
 80014e2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80014e6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ea:	fab3 f383 	clz	r3, r3
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	461a      	mov	r2, r3
 80014fc:	2301      	movs	r3, #1
 80014fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001500:	f7ff fcc4 	bl	8000e8c <HAL_GetTick>
 8001504:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001508:	e00a      	b.n	8001520 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800150a:	f7ff fcbf 	bl	8000e8c <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d902      	bls.n	8001520 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	f000 bcd5 	b.w	8001eca <HAL_RCC_OscConfig+0xe02>
 8001520:	2302      	movs	r3, #2
 8001522:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001526:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800152a:	fa93 f3a3 	rbit	r3, r3
 800152e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001532:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001536:	fab3 f383 	clz	r3, r3
 800153a:	b2db      	uxtb	r3, r3
 800153c:	095b      	lsrs	r3, r3, #5
 800153e:	b2db      	uxtb	r3, r3
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b01      	cmp	r3, #1
 8001548:	d102      	bne.n	8001550 <HAL_RCC_OscConfig+0x488>
 800154a:	4b73      	ldr	r3, [pc, #460]	; (8001718 <HAL_RCC_OscConfig+0x650>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	e013      	b.n	8001578 <HAL_RCC_OscConfig+0x4b0>
 8001550:	2302      	movs	r3, #2
 8001552:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001556:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800155a:	fa93 f3a3 	rbit	r3, r3
 800155e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001562:	2302      	movs	r3, #2
 8001564:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001568:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800156c:	fa93 f3a3 	rbit	r3, r3
 8001570:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001574:	4b68      	ldr	r3, [pc, #416]	; (8001718 <HAL_RCC_OscConfig+0x650>)
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	2202      	movs	r2, #2
 800157a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800157e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001582:	fa92 f2a2 	rbit	r2, r2
 8001586:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800158a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800158e:	fab2 f282 	clz	r2, r2
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	f042 0220 	orr.w	r2, r2, #32
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	f002 021f 	and.w	r2, r2, #31
 800159e:	2101      	movs	r1, #1
 80015a0:	fa01 f202 	lsl.w	r2, r1, r2
 80015a4:	4013      	ands	r3, r2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0af      	beq.n	800150a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015aa:	4b5b      	ldr	r3, [pc, #364]	; (8001718 <HAL_RCC_OscConfig+0x650>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	695b      	ldr	r3, [r3, #20]
 80015b8:	21f8      	movs	r1, #248	; 0xf8
 80015ba:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015be:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80015c2:	fa91 f1a1 	rbit	r1, r1
 80015c6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80015ca:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80015ce:	fab1 f181 	clz	r1, r1
 80015d2:	b2c9      	uxtb	r1, r1
 80015d4:	408b      	lsls	r3, r1
 80015d6:	4950      	ldr	r1, [pc, #320]	; (8001718 <HAL_RCC_OscConfig+0x650>)
 80015d8:	4313      	orrs	r3, r2
 80015da:	600b      	str	r3, [r1, #0]
 80015dc:	e06a      	b.n	80016b4 <HAL_RCC_OscConfig+0x5ec>
 80015de:	2301      	movs	r3, #1
 80015e0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80015e8:	fa93 f3a3 	rbit	r3, r3
 80015ec:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80015f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015f4:	fab3 f383 	clz	r3, r3
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	461a      	mov	r2, r3
 8001606:	2300      	movs	r3, #0
 8001608:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160a:	f7ff fc3f 	bl	8000e8c <HAL_GetTick>
 800160e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001612:	e00a      	b.n	800162a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001614:	f7ff fc3a 	bl	8000e8c <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d902      	bls.n	800162a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	f000 bc50 	b.w	8001eca <HAL_RCC_OscConfig+0xe02>
 800162a:	2302      	movs	r3, #2
 800162c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001630:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001634:	fa93 f3a3 	rbit	r3, r3
 8001638:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800163c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001640:	fab3 f383 	clz	r3, r3
 8001644:	b2db      	uxtb	r3, r3
 8001646:	095b      	lsrs	r3, r3, #5
 8001648:	b2db      	uxtb	r3, r3
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	b2db      	uxtb	r3, r3
 8001650:	2b01      	cmp	r3, #1
 8001652:	d102      	bne.n	800165a <HAL_RCC_OscConfig+0x592>
 8001654:	4b30      	ldr	r3, [pc, #192]	; (8001718 <HAL_RCC_OscConfig+0x650>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	e013      	b.n	8001682 <HAL_RCC_OscConfig+0x5ba>
 800165a:	2302      	movs	r3, #2
 800165c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001660:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001664:	fa93 f3a3 	rbit	r3, r3
 8001668:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800166c:	2302      	movs	r3, #2
 800166e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001672:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001676:	fa93 f3a3 	rbit	r3, r3
 800167a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800167e:	4b26      	ldr	r3, [pc, #152]	; (8001718 <HAL_RCC_OscConfig+0x650>)
 8001680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001682:	2202      	movs	r2, #2
 8001684:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001688:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800168c:	fa92 f2a2 	rbit	r2, r2
 8001690:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001694:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001698:	fab2 f282 	clz	r2, r2
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	f042 0220 	orr.w	r2, r2, #32
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	f002 021f 	and.w	r2, r2, #31
 80016a8:	2101      	movs	r1, #1
 80016aa:	fa01 f202 	lsl.w	r2, r1, r2
 80016ae:	4013      	ands	r3, r2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1af      	bne.n	8001614 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 80da 	beq.w	8001878 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d069      	beq.n	80017a2 <HAL_RCC_OscConfig+0x6da>
 80016ce:	2301      	movs	r3, #1
 80016d0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80016d8:	fa93 f3a3 	rbit	r3, r3
 80016dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80016e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016e4:	fab3 f383 	clz	r3, r3
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	461a      	mov	r2, r3
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_RCC_OscConfig+0x654>)
 80016ee:	4413      	add	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	461a      	mov	r2, r3
 80016f4:	2301      	movs	r3, #1
 80016f6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f8:	f7ff fbc8 	bl	8000e8c <HAL_GetTick>
 80016fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001700:	e00e      	b.n	8001720 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001702:	f7ff fbc3 	bl	8000e8c <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d906      	bls.n	8001720 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e3d9      	b.n	8001eca <HAL_RCC_OscConfig+0xe02>
 8001716:	bf00      	nop
 8001718:	40021000 	.word	0x40021000
 800171c:	10908120 	.word	0x10908120
 8001720:	2302      	movs	r3, #2
 8001722:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001726:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800172a:	fa93 f3a3 	rbit	r3, r3
 800172e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001732:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001736:	2202      	movs	r2, #2
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	fa93 f2a3 	rbit	r2, r3
 8001744:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800174e:	2202      	movs	r2, #2
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	fa93 f2a3 	rbit	r2, r3
 800175c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001760:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001762:	4ba5      	ldr	r3, [pc, #660]	; (80019f8 <HAL_RCC_OscConfig+0x930>)
 8001764:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001766:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800176a:	2102      	movs	r1, #2
 800176c:	6019      	str	r1, [r3, #0]
 800176e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	fa93 f1a3 	rbit	r1, r3
 8001778:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800177c:	6019      	str	r1, [r3, #0]
  return result;
 800177e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	fab3 f383 	clz	r3, r3
 8001788:	b2db      	uxtb	r3, r3
 800178a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800178e:	b2db      	uxtb	r3, r3
 8001790:	f003 031f 	and.w	r3, r3, #31
 8001794:	2101      	movs	r1, #1
 8001796:	fa01 f303 	lsl.w	r3, r1, r3
 800179a:	4013      	ands	r3, r2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0b0      	beq.n	8001702 <HAL_RCC_OscConfig+0x63a>
 80017a0:	e06a      	b.n	8001878 <HAL_RCC_OscConfig+0x7b0>
 80017a2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80017a6:	2201      	movs	r2, #1
 80017a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017aa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	fa93 f2a3 	rbit	r2, r3
 80017b4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80017b8:	601a      	str	r2, [r3, #0]
  return result;
 80017ba:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80017be:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017c0:	fab3 f383 	clz	r3, r3
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	461a      	mov	r2, r3
 80017c8:	4b8c      	ldr	r3, [pc, #560]	; (80019fc <HAL_RCC_OscConfig+0x934>)
 80017ca:	4413      	add	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	461a      	mov	r2, r3
 80017d0:	2300      	movs	r3, #0
 80017d2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d4:	f7ff fb5a 	bl	8000e8c <HAL_GetTick>
 80017d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017dc:	e009      	b.n	80017f2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017de:	f7ff fb55 	bl	8000e8c <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e36b      	b.n	8001eca <HAL_RCC_OscConfig+0xe02>
 80017f2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80017f6:	2202      	movs	r2, #2
 80017f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	fa93 f2a3 	rbit	r2, r3
 8001804:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800180e:	2202      	movs	r2, #2
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	fa93 f2a3 	rbit	r2, r3
 800181c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001826:	2202      	movs	r2, #2
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	fa93 f2a3 	rbit	r2, r3
 8001834:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001838:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800183a:	4b6f      	ldr	r3, [pc, #444]	; (80019f8 <HAL_RCC_OscConfig+0x930>)
 800183c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800183e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001842:	2102      	movs	r1, #2
 8001844:	6019      	str	r1, [r3, #0]
 8001846:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	fa93 f1a3 	rbit	r1, r3
 8001850:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001854:	6019      	str	r1, [r3, #0]
  return result;
 8001856:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	fab3 f383 	clz	r3, r3
 8001860:	b2db      	uxtb	r3, r3
 8001862:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001866:	b2db      	uxtb	r3, r3
 8001868:	f003 031f 	and.w	r3, r3, #31
 800186c:	2101      	movs	r1, #1
 800186e:	fa01 f303 	lsl.w	r3, r1, r3
 8001872:	4013      	ands	r3, r2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1b2      	bne.n	80017de <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 8158 	beq.w	8001b38 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001888:	2300      	movs	r3, #0
 800188a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800188e:	4b5a      	ldr	r3, [pc, #360]	; (80019f8 <HAL_RCC_OscConfig+0x930>)
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d112      	bne.n	80018c0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800189a:	4b57      	ldr	r3, [pc, #348]	; (80019f8 <HAL_RCC_OscConfig+0x930>)
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	4a56      	ldr	r2, [pc, #344]	; (80019f8 <HAL_RCC_OscConfig+0x930>)
 80018a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a4:	61d3      	str	r3, [r2, #28]
 80018a6:	4b54      	ldr	r3, [pc, #336]	; (80019f8 <HAL_RCC_OscConfig+0x930>)
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80018ae:	f107 0308 	add.w	r3, r7, #8
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	f107 0308 	add.w	r3, r7, #8
 80018b8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80018ba:	2301      	movs	r3, #1
 80018bc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c0:	4b4f      	ldr	r3, [pc, #316]	; (8001a00 <HAL_RCC_OscConfig+0x938>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d11a      	bne.n	8001902 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018cc:	4b4c      	ldr	r3, [pc, #304]	; (8001a00 <HAL_RCC_OscConfig+0x938>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a4b      	ldr	r2, [pc, #300]	; (8001a00 <HAL_RCC_OscConfig+0x938>)
 80018d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018d8:	f7ff fad8 	bl	8000e8c <HAL_GetTick>
 80018dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e0:	e009      	b.n	80018f6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018e2:	f7ff fad3 	bl	8000e8c <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b64      	cmp	r3, #100	; 0x64
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e2e9      	b.n	8001eca <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f6:	4b42      	ldr	r3, [pc, #264]	; (8001a00 <HAL_RCC_OscConfig+0x938>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0ef      	beq.n	80018e2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d106      	bne.n	800191a <HAL_RCC_OscConfig+0x852>
 800190c:	4b3a      	ldr	r3, [pc, #232]	; (80019f8 <HAL_RCC_OscConfig+0x930>)
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	4a39      	ldr	r2, [pc, #228]	; (80019f8 <HAL_RCC_OscConfig+0x930>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	6213      	str	r3, [r2, #32]
 8001918:	e02f      	b.n	800197a <HAL_RCC_OscConfig+0x8b2>
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d10c      	bne.n	800193e <HAL_RCC_OscConfig+0x876>
 8001924:	4b34      	ldr	r3, [pc, #208]	; (80019f8 <HAL_RCC_OscConfig+0x930>)
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	4a33      	ldr	r2, [pc, #204]	; (80019f8 <HAL_RCC_OscConfig+0x930>)
 800192a:	f023 0301 	bic.w	r3, r3, #1
 800192e:	6213      	str	r3, [r2, #32]
 8001930:	4b31      	ldr	r3, [pc, #196]	; (80019f8 <HAL_RCC_OscConfig+0x930>)
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	4a30      	ldr	r2, [pc, #192]	; (80019f8 <HAL_RCC_OscConfig+0x930>)
 8001936:	f023 0304 	bic.w	r3, r3, #4
 800193a:	6213      	str	r3, [r2, #32]
 800193c:	e01d      	b.n	800197a <HAL_RCC_OscConfig+0x8b2>
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	2b05      	cmp	r3, #5
 8001946:	d10c      	bne.n	8001962 <HAL_RCC_OscConfig+0x89a>
 8001948:	4b2b      	ldr	r3, [pc, #172]	; (80019f8 <HAL_RCC_OscConfig+0x930>)
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	4a2a      	ldr	r2, [pc, #168]	; (80019f8 <HAL_RCC_OscConfig+0x930>)
 800194e:	f043 0304 	orr.w	r3, r3, #4
 8001952:	6213      	str	r3, [r2, #32]
 8001954:	4b28      	ldr	r3, [pc, #160]	; (80019f8 <HAL_RCC_OscConfig+0x930>)
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	4a27      	ldr	r2, [pc, #156]	; (80019f8 <HAL_RCC_OscConfig+0x930>)
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	6213      	str	r3, [r2, #32]
 8001960:	e00b      	b.n	800197a <HAL_RCC_OscConfig+0x8b2>
 8001962:	4b25      	ldr	r3, [pc, #148]	; (80019f8 <HAL_RCC_OscConfig+0x930>)
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	4a24      	ldr	r2, [pc, #144]	; (80019f8 <HAL_RCC_OscConfig+0x930>)
 8001968:	f023 0301 	bic.w	r3, r3, #1
 800196c:	6213      	str	r3, [r2, #32]
 800196e:	4b22      	ldr	r3, [pc, #136]	; (80019f8 <HAL_RCC_OscConfig+0x930>)
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	4a21      	ldr	r2, [pc, #132]	; (80019f8 <HAL_RCC_OscConfig+0x930>)
 8001974:	f023 0304 	bic.w	r3, r3, #4
 8001978:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d06b      	beq.n	8001a5c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001984:	f7ff fa82 	bl	8000e8c <HAL_GetTick>
 8001988:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800198c:	e00b      	b.n	80019a6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800198e:	f7ff fa7d 	bl	8000e8c <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	f241 3288 	movw	r2, #5000	; 0x1388
 800199e:	4293      	cmp	r3, r2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e291      	b.n	8001eca <HAL_RCC_OscConfig+0xe02>
 80019a6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80019aa:	2202      	movs	r2, #2
 80019ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ae:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	fa93 f2a3 	rbit	r2, r3
 80019b8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80019c2:	2202      	movs	r2, #2
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	fa93 f2a3 	rbit	r2, r3
 80019d0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80019d4:	601a      	str	r2, [r3, #0]
  return result;
 80019d6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80019da:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019dc:	fab3 f383 	clz	r3, r3
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	095b      	lsrs	r3, r3, #5
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	f043 0302 	orr.w	r3, r3, #2
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d109      	bne.n	8001a04 <HAL_RCC_OscConfig+0x93c>
 80019f0:	4b01      	ldr	r3, [pc, #4]	; (80019f8 <HAL_RCC_OscConfig+0x930>)
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	e014      	b.n	8001a20 <HAL_RCC_OscConfig+0x958>
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000
 80019fc:	10908120 	.word	0x10908120
 8001a00:	40007000 	.word	0x40007000
 8001a04:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001a08:	2202      	movs	r2, #2
 8001a0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	fa93 f2a3 	rbit	r2, r3
 8001a16:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	4bbb      	ldr	r3, [pc, #748]	; (8001d0c <HAL_RCC_OscConfig+0xc44>)
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a20:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001a24:	2102      	movs	r1, #2
 8001a26:	6011      	str	r1, [r2, #0]
 8001a28:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001a2c:	6812      	ldr	r2, [r2, #0]
 8001a2e:	fa92 f1a2 	rbit	r1, r2
 8001a32:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001a36:	6011      	str	r1, [r2, #0]
  return result;
 8001a38:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001a3c:	6812      	ldr	r2, [r2, #0]
 8001a3e:	fab2 f282 	clz	r2, r2
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	f002 021f 	and.w	r2, r2, #31
 8001a4e:	2101      	movs	r1, #1
 8001a50:	fa01 f202 	lsl.w	r2, r1, r2
 8001a54:	4013      	ands	r3, r2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d099      	beq.n	800198e <HAL_RCC_OscConfig+0x8c6>
 8001a5a:	e063      	b.n	8001b24 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5c:	f7ff fa16 	bl	8000e8c <HAL_GetTick>
 8001a60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a64:	e00b      	b.n	8001a7e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a66:	f7ff fa11 	bl	8000e8c <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e225      	b.n	8001eca <HAL_RCC_OscConfig+0xe02>
 8001a7e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001a82:	2202      	movs	r2, #2
 8001a84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a86:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	fa93 f2a3 	rbit	r2, r3
 8001a90:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	fa93 f2a3 	rbit	r2, r3
 8001aa8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001aac:	601a      	str	r2, [r3, #0]
  return result;
 8001aae:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ab2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab4:	fab3 f383 	clz	r3, r3
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	095b      	lsrs	r3, r3, #5
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	f043 0302 	orr.w	r3, r3, #2
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d102      	bne.n	8001ace <HAL_RCC_OscConfig+0xa06>
 8001ac8:	4b90      	ldr	r3, [pc, #576]	; (8001d0c <HAL_RCC_OscConfig+0xc44>)
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	e00d      	b.n	8001aea <HAL_RCC_OscConfig+0xa22>
 8001ace:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	fa93 f2a3 	rbit	r2, r3
 8001ae0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	4b89      	ldr	r3, [pc, #548]	; (8001d0c <HAL_RCC_OscConfig+0xc44>)
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aea:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001aee:	2102      	movs	r1, #2
 8001af0:	6011      	str	r1, [r2, #0]
 8001af2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001af6:	6812      	ldr	r2, [r2, #0]
 8001af8:	fa92 f1a2 	rbit	r1, r2
 8001afc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001b00:	6011      	str	r1, [r2, #0]
  return result;
 8001b02:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	fab2 f282 	clz	r2, r2
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	f002 021f 	and.w	r2, r2, #31
 8001b18:	2101      	movs	r1, #1
 8001b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b1e:	4013      	ands	r3, r2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1a0      	bne.n	8001a66 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b24:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d105      	bne.n	8001b38 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b2c:	4b77      	ldr	r3, [pc, #476]	; (8001d0c <HAL_RCC_OscConfig+0xc44>)
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	4a76      	ldr	r2, [pc, #472]	; (8001d0c <HAL_RCC_OscConfig+0xc44>)
 8001b32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b36:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 81c2 	beq.w	8001ec8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b44:	4b71      	ldr	r3, [pc, #452]	; (8001d0c <HAL_RCC_OscConfig+0xc44>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 030c 	and.w	r3, r3, #12
 8001b4c:	2b08      	cmp	r3, #8
 8001b4e:	f000 819c 	beq.w	8001e8a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b52:	1d3b      	adds	r3, r7, #4
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	f040 8114 	bne.w	8001d86 <HAL_RCC_OscConfig+0xcbe>
 8001b5e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b62:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b68:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	fa93 f2a3 	rbit	r2, r3
 8001b72:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b76:	601a      	str	r2, [r3, #0]
  return result;
 8001b78:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b7c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7e:	fab3 f383 	clz	r3, r3
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b88:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	461a      	mov	r2, r3
 8001b90:	2300      	movs	r3, #0
 8001b92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b94:	f7ff f97a 	bl	8000e8c <HAL_GetTick>
 8001b98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b9c:	e009      	b.n	8001bb2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b9e:	f7ff f975 	bl	8000e8c <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e18b      	b.n	8001eca <HAL_RCC_OscConfig+0xe02>
 8001bb2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001bb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	fa93 f2a3 	rbit	r2, r3
 8001bc6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001bca:	601a      	str	r2, [r3, #0]
  return result;
 8001bcc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001bd0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bd2:	fab3 f383 	clz	r3, r3
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	095b      	lsrs	r3, r3, #5
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d102      	bne.n	8001bec <HAL_RCC_OscConfig+0xb24>
 8001be6:	4b49      	ldr	r3, [pc, #292]	; (8001d0c <HAL_RCC_OscConfig+0xc44>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	e01b      	b.n	8001c24 <HAL_RCC_OscConfig+0xb5c>
 8001bec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001bf0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bf4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	fa93 f2a3 	rbit	r2, r3
 8001c00:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	fa93 f2a3 	rbit	r2, r3
 8001c1a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	4b3a      	ldr	r3, [pc, #232]	; (8001d0c <HAL_RCC_OscConfig+0xc44>)
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c28:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c2c:	6011      	str	r1, [r2, #0]
 8001c2e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	fa92 f1a2 	rbit	r1, r2
 8001c38:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001c3c:	6011      	str	r1, [r2, #0]
  return result;
 8001c3e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001c42:	6812      	ldr	r2, [r2, #0]
 8001c44:	fab2 f282 	clz	r2, r2
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	f042 0220 	orr.w	r2, r2, #32
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	f002 021f 	and.w	r2, r2, #31
 8001c54:	2101      	movs	r1, #1
 8001c56:	fa01 f202 	lsl.w	r2, r1, r2
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d19e      	bne.n	8001b9e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c60:	4b2a      	ldr	r3, [pc, #168]	; (8001d0c <HAL_RCC_OscConfig+0xc44>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	430b      	orrs	r3, r1
 8001c76:	4925      	ldr	r1, [pc, #148]	; (8001d0c <HAL_RCC_OscConfig+0xc44>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	604b      	str	r3, [r1, #4]
 8001c7c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c86:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	fa93 f2a3 	rbit	r2, r3
 8001c90:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c94:	601a      	str	r2, [r3, #0]
  return result;
 8001c96:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c9a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c9c:	fab3 f383 	clz	r3, r3
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ca6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	461a      	mov	r2, r3
 8001cae:	2301      	movs	r3, #1
 8001cb0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb2:	f7ff f8eb 	bl	8000e8c <HAL_GetTick>
 8001cb6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cba:	e009      	b.n	8001cd0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cbc:	f7ff f8e6 	bl	8000e8c <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e0fc      	b.n	8001eca <HAL_RCC_OscConfig+0xe02>
 8001cd0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001cd4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	fa93 f2a3 	rbit	r2, r3
 8001ce4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ce8:	601a      	str	r2, [r3, #0]
  return result;
 8001cea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cf0:	fab3 f383 	clz	r3, r3
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	095b      	lsrs	r3, r3, #5
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d105      	bne.n	8001d10 <HAL_RCC_OscConfig+0xc48>
 8001d04:	4b01      	ldr	r3, [pc, #4]	; (8001d0c <HAL_RCC_OscConfig+0xc44>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	e01e      	b.n	8001d48 <HAL_RCC_OscConfig+0xc80>
 8001d0a:	bf00      	nop
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	fa93 f2a3 	rbit	r2, r3
 8001d24:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	fa93 f2a3 	rbit	r2, r3
 8001d3e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	4b63      	ldr	r3, [pc, #396]	; (8001ed4 <HAL_RCC_OscConfig+0xe0c>)
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001d4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d50:	6011      	str	r1, [r2, #0]
 8001d52:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	fa92 f1a2 	rbit	r1, r2
 8001d5c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001d60:	6011      	str	r1, [r2, #0]
  return result;
 8001d62:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	fab2 f282 	clz	r2, r2
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	f042 0220 	orr.w	r2, r2, #32
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	f002 021f 	and.w	r2, r2, #31
 8001d78:	2101      	movs	r1, #1
 8001d7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d09b      	beq.n	8001cbc <HAL_RCC_OscConfig+0xbf4>
 8001d84:	e0a0      	b.n	8001ec8 <HAL_RCC_OscConfig+0xe00>
 8001d86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	fa93 f2a3 	rbit	r2, r3
 8001d9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d9e:	601a      	str	r2, [r3, #0]
  return result;
 8001da0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001da4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da6:	fab3 f383 	clz	r3, r3
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001db0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	461a      	mov	r2, r3
 8001db8:	2300      	movs	r3, #0
 8001dba:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7ff f866 	bl	8000e8c <HAL_GetTick>
 8001dc0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc4:	e009      	b.n	8001dda <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc6:	f7ff f861 	bl	8000e8c <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e077      	b.n	8001eca <HAL_RCC_OscConfig+0xe02>
 8001dda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dde:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001de2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	fa93 f2a3 	rbit	r2, r3
 8001dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df2:	601a      	str	r2, [r3, #0]
  return result;
 8001df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dfa:	fab3 f383 	clz	r3, r3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	095b      	lsrs	r3, r3, #5
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d102      	bne.n	8001e14 <HAL_RCC_OscConfig+0xd4c>
 8001e0e:	4b31      	ldr	r3, [pc, #196]	; (8001ed4 <HAL_RCC_OscConfig+0xe0c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	e01b      	b.n	8001e4c <HAL_RCC_OscConfig+0xd84>
 8001e14:	f107 0320 	add.w	r3, r7, #32
 8001e18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1e:	f107 0320 	add.w	r3, r7, #32
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	fa93 f2a3 	rbit	r2, r3
 8001e28:	f107 031c 	add.w	r3, r7, #28
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	f107 0318 	add.w	r3, r7, #24
 8001e32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	f107 0318 	add.w	r3, r7, #24
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	fa93 f2a3 	rbit	r2, r3
 8001e42:	f107 0314 	add.w	r3, r7, #20
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	4b22      	ldr	r3, [pc, #136]	; (8001ed4 <HAL_RCC_OscConfig+0xe0c>)
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	f107 0210 	add.w	r2, r7, #16
 8001e50:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e54:	6011      	str	r1, [r2, #0]
 8001e56:	f107 0210 	add.w	r2, r7, #16
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	fa92 f1a2 	rbit	r1, r2
 8001e60:	f107 020c 	add.w	r2, r7, #12
 8001e64:	6011      	str	r1, [r2, #0]
  return result;
 8001e66:	f107 020c 	add.w	r2, r7, #12
 8001e6a:	6812      	ldr	r2, [r2, #0]
 8001e6c:	fab2 f282 	clz	r2, r2
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	f042 0220 	orr.w	r2, r2, #32
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	f002 021f 	and.w	r2, r2, #31
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e82:	4013      	ands	r3, r2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d19e      	bne.n	8001dc6 <HAL_RCC_OscConfig+0xcfe>
 8001e88:	e01e      	b.n	8001ec8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e8a:	1d3b      	adds	r3, r7, #4
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d101      	bne.n	8001e98 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e018      	b.n	8001eca <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e98:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <HAL_RCC_OscConfig+0xe0c>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ea0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ea4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ea8:	1d3b      	adds	r3, r7, #4
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d108      	bne.n	8001ec4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001eb2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001eb6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001eba:	1d3b      	adds	r3, r7, #4
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d001      	beq.n	8001ec8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40021000 	.word	0x40021000

08001ed8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b09e      	sub	sp, #120	; 0x78
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e162      	b.n	80021b6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef0:	4b90      	ldr	r3, [pc, #576]	; (8002134 <HAL_RCC_ClockConfig+0x25c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d910      	bls.n	8001f20 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efe:	4b8d      	ldr	r3, [pc, #564]	; (8002134 <HAL_RCC_ClockConfig+0x25c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f023 0207 	bic.w	r2, r3, #7
 8001f06:	498b      	ldr	r1, [pc, #556]	; (8002134 <HAL_RCC_ClockConfig+0x25c>)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0e:	4b89      	ldr	r3, [pc, #548]	; (8002134 <HAL_RCC_ClockConfig+0x25c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d001      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e14a      	b.n	80021b6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d008      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f2c:	4b82      	ldr	r3, [pc, #520]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	497f      	ldr	r1, [pc, #508]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 80dc 	beq.w	8002104 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d13c      	bne.n	8001fce <HAL_RCC_ClockConfig+0xf6>
 8001f54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f58:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f5c:	fa93 f3a3 	rbit	r3, r3
 8001f60:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f64:	fab3 f383 	clz	r3, r3
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	095b      	lsrs	r3, r3, #5
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d102      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xa6>
 8001f78:	4b6f      	ldr	r3, [pc, #444]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	e00f      	b.n	8001f9e <HAL_RCC_ClockConfig+0xc6>
 8001f7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f82:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f86:	fa93 f3a3 	rbit	r3, r3
 8001f8a:	667b      	str	r3, [r7, #100]	; 0x64
 8001f8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f90:	663b      	str	r3, [r7, #96]	; 0x60
 8001f92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f94:	fa93 f3a3 	rbit	r3, r3
 8001f98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f9a:	4b67      	ldr	r3, [pc, #412]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fa2:	65ba      	str	r2, [r7, #88]	; 0x58
 8001fa4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001fa6:	fa92 f2a2 	rbit	r2, r2
 8001faa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001fac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001fae:	fab2 f282 	clz	r2, r2
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	f042 0220 	orr.w	r2, r2, #32
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	f002 021f 	and.w	r2, r2, #31
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d17b      	bne.n	80020c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e0f3      	b.n	80021b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d13c      	bne.n	8002050 <HAL_RCC_ClockConfig+0x178>
 8001fd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fda:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe6:	fab3 f383 	clz	r3, r3
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	095b      	lsrs	r3, r3, #5
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d102      	bne.n	8002000 <HAL_RCC_ClockConfig+0x128>
 8001ffa:	4b4f      	ldr	r3, [pc, #316]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	e00f      	b.n	8002020 <HAL_RCC_ClockConfig+0x148>
 8002000:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002004:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002008:	fa93 f3a3 	rbit	r3, r3
 800200c:	647b      	str	r3, [r7, #68]	; 0x44
 800200e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002012:	643b      	str	r3, [r7, #64]	; 0x40
 8002014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002016:	fa93 f3a3 	rbit	r3, r3
 800201a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800201c:	4b46      	ldr	r3, [pc, #280]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002020:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002024:	63ba      	str	r2, [r7, #56]	; 0x38
 8002026:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002028:	fa92 f2a2 	rbit	r2, r2
 800202c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800202e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002030:	fab2 f282 	clz	r2, r2
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	f042 0220 	orr.w	r2, r2, #32
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	f002 021f 	and.w	r2, r2, #31
 8002040:	2101      	movs	r1, #1
 8002042:	fa01 f202 	lsl.w	r2, r1, r2
 8002046:	4013      	ands	r3, r2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d13a      	bne.n	80020c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0b2      	b.n	80021b6 <HAL_RCC_ClockConfig+0x2de>
 8002050:	2302      	movs	r3, #2
 8002052:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002056:	fa93 f3a3 	rbit	r3, r3
 800205a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800205c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205e:	fab3 f383 	clz	r3, r3
 8002062:	b2db      	uxtb	r3, r3
 8002064:	095b      	lsrs	r3, r3, #5
 8002066:	b2db      	uxtb	r3, r3
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b01      	cmp	r3, #1
 8002070:	d102      	bne.n	8002078 <HAL_RCC_ClockConfig+0x1a0>
 8002072:	4b31      	ldr	r3, [pc, #196]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	e00d      	b.n	8002094 <HAL_RCC_ClockConfig+0x1bc>
 8002078:	2302      	movs	r3, #2
 800207a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800207e:	fa93 f3a3 	rbit	r3, r3
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
 8002084:	2302      	movs	r3, #2
 8002086:	623b      	str	r3, [r7, #32]
 8002088:	6a3b      	ldr	r3, [r7, #32]
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	61fb      	str	r3, [r7, #28]
 8002090:	4b29      	ldr	r3, [pc, #164]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	2202      	movs	r2, #2
 8002096:	61ba      	str	r2, [r7, #24]
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	fa92 f2a2 	rbit	r2, r2
 800209e:	617a      	str	r2, [r7, #20]
  return result;
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	fab2 f282 	clz	r2, r2
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	f042 0220 	orr.w	r2, r2, #32
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	f002 021f 	and.w	r2, r2, #31
 80020b2:	2101      	movs	r1, #1
 80020b4:	fa01 f202 	lsl.w	r2, r1, r2
 80020b8:	4013      	ands	r3, r2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e079      	b.n	80021b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020c2:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f023 0203 	bic.w	r2, r3, #3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	491a      	ldr	r1, [pc, #104]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020d4:	f7fe feda 	bl	8000e8c <HAL_GetTick>
 80020d8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020da:	e00a      	b.n	80020f2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020dc:	f7fe fed6 	bl	8000e8c <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e061      	b.n	80021b6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f2:	4b11      	ldr	r3, [pc, #68]	; (8002138 <HAL_RCC_ClockConfig+0x260>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 020c 	and.w	r2, r3, #12
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	429a      	cmp	r2, r3
 8002102:	d1eb      	bne.n	80020dc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002104:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_RCC_ClockConfig+0x25c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	429a      	cmp	r2, r3
 8002110:	d214      	bcs.n	800213c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002112:	4b08      	ldr	r3, [pc, #32]	; (8002134 <HAL_RCC_ClockConfig+0x25c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f023 0207 	bic.w	r2, r3, #7
 800211a:	4906      	ldr	r1, [pc, #24]	; (8002134 <HAL_RCC_ClockConfig+0x25c>)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	4313      	orrs	r3, r2
 8002120:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002122:	4b04      	ldr	r3, [pc, #16]	; (8002134 <HAL_RCC_ClockConfig+0x25c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d005      	beq.n	800213c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e040      	b.n	80021b6 <HAL_RCC_ClockConfig+0x2de>
 8002134:	40022000 	.word	0x40022000
 8002138:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d008      	beq.n	800215a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002148:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <HAL_RCC_ClockConfig+0x2e8>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	491a      	ldr	r1, [pc, #104]	; (80021c0 <HAL_RCC_ClockConfig+0x2e8>)
 8002156:	4313      	orrs	r3, r2
 8002158:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d009      	beq.n	800217a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002166:	4b16      	ldr	r3, [pc, #88]	; (80021c0 <HAL_RCC_ClockConfig+0x2e8>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4912      	ldr	r1, [pc, #72]	; (80021c0 <HAL_RCC_ClockConfig+0x2e8>)
 8002176:	4313      	orrs	r3, r2
 8002178:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800217a:	f000 f829 	bl	80021d0 <HAL_RCC_GetSysClockFreq>
 800217e:	4601      	mov	r1, r0
 8002180:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <HAL_RCC_ClockConfig+0x2e8>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002188:	22f0      	movs	r2, #240	; 0xf0
 800218a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	fa92 f2a2 	rbit	r2, r2
 8002192:	60fa      	str	r2, [r7, #12]
  return result;
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	fab2 f282 	clz	r2, r2
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	40d3      	lsrs	r3, r2
 800219e:	4a09      	ldr	r2, [pc, #36]	; (80021c4 <HAL_RCC_ClockConfig+0x2ec>)
 80021a0:	5cd3      	ldrb	r3, [r2, r3]
 80021a2:	fa21 f303 	lsr.w	r3, r1, r3
 80021a6:	4a08      	ldr	r2, [pc, #32]	; (80021c8 <HAL_RCC_ClockConfig+0x2f0>)
 80021a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80021aa:	4b08      	ldr	r3, [pc, #32]	; (80021cc <HAL_RCC_ClockConfig+0x2f4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe fe28 	bl	8000e04 <HAL_InitTick>
  
  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3778      	adds	r7, #120	; 0x78
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40021000 	.word	0x40021000
 80021c4:	0800bbfc 	.word	0x0800bbfc
 80021c8:	20000000 	.word	0x20000000
 80021cc:	20000004 	.word	0x20000004

080021d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b08b      	sub	sp, #44	; 0x2c
 80021d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	61fb      	str	r3, [r7, #28]
 80021da:	2300      	movs	r3, #0
 80021dc:	61bb      	str	r3, [r7, #24]
 80021de:	2300      	movs	r3, #0
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80021ea:	4b29      	ldr	r3, [pc, #164]	; (8002290 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	d002      	beq.n	8002200 <HAL_RCC_GetSysClockFreq+0x30>
 80021fa:	2b08      	cmp	r3, #8
 80021fc:	d003      	beq.n	8002206 <HAL_RCC_GetSysClockFreq+0x36>
 80021fe:	e03c      	b.n	800227a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002200:	4b24      	ldr	r3, [pc, #144]	; (8002294 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002202:	623b      	str	r3, [r7, #32]
      break;
 8002204:	e03c      	b.n	8002280 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800220c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002210:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	fa92 f2a2 	rbit	r2, r2
 8002218:	607a      	str	r2, [r7, #4]
  return result;
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	fab2 f282 	clz	r2, r2
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	40d3      	lsrs	r3, r2
 8002224:	4a1c      	ldr	r2, [pc, #112]	; (8002298 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002226:	5cd3      	ldrb	r3, [r2, r3]
 8002228:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800222a:	4b19      	ldr	r3, [pc, #100]	; (8002290 <HAL_RCC_GetSysClockFreq+0xc0>)
 800222c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	220f      	movs	r2, #15
 8002234:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	fa92 f2a2 	rbit	r2, r2
 800223c:	60fa      	str	r2, [r7, #12]
  return result;
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	fab2 f282 	clz	r2, r2
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	40d3      	lsrs	r3, r2
 8002248:	4a14      	ldr	r2, [pc, #80]	; (800229c <HAL_RCC_GetSysClockFreq+0xcc>)
 800224a:	5cd3      	ldrb	r3, [r2, r3]
 800224c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d008      	beq.n	800226a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002258:	4a0e      	ldr	r2, [pc, #56]	; (8002294 <HAL_RCC_GetSysClockFreq+0xc4>)
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	fb02 f303 	mul.w	r3, r2, r3
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
 8002268:	e004      	b.n	8002274 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	4a0c      	ldr	r2, [pc, #48]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800226e:	fb02 f303 	mul.w	r3, r2, r3
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	623b      	str	r3, [r7, #32]
      break;
 8002278:	e002      	b.n	8002280 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800227a:	4b06      	ldr	r3, [pc, #24]	; (8002294 <HAL_RCC_GetSysClockFreq+0xc4>)
 800227c:	623b      	str	r3, [r7, #32]
      break;
 800227e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002280:	6a3b      	ldr	r3, [r7, #32]
}
 8002282:	4618      	mov	r0, r3
 8002284:	372c      	adds	r7, #44	; 0x2c
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	40021000 	.word	0x40021000
 8002294:	007a1200 	.word	0x007a1200
 8002298:	0800bc0c 	.word	0x0800bc0c
 800229c:	0800bc1c 	.word	0x0800bc1c
 80022a0:	003d0900 	.word	0x003d0900

080022a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e049      	b.n	800234a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d106      	bne.n	80022d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7fe fcf0 	bl	8000cb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2202      	movs	r2, #2
 80022d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3304      	adds	r3, #4
 80022e0:	4619      	mov	r1, r3
 80022e2:	4610      	mov	r0, r2
 80022e4:	f000 faa8 	bl	8002838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
	...

08002354 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b01      	cmp	r3, #1
 8002366:	d001      	beq.n	800236c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e042      	b.n	80023f2 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2202      	movs	r2, #2
 8002370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a21      	ldr	r2, [pc, #132]	; (8002400 <HAL_TIM_Base_Start+0xac>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d018      	beq.n	80023b0 <HAL_TIM_Base_Start+0x5c>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002386:	d013      	beq.n	80023b0 <HAL_TIM_Base_Start+0x5c>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a1d      	ldr	r2, [pc, #116]	; (8002404 <HAL_TIM_Base_Start+0xb0>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d00e      	beq.n	80023b0 <HAL_TIM_Base_Start+0x5c>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a1c      	ldr	r2, [pc, #112]	; (8002408 <HAL_TIM_Base_Start+0xb4>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d009      	beq.n	80023b0 <HAL_TIM_Base_Start+0x5c>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a1a      	ldr	r2, [pc, #104]	; (800240c <HAL_TIM_Base_Start+0xb8>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d004      	beq.n	80023b0 <HAL_TIM_Base_Start+0x5c>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a19      	ldr	r2, [pc, #100]	; (8002410 <HAL_TIM_Base_Start+0xbc>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d115      	bne.n	80023dc <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	4b17      	ldr	r3, [pc, #92]	; (8002414 <HAL_TIM_Base_Start+0xc0>)
 80023b8:	4013      	ands	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2b06      	cmp	r3, #6
 80023c0:	d015      	beq.n	80023ee <HAL_TIM_Base_Start+0x9a>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c8:	d011      	beq.n	80023ee <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f042 0201 	orr.w	r2, r2, #1
 80023d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023da:	e008      	b.n	80023ee <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0201 	orr.w	r2, r2, #1
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	e000      	b.n	80023f0 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40012c00 	.word	0x40012c00
 8002404:	40000400 	.word	0x40000400
 8002408:	40000800 	.word	0x40000800
 800240c:	40013400 	.word	0x40013400
 8002410:	40014000 	.word	0x40014000
 8002414:	00010007 	.word	0x00010007

08002418 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b02      	cmp	r3, #2
 800242c:	d122      	bne.n	8002474 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b02      	cmp	r3, #2
 800243a:	d11b      	bne.n	8002474 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f06f 0202 	mvn.w	r2, #2
 8002444:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f9ce 	bl	80027fc <HAL_TIM_IC_CaptureCallback>
 8002460:	e005      	b.n	800246e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f9c0 	bl	80027e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f9d1 	bl	8002810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	f003 0304 	and.w	r3, r3, #4
 800247e:	2b04      	cmp	r3, #4
 8002480:	d122      	bne.n	80024c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	2b04      	cmp	r3, #4
 800248e:	d11b      	bne.n	80024c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f06f 0204 	mvn.w	r2, #4
 8002498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2202      	movs	r2, #2
 800249e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f9a4 	bl	80027fc <HAL_TIM_IC_CaptureCallback>
 80024b4:	e005      	b.n	80024c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f996 	bl	80027e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 f9a7 	bl	8002810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d122      	bne.n	800251c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d11b      	bne.n	800251c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f06f 0208 	mvn.w	r2, #8
 80024ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2204      	movs	r2, #4
 80024f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f97a 	bl	80027fc <HAL_TIM_IC_CaptureCallback>
 8002508:	e005      	b.n	8002516 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f96c 	bl	80027e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 f97d 	bl	8002810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	f003 0310 	and.w	r3, r3, #16
 8002526:	2b10      	cmp	r3, #16
 8002528:	d122      	bne.n	8002570 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f003 0310 	and.w	r3, r3, #16
 8002534:	2b10      	cmp	r3, #16
 8002536:	d11b      	bne.n	8002570 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f06f 0210 	mvn.w	r2, #16
 8002540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2208      	movs	r2, #8
 8002546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f950 	bl	80027fc <HAL_TIM_IC_CaptureCallback>
 800255c:	e005      	b.n	800256a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f942 	bl	80027e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f953 	bl	8002810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b01      	cmp	r3, #1
 800257c:	d10e      	bne.n	800259c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b01      	cmp	r3, #1
 800258a:	d107      	bne.n	800259c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f06f 0201 	mvn.w	r2, #1
 8002594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7fe fb4e 	bl	8000c38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a6:	2b80      	cmp	r3, #128	; 0x80
 80025a8:	d10e      	bne.n	80025c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b4:	2b80      	cmp	r3, #128	; 0x80
 80025b6:	d107      	bne.n	80025c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 faec 	bl	8002ba0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025d6:	d10e      	bne.n	80025f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e2:	2b80      	cmp	r3, #128	; 0x80
 80025e4:	d107      	bne.n	80025f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80025ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 fadf 	bl	8002bb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002600:	2b40      	cmp	r3, #64	; 0x40
 8002602:	d10e      	bne.n	8002622 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260e:	2b40      	cmp	r3, #64	; 0x40
 8002610:	d107      	bne.n	8002622 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800261a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 f901 	bl	8002824 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	f003 0320 	and.w	r3, r3, #32
 800262c:	2b20      	cmp	r3, #32
 800262e:	d10e      	bne.n	800264e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f003 0320 	and.w	r3, r3, #32
 800263a:	2b20      	cmp	r3, #32
 800263c:	d107      	bne.n	800264e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f06f 0220 	mvn.w	r2, #32
 8002646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 fa9f 	bl	8002b8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b084      	sub	sp, #16
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_TIM_ConfigClockSource+0x1c>
 800266e:	2302      	movs	r3, #2
 8002670:	e0b6      	b.n	80027e0 <HAL_TIM_ConfigClockSource+0x18a>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2202      	movs	r2, #2
 800267e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002690:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002694:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800269c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ae:	d03e      	beq.n	800272e <HAL_TIM_ConfigClockSource+0xd8>
 80026b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026b4:	f200 8087 	bhi.w	80027c6 <HAL_TIM_ConfigClockSource+0x170>
 80026b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026bc:	f000 8086 	beq.w	80027cc <HAL_TIM_ConfigClockSource+0x176>
 80026c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026c4:	d87f      	bhi.n	80027c6 <HAL_TIM_ConfigClockSource+0x170>
 80026c6:	2b70      	cmp	r3, #112	; 0x70
 80026c8:	d01a      	beq.n	8002700 <HAL_TIM_ConfigClockSource+0xaa>
 80026ca:	2b70      	cmp	r3, #112	; 0x70
 80026cc:	d87b      	bhi.n	80027c6 <HAL_TIM_ConfigClockSource+0x170>
 80026ce:	2b60      	cmp	r3, #96	; 0x60
 80026d0:	d050      	beq.n	8002774 <HAL_TIM_ConfigClockSource+0x11e>
 80026d2:	2b60      	cmp	r3, #96	; 0x60
 80026d4:	d877      	bhi.n	80027c6 <HAL_TIM_ConfigClockSource+0x170>
 80026d6:	2b50      	cmp	r3, #80	; 0x50
 80026d8:	d03c      	beq.n	8002754 <HAL_TIM_ConfigClockSource+0xfe>
 80026da:	2b50      	cmp	r3, #80	; 0x50
 80026dc:	d873      	bhi.n	80027c6 <HAL_TIM_ConfigClockSource+0x170>
 80026de:	2b40      	cmp	r3, #64	; 0x40
 80026e0:	d058      	beq.n	8002794 <HAL_TIM_ConfigClockSource+0x13e>
 80026e2:	2b40      	cmp	r3, #64	; 0x40
 80026e4:	d86f      	bhi.n	80027c6 <HAL_TIM_ConfigClockSource+0x170>
 80026e6:	2b30      	cmp	r3, #48	; 0x30
 80026e8:	d064      	beq.n	80027b4 <HAL_TIM_ConfigClockSource+0x15e>
 80026ea:	2b30      	cmp	r3, #48	; 0x30
 80026ec:	d86b      	bhi.n	80027c6 <HAL_TIM_ConfigClockSource+0x170>
 80026ee:	2b20      	cmp	r3, #32
 80026f0:	d060      	beq.n	80027b4 <HAL_TIM_ConfigClockSource+0x15e>
 80026f2:	2b20      	cmp	r3, #32
 80026f4:	d867      	bhi.n	80027c6 <HAL_TIM_ConfigClockSource+0x170>
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d05c      	beq.n	80027b4 <HAL_TIM_ConfigClockSource+0x15e>
 80026fa:	2b10      	cmp	r3, #16
 80026fc:	d05a      	beq.n	80027b4 <HAL_TIM_ConfigClockSource+0x15e>
 80026fe:	e062      	b.n	80027c6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6818      	ldr	r0, [r3, #0]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	6899      	ldr	r1, [r3, #8]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f000 f99c 	bl	8002a4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002722:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	609a      	str	r2, [r3, #8]
      break;
 800272c:	e04f      	b.n	80027ce <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6818      	ldr	r0, [r3, #0]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	6899      	ldr	r1, [r3, #8]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f000 f985 	bl	8002a4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002750:	609a      	str	r2, [r3, #8]
      break;
 8002752:	e03c      	b.n	80027ce <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	6859      	ldr	r1, [r3, #4]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	461a      	mov	r2, r3
 8002762:	f000 f8f9 	bl	8002958 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2150      	movs	r1, #80	; 0x50
 800276c:	4618      	mov	r0, r3
 800276e:	f000 f952 	bl	8002a16 <TIM_ITRx_SetConfig>
      break;
 8002772:	e02c      	b.n	80027ce <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6818      	ldr	r0, [r3, #0]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	6859      	ldr	r1, [r3, #4]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	461a      	mov	r2, r3
 8002782:	f000 f918 	bl	80029b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2160      	movs	r1, #96	; 0x60
 800278c:	4618      	mov	r0, r3
 800278e:	f000 f942 	bl	8002a16 <TIM_ITRx_SetConfig>
      break;
 8002792:	e01c      	b.n	80027ce <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6818      	ldr	r0, [r3, #0]
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	6859      	ldr	r1, [r3, #4]
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	461a      	mov	r2, r3
 80027a2:	f000 f8d9 	bl	8002958 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2140      	movs	r1, #64	; 0x40
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 f932 	bl	8002a16 <TIM_ITRx_SetConfig>
      break;
 80027b2:	e00c      	b.n	80027ce <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4619      	mov	r1, r3
 80027be:	4610      	mov	r0, r2
 80027c0:	f000 f929 	bl	8002a16 <TIM_ITRx_SetConfig>
      break;
 80027c4:	e003      	b.n	80027ce <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	73fb      	strb	r3, [r7, #15]
      break;
 80027ca:	e000      	b.n	80027ce <HAL_TIM_ConfigClockSource+0x178>
      break;
 80027cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027de:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a3c      	ldr	r2, [pc, #240]	; (800293c <TIM_Base_SetConfig+0x104>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d00f      	beq.n	8002870 <TIM_Base_SetConfig+0x38>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002856:	d00b      	beq.n	8002870 <TIM_Base_SetConfig+0x38>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a39      	ldr	r2, [pc, #228]	; (8002940 <TIM_Base_SetConfig+0x108>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d007      	beq.n	8002870 <TIM_Base_SetConfig+0x38>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a38      	ldr	r2, [pc, #224]	; (8002944 <TIM_Base_SetConfig+0x10c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d003      	beq.n	8002870 <TIM_Base_SetConfig+0x38>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a37      	ldr	r2, [pc, #220]	; (8002948 <TIM_Base_SetConfig+0x110>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d108      	bne.n	8002882 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002876:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	4313      	orrs	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a2d      	ldr	r2, [pc, #180]	; (800293c <TIM_Base_SetConfig+0x104>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d01b      	beq.n	80028c2 <TIM_Base_SetConfig+0x8a>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002890:	d017      	beq.n	80028c2 <TIM_Base_SetConfig+0x8a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a2a      	ldr	r2, [pc, #168]	; (8002940 <TIM_Base_SetConfig+0x108>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d013      	beq.n	80028c2 <TIM_Base_SetConfig+0x8a>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a29      	ldr	r2, [pc, #164]	; (8002944 <TIM_Base_SetConfig+0x10c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d00f      	beq.n	80028c2 <TIM_Base_SetConfig+0x8a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a28      	ldr	r2, [pc, #160]	; (8002948 <TIM_Base_SetConfig+0x110>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d00b      	beq.n	80028c2 <TIM_Base_SetConfig+0x8a>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a27      	ldr	r2, [pc, #156]	; (800294c <TIM_Base_SetConfig+0x114>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d007      	beq.n	80028c2 <TIM_Base_SetConfig+0x8a>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a26      	ldr	r2, [pc, #152]	; (8002950 <TIM_Base_SetConfig+0x118>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d003      	beq.n	80028c2 <TIM_Base_SetConfig+0x8a>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a25      	ldr	r2, [pc, #148]	; (8002954 <TIM_Base_SetConfig+0x11c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d108      	bne.n	80028d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	4313      	orrs	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a10      	ldr	r2, [pc, #64]	; (800293c <TIM_Base_SetConfig+0x104>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d00f      	beq.n	8002920 <TIM_Base_SetConfig+0xe8>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a11      	ldr	r2, [pc, #68]	; (8002948 <TIM_Base_SetConfig+0x110>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d00b      	beq.n	8002920 <TIM_Base_SetConfig+0xe8>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a10      	ldr	r2, [pc, #64]	; (800294c <TIM_Base_SetConfig+0x114>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d007      	beq.n	8002920 <TIM_Base_SetConfig+0xe8>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a0f      	ldr	r2, [pc, #60]	; (8002950 <TIM_Base_SetConfig+0x118>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d003      	beq.n	8002920 <TIM_Base_SetConfig+0xe8>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a0e      	ldr	r2, [pc, #56]	; (8002954 <TIM_Base_SetConfig+0x11c>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d103      	bne.n	8002928 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	691a      	ldr	r2, [r3, #16]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	615a      	str	r2, [r3, #20]
}
 800292e:	bf00      	nop
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40012c00 	.word	0x40012c00
 8002940:	40000400 	.word	0x40000400
 8002944:	40000800 	.word	0x40000800
 8002948:	40013400 	.word	0x40013400
 800294c:	40014000 	.word	0x40014000
 8002950:	40014400 	.word	0x40014400
 8002954:	40014800 	.word	0x40014800

08002958 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002958:	b480      	push	{r7}
 800295a:	b087      	sub	sp, #28
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	f023 0201 	bic.w	r2, r3, #1
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002982:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	4313      	orrs	r3, r2
 800298c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f023 030a 	bic.w	r3, r3, #10
 8002994:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	4313      	orrs	r3, r2
 800299c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	621a      	str	r2, [r3, #32]
}
 80029aa:	bf00      	nop
 80029ac:	371c      	adds	r7, #28
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b087      	sub	sp, #28
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	60f8      	str	r0, [r7, #12]
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	f023 0210 	bic.w	r2, r3, #16
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	031b      	lsls	r3, r3, #12
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	621a      	str	r2, [r3, #32]
}
 8002a0a:	bf00      	nop
 8002a0c:	371c      	adds	r7, #28
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b085      	sub	sp, #20
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	f043 0307 	orr.w	r3, r3, #7
 8002a38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	609a      	str	r2, [r3, #8]
}
 8002a40:	bf00      	nop
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
 8002a58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	021a      	lsls	r2, r3, #8
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	609a      	str	r2, [r3, #8]
}
 8002a80:	bf00      	nop
 8002a82:	371c      	adds	r7, #28
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d101      	bne.n	8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	e063      	b.n	8002b6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a2b      	ldr	r2, [pc, #172]	; (8002b78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d004      	beq.n	8002ad8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a2a      	ldr	r2, [pc, #168]	; (8002b7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d108      	bne.n	8002aea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002ade:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a1b      	ldr	r2, [pc, #108]	; (8002b78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d018      	beq.n	8002b40 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b16:	d013      	beq.n	8002b40 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a18      	ldr	r2, [pc, #96]	; (8002b80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d00e      	beq.n	8002b40 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a17      	ldr	r2, [pc, #92]	; (8002b84 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d009      	beq.n	8002b40 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a12      	ldr	r2, [pc, #72]	; (8002b7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d004      	beq.n	8002b40 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a13      	ldr	r2, [pc, #76]	; (8002b88 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d10c      	bne.n	8002b5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	40012c00 	.word	0x40012c00
 8002b7c:	40013400 	.word	0x40013400
 8002b80:	40000400 	.word	0x40000400
 8002b84:	40000800 	.word	0x40000800
 8002b88:	40014000 	.word	0x40014000

08002b8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <__libc_init_array>:
 8002bc8:	b570      	push	{r4, r5, r6, lr}
 8002bca:	4d0d      	ldr	r5, [pc, #52]	; (8002c00 <__libc_init_array+0x38>)
 8002bcc:	4c0d      	ldr	r4, [pc, #52]	; (8002c04 <__libc_init_array+0x3c>)
 8002bce:	1b64      	subs	r4, r4, r5
 8002bd0:	10a4      	asrs	r4, r4, #2
 8002bd2:	2600      	movs	r6, #0
 8002bd4:	42a6      	cmp	r6, r4
 8002bd6:	d109      	bne.n	8002bec <__libc_init_array+0x24>
 8002bd8:	4d0b      	ldr	r5, [pc, #44]	; (8002c08 <__libc_init_array+0x40>)
 8002bda:	4c0c      	ldr	r4, [pc, #48]	; (8002c0c <__libc_init_array+0x44>)
 8002bdc:	f000 f9b2 	bl	8002f44 <_init>
 8002be0:	1b64      	subs	r4, r4, r5
 8002be2:	10a4      	asrs	r4, r4, #2
 8002be4:	2600      	movs	r6, #0
 8002be6:	42a6      	cmp	r6, r4
 8002be8:	d105      	bne.n	8002bf6 <__libc_init_array+0x2e>
 8002bea:	bd70      	pop	{r4, r5, r6, pc}
 8002bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bf0:	4798      	blx	r3
 8002bf2:	3601      	adds	r6, #1
 8002bf4:	e7ee      	b.n	8002bd4 <__libc_init_array+0xc>
 8002bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bfa:	4798      	blx	r3
 8002bfc:	3601      	adds	r6, #1
 8002bfe:	e7f2      	b.n	8002be6 <__libc_init_array+0x1e>
 8002c00:	0800bc2c 	.word	0x0800bc2c
 8002c04:	0800bc2c 	.word	0x0800bc2c
 8002c08:	0800bc2c 	.word	0x0800bc2c
 8002c0c:	0800bc30 	.word	0x0800bc30

08002c10 <memset>:
 8002c10:	4402      	add	r2, r0
 8002c12:	4603      	mov	r3, r0
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d100      	bne.n	8002c1a <memset+0xa>
 8002c18:	4770      	bx	lr
 8002c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c1e:	e7f9      	b.n	8002c14 <memset+0x4>

08002c20 <swapfunc>:
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	b510      	push	{r4, lr}
 8002c24:	d00a      	beq.n	8002c3c <swapfunc+0x1c>
 8002c26:	0892      	lsrs	r2, r2, #2
 8002c28:	3a01      	subs	r2, #1
 8002c2a:	6803      	ldr	r3, [r0, #0]
 8002c2c:	680c      	ldr	r4, [r1, #0]
 8002c2e:	f840 4b04 	str.w	r4, [r0], #4
 8002c32:	2a00      	cmp	r2, #0
 8002c34:	f841 3b04 	str.w	r3, [r1], #4
 8002c38:	dcf6      	bgt.n	8002c28 <swapfunc+0x8>
 8002c3a:	bd10      	pop	{r4, pc}
 8002c3c:	4402      	add	r2, r0
 8002c3e:	780c      	ldrb	r4, [r1, #0]
 8002c40:	7803      	ldrb	r3, [r0, #0]
 8002c42:	f800 4b01 	strb.w	r4, [r0], #1
 8002c46:	f801 3b01 	strb.w	r3, [r1], #1
 8002c4a:	1a13      	subs	r3, r2, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	dcf6      	bgt.n	8002c3e <swapfunc+0x1e>
 8002c50:	e7f3      	b.n	8002c3a <swapfunc+0x1a>

08002c52 <med3.isra.0>:
 8002c52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c54:	460f      	mov	r7, r1
 8002c56:	4614      	mov	r4, r2
 8002c58:	4606      	mov	r6, r0
 8002c5a:	461d      	mov	r5, r3
 8002c5c:	4798      	blx	r3
 8002c5e:	2800      	cmp	r0, #0
 8002c60:	4621      	mov	r1, r4
 8002c62:	4638      	mov	r0, r7
 8002c64:	da0c      	bge.n	8002c80 <med3.isra.0+0x2e>
 8002c66:	47a8      	blx	r5
 8002c68:	2800      	cmp	r0, #0
 8002c6a:	da02      	bge.n	8002c72 <med3.isra.0+0x20>
 8002c6c:	463c      	mov	r4, r7
 8002c6e:	4620      	mov	r0, r4
 8002c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c72:	4621      	mov	r1, r4
 8002c74:	4630      	mov	r0, r6
 8002c76:	47a8      	blx	r5
 8002c78:	2800      	cmp	r0, #0
 8002c7a:	dbf8      	blt.n	8002c6e <med3.isra.0+0x1c>
 8002c7c:	4634      	mov	r4, r6
 8002c7e:	e7f6      	b.n	8002c6e <med3.isra.0+0x1c>
 8002c80:	47a8      	blx	r5
 8002c82:	2800      	cmp	r0, #0
 8002c84:	dcf2      	bgt.n	8002c6c <med3.isra.0+0x1a>
 8002c86:	4621      	mov	r1, r4
 8002c88:	4630      	mov	r0, r6
 8002c8a:	47a8      	blx	r5
 8002c8c:	2800      	cmp	r0, #0
 8002c8e:	daee      	bge.n	8002c6e <med3.isra.0+0x1c>
 8002c90:	e7f4      	b.n	8002c7c <med3.isra.0+0x2a>

08002c92 <qsort>:
 8002c92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c96:	469a      	mov	sl, r3
 8002c98:	ea40 0302 	orr.w	r3, r0, r2
 8002c9c:	079b      	lsls	r3, r3, #30
 8002c9e:	b097      	sub	sp, #92	; 0x5c
 8002ca0:	4606      	mov	r6, r0
 8002ca2:	4614      	mov	r4, r2
 8002ca4:	d11a      	bne.n	8002cdc <qsort+0x4a>
 8002ca6:	f1b2 0804 	subs.w	r8, r2, #4
 8002caa:	bf18      	it	ne
 8002cac:	f04f 0801 	movne.w	r8, #1
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	9302      	str	r3, [sp, #8]
 8002cb4:	1933      	adds	r3, r6, r4
 8002cb6:	fb04 f701 	mul.w	r7, r4, r1
 8002cba:	9301      	str	r3, [sp, #4]
 8002cbc:	2906      	cmp	r1, #6
 8002cbe:	eb06 0307 	add.w	r3, r6, r7
 8002cc2:	9303      	str	r3, [sp, #12]
 8002cc4:	d82a      	bhi.n	8002d1c <qsort+0x8a>
 8002cc6:	9b01      	ldr	r3, [sp, #4]
 8002cc8:	9a03      	ldr	r2, [sp, #12]
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d310      	bcc.n	8002cf0 <qsort+0x5e>
 8002cce:	9b02      	ldr	r3, [sp, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f040 811f 	bne.w	8002f14 <qsort+0x282>
 8002cd6:	b017      	add	sp, #92	; 0x5c
 8002cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cdc:	f04f 0802 	mov.w	r8, #2
 8002ce0:	e7e6      	b.n	8002cb0 <qsort+0x1e>
 8002ce2:	4643      	mov	r3, r8
 8002ce4:	4622      	mov	r2, r4
 8002ce6:	4639      	mov	r1, r7
 8002ce8:	4628      	mov	r0, r5
 8002cea:	f7ff ff99 	bl	8002c20 <swapfunc>
 8002cee:	e00e      	b.n	8002d0e <qsort+0x7c>
 8002cf0:	9d01      	ldr	r5, [sp, #4]
 8002cf2:	e00d      	b.n	8002d10 <qsort+0x7e>
 8002cf4:	1b2f      	subs	r7, r5, r4
 8002cf6:	4629      	mov	r1, r5
 8002cf8:	4638      	mov	r0, r7
 8002cfa:	47d0      	blx	sl
 8002cfc:	2800      	cmp	r0, #0
 8002cfe:	dd09      	ble.n	8002d14 <qsort+0x82>
 8002d00:	f1b8 0f00 	cmp.w	r8, #0
 8002d04:	d1ed      	bne.n	8002ce2 <qsort+0x50>
 8002d06:	682b      	ldr	r3, [r5, #0]
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	602a      	str	r2, [r5, #0]
 8002d0c:	603b      	str	r3, [r7, #0]
 8002d0e:	463d      	mov	r5, r7
 8002d10:	42ae      	cmp	r6, r5
 8002d12:	d3ef      	bcc.n	8002cf4 <qsort+0x62>
 8002d14:	9b01      	ldr	r3, [sp, #4]
 8002d16:	4423      	add	r3, r4
 8002d18:	9301      	str	r3, [sp, #4]
 8002d1a:	e7d4      	b.n	8002cc6 <qsort+0x34>
 8002d1c:	ea4f 0951 	mov.w	r9, r1, lsr #1
 8002d20:	1b3f      	subs	r7, r7, r4
 8002d22:	2907      	cmp	r1, #7
 8002d24:	fb04 6909 	mla	r9, r4, r9, r6
 8002d28:	4437      	add	r7, r6
 8002d2a:	d022      	beq.n	8002d72 <qsort+0xe0>
 8002d2c:	2928      	cmp	r1, #40	; 0x28
 8002d2e:	d945      	bls.n	8002dbc <qsort+0x12a>
 8002d30:	08c9      	lsrs	r1, r1, #3
 8002d32:	fb04 f501 	mul.w	r5, r4, r1
 8002d36:	4653      	mov	r3, sl
 8002d38:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8002d3c:	1971      	adds	r1, r6, r5
 8002d3e:	4630      	mov	r0, r6
 8002d40:	f7ff ff87 	bl	8002c52 <med3.isra.0>
 8002d44:	4649      	mov	r1, r9
 8002d46:	eb09 0205 	add.w	r2, r9, r5
 8002d4a:	4653      	mov	r3, sl
 8002d4c:	4683      	mov	fp, r0
 8002d4e:	1b48      	subs	r0, r1, r5
 8002d50:	f7ff ff7f 	bl	8002c52 <med3.isra.0>
 8002d54:	463a      	mov	r2, r7
 8002d56:	4681      	mov	r9, r0
 8002d58:	4653      	mov	r3, sl
 8002d5a:	1b79      	subs	r1, r7, r5
 8002d5c:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 8002d60:	f7ff ff77 	bl	8002c52 <med3.isra.0>
 8002d64:	4602      	mov	r2, r0
 8002d66:	4649      	mov	r1, r9
 8002d68:	4653      	mov	r3, sl
 8002d6a:	4658      	mov	r0, fp
 8002d6c:	f7ff ff71 	bl	8002c52 <med3.isra.0>
 8002d70:	4681      	mov	r9, r0
 8002d72:	f1b8 0f00 	cmp.w	r8, #0
 8002d76:	d124      	bne.n	8002dc2 <qsort+0x130>
 8002d78:	6833      	ldr	r3, [r6, #0]
 8002d7a:	f8d9 2000 	ldr.w	r2, [r9]
 8002d7e:	6032      	str	r2, [r6, #0]
 8002d80:	f8c9 3000 	str.w	r3, [r9]
 8002d84:	eb06 0b04 	add.w	fp, r6, r4
 8002d88:	46b9      	mov	r9, r7
 8002d8a:	465d      	mov	r5, fp
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	45bb      	cmp	fp, r7
 8002d90:	d835      	bhi.n	8002dfe <qsort+0x16c>
 8002d92:	4631      	mov	r1, r6
 8002d94:	4658      	mov	r0, fp
 8002d96:	9304      	str	r3, [sp, #16]
 8002d98:	47d0      	blx	sl
 8002d9a:	2800      	cmp	r0, #0
 8002d9c:	9b04      	ldr	r3, [sp, #16]
 8002d9e:	dc3e      	bgt.n	8002e1e <qsort+0x18c>
 8002da0:	d10a      	bne.n	8002db8 <qsort+0x126>
 8002da2:	f1b8 0f00 	cmp.w	r8, #0
 8002da6:	d113      	bne.n	8002dd0 <qsort+0x13e>
 8002da8:	682b      	ldr	r3, [r5, #0]
 8002daa:	f8db 2000 	ldr.w	r2, [fp]
 8002dae:	602a      	str	r2, [r5, #0]
 8002db0:	f8cb 3000 	str.w	r3, [fp]
 8002db4:	4425      	add	r5, r4
 8002db6:	2301      	movs	r3, #1
 8002db8:	44a3      	add	fp, r4
 8002dba:	e7e8      	b.n	8002d8e <qsort+0xfc>
 8002dbc:	463a      	mov	r2, r7
 8002dbe:	46b3      	mov	fp, r6
 8002dc0:	e7d1      	b.n	8002d66 <qsort+0xd4>
 8002dc2:	4643      	mov	r3, r8
 8002dc4:	4622      	mov	r2, r4
 8002dc6:	4649      	mov	r1, r9
 8002dc8:	4630      	mov	r0, r6
 8002dca:	f7ff ff29 	bl	8002c20 <swapfunc>
 8002dce:	e7d9      	b.n	8002d84 <qsort+0xf2>
 8002dd0:	4643      	mov	r3, r8
 8002dd2:	4622      	mov	r2, r4
 8002dd4:	4659      	mov	r1, fp
 8002dd6:	4628      	mov	r0, r5
 8002dd8:	f7ff ff22 	bl	8002c20 <swapfunc>
 8002ddc:	e7ea      	b.n	8002db4 <qsort+0x122>
 8002dde:	d10b      	bne.n	8002df8 <qsort+0x166>
 8002de0:	f1b8 0f00 	cmp.w	r8, #0
 8002de4:	d114      	bne.n	8002e10 <qsort+0x17e>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	f8d9 2000 	ldr.w	r2, [r9]
 8002dec:	603a      	str	r2, [r7, #0]
 8002dee:	f8c9 3000 	str.w	r3, [r9]
 8002df2:	eba9 0904 	sub.w	r9, r9, r4
 8002df6:	2301      	movs	r3, #1
 8002df8:	9f04      	ldr	r7, [sp, #16]
 8002dfa:	45bb      	cmp	fp, r7
 8002dfc:	d90f      	bls.n	8002e1e <qsort+0x18c>
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d143      	bne.n	8002e8a <qsort+0x1f8>
 8002e02:	9b01      	ldr	r3, [sp, #4]
 8002e04:	9a03      	ldr	r2, [sp, #12]
 8002e06:	4293      	cmp	r3, r2
 8002e08:	f4bf af61 	bcs.w	8002cce <qsort+0x3c>
 8002e0c:	9d01      	ldr	r5, [sp, #4]
 8002e0e:	e036      	b.n	8002e7e <qsort+0x1ec>
 8002e10:	4643      	mov	r3, r8
 8002e12:	4622      	mov	r2, r4
 8002e14:	4649      	mov	r1, r9
 8002e16:	4638      	mov	r0, r7
 8002e18:	f7ff ff02 	bl	8002c20 <swapfunc>
 8002e1c:	e7e9      	b.n	8002df2 <qsort+0x160>
 8002e1e:	4631      	mov	r1, r6
 8002e20:	4638      	mov	r0, r7
 8002e22:	9305      	str	r3, [sp, #20]
 8002e24:	47d0      	blx	sl
 8002e26:	1b3b      	subs	r3, r7, r4
 8002e28:	2800      	cmp	r0, #0
 8002e2a:	9304      	str	r3, [sp, #16]
 8002e2c:	9b05      	ldr	r3, [sp, #20]
 8002e2e:	dad6      	bge.n	8002dde <qsort+0x14c>
 8002e30:	f1b8 0f00 	cmp.w	r8, #0
 8002e34:	d006      	beq.n	8002e44 <qsort+0x1b2>
 8002e36:	4643      	mov	r3, r8
 8002e38:	4622      	mov	r2, r4
 8002e3a:	4639      	mov	r1, r7
 8002e3c:	4658      	mov	r0, fp
 8002e3e:	f7ff feef 	bl	8002c20 <swapfunc>
 8002e42:	e005      	b.n	8002e50 <qsort+0x1be>
 8002e44:	f8db 3000 	ldr.w	r3, [fp]
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	f8cb 2000 	str.w	r2, [fp]
 8002e4e:	603b      	str	r3, [r7, #0]
 8002e50:	9f04      	ldr	r7, [sp, #16]
 8002e52:	e7b0      	b.n	8002db6 <qsort+0x124>
 8002e54:	4643      	mov	r3, r8
 8002e56:	4622      	mov	r2, r4
 8002e58:	4639      	mov	r1, r7
 8002e5a:	4628      	mov	r0, r5
 8002e5c:	f7ff fee0 	bl	8002c20 <swapfunc>
 8002e60:	e00c      	b.n	8002e7c <qsort+0x1ea>
 8002e62:	1b2f      	subs	r7, r5, r4
 8002e64:	4629      	mov	r1, r5
 8002e66:	4638      	mov	r0, r7
 8002e68:	47d0      	blx	sl
 8002e6a:	2800      	cmp	r0, #0
 8002e6c:	dd09      	ble.n	8002e82 <qsort+0x1f0>
 8002e6e:	f1b8 0f00 	cmp.w	r8, #0
 8002e72:	d1ef      	bne.n	8002e54 <qsort+0x1c2>
 8002e74:	682b      	ldr	r3, [r5, #0]
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	602a      	str	r2, [r5, #0]
 8002e7a:	603b      	str	r3, [r7, #0]
 8002e7c:	463d      	mov	r5, r7
 8002e7e:	42ae      	cmp	r6, r5
 8002e80:	d3ef      	bcc.n	8002e62 <qsort+0x1d0>
 8002e82:	9b01      	ldr	r3, [sp, #4]
 8002e84:	4423      	add	r3, r4
 8002e86:	9301      	str	r3, [sp, #4]
 8002e88:	e7bb      	b.n	8002e02 <qsort+0x170>
 8002e8a:	ebab 0305 	sub.w	r3, fp, r5
 8002e8e:	1baa      	subs	r2, r5, r6
 8002e90:	429a      	cmp	r2, r3
 8002e92:	bfa8      	it	ge
 8002e94:	461a      	movge	r2, r3
 8002e96:	9301      	str	r3, [sp, #4]
 8002e98:	b12a      	cbz	r2, 8002ea6 <qsort+0x214>
 8002e9a:	4643      	mov	r3, r8
 8002e9c:	ebab 0102 	sub.w	r1, fp, r2
 8002ea0:	4630      	mov	r0, r6
 8002ea2:	f7ff febd 	bl	8002c20 <swapfunc>
 8002ea6:	9b03      	ldr	r3, [sp, #12]
 8002ea8:	eba3 0209 	sub.w	r2, r3, r9
 8002eac:	eba9 0707 	sub.w	r7, r9, r7
 8002eb0:	1b12      	subs	r2, r2, r4
 8002eb2:	42ba      	cmp	r2, r7
 8002eb4:	bf28      	it	cs
 8002eb6:	463a      	movcs	r2, r7
 8002eb8:	b12a      	cbz	r2, 8002ec6 <qsort+0x234>
 8002eba:	9903      	ldr	r1, [sp, #12]
 8002ebc:	4643      	mov	r3, r8
 8002ebe:	1a89      	subs	r1, r1, r2
 8002ec0:	4658      	mov	r0, fp
 8002ec2:	f7ff fead 	bl	8002c20 <swapfunc>
 8002ec6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8002eca:	9b03      	ldr	r3, [sp, #12]
 8002ecc:	454f      	cmp	r7, r9
 8002ece:	eba3 0007 	sub.w	r0, r3, r7
 8002ed2:	d904      	bls.n	8002ede <qsort+0x24c>
 8002ed4:	4633      	mov	r3, r6
 8002ed6:	46b9      	mov	r9, r7
 8002ed8:	9f01      	ldr	r7, [sp, #4]
 8002eda:	4606      	mov	r6, r0
 8002edc:	4618      	mov	r0, r3
 8002ede:	42a7      	cmp	r7, r4
 8002ee0:	d921      	bls.n	8002f26 <qsort+0x294>
 8002ee2:	fbb7 f1f4 	udiv	r1, r7, r4
 8002ee6:	9b02      	ldr	r3, [sp, #8]
 8002ee8:	2b07      	cmp	r3, #7
 8002eea:	d80d      	bhi.n	8002f08 <qsort+0x276>
 8002eec:	fbb9 f7f4 	udiv	r7, r9, r4
 8002ef0:	aa16      	add	r2, sp, #88	; 0x58
 8002ef2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002ef6:	f843 6c40 	str.w	r6, [r3, #-64]
 8002efa:	f843 7c3c 	str.w	r7, [r3, #-60]
 8002efe:	9b02      	ldr	r3, [sp, #8]
 8002f00:	3301      	adds	r3, #1
 8002f02:	9302      	str	r3, [sp, #8]
 8002f04:	4606      	mov	r6, r0
 8002f06:	e6d5      	b.n	8002cb4 <qsort+0x22>
 8002f08:	4653      	mov	r3, sl
 8002f0a:	4622      	mov	r2, r4
 8002f0c:	f7ff fec1 	bl	8002c92 <qsort>
 8002f10:	45a1      	cmp	r9, r4
 8002f12:	d80b      	bhi.n	8002f2c <qsort+0x29a>
 8002f14:	9b02      	ldr	r3, [sp, #8]
 8002f16:	aa16      	add	r2, sp, #88	; 0x58
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	9302      	str	r3, [sp, #8]
 8002f1c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002f20:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 8002f24:	e7ee      	b.n	8002f04 <qsort+0x272>
 8002f26:	45a1      	cmp	r9, r4
 8002f28:	f67f aed1 	bls.w	8002cce <qsort+0x3c>
 8002f2c:	fbb9 f1f4 	udiv	r1, r9, r4
 8002f30:	4630      	mov	r0, r6
 8002f32:	e7e7      	b.n	8002f04 <qsort+0x272>

08002f34 <strcpy>:
 8002f34:	4603      	mov	r3, r0
 8002f36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f3a:	f803 2b01 	strb.w	r2, [r3], #1
 8002f3e:	2a00      	cmp	r2, #0
 8002f40:	d1f9      	bne.n	8002f36 <strcpy+0x2>
 8002f42:	4770      	bx	lr

08002f44 <_init>:
 8002f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f46:	bf00      	nop
 8002f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f4a:	bc08      	pop	{r3}
 8002f4c:	469e      	mov	lr, r3
 8002f4e:	4770      	bx	lr

08002f50 <_fini>:
 8002f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f52:	bf00      	nop
 8002f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f56:	bc08      	pop	{r3}
 8002f58:	469e      	mov	lr, r3
 8002f5a:	4770      	bx	lr

Disassembly of section .ccmram:

10000000 <compare>:
{
10000000:	b580      	push	{r7, lr}
10000002:	b084      	sub	sp, #16
10000004:	af00      	add	r7, sp, #0
10000006:	6078      	str	r0, [r7, #4]
10000008:	6039      	str	r1, [r7, #0]
  result = strcmp((*((struct myStringStruct *)elem1)).qstring, (*((struct myStringStruct *)elem2)).qstring);
1000000a:	687b      	ldr	r3, [r7, #4]
1000000c:	683a      	ldr	r2, [r7, #0]
1000000e:	4611      	mov	r1, r2
10000010:	4618      	mov	r0, r3
10000012:	f000 f811 	bl	10000038 <__strcmp_veneer>
10000016:	60f8      	str	r0, [r7, #12]
  return (result < 0) ? 1 : ((result == 0) ? 0 : -1);
10000018:	68fb      	ldr	r3, [r7, #12]
1000001a:	2b00      	cmp	r3, #0
1000001c:	db07      	blt.n	1000002e <compare+0x2e>
1000001e:	68fb      	ldr	r3, [r7, #12]
10000020:	2b00      	cmp	r3, #0
10000022:	d101      	bne.n	10000028 <compare+0x28>
10000024:	2300      	movs	r3, #0
10000026:	e003      	b.n	10000030 <compare+0x30>
10000028:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1000002c:	e000      	b.n	10000030 <compare+0x30>
1000002e:	2301      	movs	r3, #1
}
10000030:	4618      	mov	r0, r3
10000032:	3710      	adds	r7, #16
10000034:	46bd      	mov	sp, r7
10000036:	bd80      	pop	{r7, pc}

10000038 <__strcmp_veneer>:
10000038:	f85f f000 	ldr.w	pc, [pc]	; 1000003c <__strcmp_veneer+0x4>
1000003c:	080001c9 	.word	0x080001c9
