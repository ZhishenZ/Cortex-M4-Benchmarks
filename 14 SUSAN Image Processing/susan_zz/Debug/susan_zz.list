
susan_zz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800abe0  0800abe0  0001abe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac60  0800ac60  000308a0  2**0
                  CONTENTS
  4 .ARM          00000000  0800ac60  0800ac60  000308a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ac60  0800ac60  000308a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac60  0800ac60  0001ac60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac64  0800ac64  0001ac64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001cec  20000000  0800ac68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       000008a0  10000000  10000000  00030000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .bss          00007684  20001cf0  20001cf0  00031cf0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20009374  20009374  00031cf0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000308a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000116aa  00000000  00000000  000308d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002233  00000000  00000000  00041f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d98  00000000  00000000  000441b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dfc6  00000000  00000000  00044f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013006  00000000  00000000  00062f0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b7f9b  00000000  00000000  00075f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012deaf  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00000ca8  00000000  00000000  0012df08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003e60  00000000  00000000  0012ebb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001cf0 	.word	0x20001cf0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800abb8 	.word	0x0800abb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001cf4 	.word	0x20001cf4
 80001cc:	0800abb8 	.word	0x0800abb8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <susan_expf>:
// #define PROGRAM_ON_CCM:  41.099



float susan_expf( float y )
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	ed87 0a01 	vstr	s0, [r7, #4]
      #else
      short i, j;
      #endif
    } n;
  } eco;
  eco.n.i = EXP_A * ( y ) + ( EXP_C );
 8000b76:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b7a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000bb0 <susan_expf+0x44>
 8000b7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b82:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000bb4 <susan_expf+0x48>
 8000b86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b8e:	ee17 3a90 	vmov	r3, s15
 8000b92:	b21b      	sxth	r3, r3
 8000b94:	81fb      	strh	r3, [r7, #14]
  eco.n.j = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	81bb      	strh	r3, [r7, #12]
  return eco.d;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	ee07 3a90 	vmov	s15, r3
}
 8000ba0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	43380000 	.word	0x43380000
 8000bb4:	467de400 	.word	0x467de400

08000bb8 <susan_sqrtf>:


float susan_sqrtf( float val )
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b088      	sub	sp, #32
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	ed87 0a01 	vstr	s0, [r7, #4]
  float x = val / 10;
 8000bc2:	ed97 7a01 	vldr	s14, [r7, #4]
 8000bc6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000bca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bce:	edc7 7a07 	vstr	s15, [r7, #28]

  float dx;

  float diff;
  float min_tol = 0.00001f;
 8000bd2:	4b2a      	ldr	r3, [pc, #168]	; (8000c7c <susan_sqrtf+0xc4>)
 8000bd4:	613b      	str	r3, [r7, #16]

  int i, flag;


  flag = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
  if ( val == 0 ) x = 0;
 8000bda:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bde:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000be6:	d103      	bne.n	8000bf0 <susan_sqrtf+0x38>
 8000be8:	f04f 0300 	mov.w	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
 8000bee:	e03c      	b.n	8000c6a <susan_sqrtf+0xb2>
  else {
    for ( i = 1; i < 20; i++ ) {
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	61bb      	str	r3, [r7, #24]
 8000bf4:	e036      	b.n	8000c64 <susan_sqrtf+0xac>
      if ( !flag ) {
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d130      	bne.n	8000c5e <susan_sqrtf+0xa6>
        dx = ( val - ( x * x ) ) / ( 2.0f * x );
 8000bfc:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c00:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000c04:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c08:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000c0c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c10:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000c14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c18:	edc7 7a03 	vstr	s15, [r7, #12]
        x = x + dx;
 8000c1c:	ed97 7a07 	vldr	s14, [r7, #28]
 8000c20:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c28:	edc7 7a07 	vstr	s15, [r7, #28]
        diff = val - ( x * x );
 8000c2c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c30:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000c34:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c3c:	edc7 7a02 	vstr	s15, [r7, #8]
        if ( fabs( diff ) <= min_tol ) flag = 1;
 8000c40:	ed97 0a02 	vldr	s0, [r7, #8]
 8000c44:	f006 fbc0 	bl	80073c8 <susan___fabsf>
 8000c48:	eeb0 7a40 	vmov.f32	s14, s0
 8000c4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c58:	db01      	blt.n	8000c5e <susan_sqrtf+0xa6>
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	617b      	str	r3, [r7, #20]
    for ( i = 1; i < 20; i++ ) {
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	3301      	adds	r3, #1
 8000c62:	61bb      	str	r3, [r7, #24]
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	2b13      	cmp	r3, #19
 8000c68:	ddc5      	ble.n	8000bf6 <susan_sqrtf+0x3e>
      }
    }
  }
  return ( x );
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	ee07 3a90 	vmov	s15, r3
}
 8000c70:	eeb0 0a67 	vmov.f32	s0, s15
 8000c74:	3720      	adds	r7, #32
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	3727c5ac 	.word	0x3727c5ac

08000c80 <susan_put_image>:
  }
}


void susan_put_image( int x_size, int y_size )
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
  int i;
  for ( i = 0; i < x_size * y_size; i++ )
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	e002      	b.n	8000c96 <susan_put_image+0x16>
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	3301      	adds	r3, #1
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	683a      	ldr	r2, [r7, #0]
 8000c9a:	fb02 f303 	mul.w	r3, r2, r3
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	dbf5      	blt.n	8000c90 <susan_put_image+0x10>
    ;
}
 8000ca4:	bf00      	nop
 8000ca6:	bf00      	nop
 8000ca8:	3714      	adds	r7, #20
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <susan_int_to_uchar>:


void susan_int_to_uchar( char *r, uchar *in, int size )
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b089      	sub	sp, #36	; 0x24
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	60f8      	str	r0, [r7, #12]
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
  int i, max_r = r[ 0 ], min_r = r[ 0 ];
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	61bb      	str	r3, [r7, #24]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	617b      	str	r3, [r7, #20]

  for ( i = 0; i < size; i++ ) {
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
 8000cce:	e01c      	b.n	8000d0a <susan_int_to_uchar+0x58>
    if ( r[ i ] > max_r )
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	da04      	bge.n	8000cea <susan_int_to_uchar+0x38>
      max_r = r[ i ];
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	61bb      	str	r3, [r7, #24]
    if ( r[ i ] < min_r )
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	68fa      	ldr	r2, [r7, #12]
 8000cee:	4413      	add	r3, r2
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	dd04      	ble.n	8000d04 <susan_int_to_uchar+0x52>
      min_r = r[ i ];
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	68fa      	ldr	r2, [r7, #12]
 8000cfe:	4413      	add	r3, r2
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	617b      	str	r3, [r7, #20]
  for ( i = 0; i < size; i++ ) {
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	3301      	adds	r3, #1
 8000d08:	61fb      	str	r3, [r7, #28]
 8000d0a:	69fa      	ldr	r2, [r7, #28]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	dbde      	blt.n	8000cd0 <susan_int_to_uchar+0x1e>
  }

  if ( max_r == min_r ) {
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	429a      	cmp	r2, r3
 8000d18:	d10f      	bne.n	8000d3a <susan_int_to_uchar+0x88>
    /* Should not occur in TACLeBench. */
    for ( i = 0; i < size; i++ )
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
 8000d1e:	e007      	b.n	8000d30 <susan_int_to_uchar+0x7e>
      in[ i ] = ( uchar )( 0 );
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	4413      	add	r3, r2
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
    for ( i = 0; i < size; i++ )
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	61fb      	str	r3, [r7, #28]
 8000d30:	69fa      	ldr	r2, [r7, #28]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	dbf3      	blt.n	8000d20 <susan_int_to_uchar+0x6e>

    return;
 8000d38:	e01f      	b.n	8000d7a <susan_int_to_uchar+0xc8>
  }
  max_r -= min_r;
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	61bb      	str	r3, [r7, #24]

  for ( i = 0; i < size; i++ )
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
 8000d46:	e014      	b.n	8000d72 <susan_int_to_uchar+0xc0>
    in[ i ] = ( uchar )( ( int )( ( int )( r[ i ] - min_r ) * 255 ) / max_r );
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	1ad2      	subs	r2, r2, r3
 8000d56:	4613      	mov	r3, r2
 8000d58:	021b      	lsls	r3, r3, #8
 8000d5a:	1a9a      	subs	r2, r3, r2
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	fb92 f1f3 	sdiv	r1, r2, r3
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	68ba      	ldr	r2, [r7, #8]
 8000d66:	4413      	add	r3, r2
 8000d68:	b2ca      	uxtb	r2, r1
 8000d6a:	701a      	strb	r2, [r3, #0]
  for ( i = 0; i < size; i++ )
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	61fb      	str	r3, [r7, #28]
 8000d72:	69fa      	ldr	r2, [r7, #28]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	dbe6      	blt.n	8000d48 <susan_int_to_uchar+0x96>
}
 8000d7a:	3724      	adds	r7, #36	; 0x24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <susan_setup_brightness_lut>:


void susan_setup_brightness_lut( uchar **bp, int thresh, int form )
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
  int   k;
  float temp;

  *bp = ( unsigned char * )susan_wccmalloc( 516 );
 8000d90:	f44f 7001 	mov.w	r0, #516	; 0x204
 8000d94:	f006 fb32 	bl	80073fc <susan_wccmalloc>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	601a      	str	r2, [r3, #0]
  *bp = *bp + 258;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f503 7281 	add.w	r2, r3, #258	; 0x102
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	601a      	str	r2, [r3, #0]

  for ( k = -256; k < 257; k++ ) {
 8000daa:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	e040      	b.n	8000e34 <susan_setup_brightness_lut+0xb0>
    temp = ( ( float )k ) / ( ( float )thresh );
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	ee07 3a90 	vmov	s15, r3
 8000db8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	ee07 3a90 	vmov	s15, r3
 8000dc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dca:	edc7 7a04 	vstr	s15, [r7, #16]
    temp = temp * temp;
 8000dce:	edd7 7a04 	vldr	s15, [r7, #16]
 8000dd2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000dd6:	edc7 7a04 	vstr	s15, [r7, #16]
    if ( form == 6 )
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b06      	cmp	r3, #6
 8000dde:	d109      	bne.n	8000df4 <susan_setup_brightness_lut+0x70>
      temp = temp * temp * temp;
 8000de0:	edd7 7a04 	vldr	s15, [r7, #16]
 8000de4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000de8:	ed97 7a04 	vldr	s14, [r7, #16]
 8000dec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000df0:	edc7 7a04 	vstr	s15, [r7, #16]
    temp = 100.0 * susan_expf( -temp );
 8000df4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000df8:	eef1 7a67 	vneg.f32	s15, s15
 8000dfc:	eeb0 0a67 	vmov.f32	s0, s15
 8000e00:	f7ff feb4 	bl	8000b6c <susan_expf>
 8000e04:	eef0 7a40 	vmov.f32	s15, s0
 8000e08:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000e48 <susan_setup_brightness_lut+0xc4>
 8000e0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e10:	edc7 7a04 	vstr	s15, [r7, #16]
    *( *bp + k ) = ( uchar )temp;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e24:	edc7 7a00 	vstr	s15, [r7]
 8000e28:	683a      	ldr	r2, [r7, #0]
 8000e2a:	b2d2      	uxtb	r2, r2
 8000e2c:	701a      	strb	r2, [r3, #0]
  for ( k = -256; k < 257; k++ ) {
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	3301      	adds	r3, #1
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e3a:	ddba      	ble.n	8000db2 <susan_setup_brightness_lut+0x2e>
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	42c80000 	.word	0x42c80000

08000e4c <susan_principle>:


void susan_principle( uchar *in, char *r, uchar *bp,
                      int max_no, int x_size, int y_size )
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	; 0x28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
 8000e58:	603b      	str	r3, [r7, #0]
  int   i, j, n;
  uchar *p, *cp;

  susan_wccmemset( r, 0, x_size * y_size * sizeof( int ) );
 8000e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e5e:	fb02 f303 	mul.w	r3, r2, r3
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	461a      	mov	r2, r3
 8000e66:	2100      	movs	r1, #0
 8000e68:	68b8      	ldr	r0, [r7, #8]
 8000e6a:	f006 fb23 	bl	80074b4 <susan_wccmemset>

  _Pragma( "loopbound min 0 max 0" )
  for ( i = 3; i < y_size - 3; i++ ) {
 8000e6e:	2303      	movs	r3, #3
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
 8000e72:	e1ff      	b.n	8001274 <susan_principle+0x428>
    _Pragma( "loopbound min 0 max 0" )
    for ( j = 3; j < x_size - 3; j++ ) {
 8000e74:	2303      	movs	r3, #3
 8000e76:	623b      	str	r3, [r7, #32]
 8000e78:	e1f3      	b.n	8001262 <susan_principle+0x416>
      n = 100;
 8000e7a:	2364      	movs	r3, #100	; 0x64
 8000e7c:	61fb      	str	r3, [r7, #28]
      p = in + ( i - 3 ) * x_size + j - 1;
 8000e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e80:	3b03      	subs	r3, #3
 8000e82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e84:	fb02 f303 	mul.w	r3, r2, r3
 8000e88:	461a      	mov	r2, r3
 8000e8a:	6a3b      	ldr	r3, [r7, #32]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	68fa      	ldr	r2, [r7, #12]
 8000e92:	4413      	add	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
      cp = bp + in[ i * x_size + j ];
 8000e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e9a:	fb02 f203 	mul.w	r2, r2, r3
 8000e9e:	6a3b      	ldr	r3, [r7, #32]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4413      	add	r3, r2
 8000eb0:	617b      	str	r3, [r7, #20]

      n += *( cp - *p++ );
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	1c5a      	adds	r2, r3, #1
 8000eb6:	61ba      	str	r2, [r7, #24]
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	425b      	negs	r3, r3
 8000ebc:	697a      	ldr	r2, [r7, #20]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	61fb      	str	r3, [r7, #28]
      n += *( cp - *p++ );
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	1c5a      	adds	r2, r3, #1
 8000ece:	61ba      	str	r2, [r7, #24]
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	425b      	negs	r3, r3
 8000ed4:	697a      	ldr	r2, [r7, #20]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	461a      	mov	r2, r3
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	4413      	add	r3, r2
 8000ee0:	61fb      	str	r3, [r7, #28]
      n += *( cp - *p );
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	425b      	negs	r3, r3
 8000ee8:	697a      	ldr	r2, [r7, #20]
 8000eea:	4413      	add	r3, r2
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	61fb      	str	r3, [r7, #28]
      p += x_size - 3;
 8000ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ef8:	3b03      	subs	r3, #3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4413      	add	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]

      n += *( cp - *p++ );
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	1c5a      	adds	r2, r3, #1
 8000f04:	61ba      	str	r2, [r7, #24]
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	425b      	negs	r3, r3
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	461a      	mov	r2, r3
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	4413      	add	r3, r2
 8000f16:	61fb      	str	r3, [r7, #28]
      n += *( cp - *p++ );
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	1c5a      	adds	r2, r3, #1
 8000f1c:	61ba      	str	r2, [r7, #24]
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	425b      	negs	r3, r3
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	4413      	add	r3, r2
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	61fb      	str	r3, [r7, #28]
      n += *( cp - *p++ );
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	1c5a      	adds	r2, r3, #1
 8000f34:	61ba      	str	r2, [r7, #24]
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	425b      	negs	r3, r3
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	4413      	add	r3, r2
 8000f46:	61fb      	str	r3, [r7, #28]
      n += *( cp - *p++ );
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	1c5a      	adds	r2, r3, #1
 8000f4c:	61ba      	str	r2, [r7, #24]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	425b      	negs	r3, r3
 8000f52:	697a      	ldr	r2, [r7, #20]
 8000f54:	4413      	add	r3, r2
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	61fb      	str	r3, [r7, #28]
      n += *( cp - *p );
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	425b      	negs	r3, r3
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	4413      	add	r3, r2
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	4413      	add	r3, r2
 8000f72:	61fb      	str	r3, [r7, #28]
      p += x_size - 5;
 8000f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f76:	3b05      	subs	r3, #5
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]

      n += *( cp - *p++ );
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	1c5a      	adds	r2, r3, #1
 8000f82:	61ba      	str	r2, [r7, #24]
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	425b      	negs	r3, r3
 8000f88:	697a      	ldr	r2, [r7, #20]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	4413      	add	r3, r2
 8000f94:	61fb      	str	r3, [r7, #28]
      n += *( cp - *p++ );
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	1c5a      	adds	r2, r3, #1
 8000f9a:	61ba      	str	r2, [r7, #24]
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	425b      	negs	r3, r3
 8000fa0:	697a      	ldr	r2, [r7, #20]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	4413      	add	r3, r2
 8000fac:	61fb      	str	r3, [r7, #28]
      n += *( cp - *p++ );
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	1c5a      	adds	r2, r3, #1
 8000fb2:	61ba      	str	r2, [r7, #24]
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	425b      	negs	r3, r3
 8000fb8:	697a      	ldr	r2, [r7, #20]
 8000fba:	4413      	add	r3, r2
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	61fb      	str	r3, [r7, #28]
      n += *( cp - *p++ );
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	1c5a      	adds	r2, r3, #1
 8000fca:	61ba      	str	r2, [r7, #24]
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	425b      	negs	r3, r3
 8000fd0:	697a      	ldr	r2, [r7, #20]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	4413      	add	r3, r2
 8000fdc:	61fb      	str	r3, [r7, #28]
      n += *( cp - *p++ );
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	1c5a      	adds	r2, r3, #1
 8000fe2:	61ba      	str	r2, [r7, #24]
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	425b      	negs	r3, r3
 8000fe8:	697a      	ldr	r2, [r7, #20]
 8000fea:	4413      	add	r3, r2
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	61fb      	str	r3, [r7, #28]
      n += *( cp - *p++ );
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	1c5a      	adds	r2, r3, #1
 8000ffa:	61ba      	str	r2, [r7, #24]
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	425b      	negs	r3, r3
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	4413      	add	r3, r2
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	4413      	add	r3, r2
 800100c:	61fb      	str	r3, [r7, #28]
      n += *( cp - *p );
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	425b      	negs	r3, r3
 8001014:	697a      	ldr	r2, [r7, #20]
 8001016:	4413      	add	r3, r2
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	4413      	add	r3, r2
 8001020:	61fb      	str	r3, [r7, #28]
      p += x_size - 6;
 8001022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001024:	3b06      	subs	r3, #6
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4413      	add	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]

      n += *( cp - *p++ );
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	1c5a      	adds	r2, r3, #1
 8001030:	61ba      	str	r2, [r7, #24]
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	425b      	negs	r3, r3
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	4413      	add	r3, r2
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	4413      	add	r3, r2
 8001042:	61fb      	str	r3, [r7, #28]
      n += *( cp - *p++ );
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	1c5a      	adds	r2, r3, #1
 8001048:	61ba      	str	r2, [r7, #24]
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	425b      	negs	r3, r3
 800104e:	697a      	ldr	r2, [r7, #20]
 8001050:	4413      	add	r3, r2
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	461a      	mov	r2, r3
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	4413      	add	r3, r2
 800105a:	61fb      	str	r3, [r7, #28]
      n += *( cp - *p );
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	425b      	negs	r3, r3
 8001062:	697a      	ldr	r2, [r7, #20]
 8001064:	4413      	add	r3, r2
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	4413      	add	r3, r2
 800106e:	61fb      	str	r3, [r7, #28]
      p += 2;
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	3302      	adds	r3, #2
 8001074:	61bb      	str	r3, [r7, #24]
      n += *( cp - *p++ );
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	1c5a      	adds	r2, r3, #1
 800107a:	61ba      	str	r2, [r7, #24]
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	425b      	negs	r3, r3
 8001080:	697a      	ldr	r2, [r7, #20]
 8001082:	4413      	add	r3, r2
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	461a      	mov	r2, r3
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	4413      	add	r3, r2
 800108c:	61fb      	str	r3, [r7, #28]
      n += *( cp - *p++ );
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	1c5a      	adds	r2, r3, #1
 8001092:	61ba      	str	r2, [r7, #24]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	425b      	negs	r3, r3
 8001098:	697a      	ldr	r2, [r7, #20]
 800109a:	4413      	add	r3, r2
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	4413      	add	r3, r2
 80010a4:	61fb      	str	r3, [r7, #28]
      n += *( cp - *p );
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	425b      	negs	r3, r3
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	4413      	add	r3, r2
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	4413      	add	r3, r2
 80010b8:	61fb      	str	r3, [r7, #28]
      p += x_size - 6;
 80010ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010bc:	3b06      	subs	r3, #6
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4413      	add	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]

      n += *( cp - *p++ );
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	1c5a      	adds	r2, r3, #1
 80010c8:	61ba      	str	r2, [r7, #24]
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	425b      	negs	r3, r3
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	4413      	add	r3, r2
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	4413      	add	r3, r2
 80010da:	61fb      	str	r3, [r7, #28]
      n += *( cp - *p++ );
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	1c5a      	adds	r2, r3, #1
 80010e0:	61ba      	str	r2, [r7, #24]
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	425b      	negs	r3, r3
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	4413      	add	r3, r2
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	4413      	add	r3, r2
 80010f2:	61fb      	str	r3, [r7, #28]
      n += *( cp - *p++ );
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	1c5a      	adds	r2, r3, #1
 80010f8:	61ba      	str	r2, [r7, #24]
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	425b      	negs	r3, r3
 80010fe:	697a      	ldr	r2, [r7, #20]
 8001100:	4413      	add	r3, r2
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	4413      	add	r3, r2
 800110a:	61fb      	str	r3, [r7, #28]
      n += *( cp - *p++ );
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	1c5a      	adds	r2, r3, #1
 8001110:	61ba      	str	r2, [r7, #24]
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	425b      	negs	r3, r3
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	4413      	add	r3, r2
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	4413      	add	r3, r2
 8001122:	61fb      	str	r3, [r7, #28]
      n += *( cp - *p++ );
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	1c5a      	adds	r2, r3, #1
 8001128:	61ba      	str	r2, [r7, #24]
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	425b      	negs	r3, r3
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	4413      	add	r3, r2
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	4413      	add	r3, r2
 800113a:	61fb      	str	r3, [r7, #28]
      n += *( cp - *p++ );
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	1c5a      	adds	r2, r3, #1
 8001140:	61ba      	str	r2, [r7, #24]
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	425b      	negs	r3, r3
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	4413      	add	r3, r2
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	4413      	add	r3, r2
 8001152:	61fb      	str	r3, [r7, #28]
      n += *( cp - *p );
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	425b      	negs	r3, r3
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	4413      	add	r3, r2
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	4413      	add	r3, r2
 8001166:	61fb      	str	r3, [r7, #28]
      p += x_size - 5;
 8001168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800116a:	3b05      	subs	r3, #5
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4413      	add	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]

      n += *( cp - *p++ );
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	1c5a      	adds	r2, r3, #1
 8001176:	61ba      	str	r2, [r7, #24]
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	425b      	negs	r3, r3
 800117c:	697a      	ldr	r2, [r7, #20]
 800117e:	4413      	add	r3, r2
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	461a      	mov	r2, r3
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	4413      	add	r3, r2
 8001188:	61fb      	str	r3, [r7, #28]
      n += *( cp - *p++ );
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	1c5a      	adds	r2, r3, #1
 800118e:	61ba      	str	r2, [r7, #24]
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	425b      	negs	r3, r3
 8001194:	697a      	ldr	r2, [r7, #20]
 8001196:	4413      	add	r3, r2
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	4413      	add	r3, r2
 80011a0:	61fb      	str	r3, [r7, #28]
      n += *( cp - *p++ );
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	1c5a      	adds	r2, r3, #1
 80011a6:	61ba      	str	r2, [r7, #24]
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	425b      	negs	r3, r3
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	4413      	add	r3, r2
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	461a      	mov	r2, r3
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	4413      	add	r3, r2
 80011b8:	61fb      	str	r3, [r7, #28]
      n += *( cp - *p++ );
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	1c5a      	adds	r2, r3, #1
 80011be:	61ba      	str	r2, [r7, #24]
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	425b      	negs	r3, r3
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	4413      	add	r3, r2
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	461a      	mov	r2, r3
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	4413      	add	r3, r2
 80011d0:	61fb      	str	r3, [r7, #28]
      n += *( cp - *p );
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	425b      	negs	r3, r3
 80011d8:	697a      	ldr	r2, [r7, #20]
 80011da:	4413      	add	r3, r2
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	461a      	mov	r2, r3
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	4413      	add	r3, r2
 80011e4:	61fb      	str	r3, [r7, #28]
      p += x_size - 3;
 80011e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011e8:	3b03      	subs	r3, #3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4413      	add	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]

      n += *( cp - *p++ );
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	1c5a      	adds	r2, r3, #1
 80011f4:	61ba      	str	r2, [r7, #24]
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	425b      	negs	r3, r3
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	4413      	add	r3, r2
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	4413      	add	r3, r2
 8001206:	61fb      	str	r3, [r7, #28]
      n += *( cp - *p++ );
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	1c5a      	adds	r2, r3, #1
 800120c:	61ba      	str	r2, [r7, #24]
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	425b      	negs	r3, r3
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	4413      	add	r3, r2
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	4413      	add	r3, r2
 800121e:	61fb      	str	r3, [r7, #28]
      n += *( cp - *p );
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	425b      	negs	r3, r3
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	4413      	add	r3, r2
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	4413      	add	r3, r2
 8001232:	61fb      	str	r3, [r7, #28]

      if ( n <= max_no )
 8001234:	69fa      	ldr	r2, [r7, #28]
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	429a      	cmp	r2, r3
 800123a:	dc0f      	bgt.n	800125c <susan_principle+0x410>
        r[ i * x_size + j ] = max_no - n;
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	b2d9      	uxtb	r1, r3
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	b2da      	uxtb	r2, r3
 8001244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001246:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001248:	fb00 f003 	mul.w	r0, r0, r3
 800124c:	6a3b      	ldr	r3, [r7, #32]
 800124e:	4403      	add	r3, r0
 8001250:	4618      	mov	r0, r3
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	4403      	add	r3, r0
 8001256:	1a8a      	subs	r2, r1, r2
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	701a      	strb	r2, [r3, #0]
    for ( j = 3; j < x_size - 3; j++ ) {
 800125c:	6a3b      	ldr	r3, [r7, #32]
 800125e:	3301      	adds	r3, #1
 8001260:	623b      	str	r3, [r7, #32]
 8001262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001264:	3b03      	subs	r3, #3
 8001266:	6a3a      	ldr	r2, [r7, #32]
 8001268:	429a      	cmp	r2, r3
 800126a:	f6ff ae06 	blt.w	8000e7a <susan_principle+0x2e>
  for ( i = 3; i < y_size - 3; i++ ) {
 800126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001270:	3301      	adds	r3, #1
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
 8001274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001276:	3b03      	subs	r3, #3
 8001278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800127a:	429a      	cmp	r2, r3
 800127c:	f6ff adfa 	blt.w	8000e74 <susan_principle+0x28>
    }
  }
}
 8001280:	bf00      	nop
 8001282:	bf00      	nop
 8001284:	3728      	adds	r7, #40	; 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <susan_principle_small>:


void susan_principle_small( uchar *in, char *r, uchar *bp,
                            int max_no, int x_size, int y_size )
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b08a      	sub	sp, #40	; 0x28
 800128e:	af00      	add	r7, sp, #0
 8001290:	60f8      	str	r0, [r7, #12]
 8001292:	60b9      	str	r1, [r7, #8]
 8001294:	607a      	str	r2, [r7, #4]
 8001296:	603b      	str	r3, [r7, #0]
  int   i, j, n;
  uchar *p, *cp;

  susan_wccmemset( r, 0, x_size * y_size * sizeof( int ) );
 8001298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800129a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800129c:	fb02 f303 	mul.w	r3, r2, r3
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	461a      	mov	r2, r3
 80012a4:	2100      	movs	r1, #0
 80012a6:	68b8      	ldr	r0, [r7, #8]
 80012a8:	f006 f904 	bl	80074b4 <susan_wccmemset>

  _Pragma( "loopbound min 0 max 0" )
  for ( i = 1; i < y_size - 1; i++ ) {
 80012ac:	2301      	movs	r3, #1
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
 80012b0:	e0a3      	b.n	80013fa <susan_principle_small+0x170>
    _Pragma( "loopbound min 0 max 0" )
    for ( j = 1; j < x_size - 1; j++ ) {
 80012b2:	2301      	movs	r3, #1
 80012b4:	623b      	str	r3, [r7, #32]
 80012b6:	e097      	b.n	80013e8 <susan_principle_small+0x15e>
      n = 100;
 80012b8:	2364      	movs	r3, #100	; 0x64
 80012ba:	61fb      	str	r3, [r7, #28]
      p = in + ( i - 1 ) * x_size + j - 1;
 80012bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012be:	3b01      	subs	r3, #1
 80012c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012c2:	fb02 f303 	mul.w	r3, r2, r3
 80012c6:	461a      	mov	r2, r3
 80012c8:	6a3b      	ldr	r3, [r7, #32]
 80012ca:	4413      	add	r3, r2
 80012cc:	3b01      	subs	r3, #1
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	4413      	add	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
      cp = bp + in[ i * x_size + j ];
 80012d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012d8:	fb02 f203 	mul.w	r2, r2, r3
 80012dc:	6a3b      	ldr	r3, [r7, #32]
 80012de:	4413      	add	r3, r2
 80012e0:	461a      	mov	r2, r3
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	4413      	add	r3, r2
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	617b      	str	r3, [r7, #20]

      n += *( cp - *p++ );
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	1c5a      	adds	r2, r3, #1
 80012f4:	61ba      	str	r2, [r7, #24]
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	425b      	negs	r3, r3
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	4413      	add	r3, r2
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	4413      	add	r3, r2
 8001306:	61fb      	str	r3, [r7, #28]
      n += *( cp - *p++ );
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	1c5a      	adds	r2, r3, #1
 800130c:	61ba      	str	r2, [r7, #24]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	425b      	negs	r3, r3
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	4413      	add	r3, r2
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	461a      	mov	r2, r3
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	4413      	add	r3, r2
 800131e:	61fb      	str	r3, [r7, #28]
      n += *( cp - *p );
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	425b      	negs	r3, r3
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	4413      	add	r3, r2
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	461a      	mov	r2, r3
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	4413      	add	r3, r2
 8001332:	61fb      	str	r3, [r7, #28]
      p += x_size - 2;
 8001334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001336:	3b02      	subs	r3, #2
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4413      	add	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]

      n += *( cp - *p );
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	425b      	negs	r3, r3
 8001344:	697a      	ldr	r2, [r7, #20]
 8001346:	4413      	add	r3, r2
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	461a      	mov	r2, r3
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	4413      	add	r3, r2
 8001350:	61fb      	str	r3, [r7, #28]
      p += 2;
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	3302      	adds	r3, #2
 8001356:	61bb      	str	r3, [r7, #24]
      n += *( cp - *p );
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	425b      	negs	r3, r3
 800135e:	697a      	ldr	r2, [r7, #20]
 8001360:	4413      	add	r3, r2
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	461a      	mov	r2, r3
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	4413      	add	r3, r2
 800136a:	61fb      	str	r3, [r7, #28]
      p += x_size - 2;
 800136c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800136e:	3b02      	subs	r3, #2
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4413      	add	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]

      n += *( cp - *p++ );
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	1c5a      	adds	r2, r3, #1
 800137a:	61ba      	str	r2, [r7, #24]
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	425b      	negs	r3, r3
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	4413      	add	r3, r2
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	461a      	mov	r2, r3
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	4413      	add	r3, r2
 800138c:	61fb      	str	r3, [r7, #28]
      n += *( cp - *p++ );
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	1c5a      	adds	r2, r3, #1
 8001392:	61ba      	str	r2, [r7, #24]
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	425b      	negs	r3, r3
 8001398:	697a      	ldr	r2, [r7, #20]
 800139a:	4413      	add	r3, r2
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	4413      	add	r3, r2
 80013a4:	61fb      	str	r3, [r7, #28]
      n += *( cp - *p );
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	425b      	negs	r3, r3
 80013ac:	697a      	ldr	r2, [r7, #20]
 80013ae:	4413      	add	r3, r2
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	461a      	mov	r2, r3
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	4413      	add	r3, r2
 80013b8:	61fb      	str	r3, [r7, #28]

      if ( n <= max_no )
 80013ba:	69fa      	ldr	r2, [r7, #28]
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	429a      	cmp	r2, r3
 80013c0:	dc0f      	bgt.n	80013e2 <susan_principle_small+0x158>
        r[ i * x_size + j ] = max_no - n;
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	b2d9      	uxtb	r1, r3
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80013ce:	fb00 f003 	mul.w	r0, r0, r3
 80013d2:	6a3b      	ldr	r3, [r7, #32]
 80013d4:	4403      	add	r3, r0
 80013d6:	4618      	mov	r0, r3
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	4403      	add	r3, r0
 80013dc:	1a8a      	subs	r2, r1, r2
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	701a      	strb	r2, [r3, #0]
    for ( j = 1; j < x_size - 1; j++ ) {
 80013e2:	6a3b      	ldr	r3, [r7, #32]
 80013e4:	3301      	adds	r3, #1
 80013e6:	623b      	str	r3, [r7, #32]
 80013e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ea:	3b01      	subs	r3, #1
 80013ec:	6a3a      	ldr	r2, [r7, #32]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	f6ff af62 	blt.w	80012b8 <susan_principle_small+0x2e>
  for ( i = 1; i < y_size - 1; i++ ) {
 80013f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f6:	3301      	adds	r3, #1
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
 80013fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013fc:	3b01      	subs	r3, #1
 80013fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001400:	429a      	cmp	r2, r3
 8001402:	f6ff af56 	blt.w	80012b2 <susan_principle_small+0x28>
    }
  }
}
 8001406:	bf00      	nop
 8001408:	bf00      	nop
 800140a:	3728      	adds	r7, #40	; 0x28
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <susan_median>:


uchar susan_median( uchar *in, int i, int j, int x_size )
{
 8001410:	b480      	push	{r7}
 8001412:	b091      	sub	sp, #68	; 0x44
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
 800141c:	603b      	str	r3, [r7, #0]
  int p[ 8 ], k, l, tmp;

  p[ 0 ] = in[ ( i - 1 ) * x_size + j - 1 ];
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	3b01      	subs	r3, #1
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	fb02 f203 	mul.w	r2, r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4413      	add	r3, r2
 800142c:	3b01      	subs	r3, #1
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	4413      	add	r3, r2
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	617b      	str	r3, [r7, #20]
  p[ 1 ] = in[ ( i - 1 ) * x_size + j   ];
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	3b01      	subs	r3, #1
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	fb02 f203 	mul.w	r2, r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4413      	add	r3, r2
 8001444:	461a      	mov	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4413      	add	r3, r2
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	61bb      	str	r3, [r7, #24]
  p[ 2 ] = in[ ( i - 1 ) * x_size + j + 1 ];
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	3b01      	subs	r3, #1
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	fb02 f203 	mul.w	r2, r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4413      	add	r3, r2
 800145c:	3301      	adds	r3, #1
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	4413      	add	r3, r2
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	61fb      	str	r3, [r7, #28]
  p[ 3 ] = in[ ( i  ) * x_size + j - 1 ];
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	fb02 f203 	mul.w	r2, r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	3b01      	subs	r3, #1
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	4413      	add	r3, r2
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	623b      	str	r3, [r7, #32]
  p[ 4 ] = in[ ( i  ) * x_size + j + 1 ];
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	fb02 f203 	mul.w	r2, r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4413      	add	r3, r2
 8001488:	3301      	adds	r3, #1
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	4413      	add	r3, r2
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
  p[ 5 ] = in[ ( i + 1 ) * x_size + j - 1 ];
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	3301      	adds	r3, #1
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	fb02 f203 	mul.w	r2, r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4413      	add	r3, r2
 80014a0:	3b01      	subs	r3, #1
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	4413      	add	r3, r2
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
  p[ 6 ] = in[ ( i + 1 ) * x_size + j   ];
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	3301      	adds	r3, #1
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	fb02 f203 	mul.w	r2, r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4413      	add	r3, r2
 80014b8:	461a      	mov	r2, r3
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	4413      	add	r3, r2
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  p[ 7 ] = in[ ( i + 1 ) * x_size + j + 1 ];
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	3301      	adds	r3, #1
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	fb02 f203 	mul.w	r2, r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4413      	add	r3, r2
 80014d0:	3301      	adds	r3, #1
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	4413      	add	r3, r2
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	633b      	str	r3, [r7, #48]	; 0x30

  _Pragma( "loopbound min 0 max 0" )
  for ( k = 0; k < 7; k++ ) {
 80014da:	2300      	movs	r3, #0
 80014dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014de:	e03f      	b.n	8001560 <susan_median+0x150>
    _Pragma( "loopbound min 0 max 0" )
    for ( l = 0; l < ( 7 - k ); l++ ) {
 80014e0:	2300      	movs	r3, #0
 80014e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80014e4:	e033      	b.n	800154e <susan_median+0x13e>
      if ( p[ l ] > p[ l + 1 ] ) {
 80014e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80014ee:	4413      	add	r3, r2
 80014f0:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 80014f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014f6:	3301      	adds	r3, #1
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80014fe:	440b      	add	r3, r1
 8001500:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001504:	429a      	cmp	r2, r3
 8001506:	dd1f      	ble.n	8001548 <susan_median+0x138>
        tmp = p[ l ];
 8001508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001510:	4413      	add	r3, r2
 8001512:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001516:	637b      	str	r3, [r7, #52]	; 0x34
        p[ l ] = p[ l + 1 ];
 8001518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800151a:	3301      	adds	r3, #1
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001522:	4413      	add	r3, r2
 8001524:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 8001528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001530:	440b      	add	r3, r1
 8001532:	f843 2c2c 	str.w	r2, [r3, #-44]
        p[ l + 1 ] = tmp;
 8001536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001538:	3301      	adds	r3, #1
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001540:	4413      	add	r3, r2
 8001542:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001544:	f843 2c2c 	str.w	r2, [r3, #-44]
    for ( l = 0; l < ( 7 - k ); l++ ) {
 8001548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800154a:	3301      	adds	r3, #1
 800154c:	63bb      	str	r3, [r7, #56]	; 0x38
 800154e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001550:	f1c3 0307 	rsb	r3, r3, #7
 8001554:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001556:	429a      	cmp	r2, r3
 8001558:	dbc5      	blt.n	80014e6 <susan_median+0xd6>
  for ( k = 0; k < 7; k++ ) {
 800155a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800155c:	3301      	adds	r3, #1
 800155e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001562:	2b06      	cmp	r3, #6
 8001564:	ddbc      	ble.n	80014e0 <susan_median+0xd0>
      }
    }
  }

  return ( ( p[ 3 ] + p[ 4 ] ) / 2 );
 8001566:	6a3a      	ldr	r2, [r7, #32]
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	4413      	add	r3, r2
 800156c:	0fda      	lsrs	r2, r3, #31
 800156e:	4413      	add	r3, r2
 8001570:	105b      	asrs	r3, r3, #1
 8001572:	b2db      	uxtb	r3, r3
}
 8001574:	4618      	mov	r0, r3
 8001576:	3744      	adds	r7, #68	; 0x44
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <susan_enlarge>:

/* this enlarges "in" so that borders can be dealt with easily */

void susan_enlarge( uchar **in, uchar *tmp_image,
                    int *x_size, int *y_size, int border )
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
 800158c:	603b      	str	r3, [r7, #0]
  int   i, j;

  _Pragma( "loopbound min 95 max 95" )
  for ( i = 0; i < *y_size; i++ ) { /* copy *in into tmp_image */
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
 8001592:	e01e      	b.n	80015d2 <susan_enlarge+0x52>
    susan_wccmemcpy( tmp_image + ( i + border ) * ( *x_size + 2 * border ) + border,
 8001594:	697a      	ldr	r2, [r7, #20]
 8001596:	6a3b      	ldr	r3, [r7, #32]
 8001598:	4413      	add	r3, r2
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	6811      	ldr	r1, [r2, #0]
 800159e:	6a3a      	ldr	r2, [r7, #32]
 80015a0:	0052      	lsls	r2, r2, #1
 80015a2:	440a      	add	r2, r1
 80015a4:	fb02 f303 	mul.w	r3, r2, r3
 80015a8:	461a      	mov	r2, r3
 80015aa:	6a3b      	ldr	r3, [r7, #32]
 80015ac:	4413      	add	r3, r2
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	18d0      	adds	r0, r2, r3
                     *in + i * *x_size, *x_size );
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6812      	ldr	r2, [r2, #0]
 80015ba:	6979      	ldr	r1, [r7, #20]
 80015bc:	fb01 f202 	mul.w	r2, r1, r2
 80015c0:	1899      	adds	r1, r3, r2
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
    susan_wccmemcpy( tmp_image + ( i + border ) * ( *x_size + 2 * border ) + border,
 80015c6:	461a      	mov	r2, r3
 80015c8:	f005 ff50 	bl	800746c <susan_wccmemcpy>
  for ( i = 0; i < *y_size; i++ ) { /* copy *in into tmp_image */
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	3301      	adds	r3, #1
 80015d0:	617b      	str	r3, [r7, #20]
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	429a      	cmp	r2, r3
 80015da:	dbdb      	blt.n	8001594 <susan_enlarge+0x14>
  }

  _Pragma( "loopbound min 7 max 7" )
  for ( i = 0; i < border;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
 80015e0:	e042      	b.n	8001668 <susan_enlarge+0xe8>
        i++ ) { /* copy top and bottom rows; invert as many as necessary */
    susan_wccmemcpy( tmp_image + ( border - 1 - i ) * ( *x_size + 2 * border ) +
 80015e2:	6a3b      	ldr	r3, [r7, #32]
 80015e4:	1e5a      	subs	r2, r3, #1
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	6811      	ldr	r1, [r2, #0]
 80015ee:	6a3a      	ldr	r2, [r7, #32]
 80015f0:	0052      	lsls	r2, r2, #1
 80015f2:	440a      	add	r2, r1
 80015f4:	fb02 f303 	mul.w	r3, r2, r3
 80015f8:	461a      	mov	r2, r3
 80015fa:	6a3b      	ldr	r3, [r7, #32]
 80015fc:	4413      	add	r3, r2
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	18d0      	adds	r0, r2, r3
                     border,
                     *in + i * *x_size, *x_size );
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	6812      	ldr	r2, [r2, #0]
 800160a:	6979      	ldr	r1, [r7, #20]
 800160c:	fb01 f202 	mul.w	r2, r1, r2
 8001610:	1899      	adds	r1, r3, r2
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
    susan_wccmemcpy( tmp_image + ( border - 1 - i ) * ( *x_size + 2 * border ) +
 8001616:	461a      	mov	r2, r3
 8001618:	f005 ff28 	bl	800746c <susan_wccmemcpy>
    susan_wccmemcpy( tmp_image + ( *y_size + border + i ) *
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	6a3b      	ldr	r3, [r7, #32]
 8001622:	441a      	add	r2, r3
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	4413      	add	r3, r2
                     ( *x_size + 2 * border ) + border,
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	6811      	ldr	r1, [r2, #0]
 800162c:	6a3a      	ldr	r2, [r7, #32]
 800162e:	0052      	lsls	r2, r2, #1
 8001630:	440a      	add	r2, r1
    susan_wccmemcpy( tmp_image + ( *y_size + border + i ) *
 8001632:	fb02 f303 	mul.w	r3, r2, r3
 8001636:	461a      	mov	r2, r3
                     ( *x_size + 2 * border ) + border,
 8001638:	6a3b      	ldr	r3, [r7, #32]
 800163a:	4413      	add	r3, r2
 800163c:	68ba      	ldr	r2, [r7, #8]
 800163e:	18d0      	adds	r0, r2, r3
                     *in + ( *y_size - i - 1 ) * *x_size, *x_size );
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	6811      	ldr	r1, [r2, #0]
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	1a8a      	subs	r2, r1, r2
 800164c:	3a01      	subs	r2, #1
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	6809      	ldr	r1, [r1, #0]
 8001652:	fb01 f202 	mul.w	r2, r1, r2
 8001656:	1899      	adds	r1, r3, r2
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
    susan_wccmemcpy( tmp_image + ( *y_size + border + i ) *
 800165c:	461a      	mov	r2, r3
 800165e:	f005 ff05 	bl	800746c <susan_wccmemcpy>
        i++ ) { /* copy top and bottom rows; invert as many as necessary */
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	3301      	adds	r3, #1
 8001666:	617b      	str	r3, [r7, #20]
  for ( i = 0; i < border;
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	6a3b      	ldr	r3, [r7, #32]
 800166c:	429a      	cmp	r2, r3
 800166e:	dbb8      	blt.n	80015e2 <susan_enlarge+0x62>
  }

  _Pragma( "loopbound min 7 max 7" )
  for ( i = 0; i < border; i++ ) { /* copy left and right columns */
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	e058      	b.n	8001728 <susan_enlarge+0x1a8>
    _Pragma( "loopbound min 109 max 109" )
    for ( j = 0; j < *y_size + 2 * border; j++ ) {
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	e04a      	b.n	8001712 <susan_enlarge+0x192>
      tmp_image[ j * ( *x_size + 2 * border ) + border - 1 - i ] = tmp_image[ j *
          ( *x_size + 2 * border ) + border + i ];
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	6a3b      	ldr	r3, [r7, #32]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	4413      	add	r3, r2
      tmp_image[ j * ( *x_size + 2 * border ) + border - 1 - i ] = tmp_image[ j *
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	fb02 f203 	mul.w	r2, r2, r3
          ( *x_size + 2 * border ) + border + i ];
 800168c:	6a3b      	ldr	r3, [r7, #32]
 800168e:	441a      	add	r2, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	4413      	add	r3, r2
 8001694:	461a      	mov	r2, r3
      tmp_image[ j * ( *x_size + 2 * border ) + border - 1 - i ] = tmp_image[ j *
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	441a      	add	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6819      	ldr	r1, [r3, #0]
 800169e:	6a3b      	ldr	r3, [r7, #32]
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	440b      	add	r3, r1
 80016a4:	6939      	ldr	r1, [r7, #16]
 80016a6:	fb01 f103 	mul.w	r1, r1, r3
 80016aa:	6a3b      	ldr	r3, [r7, #32]
 80016ac:	440b      	add	r3, r1
 80016ae:	1e59      	subs	r1, r3, #1
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	1acb      	subs	r3, r1, r3
 80016b4:	4619      	mov	r1, r3
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	440b      	add	r3, r1
 80016ba:	7812      	ldrb	r2, [r2, #0]
 80016bc:	701a      	strb	r2, [r3, #0]
      tmp_image[ j * ( *x_size + 2 * border ) + *x_size + border + i ] = tmp_image[ j *
          ( *x_size + 2 * border ) + *x_size + border - 1 - i ];
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	6a3b      	ldr	r3, [r7, #32]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	4413      	add	r3, r2
      tmp_image[ j * ( *x_size + 2 * border ) + *x_size + border + i ] = tmp_image[ j *
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	fb02 f203 	mul.w	r2, r2, r3
          ( *x_size + 2 * border ) + *x_size + border - 1 - i ];
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	441a      	add	r2, r3
 80016d4:	6a3b      	ldr	r3, [r7, #32]
 80016d6:	4413      	add	r3, r2
 80016d8:	1e5a      	subs	r2, r3, #1
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	461a      	mov	r2, r3
      tmp_image[ j * ( *x_size + 2 * border ) + *x_size + border + i ] = tmp_image[ j *
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	441a      	add	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6819      	ldr	r1, [r3, #0]
 80016e8:	6a3b      	ldr	r3, [r7, #32]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	440b      	add	r3, r1
 80016ee:	6939      	ldr	r1, [r7, #16]
 80016f0:	fb01 f103 	mul.w	r1, r1, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4419      	add	r1, r3
 80016fa:	6a3b      	ldr	r3, [r7, #32]
 80016fc:	4419      	add	r1, r3
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	440b      	add	r3, r1
 8001702:	4619      	mov	r1, r3
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	440b      	add	r3, r1
 8001708:	7812      	ldrb	r2, [r2, #0]
 800170a:	701a      	strb	r2, [r3, #0]
    for ( j = 0; j < *y_size + 2 * border; j++ ) {
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	3301      	adds	r3, #1
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	6a3b      	ldr	r3, [r7, #32]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4413      	add	r3, r2
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	429a      	cmp	r2, r3
 8001720:	dbac      	blt.n	800167c <susan_enlarge+0xfc>
  for ( i = 0; i < border; i++ ) { /* copy left and right columns */
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	3301      	adds	r3, #1
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	6a3b      	ldr	r3, [r7, #32]
 800172c:	429a      	cmp	r2, r3
 800172e:	dba2      	blt.n	8001676 <susan_enlarge+0xf6>
    }
  }

  *x_size += 2 * border; /* alter image size */
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	6a3b      	ldr	r3, [r7, #32]
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	441a      	add	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	601a      	str	r2, [r3, #0]
  *y_size += 2 * border;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	6a3b      	ldr	r3, [r7, #32]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	441a      	add	r2, r3
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	601a      	str	r2, [r3, #0]
  *in = tmp_image;    /* repoint in */
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	601a      	str	r2, [r3, #0]
}
 8001752:	bf00      	nop
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <susan_smoothing>:


void susan_smoothing( int three_by_three, uchar *in, float dt,
                      int x_size, int y_size, uchar *bp )
{
 800175c:	b590      	push	{r4, r7, lr}
 800175e:	b09d      	sub	sp, #116	; 0x74
 8001760:	af02      	add	r7, sp, #8
 8001762:	6178      	str	r0, [r7, #20]
 8001764:	6139      	str	r1, [r7, #16]
 8001766:	ed87 0a03 	vstr	s0, [r7, #12]
 800176a:	60ba      	str	r2, [r7, #8]
 800176c:	607b      	str	r3, [r7, #4]
  float temp;
  int   n_max, increment, mask_size,
        i, j, x, y, area, brightness, tmp, centre;
  uchar *ip, *dp, *dpt, *cp, *out = in,
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	647b      	str	r3, [r7, #68]	; 0x44
                              *tmp_image;
  TOTAL_TYPE total;

  /* {{{ setup larger image and border sizes */

  if ( three_by_three == 0 )
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d111      	bne.n	800179c <susan_smoothing+0x40>
    mask_size = ( ( int )( 1.5 * dt ) ) + 1;
 8001778:	68f8      	ldr	r0, [r7, #12]
 800177a:	f7fe fedd 	bl	8000538 <__aeabi_f2d>
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	4b93      	ldr	r3, [pc, #588]	; (80019d0 <susan_smoothing+0x274>)
 8001784:	f7fe ff30 	bl	80005e8 <__aeabi_dmul>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4610      	mov	r0, r2
 800178e:	4619      	mov	r1, r3
 8001790:	f7ff f9c4 	bl	8000b1c <__aeabi_d2iz>
 8001794:	4603      	mov	r3, r0
 8001796:	3301      	adds	r3, #1
 8001798:	667b      	str	r3, [r7, #100]	; 0x64
 800179a:	e001      	b.n	80017a0 <susan_smoothing+0x44>
  else
    mask_size = 1;
 800179c:	2301      	movs	r3, #1
 800179e:	667b      	str	r3, [r7, #100]	; 0x64
    /*  "Distance_thresh too big for integer arithmetic." */
    // Either reduce it to <=15 or recompile with variable "total"
    // as a float: see top "defines" section.
  }

  if ( ( 2 * mask_size + 1 > x_size ) || ( 2 * mask_size + 1 > y_size ) ) {
 80017a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80017a2:	005a      	lsls	r2, r3, #1
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	429a      	cmp	r2, r3
    /*  "Mask size too big for image." */
  }

  tmp_image = ( uchar * )susan_wccmalloc( ( x_size + mask_size * 2 ) *
 80017a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80017aa:	005a      	lsls	r2, r3, #1
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	4413      	add	r3, r2
                                          ( y_size + mask_size * 2 ) );
 80017b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80017b2:	0051      	lsls	r1, r2, #1
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	440a      	add	r2, r1
  tmp_image = ( uchar * )susan_wccmalloc( ( x_size + mask_size * 2 ) *
 80017b8:	fb02 f303 	mul.w	r3, r2, r3
 80017bc:	4618      	mov	r0, r3
 80017be:	f005 fe1d 	bl	80073fc <susan_wccmalloc>
 80017c2:	63f8      	str	r0, [r7, #60]	; 0x3c
  susan_enlarge( &in, tmp_image, &x_size, &y_size, mask_size );
 80017c4:	1d39      	adds	r1, r7, #4
 80017c6:	f107 0208 	add.w	r2, r7, #8
 80017ca:	f107 0010 	add.w	r0, r7, #16
 80017ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	460b      	mov	r3, r1
 80017d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80017d6:	f7ff fed3 	bl	8001580 <susan_enlarge>
  if ( three_by_three == 0 ) {
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f040 80f1 	bne.w	80019c4 <susan_smoothing+0x268>
    /* large Gaussian masks */
    /* {{{ setup distance lut */

    n_max = ( mask_size * 2 ) + 1;
 80017e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	3301      	adds	r3, #1
 80017e8:	62bb      	str	r3, [r7, #40]	; 0x28

    increment = x_size - n_max;
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24

    dp     = ( unsigned char * )susan_wccmalloc( n_max * n_max );
 80017f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f4:	fb03 f303 	mul.w	r3, r3, r3
 80017f8:	4618      	mov	r0, r3
 80017fa:	f005 fdff 	bl	80073fc <susan_wccmalloc>
 80017fe:	6238      	str	r0, [r7, #32]
    dpt    = dp;
 8001800:	6a3b      	ldr	r3, [r7, #32]
 8001802:	64bb      	str	r3, [r7, #72]	; 0x48
    temp   = -( dt * dt );
 8001804:	edd7 7a03 	vldr	s15, [r7, #12]
 8001808:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800180c:	eef1 7a67 	vneg.f32	s15, s15
 8001810:	edc7 7a07 	vstr	s15, [r7, #28]

    _Pragma( "loopbound min 15 max 15" )
    for ( i = -mask_size; i <= mask_size; i++ ) {
 8001814:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001816:	425b      	negs	r3, r3
 8001818:	663b      	str	r3, [r7, #96]	; 0x60
 800181a:	e038      	b.n	800188e <susan_smoothing+0x132>
      _Pragma( "loopbound min 15 max 15" )
      for ( j = -mask_size; j <= mask_size; j++ ) {
 800181c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800181e:	425b      	negs	r3, r3
 8001820:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001822:	e02d      	b.n	8001880 <susan_smoothing+0x124>
        x = ( int ) ( 100.0 * susan_expf( ( ( float )( ( i * i ) +
 8001824:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001826:	fb03 f203 	mul.w	r2, r3, r3
                                            ( j * j ) ) ) / temp ) );
 800182a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800182c:	fb03 f303 	mul.w	r3, r3, r3
        x = ( int ) ( 100.0 * susan_expf( ( ( float )( ( i * i ) +
 8001830:	4413      	add	r3, r2
 8001832:	ee07 3a90 	vmov	s15, r3
 8001836:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800183a:	edd7 7a07 	vldr	s15, [r7, #28]
 800183e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001842:	eeb0 0a66 	vmov.f32	s0, s13
 8001846:	f7ff f991 	bl	8000b6c <susan_expf>
 800184a:	ee10 3a10 	vmov	r3, s0
 800184e:	4618      	mov	r0, r3
 8001850:	f7fe fe72 	bl	8000538 <__aeabi_f2d>
 8001854:	f04f 0200 	mov.w	r2, #0
 8001858:	4b5e      	ldr	r3, [pc, #376]	; (80019d4 <susan_smoothing+0x278>)
 800185a:	f7fe fec5 	bl	80005e8 <__aeabi_dmul>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4610      	mov	r0, r2
 8001864:	4619      	mov	r1, r3
 8001866:	f7ff f959 	bl	8000b1c <__aeabi_d2iz>
 800186a:	4603      	mov	r3, r0
 800186c:	65bb      	str	r3, [r7, #88]	; 0x58
        *dpt++ = ( unsigned char )x;
 800186e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001870:	1c5a      	adds	r2, r3, #1
 8001872:	64ba      	str	r2, [r7, #72]	; 0x48
 8001874:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	701a      	strb	r2, [r3, #0]
      for ( j = -mask_size; j <= mask_size; j++ ) {
 800187a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800187c:	3301      	adds	r3, #1
 800187e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001880:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001882:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001884:	429a      	cmp	r2, r3
 8001886:	ddcd      	ble.n	8001824 <susan_smoothing+0xc8>
    for ( i = -mask_size; i <= mask_size; i++ ) {
 8001888:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800188a:	3301      	adds	r3, #1
 800188c:	663b      	str	r3, [r7, #96]	; 0x60
 800188e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001890:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001892:	429a      	cmp	r2, r3
 8001894:	ddc2      	ble.n	800181c <susan_smoothing+0xc0>
      }
    }

    /* {{{ main section */
    _Pragma( "loopbound min 95 max 95" )
    for ( i = mask_size; i < y_size - mask_size; i++ ) {
 8001896:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001898:	663b      	str	r3, [r7, #96]	; 0x60
 800189a:	e08b      	b.n	80019b4 <susan_smoothing+0x258>
      _Pragma( "loopbound min 76 max 76" )
      for ( j = mask_size; j < x_size - mask_size; j++ ) {
 800189c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800189e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80018a0:	e07e      	b.n	80019a0 <susan_smoothing+0x244>
        area = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	653b      	str	r3, [r7, #80]	; 0x50
        total = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	643b      	str	r3, [r7, #64]	; 0x40
        dpt = dp;
 80018aa:	6a3b      	ldr	r3, [r7, #32]
 80018ac:	64bb      	str	r3, [r7, #72]	; 0x48
        ip = in + ( ( i - mask_size ) * x_size ) + j - mask_size;
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80018b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018b4:	1acb      	subs	r3, r1, r3
 80018b6:	68b9      	ldr	r1, [r7, #8]
 80018b8:	fb01 f303 	mul.w	r3, r1, r3
 80018bc:	4619      	mov	r1, r3
 80018be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018c0:	4419      	add	r1, r3
 80018c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018c4:	1acb      	subs	r3, r1, r3
 80018c6:	4413      	add	r3, r2
 80018c8:	64fb      	str	r3, [r7, #76]	; 0x4c
        centre = in[ i * x_size + j ];
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	68ba      	ldr	r2, [r7, #8]
 80018ce:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80018d0:	fb01 f102 	mul.w	r1, r1, r2
 80018d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80018d6:	440a      	add	r2, r1
 80018d8:	4413      	add	r3, r2
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	63bb      	str	r3, [r7, #56]	; 0x38
        cp = bp + centre;
 80018de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80018e2:	4413      	add	r3, r2
 80018e4:	637b      	str	r3, [r7, #52]	; 0x34
        _Pragma( "loopbound min 15 max 15" )
        for ( y = -mask_size; y <= mask_size; y++ ) {
 80018e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018e8:	425b      	negs	r3, r3
 80018ea:	657b      	str	r3, [r7, #84]	; 0x54
 80018ec:	e02e      	b.n	800194c <susan_smoothing+0x1f0>
          _Pragma( "loopbound min 15 max 15" )
          for ( x = -mask_size; x <= mask_size; x++ ) {
 80018ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018f0:	425b      	negs	r3, r3
 80018f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80018f4:	e01f      	b.n	8001936 <susan_smoothing+0x1da>
            brightness = *ip++;
 80018f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018f8:	1c5a      	adds	r2, r3, #1
 80018fa:	64fa      	str	r2, [r7, #76]	; 0x4c
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	633b      	str	r3, [r7, #48]	; 0x30
            tmp = *dpt++ * *( cp - brightness );
 8001900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001902:	1c5a      	adds	r2, r3, #1
 8001904:	64ba      	str	r2, [r7, #72]	; 0x48
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	4619      	mov	r1, r3
 800190a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800190c:	425b      	negs	r3, r3
 800190e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001910:	4413      	add	r3, r2
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	fb03 f301 	mul.w	r3, r3, r1
 8001918:	62fb      	str	r3, [r7, #44]	; 0x2c
            area += tmp;
 800191a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800191c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800191e:	4413      	add	r3, r2
 8001920:	653b      	str	r3, [r7, #80]	; 0x50
            total += tmp * brightness;
 8001922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001926:	fb02 f303 	mul.w	r3, r2, r3
 800192a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800192c:	4413      	add	r3, r2
 800192e:	643b      	str	r3, [r7, #64]	; 0x40
          for ( x = -mask_size; x <= mask_size; x++ ) {
 8001930:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001932:	3301      	adds	r3, #1
 8001934:	65bb      	str	r3, [r7, #88]	; 0x58
 8001936:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001938:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800193a:	429a      	cmp	r2, r3
 800193c:	dddb      	ble.n	80018f6 <susan_smoothing+0x19a>
          }
          ip += increment;
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001942:	4413      	add	r3, r2
 8001944:	64fb      	str	r3, [r7, #76]	; 0x4c
        for ( y = -mask_size; y <= mask_size; y++ ) {
 8001946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001948:	3301      	adds	r3, #1
 800194a:	657b      	str	r3, [r7, #84]	; 0x54
 800194c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800194e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001950:	429a      	cmp	r2, r3
 8001952:	ddcc      	ble.n	80018ee <susan_smoothing+0x192>
        }
        tmp = area - 10000;
 8001954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001956:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 800195a:	3b10      	subs	r3, #16
 800195c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if ( tmp == 0 )
 800195e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001960:	2b00      	cmp	r3, #0
 8001962:	d10c      	bne.n	800197e <susan_smoothing+0x222>
          *out++ = susan_median( in, i, j, x_size );
 8001964:	6938      	ldr	r0, [r7, #16]
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800196a:	1c63      	adds	r3, r4, #1
 800196c:	647b      	str	r3, [r7, #68]	; 0x44
 800196e:	4613      	mov	r3, r2
 8001970:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001972:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001974:	f7ff fd4c 	bl	8001410 <susan_median>
 8001978:	4603      	mov	r3, r0
 800197a:	7023      	strb	r3, [r4, #0]
 800197c:	e00d      	b.n	800199a <susan_smoothing+0x23e>
        else
          *out++ = ( ( total - ( centre * 10000 ) ) / tmp );
 800197e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001980:	4a15      	ldr	r2, [pc, #84]	; (80019d8 <susan_smoothing+0x27c>)
 8001982:	fb02 f203 	mul.w	r2, r2, r3
 8001986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001988:	441a      	add	r2, r3
 800198a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800198c:	fb92 f1f3 	sdiv	r1, r2, r3
 8001990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	647a      	str	r2, [r7, #68]	; 0x44
 8001996:	b2ca      	uxtb	r2, r1
 8001998:	701a      	strb	r2, [r3, #0]
      for ( j = mask_size; j < x_size - mask_size; j++ ) {
 800199a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800199c:	3301      	adds	r3, #1
 800199e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80019a0:	68ba      	ldr	r2, [r7, #8]
 80019a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80019a8:	429a      	cmp	r2, r3
 80019aa:	f6ff af7a 	blt.w	80018a2 <susan_smoothing+0x146>
    for ( i = mask_size; i < y_size - mask_size; i++ ) {
 80019ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019b0:	3301      	adds	r3, #1
 80019b2:	663b      	str	r3, [r7, #96]	; 0x60
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019bc:	429a      	cmp	r2, r3
 80019be:	f6ff af6d 	blt.w	800189c <susan_smoothing+0x140>
        else
          *out++ = ( total - ( centre * 100 ) ) / tmp;
      }
    }
  }
}
 80019c2:	e127      	b.n	8001c14 <susan_smoothing+0x4b8>
    for ( i = 1; i < y_size - 1; i++ ) {
 80019c4:	2301      	movs	r3, #1
 80019c6:	663b      	str	r3, [r7, #96]	; 0x60
 80019c8:	e11e      	b.n	8001c08 <susan_smoothing+0x4ac>
      for ( j = 1; j < x_size - 1; j++ ) {
 80019ca:	2301      	movs	r3, #1
 80019cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80019ce:	e112      	b.n	8001bf6 <susan_smoothing+0x49a>
 80019d0:	3ff80000 	.word	0x3ff80000
 80019d4:	40590000 	.word	0x40590000
 80019d8:	ffffd8f0 	.word	0xffffd8f0
        area = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	653b      	str	r3, [r7, #80]	; 0x50
        total = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	643b      	str	r3, [r7, #64]	; 0x40
        ip = in + ( ( i - 1 ) * x_size ) + j - 1;
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019e8:	3b01      	subs	r3, #1
 80019ea:	68b9      	ldr	r1, [r7, #8]
 80019ec:	fb01 f303 	mul.w	r3, r1, r3
 80019f0:	4619      	mov	r1, r3
 80019f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019f4:	440b      	add	r3, r1
 80019f6:	3b01      	subs	r3, #1
 80019f8:	4413      	add	r3, r2
 80019fa:	64fb      	str	r3, [r7, #76]	; 0x4c
        centre = in[ i * x_size + j ];
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001a02:	fb01 f102 	mul.w	r1, r1, r2
 8001a06:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001a08:	440a      	add	r2, r1
 8001a0a:	4413      	add	r3, r2
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	63bb      	str	r3, [r7, #56]	; 0x38
        cp = bp + centre;
 8001a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a12:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001a14:	4413      	add	r3, r2
 8001a16:	637b      	str	r3, [r7, #52]	; 0x34
        brightness = *ip++;
 8001a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a1a:	1c5a      	adds	r2, r3, #1
 8001a1c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	633b      	str	r3, [r7, #48]	; 0x30
        tmp = *( cp - brightness );
 8001a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a24:	425b      	negs	r3, r3
 8001a26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a28:	4413      	add	r3, r2
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        area += tmp;
 8001a2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a32:	4413      	add	r3, r2
 8001a34:	653b      	str	r3, [r7, #80]	; 0x50
        total += tmp * brightness;
 8001a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a3a:	fb02 f303 	mul.w	r3, r2, r3
 8001a3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001a40:	4413      	add	r3, r2
 8001a42:	643b      	str	r3, [r7, #64]	; 0x40
        brightness = *ip++;
 8001a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	633b      	str	r3, [r7, #48]	; 0x30
        tmp = *( cp - brightness );
 8001a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a50:	425b      	negs	r3, r3
 8001a52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a54:	4413      	add	r3, r2
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	62fb      	str	r3, [r7, #44]	; 0x2c
        area += tmp;
 8001a5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a5e:	4413      	add	r3, r2
 8001a60:	653b      	str	r3, [r7, #80]	; 0x50
        total += tmp * brightness;
 8001a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a66:	fb02 f303 	mul.w	r3, r2, r3
 8001a6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001a6c:	4413      	add	r3, r2
 8001a6e:	643b      	str	r3, [r7, #64]	; 0x40
        brightness = *ip;
 8001a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	633b      	str	r3, [r7, #48]	; 0x30
        tmp = *( cp - brightness );
 8001a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a78:	425b      	negs	r3, r3
 8001a7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a7c:	4413      	add	r3, r2
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	62fb      	str	r3, [r7, #44]	; 0x2c
        area += tmp;
 8001a82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a86:	4413      	add	r3, r2
 8001a88:	653b      	str	r3, [r7, #80]	; 0x50
        total += tmp * brightness;
 8001a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a8e:	fb02 f303 	mul.w	r3, r2, r3
 8001a92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001a94:	4413      	add	r3, r2
 8001a96:	643b      	str	r3, [r7, #64]	; 0x40
        ip += x_size - 2;
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	3b02      	subs	r3, #2
 8001a9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a9e:	4413      	add	r3, r2
 8001aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
        brightness = *ip++;
 8001aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aa4:	1c5a      	adds	r2, r3, #1
 8001aa6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	633b      	str	r3, [r7, #48]	; 0x30
        tmp = *( cp - brightness );
 8001aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aae:	425b      	negs	r3, r3
 8001ab0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ab2:	4413      	add	r3, r2
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
        area += tmp;
 8001ab8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001abc:	4413      	add	r3, r2
 8001abe:	653b      	str	r3, [r7, #80]	; 0x50
        total += tmp * brightness;
 8001ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ac4:	fb02 f303 	mul.w	r3, r2, r3
 8001ac8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001aca:	4413      	add	r3, r2
 8001acc:	643b      	str	r3, [r7, #64]	; 0x40
        brightness = *ip++;
 8001ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ad0:	1c5a      	adds	r2, r3, #1
 8001ad2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	633b      	str	r3, [r7, #48]	; 0x30
        tmp = *( cp - brightness );
 8001ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ada:	425b      	negs	r3, r3
 8001adc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ade:	4413      	add	r3, r2
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
        area += tmp;
 8001ae4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae8:	4413      	add	r3, r2
 8001aea:	653b      	str	r3, [r7, #80]	; 0x50
        total += tmp * brightness;
 8001aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001af0:	fb02 f303 	mul.w	r3, r2, r3
 8001af4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001af6:	4413      	add	r3, r2
 8001af8:	643b      	str	r3, [r7, #64]	; 0x40
        brightness = *ip;
 8001afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	633b      	str	r3, [r7, #48]	; 0x30
        tmp = *( cp - brightness );
 8001b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b02:	425b      	negs	r3, r3
 8001b04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b06:	4413      	add	r3, r2
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        area += tmp;
 8001b0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b10:	4413      	add	r3, r2
 8001b12:	653b      	str	r3, [r7, #80]	; 0x50
        total += tmp * brightness;
 8001b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b18:	fb02 f303 	mul.w	r3, r2, r3
 8001b1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001b1e:	4413      	add	r3, r2
 8001b20:	643b      	str	r3, [r7, #64]	; 0x40
        ip += x_size - 2;
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	3b02      	subs	r3, #2
 8001b26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b28:	4413      	add	r3, r2
 8001b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
        brightness = *ip++;
 8001b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	633b      	str	r3, [r7, #48]	; 0x30
        tmp = *( cp - brightness );
 8001b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b38:	425b      	negs	r3, r3
 8001b3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b3c:	4413      	add	r3, r2
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	62fb      	str	r3, [r7, #44]	; 0x2c
        area += tmp;
 8001b42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b46:	4413      	add	r3, r2
 8001b48:	653b      	str	r3, [r7, #80]	; 0x50
        total += tmp * brightness;
 8001b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b4e:	fb02 f303 	mul.w	r3, r2, r3
 8001b52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001b54:	4413      	add	r3, r2
 8001b56:	643b      	str	r3, [r7, #64]	; 0x40
        brightness = *ip++;
 8001b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	633b      	str	r3, [r7, #48]	; 0x30
        tmp = *( cp - brightness );
 8001b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b64:	425b      	negs	r3, r3
 8001b66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b68:	4413      	add	r3, r2
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        area += tmp;
 8001b6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b72:	4413      	add	r3, r2
 8001b74:	653b      	str	r3, [r7, #80]	; 0x50
        total += tmp * brightness;
 8001b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b7a:	fb02 f303 	mul.w	r3, r2, r3
 8001b7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001b80:	4413      	add	r3, r2
 8001b82:	643b      	str	r3, [r7, #64]	; 0x40
        brightness = *ip;
 8001b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	633b      	str	r3, [r7, #48]	; 0x30
        tmp = *( cp - brightness );
 8001b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b8c:	425b      	negs	r3, r3
 8001b8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b90:	4413      	add	r3, r2
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	62fb      	str	r3, [r7, #44]	; 0x2c
        area += tmp;
 8001b96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b9a:	4413      	add	r3, r2
 8001b9c:	653b      	str	r3, [r7, #80]	; 0x50
        total += tmp * brightness;
 8001b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ba2:	fb02 f303 	mul.w	r3, r2, r3
 8001ba6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001ba8:	4413      	add	r3, r2
 8001baa:	643b      	str	r3, [r7, #64]	; 0x40
        tmp = area - 100;
 8001bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bae:	3b64      	subs	r3, #100	; 0x64
 8001bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if ( tmp == 0 )
 8001bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10c      	bne.n	8001bd2 <susan_smoothing+0x476>
          *out++ = susan_median( in, i, j, x_size );
 8001bb8:	6938      	ldr	r0, [r7, #16]
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8001bbe:	1c63      	adds	r3, r4, #1
 8001bc0:	647b      	str	r3, [r7, #68]	; 0x44
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001bc6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001bc8:	f7ff fc22 	bl	8001410 <susan_median>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	7023      	strb	r3, [r4, #0]
 8001bd0:	e00e      	b.n	8001bf0 <susan_smoothing+0x494>
          *out++ = ( total - ( centre * 100 ) ) / tmp;
 8001bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bd4:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8001bd8:	fb02 f203 	mul.w	r2, r2, r3
 8001bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bde:	441a      	add	r2, r3
 8001be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be2:	fb92 f1f3 	sdiv	r1, r2, r3
 8001be6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	647a      	str	r2, [r7, #68]	; 0x44
 8001bec:	b2ca      	uxtb	r2, r1
 8001bee:	701a      	strb	r2, [r3, #0]
      for ( j = 1; j < x_size - 1; j++ ) {
 8001bf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	f6ff aeed 	blt.w	80019dc <susan_smoothing+0x280>
    for ( i = 1; i < y_size - 1; i++ ) {
 8001c02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c04:	3301      	adds	r3, #1
 8001c06:	663b      	str	r3, [r7, #96]	; 0x60
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	f6ff aedb 	blt.w	80019ca <susan_smoothing+0x26e>
}
 8001c14:	bf00      	nop
 8001c16:	376c      	adds	r7, #108	; 0x6c
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd90      	pop	{r4, r7, pc}

08001c1c <susan_edge_draw>:


void susan_edge_draw( uchar *in, uchar *mid,
                      int x_size, int y_size, int drawing_mode )
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	; 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
 8001c28:	603b      	str	r3, [r7, #0]
  int   i;
  uchar *inp, *midp;

  if ( drawing_mode == 0 ) {
 8001c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d14e      	bne.n	8001cce <susan_edge_draw+0xb2>
    /* mark 3x3 white block around each edge point */
    midp = mid;
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	61bb      	str	r3, [r7, #24]
    _Pragma( "loopbound min 7220 max 7220" )
    for ( i = 0; i < x_size * y_size; i++ ) {
 8001c34:	2300      	movs	r3, #0
 8001c36:	61fb      	str	r3, [r7, #28]
 8001c38:	e042      	b.n	8001cc0 <susan_edge_draw+0xa4>
      if ( *midp < 8 ) {
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b07      	cmp	r3, #7
 8001c40:	d838      	bhi.n	8001cb4 <susan_edge_draw+0x98>
        inp = in + ( midp - mid ) - x_size - 1;
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	461a      	mov	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	4413      	add	r3, r2
 8001c54:	617b      	str	r3, [r7, #20]
        *inp++ = 255;
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	1c5a      	adds	r2, r3, #1
 8001c5a:	617a      	str	r2, [r7, #20]
 8001c5c:	22ff      	movs	r2, #255	; 0xff
 8001c5e:	701a      	strb	r2, [r3, #0]
        *inp++ = 255;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	617a      	str	r2, [r7, #20]
 8001c66:	22ff      	movs	r2, #255	; 0xff
 8001c68:	701a      	strb	r2, [r3, #0]
        *inp = 255;
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	22ff      	movs	r2, #255	; 0xff
 8001c6e:	701a      	strb	r2, [r3, #0]
        inp += x_size - 2;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3b02      	subs	r3, #2
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	4413      	add	r3, r2
 8001c78:	617b      	str	r3, [r7, #20]
        *inp++ = 255;
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	1c5a      	adds	r2, r3, #1
 8001c7e:	617a      	str	r2, [r7, #20]
 8001c80:	22ff      	movs	r2, #255	; 0xff
 8001c82:	701a      	strb	r2, [r3, #0]
        inp++;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	3301      	adds	r3, #1
 8001c88:	617b      	str	r3, [r7, #20]
        *inp = 255;
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	22ff      	movs	r2, #255	; 0xff
 8001c8e:	701a      	strb	r2, [r3, #0]
        inp += x_size - 2;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3b02      	subs	r3, #2
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	4413      	add	r3, r2
 8001c98:	617b      	str	r3, [r7, #20]
        *inp++ = 255;
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	1c5a      	adds	r2, r3, #1
 8001c9e:	617a      	str	r2, [r7, #20]
 8001ca0:	22ff      	movs	r2, #255	; 0xff
 8001ca2:	701a      	strb	r2, [r3, #0]
        *inp++ = 255;
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	1c5a      	adds	r2, r3, #1
 8001ca8:	617a      	str	r2, [r7, #20]
 8001caa:	22ff      	movs	r2, #255	; 0xff
 8001cac:	701a      	strb	r2, [r3, #0]
        *inp = 255;
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	22ff      	movs	r2, #255	; 0xff
 8001cb2:	701a      	strb	r2, [r3, #0]
      }
      midp++;
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	61bb      	str	r3, [r7, #24]
    for ( i = 0; i < x_size * y_size; i++ ) {
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	61fb      	str	r3, [r7, #28]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	fb02 f303 	mul.w	r3, r2, r3
 8001cc8:	69fa      	ldr	r2, [r7, #28]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	dbb5      	blt.n	8001c3a <susan_edge_draw+0x1e>
    }
  }

  /* now mark 1 black pixel at each edge point */
  midp = mid;
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	61bb      	str	r3, [r7, #24]
  _Pragma( "loopbound min 7220 max 7220" )
  for ( i = 0; i < x_size * y_size; i++ ) {
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]
 8001cd6:	e011      	b.n	8001cfc <susan_edge_draw+0xe0>
    if ( *midp < 8 )
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b07      	cmp	r3, #7
 8001cde:	d807      	bhi.n	8001cf0 <susan_edge_draw+0xd4>
      *( in + ( midp - mid ) ) = 0;
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4413      	add	r3, r2
 8001cec:	2200      	movs	r2, #0
 8001cee:	701a      	strb	r2, [r3, #0]
    midp++;
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	61bb      	str	r3, [r7, #24]
  for ( i = 0; i < x_size * y_size; i++ ) {
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	61fb      	str	r3, [r7, #28]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	fb02 f303 	mul.w	r3, r2, r3
 8001d04:	69fa      	ldr	r2, [r7, #28]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	dbe6      	blt.n	8001cd8 <susan_edge_draw+0xbc>
  }
}
 8001d0a:	bf00      	nop
 8001d0c:	bf00      	nop
 8001d0e:	3724      	adds	r7, #36	; 0x24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <susan_thin>:


void susan_thin( char *r, uchar *mid, int x_size, int y_size )
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b0a4      	sub	sp, #144	; 0x90
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
 8001d24:	603b      	str	r3, [r7, #0]
        b00, b02, b20, b22,
        m, n, a, b, x, y, i, j;
  uchar *mp;

  _Pragma( "loopbound min 87 max 87" )
  for ( i = 4; i < y_size - 4; i++ ) {
 8001d26:	2304      	movs	r3, #4
 8001d28:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d2a:	f000 bde9 	b.w	8002900 <susan_thin+0xbe8>
    _Pragma( "loopbound min 68 max 68" )
    for ( j = 4; j < x_size - 4; j++ ) {
 8001d2e:	2304      	movs	r3, #4
 8001d30:	677b      	str	r3, [r7, #116]	; 0x74
 8001d32:	f000 bddc 	b.w	80028ee <susan_thin+0xbd6>
      if ( mid[ i * x_size + j ] < 8 ) {
 8001d36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	fb02 f203 	mul.w	r2, r2, r3
 8001d3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d40:	4413      	add	r3, r2
 8001d42:	461a      	mov	r2, r3
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	4413      	add	r3, r2
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b07      	cmp	r3, #7
 8001d4c:	f200 85cc 	bhi.w	80028e8 <susan_thin+0xbd0>
        centre = r[ i * x_size + j ];
 8001d50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	fb02 f203 	mul.w	r2, r2, r3
 8001d58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d5a:	4413      	add	r3, r2
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	4413      	add	r3, r2
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	673b      	str	r3, [r7, #112]	; 0x70
        /* {{{ count number of neighbours */

        mp = mid + ( i - 1 ) * x_size + j - 1;
 8001d66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	fb02 f303 	mul.w	r3, r2, r3
 8001d70:	461a      	mov	r2, r3
 8001d72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d74:	4413      	add	r3, r2
 8001d76:	3b01      	subs	r3, #1
 8001d78:	68ba      	ldr	r2, [r7, #8]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	66fb      	str	r3, [r7, #108]	; 0x6c

        n = ( *mp < 8 ) +
 8001d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b07      	cmp	r3, #7
 8001d84:	bf94      	ite	ls
 8001d86:	2301      	movls	r3, #1
 8001d88:	2300      	movhi	r3, #0
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	461a      	mov	r2, r3
            ( *( mp + 1 ) < 8 ) +
 8001d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d90:	3301      	adds	r3, #1
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b07      	cmp	r3, #7
 8001d96:	bf94      	ite	ls
 8001d98:	2301      	movls	r3, #1
 8001d9a:	2300      	movhi	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
        n = ( *mp < 8 ) +
 8001d9e:	4413      	add	r3, r2
            ( *( mp + 2 ) < 8 ) +
 8001da0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001da2:	3202      	adds	r2, #2
 8001da4:	7812      	ldrb	r2, [r2, #0]
 8001da6:	2a07      	cmp	r2, #7
 8001da8:	bf94      	ite	ls
 8001daa:	2201      	movls	r2, #1
 8001dac:	2200      	movhi	r2, #0
 8001dae:	b2d2      	uxtb	r2, r2
            ( *( mp + 1 ) < 8 ) +
 8001db0:	4413      	add	r3, r2
            ( *( mp + x_size ) < 8 ) +
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001db6:	440a      	add	r2, r1
 8001db8:	7812      	ldrb	r2, [r2, #0]
 8001dba:	2a07      	cmp	r2, #7
 8001dbc:	bf94      	ite	ls
 8001dbe:	2201      	movls	r2, #1
 8001dc0:	2200      	movhi	r2, #0
 8001dc2:	b2d2      	uxtb	r2, r2
            ( *( mp + 2 ) < 8 ) +
 8001dc4:	4413      	add	r3, r2
            ( *( mp + x_size + 2 ) < 8 ) +
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	3202      	adds	r2, #2
 8001dca:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001dcc:	440a      	add	r2, r1
 8001dce:	7812      	ldrb	r2, [r2, #0]
 8001dd0:	2a07      	cmp	r2, #7
 8001dd2:	bf94      	ite	ls
 8001dd4:	2201      	movls	r2, #1
 8001dd6:	2200      	movhi	r2, #0
 8001dd8:	b2d2      	uxtb	r2, r2
            ( *( mp + x_size ) < 8 ) +
 8001dda:	4413      	add	r3, r2
            ( *( mp + x_size + x_size ) < 8 ) +
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	0052      	lsls	r2, r2, #1
 8001de0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001de2:	440a      	add	r2, r1
 8001de4:	7812      	ldrb	r2, [r2, #0]
 8001de6:	2a07      	cmp	r2, #7
 8001de8:	bf94      	ite	ls
 8001dea:	2201      	movls	r2, #1
 8001dec:	2200      	movhi	r2, #0
 8001dee:	b2d2      	uxtb	r2, r2
            ( *( mp + x_size + 2 ) < 8 ) +
 8001df0:	4413      	add	r3, r2
            ( *( mp + x_size + x_size + 1 ) < 8 ) +
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	0052      	lsls	r2, r2, #1
 8001df6:	3201      	adds	r2, #1
 8001df8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001dfa:	440a      	add	r2, r1
 8001dfc:	7812      	ldrb	r2, [r2, #0]
 8001dfe:	2a07      	cmp	r2, #7
 8001e00:	bf94      	ite	ls
 8001e02:	2201      	movls	r2, #1
 8001e04:	2200      	movhi	r2, #0
 8001e06:	b2d2      	uxtb	r2, r2
            ( *( mp + x_size + x_size ) < 8 ) +
 8001e08:	4413      	add	r3, r2
            ( *( mp + x_size + x_size + 2 ) < 8 );
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	3201      	adds	r2, #1
 8001e0e:	0052      	lsls	r2, r2, #1
 8001e10:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001e12:	440a      	add	r2, r1
 8001e14:	7812      	ldrb	r2, [r2, #0]
 8001e16:	2a07      	cmp	r2, #7
 8001e18:	bf94      	ite	ls
 8001e1a:	2201      	movls	r2, #1
 8001e1c:	2200      	movhi	r2, #0
 8001e1e:	b2d2      	uxtb	r2, r2
        n = ( *mp < 8 ) +
 8001e20:	4413      	add	r3, r2
 8001e22:	66bb      	str	r3, [r7, #104]	; 0x68

        /* {{{ n==0 no neighbours - remove point */

        if ( n == 0 )
 8001e24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10a      	bne.n	8001e40 <susan_thin+0x128>
          mid[ i * x_size + j ] = 100;
 8001e2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	fb02 f203 	mul.w	r2, r2, r3
 8001e32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e34:	4413      	add	r3, r2
 8001e36:	461a      	mov	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	2264      	movs	r2, #100	; 0x64
 8001e3e:	701a      	strb	r2, [r3, #0]

        /* {{{ n==1 - extend line if I can */

        /* extension is only allowed a few times - the value of mid is used to control this */

        if ( ( n == 1 ) && ( mid[ i * x_size + j ] < 6 ) ) {
 8001e40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	f040 8240 	bne.w	80022c8 <susan_thin+0x5b0>
 8001e48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	fb02 f203 	mul.w	r2, r2, r3
 8001e50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e52:	4413      	add	r3, r2
 8001e54:	461a      	mov	r2, r3
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	4413      	add	r3, r2
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b05      	cmp	r3, #5
 8001e5e:	f200 8233 	bhi.w	80022c8 <susan_thin+0x5b0>
             neighbour already present. e.g.
             have: O O O  weight r by 0 2 3
                   X X O              0 0 4
                   O O O              0 2 3     */

          l[ 0 ] = r[ ( i - 1 ) * x_size + j - 1 ];
 8001e62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e64:	3b01      	subs	r3, #1
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	fb02 f203 	mul.w	r2, r2, r3
 8001e6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e6e:	4413      	add	r3, r2
 8001e70:	3b01      	subs	r3, #1
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	4413      	add	r3, r2
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	617b      	str	r3, [r7, #20]
          l[ 1 ] = r[ ( i - 1 ) * x_size + j ];
 8001e7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	fb02 f203 	mul.w	r2, r2, r3
 8001e84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e86:	4413      	add	r3, r2
 8001e88:	461a      	mov	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	61bb      	str	r3, [r7, #24]
          l[ 2 ] = r[ ( i - 1 ) * x_size + j + 1 ];
 8001e92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e94:	3b01      	subs	r3, #1
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	fb02 f203 	mul.w	r2, r2, r3
 8001e9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e9e:	4413      	add	r3, r2
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	61fb      	str	r3, [r7, #28]
          l[ 3 ] = r[ ( i  ) * x_size + j - 1 ];
 8001eaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	fb02 f203 	mul.w	r2, r2, r3
 8001eb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001eb4:	4413      	add	r3, r2
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	4413      	add	r3, r2
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	623b      	str	r3, [r7, #32]
          l[ 4 ] = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
          l[ 5 ] = r[ ( i  ) * x_size + j + 1 ];
 8001ec4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	fb02 f203 	mul.w	r2, r2, r3
 8001ecc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ece:	4413      	add	r3, r2
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	62bb      	str	r3, [r7, #40]	; 0x28
          l[ 6 ] = r[ ( i + 1 ) * x_size + j - 1 ];
 8001eda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001edc:	3301      	adds	r3, #1
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	fb02 f203 	mul.w	r2, r2, r3
 8001ee4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	4413      	add	r3, r2
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
          l[ 7 ] = r[ ( i + 1 ) * x_size + j ];
 8001ef2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	fb02 f203 	mul.w	r2, r2, r3
 8001efc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001efe:	4413      	add	r3, r2
 8001f00:	461a      	mov	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	4413      	add	r3, r2
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	633b      	str	r3, [r7, #48]	; 0x30
          l[ 8 ] = r[ ( i + 1 ) * x_size + j + 1 ];
 8001f0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	fb02 f203 	mul.w	r2, r2, r3
 8001f14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f16:	4413      	add	r3, r2
 8001f18:	3301      	adds	r3, #1
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	637b      	str	r3, [r7, #52]	; 0x34

          if ( mid[ ( i - 1 )*x_size + j - 1 ] < 8 )        {
 8001f22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f24:	3b01      	subs	r3, #1
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	fb02 f203 	mul.w	r2, r2, r3
 8001f2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f2e:	4413      	add	r3, r2
 8001f30:	3b01      	subs	r3, #1
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	4413      	add	r3, r2
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b07      	cmp	r3, #7
 8001f3a:	d819      	bhi.n	8001f70 <susan_thin+0x258>
            l[ 0 ] = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
            l[ 1 ] = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	61bb      	str	r3, [r7, #24]
            l[ 3 ] = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	623b      	str	r3, [r7, #32]
            l[ 2 ] *= 2;
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	61fb      	str	r3, [r7, #28]
            l[ 6 ] *= 2;
 8001f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	62fb      	str	r3, [r7, #44]	; 0x2c
            l[ 5 ] *= 3;
 8001f54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f56:	4613      	mov	r3, r2
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	4413      	add	r3, r2
 8001f5c:	62bb      	str	r3, [r7, #40]	; 0x28
            l[ 7 ] *= 3;
 8001f5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f60:	4613      	mov	r3, r2
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	4413      	add	r3, r2
 8001f66:	633b      	str	r3, [r7, #48]	; 0x30
            l[ 8 ] *= 4;
 8001f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	637b      	str	r3, [r7, #52]	; 0x34
 8001f6e:	e10d      	b.n	800218c <susan_thin+0x474>
          } else {
            if ( mid[ ( i - 1 )*x_size + j ] < 8 )   {
 8001f70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f72:	3b01      	subs	r3, #1
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	fb02 f203 	mul.w	r2, r2, r3
 8001f7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f7c:	4413      	add	r3, r2
 8001f7e:	461a      	mov	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	4413      	add	r3, r2
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b07      	cmp	r3, #7
 8001f88:	d819      	bhi.n	8001fbe <susan_thin+0x2a6>
              l[ 1 ] = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61bb      	str	r3, [r7, #24]
              l[ 0 ] = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
              l[ 2 ] = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
              l[ 3 ] *= 2;
 8001f96:	6a3b      	ldr	r3, [r7, #32]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	623b      	str	r3, [r7, #32]
              l[ 5 ] *= 2;
 8001f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	62bb      	str	r3, [r7, #40]	; 0x28
              l[ 6 ] *= 3;
 8001fa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	4413      	add	r3, r2
 8001faa:	62fb      	str	r3, [r7, #44]	; 0x2c
              l[ 8 ] *= 3;
 8001fac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fae:	4613      	mov	r3, r2
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	4413      	add	r3, r2
 8001fb4:	637b      	str	r3, [r7, #52]	; 0x34
              l[ 7 ] *= 4;
 8001fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	633b      	str	r3, [r7, #48]	; 0x30
 8001fbc:	e0e6      	b.n	800218c <susan_thin+0x474>
            } else {
              if ( mid[ ( i - 1 )*x_size + j + 1 ] < 8 ) {
 8001fbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	fb02 f203 	mul.w	r2, r2, r3
 8001fc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fca:	4413      	add	r3, r2
 8001fcc:	3301      	adds	r3, #1
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	2b07      	cmp	r3, #7
 8001fd6:	d819      	bhi.n	800200c <susan_thin+0x2f4>
                l[ 2 ] = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61fb      	str	r3, [r7, #28]
                l[ 1 ] = 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61bb      	str	r3, [r7, #24]
                l[ 5 ] = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	62bb      	str	r3, [r7, #40]	; 0x28
                l[ 0 ] *= 2;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	617b      	str	r3, [r7, #20]
                l[ 8 ] *= 2;
 8001fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	637b      	str	r3, [r7, #52]	; 0x34
                l[ 3 ] *= 3;
 8001ff0:	6a3a      	ldr	r2, [r7, #32]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	4413      	add	r3, r2
 8001ff8:	623b      	str	r3, [r7, #32]
                l[ 7 ] *= 3;
 8001ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	4413      	add	r3, r2
 8002002:	633b      	str	r3, [r7, #48]	; 0x30
                l[ 6 ] *= 4;
 8002004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	62fb      	str	r3, [r7, #44]	; 0x2c
 800200a:	e0bf      	b.n	800218c <susan_thin+0x474>
              } else {
                if ( mid[ ( i )*x_size + j - 1 ] < 8 )   {
 800200c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	fb02 f203 	mul.w	r2, r2, r3
 8002014:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002016:	4413      	add	r3, r2
 8002018:	3b01      	subs	r3, #1
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	4413      	add	r3, r2
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b07      	cmp	r3, #7
 8002022:	d819      	bhi.n	8002058 <susan_thin+0x340>
                  l[ 3 ] = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	623b      	str	r3, [r7, #32]
                  l[ 0 ] = 0;
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
                  l[ 6 ] = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	62fb      	str	r3, [r7, #44]	; 0x2c
                  l[ 1 ] *= 2;
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	61bb      	str	r3, [r7, #24]
                  l[ 7 ] *= 2;
 8002036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	633b      	str	r3, [r7, #48]	; 0x30
                  l[ 2 ] *= 3;
 800203c:	69fa      	ldr	r2, [r7, #28]
 800203e:	4613      	mov	r3, r2
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	4413      	add	r3, r2
 8002044:	61fb      	str	r3, [r7, #28]
                  l[ 8 ] *= 3;
 8002046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002048:	4613      	mov	r3, r2
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	4413      	add	r3, r2
 800204e:	637b      	str	r3, [r7, #52]	; 0x34
                  l[ 5 ] *= 4;
 8002050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	62bb      	str	r3, [r7, #40]	; 0x28
 8002056:	e099      	b.n	800218c <susan_thin+0x474>
                } else {
                  if ( mid[ ( i )*x_size + j + 1 ] < 8 )   {
 8002058:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	fb02 f203 	mul.w	r2, r2, r3
 8002060:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002062:	4413      	add	r3, r2
 8002064:	3301      	adds	r3, #1
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	4413      	add	r3, r2
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b07      	cmp	r3, #7
 800206e:	d819      	bhi.n	80020a4 <susan_thin+0x38c>
                    l[ 5 ] = 0;
 8002070:	2300      	movs	r3, #0
 8002072:	62bb      	str	r3, [r7, #40]	; 0x28
                    l[ 2 ] = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	61fb      	str	r3, [r7, #28]
                    l[ 8 ] = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	637b      	str	r3, [r7, #52]	; 0x34
                    l[ 1 ] *= 2;
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	61bb      	str	r3, [r7, #24]
                    l[ 7 ] *= 2;
 8002082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	633b      	str	r3, [r7, #48]	; 0x30
                    l[ 0 ] *= 3;
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	4613      	mov	r3, r2
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	4413      	add	r3, r2
 8002090:	617b      	str	r3, [r7, #20]
                    l[ 6 ] *= 3;
 8002092:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002094:	4613      	mov	r3, r2
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	4413      	add	r3, r2
 800209a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    l[ 3 ] *= 4;
 800209c:	6a3b      	ldr	r3, [r7, #32]
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	623b      	str	r3, [r7, #32]
 80020a2:	e073      	b.n	800218c <susan_thin+0x474>
                  } else {
                    if ( mid[ ( i + 1 )*x_size + j - 1 ] < 8 ) {
 80020a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020a6:	3301      	adds	r3, #1
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	fb02 f203 	mul.w	r2, r2, r3
 80020ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020b0:	4413      	add	r3, r2
 80020b2:	3b01      	subs	r3, #1
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	4413      	add	r3, r2
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b07      	cmp	r3, #7
 80020bc:	d819      	bhi.n	80020f2 <susan_thin+0x3da>
                      l[ 6 ] = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	62fb      	str	r3, [r7, #44]	; 0x2c
                      l[ 3 ] = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	623b      	str	r3, [r7, #32]
                      l[ 7 ] = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	633b      	str	r3, [r7, #48]	; 0x30
                      l[ 0 ] *= 2;
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	617b      	str	r3, [r7, #20]
                      l[ 8 ] *= 2;
 80020d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	637b      	str	r3, [r7, #52]	; 0x34
                      l[ 1 ] *= 3;
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4613      	mov	r3, r2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4413      	add	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
                      l[ 5 ] *= 3;
 80020e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020e2:	4613      	mov	r3, r2
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	4413      	add	r3, r2
 80020e8:	62bb      	str	r3, [r7, #40]	; 0x28
                      l[ 2 ] *= 4;
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	61fb      	str	r3, [r7, #28]
 80020f0:	e04c      	b.n	800218c <susan_thin+0x474>
                    } else {
                      if ( mid[ ( i + 1 )*x_size + j ] < 8 )   {
 80020f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020f4:	3301      	adds	r3, #1
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	fb02 f203 	mul.w	r2, r2, r3
 80020fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020fe:	4413      	add	r3, r2
 8002100:	461a      	mov	r2, r3
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	4413      	add	r3, r2
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b07      	cmp	r3, #7
 800210a:	d819      	bhi.n	8002140 <susan_thin+0x428>
                        l[ 7 ] = 0;
 800210c:	2300      	movs	r3, #0
 800210e:	633b      	str	r3, [r7, #48]	; 0x30
                        l[ 6 ] = 0;
 8002110:	2300      	movs	r3, #0
 8002112:	62fb      	str	r3, [r7, #44]	; 0x2c
                        l[ 8 ] = 0;
 8002114:	2300      	movs	r3, #0
 8002116:	637b      	str	r3, [r7, #52]	; 0x34
                        l[ 3 ] *= 2;
 8002118:	6a3b      	ldr	r3, [r7, #32]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	623b      	str	r3, [r7, #32]
                        l[ 5 ] *= 2;
 800211e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	62bb      	str	r3, [r7, #40]	; 0x28
                        l[ 0 ] *= 3;
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	4613      	mov	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	4413      	add	r3, r2
 800212c:	617b      	str	r3, [r7, #20]
                        l[ 2 ] *= 3;
 800212e:	69fa      	ldr	r2, [r7, #28]
 8002130:	4613      	mov	r3, r2
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	4413      	add	r3, r2
 8002136:	61fb      	str	r3, [r7, #28]
                        l[ 1 ] *= 4;
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	61bb      	str	r3, [r7, #24]
 800213e:	e025      	b.n	800218c <susan_thin+0x474>
                      } else {
                        if ( mid[ ( i + 1 )*x_size + j + 1 ] < 8 ) {
 8002140:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002142:	3301      	adds	r3, #1
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	fb02 f203 	mul.w	r2, r2, r3
 800214a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800214c:	4413      	add	r3, r2
 800214e:	3301      	adds	r3, #1
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	4413      	add	r3, r2
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2b07      	cmp	r3, #7
 8002158:	d818      	bhi.n	800218c <susan_thin+0x474>
                          l[ 8 ] = 0;
 800215a:	2300      	movs	r3, #0
 800215c:	637b      	str	r3, [r7, #52]	; 0x34
                          l[ 5 ] = 0;
 800215e:	2300      	movs	r3, #0
 8002160:	62bb      	str	r3, [r7, #40]	; 0x28
                          l[ 7 ] = 0;
 8002162:	2300      	movs	r3, #0
 8002164:	633b      	str	r3, [r7, #48]	; 0x30
                          l[ 6 ] *= 2;
 8002166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          l[ 2 ] *= 2;
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	61fb      	str	r3, [r7, #28]
                          l[ 1 ] *= 3;
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4613      	mov	r3, r2
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	4413      	add	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
                          l[ 3 ] *= 3;
 800217c:	6a3a      	ldr	r2, [r7, #32]
 800217e:	4613      	mov	r3, r2
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	4413      	add	r3, r2
 8002184:	623b      	str	r3, [r7, #32]
                          l[ 0 ] *= 4;
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	617b      	str	r3, [r7, #20]
                }
              }
            }
          }

          m = 0;   /* find the highest point */
 800218c:	2300      	movs	r3, #0
 800218e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          _Pragma( "loopbound min 3 max 3" )
          for ( y = 0; y < 3; y++ )
 8002192:	2300      	movs	r3, #0
 8002194:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002196:	e036      	b.n	8002206 <susan_thin+0x4ee>
            _Pragma( "loopbound min 3 max 3" )
            for ( x = 0; x < 3; x++ )
 8002198:	2300      	movs	r3, #0
 800219a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800219e:	e02b      	b.n	80021f8 <susan_thin+0x4e0>
              if ( l[ y + y + y + x ] > m ) {
 80021a0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80021a2:	4613      	mov	r3, r2
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	441a      	add	r2, r3
 80021a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021ac:	4413      	add	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80021b4:	4413      	add	r3, r2
 80021b6:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80021ba:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80021be:	429a      	cmp	r2, r3
 80021c0:	da15      	bge.n	80021ee <susan_thin+0x4d6>
                m = l[ y + y + y + x ];
 80021c2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80021c4:	4613      	mov	r3, r2
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	441a      	add	r2, r3
 80021ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021ce:	4413      	add	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80021d6:	4413      	add	r3, r2
 80021d8:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80021dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                a = y;
 80021e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                b = x;
 80021e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            for ( x = 0; x < 3; x++ )
 80021ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021f2:	3301      	adds	r3, #1
 80021f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80021f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	ddcf      	ble.n	80021a0 <susan_thin+0x488>
          for ( y = 0; y < 3; y++ )
 8002200:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002202:	3301      	adds	r3, #1
 8002204:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002206:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002208:	2b02      	cmp	r3, #2
 800220a:	ddc5      	ble.n	8002198 <susan_thin+0x480>
              }

          if ( m > 0 ) {
 800220c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002210:	2b00      	cmp	r3, #0
 8002212:	dd59      	ble.n	80022c8 <susan_thin+0x5b0>
            if ( mid[ i * x_size + j ] < 4 )
 8002214:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	fb02 f203 	mul.w	r2, r2, r3
 800221c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800221e:	4413      	add	r3, r2
 8002220:	461a      	mov	r2, r3
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	4413      	add	r3, r2
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b03      	cmp	r3, #3
 800222a:	d812      	bhi.n	8002252 <susan_thin+0x53a>
              mid[ ( i + a - 1 )*x_size + j + b - 1 ] = 4;
 800222c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800222e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002232:	4413      	add	r3, r2
 8002234:	3b01      	subs	r3, #1
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	fb02 f203 	mul.w	r2, r2, r3
 800223c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800223e:	441a      	add	r2, r3
 8002240:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002244:	4413      	add	r3, r2
 8002246:	3b01      	subs	r3, #1
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	4413      	add	r3, r2
 800224c:	2204      	movs	r2, #4
 800224e:	701a      	strb	r2, [r3, #0]
 8002250:	e01c      	b.n	800228c <susan_thin+0x574>
            else
              mid[ ( i + a - 1 )*x_size + j + b - 1 ] = mid[ i * x_size + j ] + 1;
 8002252:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	fb02 f203 	mul.w	r2, r2, r3
 800225a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800225c:	4413      	add	r3, r2
 800225e:	461a      	mov	r2, r3
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	4413      	add	r3, r2
 8002264:	781a      	ldrb	r2, [r3, #0]
 8002266:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002268:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800226c:	440b      	add	r3, r1
 800226e:	3b01      	subs	r3, #1
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	fb01 f103 	mul.w	r1, r1, r3
 8002276:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002278:	4419      	add	r1, r3
 800227a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800227e:	440b      	add	r3, r1
 8002280:	3b01      	subs	r3, #1
 8002282:	68b9      	ldr	r1, [r7, #8]
 8002284:	440b      	add	r3, r1
 8002286:	3201      	adds	r2, #1
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	701a      	strb	r2, [r3, #0]
            if ( ( a + a + b ) < 3 ) { /* need to jump back in image */
 800228c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002290:	005a      	lsls	r2, r3, #1
 8002292:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002296:	4413      	add	r3, r2
 8002298:	2b02      	cmp	r3, #2
 800229a:	dc15      	bgt.n	80022c8 <susan_thin+0x5b0>
              i += a - 1;
 800229c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022a0:	3b01      	subs	r3, #1
 80022a2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80022a4:	4413      	add	r3, r2
 80022a6:	67bb      	str	r3, [r7, #120]	; 0x78
              j += b - 2;
 80022a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022ac:	3b02      	subs	r3, #2
 80022ae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80022b0:	4413      	add	r3, r2
 80022b2:	677b      	str	r3, [r7, #116]	; 0x74
              if ( i < 4 ) i = 4;
 80022b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022b6:	2b03      	cmp	r3, #3
 80022b8:	dc01      	bgt.n	80022be <susan_thin+0x5a6>
 80022ba:	2304      	movs	r3, #4
 80022bc:	67bb      	str	r3, [r7, #120]	; 0x78
              if ( j < 4 ) j = 4;
 80022be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022c0:	2b03      	cmp	r3, #3
 80022c2:	dc01      	bgt.n	80022c8 <susan_thin+0x5b0>
 80022c4:	2304      	movs	r3, #4
 80022c6:	677b      	str	r3, [r7, #116]	; 0x74
          }
        }

        /* {{{ n==2 */

        if ( n == 2 ) {
 80022c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	f040 8234 	bne.w	8002738 <susan_thin+0xa20>
          /* put in a bit here to straighten edges */
          b00 = mid[ ( i - 1 ) * x_size + j - 1 ] < 8; /* corners of 3x3 */
 80022d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022d2:	3b01      	subs	r3, #1
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	fb02 f203 	mul.w	r2, r2, r3
 80022da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022dc:	4413      	add	r3, r2
 80022de:	3b01      	subs	r3, #1
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	4413      	add	r3, r2
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b07      	cmp	r3, #7
 80022e8:	bf94      	ite	ls
 80022ea:	2301      	movls	r3, #1
 80022ec:	2300      	movhi	r3, #0
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	667b      	str	r3, [r7, #100]	; 0x64
          b02 = mid[ ( i - 1 ) * x_size + j + 1 ] < 8;
 80022f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022f4:	3b01      	subs	r3, #1
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	fb02 f203 	mul.w	r2, r2, r3
 80022fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022fe:	4413      	add	r3, r2
 8002300:	3301      	adds	r3, #1
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	4413      	add	r3, r2
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b07      	cmp	r3, #7
 800230a:	bf94      	ite	ls
 800230c:	2301      	movls	r3, #1
 800230e:	2300      	movhi	r3, #0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	663b      	str	r3, [r7, #96]	; 0x60
          b20 = mid[ ( i + 1 ) * x_size + j - 1 ] < 8;
 8002314:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002316:	3301      	adds	r3, #1
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	fb02 f203 	mul.w	r2, r2, r3
 800231e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002320:	4413      	add	r3, r2
 8002322:	3b01      	subs	r3, #1
 8002324:	68ba      	ldr	r2, [r7, #8]
 8002326:	4413      	add	r3, r2
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b07      	cmp	r3, #7
 800232c:	bf94      	ite	ls
 800232e:	2301      	movls	r3, #1
 8002330:	2300      	movhi	r3, #0
 8002332:	b2db      	uxtb	r3, r3
 8002334:	65fb      	str	r3, [r7, #92]	; 0x5c
          b22 = mid[ ( i + 1 ) * x_size + j + 1 ] < 8;
 8002336:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002338:	3301      	adds	r3, #1
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	fb02 f203 	mul.w	r2, r2, r3
 8002340:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002342:	4413      	add	r3, r2
 8002344:	3301      	adds	r3, #1
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	4413      	add	r3, r2
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b07      	cmp	r3, #7
 800234e:	bf94      	ite	ls
 8002350:	2301      	movls	r3, #1
 8002352:	2300      	movhi	r3, #0
 8002354:	b2db      	uxtb	r3, r3
 8002356:	65bb      	str	r3, [r7, #88]	; 0x58
          if ( ( ( b00 + b02 + b20 + b22 ) == 2 ) && ( ( b00 | b22 ) & ( b02 | b20 ) ) ) {
 8002358:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800235a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800235c:	441a      	add	r2, r3
 800235e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002360:	441a      	add	r2, r3
 8002362:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002364:	4413      	add	r3, r2
 8002366:	2b02      	cmp	r3, #2
 8002368:	f040 80da 	bne.w	8002520 <susan_thin+0x808>
 800236c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800236e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002370:	431a      	orrs	r2, r3
 8002372:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002376:	430b      	orrs	r3, r1
 8002378:	4013      	ands	r3, r2
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 80d0 	beq.w	8002520 <susan_thin+0x808>
            /* case: move a point back into line.
                e.g. X O X  CAN  become X X X
                     O X O              O O O
                     O O O              O O O    */
            if ( b00 ) {
 8002380:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002382:	2b00      	cmp	r3, #0
 8002384:	d010      	beq.n	80023a8 <susan_thin+0x690>
              if ( b02 ) {
 8002386:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002388:	2b00      	cmp	r3, #0
 800238a:	d006      	beq.n	800239a <susan_thin+0x682>
                x = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                y = -1;
 8002392:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002396:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002398:	e014      	b.n	80023c4 <susan_thin+0x6ac>
              } else     {
                x = -1;
 800239a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800239e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                y = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80023a6:	e00d      	b.n	80023c4 <susan_thin+0x6ac>
              }
            } else {
              if ( b02 ) {
 80023a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d005      	beq.n	80023ba <susan_thin+0x6a2>
                x = 1;
 80023ae:	2301      	movs	r3, #1
 80023b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                y = 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80023b8:	e004      	b.n	80023c4 <susan_thin+0x6ac>
              } else     {
                x = 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                y = 1;
 80023c0:	2301      	movs	r3, #1
 80023c2:	67fb      	str	r3, [r7, #124]	; 0x7c
              }
            }
            if ( ( ( float )r[ ( i + y )*x_size + j + x ] / ( float )centre ) > 0.7 ) {
 80023c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80023c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023c8:	4413      	add	r3, r2
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	fb02 f203 	mul.w	r2, r2, r3
 80023d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023d2:	441a      	add	r2, r3
 80023d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023d8:	4413      	add	r3, r2
 80023da:	461a      	mov	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4413      	add	r3, r2
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	ee07 3a90 	vmov	s15, r3
 80023e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023ec:	ee07 3a90 	vmov	s15, r3
 80023f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023f4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80023f8:	ee16 0a90 	vmov	r0, s13
 80023fc:	f7fe f89c 	bl	8000538 <__aeabi_f2d>
 8002400:	f20f 5314 	addw	r3, pc, #1300	; 0x514
 8002404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002408:	f7fe fb7e 	bl	8000b08 <__aeabi_dcmpgt>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 8191 	beq.w	8002736 <susan_thin+0xa1e>
              if ( ( ( x == 0 ) && ( mid[ ( i + ( 2 * y ) )*x_size + j ] > 7 ) &&
 8002414:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002418:	2b00      	cmp	r3, #0
 800241a:	d12c      	bne.n	8002476 <susan_thin+0x75e>
 800241c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800241e:	005a      	lsls	r2, r3, #1
 8002420:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002422:	4413      	add	r3, r2
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	fb02 f203 	mul.w	r2, r2, r3
 800242a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800242c:	4413      	add	r3, r2
 800242e:	461a      	mov	r2, r3
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	4413      	add	r3, r2
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b07      	cmp	r3, #7
 8002438:	d91d      	bls.n	8002476 <susan_thin+0x75e>
                     ( mid[ ( i + ( 2 * y ) )*x_size + j - 1 ] > 7 ) &&
 800243a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800243c:	005a      	lsls	r2, r3, #1
 800243e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002440:	4413      	add	r3, r2
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	fb02 f203 	mul.w	r2, r2, r3
 8002448:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800244a:	4413      	add	r3, r2
 800244c:	3b01      	subs	r3, #1
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	4413      	add	r3, r2
 8002452:	781b      	ldrb	r3, [r3, #0]
              if ( ( ( x == 0 ) && ( mid[ ( i + ( 2 * y ) )*x_size + j ] > 7 ) &&
 8002454:	2b07      	cmp	r3, #7
 8002456:	d90e      	bls.n	8002476 <susan_thin+0x75e>
                     ( mid[ ( i + ( 2 * y ) )*x_size + j + 1 ] > 7 ) ) ||
 8002458:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800245a:	005a      	lsls	r2, r3, #1
 800245c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800245e:	4413      	add	r3, r2
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	fb02 f203 	mul.w	r2, r2, r3
 8002466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002468:	4413      	add	r3, r2
 800246a:	3301      	adds	r3, #1
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	4413      	add	r3, r2
 8002470:	781b      	ldrb	r3, [r3, #0]
                     ( mid[ ( i + ( 2 * y ) )*x_size + j - 1 ] > 7 ) &&
 8002472:	2b07      	cmp	r3, #7
 8002474:	d838      	bhi.n	80024e8 <susan_thin+0x7d0>
                     ( mid[ ( i + ( 2 * y ) )*x_size + j + 1 ] > 7 ) ) ||
 8002476:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002478:	2b00      	cmp	r3, #0
 800247a:	f040 815c 	bne.w	8002736 <susan_thin+0xa1e>
                   ( ( y == 0 ) && ( mid[ ( i )*x_size + j + ( 2 * x ) ] > 7 ) &&
 800247e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	fb02 f203 	mul.w	r2, r2, r3
 8002486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002488:	441a      	add	r2, r3
 800248a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	4413      	add	r3, r2
 8002492:	461a      	mov	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	4413      	add	r3, r2
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b07      	cmp	r3, #7
 800249c:	f240 814b 	bls.w	8002736 <susan_thin+0xa1e>
                     ( mid[ ( i + 1 )*x_size + j + ( 2 * x ) ] > 7 ) &&
 80024a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024a2:	3301      	adds	r3, #1
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	fb02 f203 	mul.w	r2, r2, r3
 80024aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024ac:	441a      	add	r2, r3
 80024ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	4413      	add	r3, r2
 80024b6:	461a      	mov	r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	4413      	add	r3, r2
 80024bc:	781b      	ldrb	r3, [r3, #0]
                   ( ( y == 0 ) && ( mid[ ( i )*x_size + j + ( 2 * x ) ] > 7 ) &&
 80024be:	2b07      	cmp	r3, #7
 80024c0:	f240 8139 	bls.w	8002736 <susan_thin+0xa1e>
                     ( mid[ ( i - 1 )*x_size + j + ( 2 * x ) ] > 7 ) ) ) {
 80024c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024c6:	3b01      	subs	r3, #1
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	fb02 f203 	mul.w	r2, r2, r3
 80024ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024d0:	441a      	add	r2, r3
 80024d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	4413      	add	r3, r2
 80024da:	461a      	mov	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	4413      	add	r3, r2
 80024e0:	781b      	ldrb	r3, [r3, #0]
                     ( mid[ ( i + 1 )*x_size + j + ( 2 * x ) ] > 7 ) &&
 80024e2:	2b07      	cmp	r3, #7
 80024e4:	f240 8127 	bls.w	8002736 <susan_thin+0xa1e>
                mid[ ( i )*x_size + j ] = 100;
 80024e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	fb02 f203 	mul.w	r2, r2, r3
 80024f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024f2:	4413      	add	r3, r2
 80024f4:	461a      	mov	r2, r3
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	4413      	add	r3, r2
 80024fa:	2264      	movs	r2, #100	; 0x64
 80024fc:	701a      	strb	r2, [r3, #0]
                mid[ ( i + y )*x_size + j + x ] = 3; /* no jumping needed */
 80024fe:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002500:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002502:	4413      	add	r3, r2
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	fb02 f203 	mul.w	r2, r2, r3
 800250a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800250c:	441a      	add	r2, r3
 800250e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002512:	4413      	add	r3, r2
 8002514:	461a      	mov	r2, r3
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	4413      	add	r3, r2
 800251a:	2203      	movs	r2, #3
 800251c:	701a      	strb	r2, [r3, #0]
            if ( ( ( float )r[ ( i + y )*x_size + j + x ] / ( float )centre ) > 0.7 ) {
 800251e:	e10a      	b.n	8002736 <susan_thin+0xa1e>
              }
            }
          } else {
            b01 = mid[ ( i - 1 ) * x_size + j   ] < 8;
 8002520:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002522:	3b01      	subs	r3, #1
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	fb02 f203 	mul.w	r2, r2, r3
 800252a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800252c:	4413      	add	r3, r2
 800252e:	461a      	mov	r2, r3
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	4413      	add	r3, r2
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b07      	cmp	r3, #7
 8002538:	bf94      	ite	ls
 800253a:	2301      	movls	r3, #1
 800253c:	2300      	movhi	r3, #0
 800253e:	b2db      	uxtb	r3, r3
 8002540:	657b      	str	r3, [r7, #84]	; 0x54
            b12 = mid[ ( i  ) * x_size + j + 1 ] < 8;
 8002542:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	fb02 f203 	mul.w	r2, r2, r3
 800254a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800254c:	4413      	add	r3, r2
 800254e:	3301      	adds	r3, #1
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	4413      	add	r3, r2
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b07      	cmp	r3, #7
 8002558:	bf94      	ite	ls
 800255a:	2301      	movls	r3, #1
 800255c:	2300      	movhi	r3, #0
 800255e:	b2db      	uxtb	r3, r3
 8002560:	653b      	str	r3, [r7, #80]	; 0x50
            b21 = mid[ ( i + 1 ) * x_size + j   ] < 8;
 8002562:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002564:	3301      	adds	r3, #1
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	fb02 f203 	mul.w	r2, r2, r3
 800256c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800256e:	4413      	add	r3, r2
 8002570:	461a      	mov	r2, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	4413      	add	r3, r2
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b07      	cmp	r3, #7
 800257a:	bf94      	ite	ls
 800257c:	2301      	movls	r3, #1
 800257e:	2300      	movhi	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	64fb      	str	r3, [r7, #76]	; 0x4c
            b10 = mid[ ( i  ) * x_size + j - 1 ] < 8;
 8002584:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	fb02 f203 	mul.w	r2, r2, r3
 800258c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800258e:	4413      	add	r3, r2
 8002590:	3b01      	subs	r3, #1
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	4413      	add	r3, r2
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b07      	cmp	r3, #7
 800259a:	bf94      	ite	ls
 800259c:	2301      	movls	r3, #1
 800259e:	2300      	movhi	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	64bb      	str	r3, [r7, #72]	; 0x48
                }
              }
            }
            #endif

            if ( ( ( b01 + b12 + b21 + b10 ) == 2 ) && ( ( b10 | b12 ) & ( b01 | b21 ) ) &&
 80025a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80025a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025a8:	441a      	add	r2, r3
 80025aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ac:	441a      	add	r2, r3
 80025ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025b0:	4413      	add	r3, r2
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	f040 80c0 	bne.w	8002738 <susan_thin+0xa20>
 80025b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025bc:	431a      	orrs	r2, r3
 80025be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80025c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025c2:	430b      	orrs	r3, r1
 80025c4:	4013      	ands	r3, r2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 80b6 	beq.w	8002738 <susan_thin+0xa20>
                 ( ( b01 & ( ( mid[ ( i - 2 )*x_size + j - 1 ] < 8 ) | ( mid[ ( i - 2 )*x_size + j +
 80025cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025ce:	3b02      	subs	r3, #2
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	fb02 f203 	mul.w	r2, r2, r3
 80025d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025d8:	4413      	add	r3, r2
 80025da:	3b01      	subs	r3, #1
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	4413      	add	r3, r2
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b07      	cmp	r3, #7
 80025e4:	bf94      	ite	ls
 80025e6:	2301      	movls	r3, #1
 80025e8:	2300      	movhi	r3, #0
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025ee:	3b02      	subs	r3, #2
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	fb01 f103 	mul.w	r1, r1, r3
 80025f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025f8:	440b      	add	r3, r1
 80025fa:	3301      	adds	r3, #1
 80025fc:	68b9      	ldr	r1, [r7, #8]
 80025fe:	440b      	add	r3, r1
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b07      	cmp	r3, #7
 8002604:	bf94      	ite	ls
 8002606:	2301      	movls	r3, #1
 8002608:	2300      	movhi	r3, #0
 800260a:	b2db      	uxtb	r3, r3
 800260c:	4313      	orrs	r3, r2
 800260e:	b2db      	uxtb	r3, r3
 8002610:	461a      	mov	r2, r3
 8002612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002614:	401a      	ands	r2, r3
                             1 ] < 8 ) ) ) | ( b10 & ( ( mid[ ( i - 1 )*x_size + j - 2 ] < 8 ) |
 8002616:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002618:	3b01      	subs	r3, #1
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	fb01 f103 	mul.w	r1, r1, r3
 8002620:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002622:	440b      	add	r3, r1
 8002624:	3b02      	subs	r3, #2
 8002626:	68b9      	ldr	r1, [r7, #8]
 8002628:	440b      	add	r3, r1
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b07      	cmp	r3, #7
 800262e:	bf94      	ite	ls
 8002630:	2301      	movls	r3, #1
 8002632:	2300      	movhi	r3, #0
 8002634:	b2d9      	uxtb	r1, r3
                                              ( mid[ ( i + 1 )*x_size + j - 2 ] < 8 ) ) ) |
 8002636:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002638:	3301      	adds	r3, #1
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	fb00 f003 	mul.w	r0, r0, r3
 8002640:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002642:	4403      	add	r3, r0
 8002644:	3b02      	subs	r3, #2
 8002646:	68b8      	ldr	r0, [r7, #8]
 8002648:	4403      	add	r3, r0
 800264a:	781b      	ldrb	r3, [r3, #0]
                             1 ] < 8 ) ) ) | ( b10 & ( ( mid[ ( i - 1 )*x_size + j - 2 ] < 8 ) |
 800264c:	2b07      	cmp	r3, #7
 800264e:	bf94      	ite	ls
 8002650:	2301      	movls	r3, #1
 8002652:	2300      	movhi	r3, #0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	430b      	orrs	r3, r1
 8002658:	b2db      	uxtb	r3, r3
 800265a:	4619      	mov	r1, r3
 800265c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800265e:	400b      	ands	r3, r1
 8002660:	431a      	orrs	r2, r3
                   ( b12 & ( ( mid[ ( i - 1 )*x_size + j + 2 ] < 8 ) | ( mid[ ( i + 1 )*x_size + j +
 8002662:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002664:	3b01      	subs	r3, #1
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	fb01 f103 	mul.w	r1, r1, r3
 800266c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800266e:	440b      	add	r3, r1
 8002670:	3302      	adds	r3, #2
 8002672:	68b9      	ldr	r1, [r7, #8]
 8002674:	440b      	add	r3, r1
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b07      	cmp	r3, #7
 800267a:	bf94      	ite	ls
 800267c:	2301      	movls	r3, #1
 800267e:	2300      	movhi	r3, #0
 8002680:	b2d9      	uxtb	r1, r3
 8002682:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002684:	3301      	adds	r3, #1
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	fb00 f003 	mul.w	r0, r0, r3
 800268c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800268e:	4403      	add	r3, r0
 8002690:	3302      	adds	r3, #2
 8002692:	68b8      	ldr	r0, [r7, #8]
 8002694:	4403      	add	r3, r0
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b07      	cmp	r3, #7
 800269a:	bf94      	ite	ls
 800269c:	2301      	movls	r3, #1
 800269e:	2300      	movhi	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	430b      	orrs	r3, r1
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	4619      	mov	r1, r3
 80026a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026aa:	400b      	ands	r3, r1
                                              ( mid[ ( i + 1 )*x_size + j - 2 ] < 8 ) ) ) |
 80026ac:	431a      	orrs	r2, r3
                             2 ] < 8 ) ) ) | ( b21 & ( ( mid[ ( i + 2 )*x_size + j - 1 ] < 8 ) |
 80026ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026b0:	3302      	adds	r3, #2
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	fb01 f103 	mul.w	r1, r1, r3
 80026b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026ba:	440b      	add	r3, r1
 80026bc:	3b01      	subs	r3, #1
 80026be:	68b9      	ldr	r1, [r7, #8]
 80026c0:	440b      	add	r3, r1
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b07      	cmp	r3, #7
 80026c6:	bf94      	ite	ls
 80026c8:	2301      	movls	r3, #1
 80026ca:	2300      	movhi	r3, #0
 80026cc:	b2d9      	uxtb	r1, r3
                                              ( mid[ ( i + 2 )*x_size + j + 1 ] < 8 ) ) ) ) ) {
 80026ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026d0:	3302      	adds	r3, #2
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	fb00 f003 	mul.w	r0, r0, r3
 80026d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026da:	4403      	add	r3, r0
 80026dc:	3301      	adds	r3, #1
 80026de:	68b8      	ldr	r0, [r7, #8]
 80026e0:	4403      	add	r3, r0
 80026e2:	781b      	ldrb	r3, [r3, #0]
                             2 ] < 8 ) ) ) | ( b21 & ( ( mid[ ( i + 2 )*x_size + j - 1 ] < 8 ) |
 80026e4:	2b07      	cmp	r3, #7
 80026e6:	bf94      	ite	ls
 80026e8:	2301      	movls	r3, #1
 80026ea:	2300      	movhi	r3, #0
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	430b      	orrs	r3, r1
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	4619      	mov	r1, r3
 80026f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026f6:	400b      	ands	r3, r1
 80026f8:	4313      	orrs	r3, r2
            if ( ( ( b01 + b12 + b21 + b10 ) == 2 ) && ( ( b10 | b12 ) & ( b01 | b21 ) ) &&
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d01c      	beq.n	8002738 <susan_thin+0xa20>
              /* case; clears odd right angles.
                 e.g.; O O O  becomes O O O
                       X X O          X O O
                       O X O          O X O     */
              mid[ ( i )*x_size + j ] = 100;
 80026fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	fb02 f203 	mul.w	r2, r2, r3
 8002706:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002708:	4413      	add	r3, r2
 800270a:	461a      	mov	r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	4413      	add	r3, r2
 8002710:	2264      	movs	r2, #100	; 0x64
 8002712:	701a      	strb	r2, [r3, #0]
              i--;               /* jump back */
 8002714:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002716:	3b01      	subs	r3, #1
 8002718:	67bb      	str	r3, [r7, #120]	; 0x78
              j -= 2;
 800271a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800271c:	3b02      	subs	r3, #2
 800271e:	677b      	str	r3, [r7, #116]	; 0x74
              if ( i < 4 ) i = 4;
 8002720:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002722:	2b03      	cmp	r3, #3
 8002724:	dc01      	bgt.n	800272a <susan_thin+0xa12>
 8002726:	2304      	movs	r3, #4
 8002728:	67bb      	str	r3, [r7, #120]	; 0x78
              if ( j < 4 ) j = 4;
 800272a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800272c:	2b03      	cmp	r3, #3
 800272e:	dc03      	bgt.n	8002738 <susan_thin+0xa20>
 8002730:	2304      	movs	r3, #4
 8002732:	677b      	str	r3, [r7, #116]	; 0x74
 8002734:	e000      	b.n	8002738 <susan_thin+0xa20>
            if ( ( ( float )r[ ( i + y )*x_size + j + x ] / ( float )centre ) > 0.7 ) {
 8002736:	bf00      	nop
          }
        }

        /* {{{ n>2 the thinning is done here without breaking connectivity */

        if ( n > 2 ) {
 8002738:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800273a:	2b02      	cmp	r3, #2
 800273c:	f340 80d4 	ble.w	80028e8 <susan_thin+0xbd0>
          b01 = mid[ ( i - 1 ) * x_size + j   ] < 8;
 8002740:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002742:	3b01      	subs	r3, #1
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	fb02 f203 	mul.w	r2, r2, r3
 800274a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800274c:	4413      	add	r3, r2
 800274e:	461a      	mov	r2, r3
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	4413      	add	r3, r2
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b07      	cmp	r3, #7
 8002758:	bf94      	ite	ls
 800275a:	2301      	movls	r3, #1
 800275c:	2300      	movhi	r3, #0
 800275e:	b2db      	uxtb	r3, r3
 8002760:	657b      	str	r3, [r7, #84]	; 0x54
          b12 = mid[ ( i  ) * x_size + j + 1 ] < 8;
 8002762:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	fb02 f203 	mul.w	r2, r2, r3
 800276a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800276c:	4413      	add	r3, r2
 800276e:	3301      	adds	r3, #1
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	4413      	add	r3, r2
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b07      	cmp	r3, #7
 8002778:	bf94      	ite	ls
 800277a:	2301      	movls	r3, #1
 800277c:	2300      	movhi	r3, #0
 800277e:	b2db      	uxtb	r3, r3
 8002780:	653b      	str	r3, [r7, #80]	; 0x50
          b21 = mid[ ( i + 1 ) * x_size + j   ] < 8;
 8002782:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002784:	3301      	adds	r3, #1
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	fb02 f203 	mul.w	r2, r2, r3
 800278c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800278e:	4413      	add	r3, r2
 8002790:	461a      	mov	r2, r3
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	4413      	add	r3, r2
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b07      	cmp	r3, #7
 800279a:	bf94      	ite	ls
 800279c:	2301      	movls	r3, #1
 800279e:	2300      	movhi	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	64fb      	str	r3, [r7, #76]	; 0x4c
          b10 = mid[ ( i  ) * x_size + j - 1 ] < 8;
 80027a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	fb02 f203 	mul.w	r2, r2, r3
 80027ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027ae:	4413      	add	r3, r2
 80027b0:	3b01      	subs	r3, #1
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	4413      	add	r3, r2
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b07      	cmp	r3, #7
 80027ba:	bf94      	ite	ls
 80027bc:	2301      	movls	r3, #1
 80027be:	2300      	movhi	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	64bb      	str	r3, [r7, #72]	; 0x48
          if ( ( b01 + b12 + b21 + b10 ) > 1 ) {
 80027c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80027c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027c8:	441a      	add	r2, r3
 80027ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027cc:	441a      	add	r2, r3
 80027ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027d0:	4413      	add	r3, r2
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	f340 8088 	ble.w	80028e8 <susan_thin+0xbd0>
            b00 = mid[ ( i - 1 ) * x_size + j - 1 ] < 8;
 80027d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027da:	3b01      	subs	r3, #1
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	fb02 f203 	mul.w	r2, r2, r3
 80027e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027e4:	4413      	add	r3, r2
 80027e6:	3b01      	subs	r3, #1
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	4413      	add	r3, r2
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b07      	cmp	r3, #7
 80027f0:	bf94      	ite	ls
 80027f2:	2301      	movls	r3, #1
 80027f4:	2300      	movhi	r3, #0
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	667b      	str	r3, [r7, #100]	; 0x64
            b02 = mid[ ( i - 1 ) * x_size + j + 1 ] < 8;
 80027fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027fc:	3b01      	subs	r3, #1
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	fb02 f203 	mul.w	r2, r2, r3
 8002804:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002806:	4413      	add	r3, r2
 8002808:	3301      	adds	r3, #1
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	4413      	add	r3, r2
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b07      	cmp	r3, #7
 8002812:	bf94      	ite	ls
 8002814:	2301      	movls	r3, #1
 8002816:	2300      	movhi	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	663b      	str	r3, [r7, #96]	; 0x60
            b20 = mid[ ( i + 1 ) * x_size + j - 1 ] < 8;
 800281c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800281e:	3301      	adds	r3, #1
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	fb02 f203 	mul.w	r2, r2, r3
 8002826:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002828:	4413      	add	r3, r2
 800282a:	3b01      	subs	r3, #1
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	4413      	add	r3, r2
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b07      	cmp	r3, #7
 8002834:	bf94      	ite	ls
 8002836:	2301      	movls	r3, #1
 8002838:	2300      	movhi	r3, #0
 800283a:	b2db      	uxtb	r3, r3
 800283c:	65fb      	str	r3, [r7, #92]	; 0x5c
            b22 = mid[ ( i + 1 ) * x_size + j + 1 ] < 8;
 800283e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002840:	3301      	adds	r3, #1
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	fb02 f203 	mul.w	r2, r2, r3
 8002848:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800284a:	4413      	add	r3, r2
 800284c:	3301      	adds	r3, #1
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	4413      	add	r3, r2
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b07      	cmp	r3, #7
 8002856:	bf94      	ite	ls
 8002858:	2301      	movls	r3, #1
 800285a:	2300      	movhi	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	65bb      	str	r3, [r7, #88]	; 0x58
            p1 = b00 | b01;
 8002860:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002864:	4313      	orrs	r3, r2
 8002866:	647b      	str	r3, [r7, #68]	; 0x44
            p2 = b02 | b12;
 8002868:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800286a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800286c:	4313      	orrs	r3, r2
 800286e:	643b      	str	r3, [r7, #64]	; 0x40
            p3 = b22 | b21;
 8002870:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002874:	4313      	orrs	r3, r2
 8002876:	63fb      	str	r3, [r7, #60]	; 0x3c
            p4 = b20 | b10;
 8002878:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800287a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800287c:	4313      	orrs	r3, r2
 800287e:	63bb      	str	r3, [r7, #56]	; 0x38

            if ( ( ( p1 + p2 + p3 + p4 ) - ( ( b01 & p2 ) + ( b12 & p3 ) + ( b21 & p4 ) +
 8002880:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002884:	441a      	add	r2, r3
 8002886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002888:	441a      	add	r2, r3
 800288a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800288c:	441a      	add	r2, r3
 800288e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002892:	4019      	ands	r1, r3
 8002894:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002898:	4003      	ands	r3, r0
 800289a:	4419      	add	r1, r3
 800289c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800289e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a0:	4003      	ands	r3, r0
 80028a2:	4419      	add	r1, r3
                                             ( b10 & p1 ) ) ) < 2 ) {
 80028a4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80028a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028a8:	4003      	ands	r3, r0
            if ( ( ( p1 + p2 + p3 + p4 ) - ( ( b01 & p2 ) + ( b12 & p3 ) + ( b21 & p4 ) +
 80028aa:	440b      	add	r3, r1
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	dc1a      	bgt.n	80028e8 <susan_thin+0xbd0>
              mid[ ( i )*x_size + j ] = 100;
 80028b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	fb02 f203 	mul.w	r2, r2, r3
 80028ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028bc:	4413      	add	r3, r2
 80028be:	461a      	mov	r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	4413      	add	r3, r2
 80028c4:	2264      	movs	r2, #100	; 0x64
 80028c6:	701a      	strb	r2, [r3, #0]
              i--;
 80028c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028ca:	3b01      	subs	r3, #1
 80028cc:	67bb      	str	r3, [r7, #120]	; 0x78
              j -= 2;
 80028ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028d0:	3b02      	subs	r3, #2
 80028d2:	677b      	str	r3, [r7, #116]	; 0x74
              if ( i < 4 ) i = 4;
 80028d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	dc01      	bgt.n	80028de <susan_thin+0xbc6>
 80028da:	2304      	movs	r3, #4
 80028dc:	67bb      	str	r3, [r7, #120]	; 0x78
              if ( j < 4 ) j = 4;
 80028de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028e0:	2b03      	cmp	r3, #3
 80028e2:	dc01      	bgt.n	80028e8 <susan_thin+0xbd0>
 80028e4:	2304      	movs	r3, #4
 80028e6:	677b      	str	r3, [r7, #116]	; 0x74
    for ( j = 4; j < x_size - 4; j++ ) {
 80028e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028ea:	3301      	adds	r3, #1
 80028ec:	677b      	str	r3, [r7, #116]	; 0x74
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	3b04      	subs	r3, #4
 80028f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80028f4:	429a      	cmp	r2, r3
 80028f6:	f6ff aa1e 	blt.w	8001d36 <susan_thin+0x1e>
  for ( i = 4; i < y_size - 4; i++ ) {
 80028fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028fc:	3301      	adds	r3, #1
 80028fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	3b04      	subs	r3, #4
 8002904:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002906:	429a      	cmp	r2, r3
 8002908:	f6ff aa11 	blt.w	8001d2e <susan_thin+0x16>
          }
        }
      }
    }
  }
}
 800290c:	bf00      	nop
 800290e:	bf00      	nop
 8002910:	3790      	adds	r7, #144	; 0x90
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	66666666 	.word	0x66666666
 800291c:	3fe66666 	.word	0x3fe66666

08002920 <susan_edges>:



void susan_edges( uchar *in, char *r, uchar *mid, uchar *bp,
                  int max_no, int x_size, int y_size )
{
 8002920:	b5b0      	push	{r4, r5, r7, lr}
 8002922:	b092      	sub	sp, #72	; 0x48
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
 800292c:	603b      	str	r3, [r7, #0]
  float z;
  int   do_symmetry, i, j, m, n, a, b, x, y, w;
  uchar c, *p, *cp;

  susan_wccmemset( r, 0, x_size * y_size );
 800292e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002930:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002932:	fb02 f303 	mul.w	r3, r2, r3
 8002936:	461a      	mov	r2, r3
 8002938:	2100      	movs	r1, #0
 800293a:	68b8      	ldr	r0, [r7, #8]
 800293c:	f004 fdba 	bl	80074b4 <susan_wccmemset>

  _Pragma( "loopbound min 89 max 89" )
  for ( i = 3; i < y_size - 3; i++ ) {
 8002940:	2303      	movs	r3, #3
 8002942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002944:	e1ff      	b.n	8002d46 <susan_edges+0x426>
    _Pragma( "loopbound min 70 max 70" )
    for ( j = 3; j < x_size - 3; j++ ) {
 8002946:	2303      	movs	r3, #3
 8002948:	63bb      	str	r3, [r7, #56]	; 0x38
 800294a:	e1f3      	b.n	8002d34 <susan_edges+0x414>
      n = 100;
 800294c:	2364      	movs	r3, #100	; 0x64
 800294e:	627b      	str	r3, [r7, #36]	; 0x24
      p = in + ( i - 3 ) * x_size + j - 1;
 8002950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002952:	3b03      	subs	r3, #3
 8002954:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002956:	fb02 f303 	mul.w	r3, r2, r3
 800295a:	461a      	mov	r2, r3
 800295c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295e:	4413      	add	r3, r2
 8002960:	3b01      	subs	r3, #1
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	4413      	add	r3, r2
 8002966:	61fb      	str	r3, [r7, #28]
      cp = bp + in[ i * x_size + j ];
 8002968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800296a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800296c:	fb02 f203 	mul.w	r2, r2, r3
 8002970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002972:	4413      	add	r3, r2
 8002974:	461a      	mov	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	4413      	add	r3, r2
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	461a      	mov	r2, r3
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	4413      	add	r3, r2
 8002982:	623b      	str	r3, [r7, #32]

      n += *( cp - *p++ );
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	1c5a      	adds	r2, r3, #1
 8002988:	61fa      	str	r2, [r7, #28]
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	425b      	negs	r3, r3
 800298e:	6a3a      	ldr	r2, [r7, #32]
 8002990:	4413      	add	r3, r2
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	461a      	mov	r2, r3
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	4413      	add	r3, r2
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
      n += *( cp - *p++ );
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	1c5a      	adds	r2, r3, #1
 80029a0:	61fa      	str	r2, [r7, #28]
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	425b      	negs	r3, r3
 80029a6:	6a3a      	ldr	r2, [r7, #32]
 80029a8:	4413      	add	r3, r2
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	461a      	mov	r2, r3
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	4413      	add	r3, r2
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24
      n += *( cp - *p );
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	425b      	negs	r3, r3
 80029ba:	6a3a      	ldr	r2, [r7, #32]
 80029bc:	4413      	add	r3, r2
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	461a      	mov	r2, r3
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	4413      	add	r3, r2
 80029c6:	627b      	str	r3, [r7, #36]	; 0x24
      p += x_size - 3;
 80029c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029ca:	3b03      	subs	r3, #3
 80029cc:	69fa      	ldr	r2, [r7, #28]
 80029ce:	4413      	add	r3, r2
 80029d0:	61fb      	str	r3, [r7, #28]

      n += *( cp - *p++ );
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	1c5a      	adds	r2, r3, #1
 80029d6:	61fa      	str	r2, [r7, #28]
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	425b      	negs	r3, r3
 80029dc:	6a3a      	ldr	r2, [r7, #32]
 80029de:	4413      	add	r3, r2
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	461a      	mov	r2, r3
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	4413      	add	r3, r2
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
      n += *( cp - *p++ );
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	61fa      	str	r2, [r7, #28]
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	425b      	negs	r3, r3
 80029f4:	6a3a      	ldr	r2, [r7, #32]
 80029f6:	4413      	add	r3, r2
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	461a      	mov	r2, r3
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	4413      	add	r3, r2
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
      n += *( cp - *p++ );
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	1c5a      	adds	r2, r3, #1
 8002a06:	61fa      	str	r2, [r7, #28]
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	425b      	negs	r3, r3
 8002a0c:	6a3a      	ldr	r2, [r7, #32]
 8002a0e:	4413      	add	r3, r2
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	461a      	mov	r2, r3
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	4413      	add	r3, r2
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
      n += *( cp - *p++ );
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	1c5a      	adds	r2, r3, #1
 8002a1e:	61fa      	str	r2, [r7, #28]
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	425b      	negs	r3, r3
 8002a24:	6a3a      	ldr	r2, [r7, #32]
 8002a26:	4413      	add	r3, r2
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	4413      	add	r3, r2
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
      n += *( cp - *p );
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	425b      	negs	r3, r3
 8002a38:	6a3a      	ldr	r2, [r7, #32]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	4413      	add	r3, r2
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
      p += x_size - 5;
 8002a46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a48:	3b05      	subs	r3, #5
 8002a4a:	69fa      	ldr	r2, [r7, #28]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	61fb      	str	r3, [r7, #28]

      n += *( cp - *p++ );
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	61fa      	str	r2, [r7, #28]
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	425b      	negs	r3, r3
 8002a5a:	6a3a      	ldr	r2, [r7, #32]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	4413      	add	r3, r2
 8002a66:	627b      	str	r3, [r7, #36]	; 0x24
      n += *( cp - *p++ );
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	1c5a      	adds	r2, r3, #1
 8002a6c:	61fa      	str	r2, [r7, #28]
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	425b      	negs	r3, r3
 8002a72:	6a3a      	ldr	r2, [r7, #32]
 8002a74:	4413      	add	r3, r2
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	461a      	mov	r2, r3
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	4413      	add	r3, r2
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24
      n += *( cp - *p++ );
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	1c5a      	adds	r2, r3, #1
 8002a84:	61fa      	str	r2, [r7, #28]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	425b      	negs	r3, r3
 8002a8a:	6a3a      	ldr	r2, [r7, #32]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	461a      	mov	r2, r3
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	4413      	add	r3, r2
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
      n += *( cp - *p++ );
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	1c5a      	adds	r2, r3, #1
 8002a9c:	61fa      	str	r2, [r7, #28]
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	425b      	negs	r3, r3
 8002aa2:	6a3a      	ldr	r2, [r7, #32]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	4413      	add	r3, r2
 8002aae:	627b      	str	r3, [r7, #36]	; 0x24
      n += *( cp - *p++ );
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	1c5a      	adds	r2, r3, #1
 8002ab4:	61fa      	str	r2, [r7, #28]
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	425b      	negs	r3, r3
 8002aba:	6a3a      	ldr	r2, [r7, #32]
 8002abc:	4413      	add	r3, r2
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	4413      	add	r3, r2
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
      n += *( cp - *p++ );
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	1c5a      	adds	r2, r3, #1
 8002acc:	61fa      	str	r2, [r7, #28]
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	425b      	negs	r3, r3
 8002ad2:	6a3a      	ldr	r2, [r7, #32]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	4413      	add	r3, r2
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
      n += *( cp - *p );
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	425b      	negs	r3, r3
 8002ae6:	6a3a      	ldr	r2, [r7, #32]
 8002ae8:	4413      	add	r3, r2
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	4413      	add	r3, r2
 8002af2:	627b      	str	r3, [r7, #36]	; 0x24
      p += x_size - 6;
 8002af4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002af6:	3b06      	subs	r3, #6
 8002af8:	69fa      	ldr	r2, [r7, #28]
 8002afa:	4413      	add	r3, r2
 8002afc:	61fb      	str	r3, [r7, #28]

      n += *( cp - *p++ );
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	61fa      	str	r2, [r7, #28]
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	425b      	negs	r3, r3
 8002b08:	6a3a      	ldr	r2, [r7, #32]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	4413      	add	r3, r2
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24
      n += *( cp - *p++ );
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	1c5a      	adds	r2, r3, #1
 8002b1a:	61fa      	str	r2, [r7, #28]
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	425b      	negs	r3, r3
 8002b20:	6a3a      	ldr	r2, [r7, #32]
 8002b22:	4413      	add	r3, r2
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	461a      	mov	r2, r3
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	4413      	add	r3, r2
 8002b2c:	627b      	str	r3, [r7, #36]	; 0x24
      n += *( cp - *p );
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	425b      	negs	r3, r3
 8002b34:	6a3a      	ldr	r2, [r7, #32]
 8002b36:	4413      	add	r3, r2
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	4413      	add	r3, r2
 8002b40:	627b      	str	r3, [r7, #36]	; 0x24
      p += 2;
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	3302      	adds	r3, #2
 8002b46:	61fb      	str	r3, [r7, #28]
      n += *( cp - *p++ );
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	61fa      	str	r2, [r7, #28]
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	425b      	negs	r3, r3
 8002b52:	6a3a      	ldr	r2, [r7, #32]
 8002b54:	4413      	add	r3, r2
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	4413      	add	r3, r2
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
      n += *( cp - *p++ );
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	1c5a      	adds	r2, r3, #1
 8002b64:	61fa      	str	r2, [r7, #28]
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	425b      	negs	r3, r3
 8002b6a:	6a3a      	ldr	r2, [r7, #32]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	461a      	mov	r2, r3
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	4413      	add	r3, r2
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24
      n += *( cp - *p );
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	425b      	negs	r3, r3
 8002b7e:	6a3a      	ldr	r2, [r7, #32]
 8002b80:	4413      	add	r3, r2
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	461a      	mov	r2, r3
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	4413      	add	r3, r2
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
      p += x_size - 6;
 8002b8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b8e:	3b06      	subs	r3, #6
 8002b90:	69fa      	ldr	r2, [r7, #28]
 8002b92:	4413      	add	r3, r2
 8002b94:	61fb      	str	r3, [r7, #28]

      n += *( cp - *p++ );
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	1c5a      	adds	r2, r3, #1
 8002b9a:	61fa      	str	r2, [r7, #28]
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	425b      	negs	r3, r3
 8002ba0:	6a3a      	ldr	r2, [r7, #32]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	4413      	add	r3, r2
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
      n += *( cp - *p++ );
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	61fa      	str	r2, [r7, #28]
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	425b      	negs	r3, r3
 8002bb8:	6a3a      	ldr	r2, [r7, #32]
 8002bba:	4413      	add	r3, r2
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	4413      	add	r3, r2
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
      n += *( cp - *p++ );
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	1c5a      	adds	r2, r3, #1
 8002bca:	61fa      	str	r2, [r7, #28]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	425b      	negs	r3, r3
 8002bd0:	6a3a      	ldr	r2, [r7, #32]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	4413      	add	r3, r2
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
      n += *( cp - *p++ );
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	61fa      	str	r2, [r7, #28]
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	425b      	negs	r3, r3
 8002be8:	6a3a      	ldr	r2, [r7, #32]
 8002bea:	4413      	add	r3, r2
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	4413      	add	r3, r2
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
      n += *( cp - *p++ );
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	61fa      	str	r2, [r7, #28]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	425b      	negs	r3, r3
 8002c00:	6a3a      	ldr	r2, [r7, #32]
 8002c02:	4413      	add	r3, r2
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0a:	4413      	add	r3, r2
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
      n += *( cp - *p++ );
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	61fa      	str	r2, [r7, #28]
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	425b      	negs	r3, r3
 8002c18:	6a3a      	ldr	r2, [r7, #32]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	4413      	add	r3, r2
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24
      n += *( cp - *p );
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	425b      	negs	r3, r3
 8002c2c:	6a3a      	ldr	r2, [r7, #32]
 8002c2e:	4413      	add	r3, r2
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	461a      	mov	r2, r3
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	4413      	add	r3, r2
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
      p += x_size - 5;
 8002c3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c3c:	3b05      	subs	r3, #5
 8002c3e:	69fa      	ldr	r2, [r7, #28]
 8002c40:	4413      	add	r3, r2
 8002c42:	61fb      	str	r3, [r7, #28]

      n += *( cp - *p++ );
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	61fa      	str	r2, [r7, #28]
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	425b      	negs	r3, r3
 8002c4e:	6a3a      	ldr	r2, [r7, #32]
 8002c50:	4413      	add	r3, r2
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	461a      	mov	r2, r3
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	4413      	add	r3, r2
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
      n += *( cp - *p++ );
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	61fa      	str	r2, [r7, #28]
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	425b      	negs	r3, r3
 8002c66:	6a3a      	ldr	r2, [r7, #32]
 8002c68:	4413      	add	r3, r2
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	4413      	add	r3, r2
 8002c72:	627b      	str	r3, [r7, #36]	; 0x24
      n += *( cp - *p++ );
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	61fa      	str	r2, [r7, #28]
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	425b      	negs	r3, r3
 8002c7e:	6a3a      	ldr	r2, [r7, #32]
 8002c80:	4413      	add	r3, r2
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	461a      	mov	r2, r3
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	4413      	add	r3, r2
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
      n += *( cp - *p++ );
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	1c5a      	adds	r2, r3, #1
 8002c90:	61fa      	str	r2, [r7, #28]
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	425b      	negs	r3, r3
 8002c96:	6a3a      	ldr	r2, [r7, #32]
 8002c98:	4413      	add	r3, r2
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	4413      	add	r3, r2
 8002ca2:	627b      	str	r3, [r7, #36]	; 0x24
      n += *( cp - *p );
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	425b      	negs	r3, r3
 8002caa:	6a3a      	ldr	r2, [r7, #32]
 8002cac:	4413      	add	r3, r2
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	4413      	add	r3, r2
 8002cb6:	627b      	str	r3, [r7, #36]	; 0x24
      p += x_size - 3;
 8002cb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cba:	3b03      	subs	r3, #3
 8002cbc:	69fa      	ldr	r2, [r7, #28]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	61fb      	str	r3, [r7, #28]

      n += *( cp - *p++ );
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	1c5a      	adds	r2, r3, #1
 8002cc6:	61fa      	str	r2, [r7, #28]
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	425b      	negs	r3, r3
 8002ccc:	6a3a      	ldr	r2, [r7, #32]
 8002cce:	4413      	add	r3, r2
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd6:	4413      	add	r3, r2
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
      n += *( cp - *p++ );
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	61fa      	str	r2, [r7, #28]
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	425b      	negs	r3, r3
 8002ce4:	6a3a      	ldr	r2, [r7, #32]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	461a      	mov	r2, r3
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	4413      	add	r3, r2
 8002cf0:	627b      	str	r3, [r7, #36]	; 0x24
      n += *( cp - *p );
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	425b      	negs	r3, r3
 8002cf8:	6a3a      	ldr	r2, [r7, #32]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	4413      	add	r3, r2
 8002d04:	627b      	str	r3, [r7, #36]	; 0x24

      if ( n <= max_no )
 8002d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	dc0f      	bgt.n	8002d2e <susan_edges+0x40e>
        r[ i * x_size + j ] = max_no - n;
 8002d0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d10:	b2d9      	uxtb	r1, r3
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d18:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002d1a:	fb00 f003 	mul.w	r0, r0, r3
 8002d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d20:	4403      	add	r3, r0
 8002d22:	4618      	mov	r0, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	4403      	add	r3, r0
 8002d28:	1a8a      	subs	r2, r1, r2
 8002d2a:	b2d2      	uxtb	r2, r2
 8002d2c:	701a      	strb	r2, [r3, #0]
    for ( j = 3; j < x_size - 3; j++ ) {
 8002d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d30:	3301      	adds	r3, #1
 8002d32:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d36:	3b03      	subs	r3, #3
 8002d38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	f6ff ae06 	blt.w	800294c <susan_edges+0x2c>
  for ( i = 3; i < y_size - 3; i++ ) {
 8002d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d42:	3301      	adds	r3, #1
 8002d44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d48:	3b03      	subs	r3, #3
 8002d4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	f6ff adfa 	blt.w	8002946 <susan_edges+0x26>
    }
  }

  _Pragma( "loopbound min 87 max 87" )
  for ( i = 4; i < y_size - 4; i++ ) {
 8002d52:	2304      	movs	r3, #4
 8002d54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d56:	f000 bf5a 	b.w	8003c0e <susan_edges+0x12ee>
    _Pragma( "loopbound min 68 max 68" )
    for ( j = 4; j < x_size - 4; j++ ) {
 8002d5a:	2304      	movs	r3, #4
 8002d5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d5e:	f000 bf4d 	b.w	8003bfc <susan_edges+0x12dc>
      if ( r[ i * x_size + j ] > 0 ) {
 8002d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d66:	fb02 f203 	mul.w	r2, r2, r3
 8002d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d6c:	4413      	add	r3, r2
 8002d6e:	461a      	mov	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	4413      	add	r3, r2
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 873d 	beq.w	8003bf6 <susan_edges+0x12d6>
        m = r[ i * x_size + j ];
 8002d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d7e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d80:	fb02 f203 	mul.w	r2, r2, r3
 8002d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d86:	4413      	add	r3, r2
 8002d88:	461a      	mov	r2, r3
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	62bb      	str	r3, [r7, #40]	; 0x28
        n = max_no - m;
 8002d92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
        cp = bp + in[ i * x_size + j ];
 8002d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d9e:	fb02 f203 	mul.w	r2, r2, r3
 8002da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da4:	4413      	add	r3, r2
 8002da6:	461a      	mov	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4413      	add	r3, r2
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	4413      	add	r3, r2
 8002db4:	623b      	str	r3, [r7, #32]

        if ( n > 600 ) {
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002dbc:	f340 836e 	ble.w	800349c <susan_edges+0xb7c>
          p = in + ( i - 3 ) * x_size + j - 1;
 8002dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc2:	3b03      	subs	r3, #3
 8002dc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002dc6:	fb02 f303 	mul.w	r3, r2, r3
 8002dca:	461a      	mov	r2, r3
 8002dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dce:	4413      	add	r3, r2
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	61fb      	str	r3, [r7, #28]
          x = 0;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	61bb      	str	r3, [r7, #24]
          y = 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]

          c = *( cp - *p++ );
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	1c5a      	adds	r2, r3, #1
 8002de4:	61fa      	str	r2, [r7, #28]
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	425b      	negs	r3, r3
 8002dea:	6a3a      	ldr	r2, [r7, #32]
 8002dec:	4413      	add	r3, r2
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	74fb      	strb	r3, [r7, #19]
          x -= c;
 8002df2:	7cfb      	ldrb	r3, [r7, #19]
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	61bb      	str	r3, [r7, #24]
          y -= 3 * c;
 8002dfa:	7cfb      	ldrb	r3, [r7, #19]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	4413      	add	r3, r2
 8002e06:	617b      	str	r3, [r7, #20]
          c = *( cp - *p++ );
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	61fa      	str	r2, [r7, #28]
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	425b      	negs	r3, r3
 8002e12:	6a3a      	ldr	r2, [r7, #32]
 8002e14:	4413      	add	r3, r2
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	74fb      	strb	r3, [r7, #19]
          y -= 3 * c;
 8002e1a:	7cfb      	ldrb	r3, [r7, #19]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	4413      	add	r3, r2
 8002e26:	617b      	str	r3, [r7, #20]
          c = *( cp - *p );
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	425b      	negs	r3, r3
 8002e2e:	6a3a      	ldr	r2, [r7, #32]
 8002e30:	4413      	add	r3, r2
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	74fb      	strb	r3, [r7, #19]
          x += c;
 8002e36:	7cfb      	ldrb	r3, [r7, #19]
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
          y -= 3 * c;
 8002e3e:	7cfb      	ldrb	r3, [r7, #19]
 8002e40:	461a      	mov	r2, r3
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	4413      	add	r3, r2
 8002e4a:	617b      	str	r3, [r7, #20]
          p += x_size - 3;
 8002e4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e4e:	3b03      	subs	r3, #3
 8002e50:	69fa      	ldr	r2, [r7, #28]
 8002e52:	4413      	add	r3, r2
 8002e54:	61fb      	str	r3, [r7, #28]

          c = *( cp - *p++ );
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	61fa      	str	r2, [r7, #28]
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	425b      	negs	r3, r3
 8002e60:	6a3a      	ldr	r2, [r7, #32]
 8002e62:	4413      	add	r3, r2
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	74fb      	strb	r3, [r7, #19]
          x -= 2 * c;
 8002e68:	7cfb      	ldrb	r3, [r7, #19]
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	61bb      	str	r3, [r7, #24]
          y -= 2 * c;
 8002e72:	7cfb      	ldrb	r3, [r7, #19]
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	617b      	str	r3, [r7, #20]
          c = *( cp - *p++ );
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	61fa      	str	r2, [r7, #28]
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	425b      	negs	r3, r3
 8002e86:	6a3a      	ldr	r2, [r7, #32]
 8002e88:	4413      	add	r3, r2
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	74fb      	strb	r3, [r7, #19]
          x -= c;
 8002e8e:	7cfb      	ldrb	r3, [r7, #19]
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	61bb      	str	r3, [r7, #24]
          y -= 2 * c;
 8002e96:	7cfb      	ldrb	r3, [r7, #19]
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	617b      	str	r3, [r7, #20]
          c = *( cp - *p++ );
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	1c5a      	adds	r2, r3, #1
 8002ea4:	61fa      	str	r2, [r7, #28]
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	425b      	negs	r3, r3
 8002eaa:	6a3a      	ldr	r2, [r7, #32]
 8002eac:	4413      	add	r3, r2
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	74fb      	strb	r3, [r7, #19]
          y -= 2 * c;
 8002eb2:	7cfb      	ldrb	r3, [r7, #19]
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	617b      	str	r3, [r7, #20]
          c = *( cp - *p++ );
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	1c5a      	adds	r2, r3, #1
 8002ec0:	61fa      	str	r2, [r7, #28]
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	425b      	negs	r3, r3
 8002ec6:	6a3a      	ldr	r2, [r7, #32]
 8002ec8:	4413      	add	r3, r2
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	74fb      	strb	r3, [r7, #19]
          x += c;
 8002ece:	7cfb      	ldrb	r3, [r7, #19]
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
          y -= 2 * c;
 8002ed6:	7cfb      	ldrb	r3, [r7, #19]
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	617b      	str	r3, [r7, #20]
          c = *( cp - *p );
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	425b      	negs	r3, r3
 8002ee6:	6a3a      	ldr	r2, [r7, #32]
 8002ee8:	4413      	add	r3, r2
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	74fb      	strb	r3, [r7, #19]
          x += 2 * c;
 8002eee:	7cfb      	ldrb	r3, [r7, #19]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
          y -= 2 * c;
 8002ef8:	7cfb      	ldrb	r3, [r7, #19]
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	617b      	str	r3, [r7, #20]
          p += x_size - 5;
 8002f02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f04:	3b05      	subs	r3, #5
 8002f06:	69fa      	ldr	r2, [r7, #28]
 8002f08:	4413      	add	r3, r2
 8002f0a:	61fb      	str	r3, [r7, #28]

          c = *( cp - *p++ );
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	61fa      	str	r2, [r7, #28]
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	425b      	negs	r3, r3
 8002f16:	6a3a      	ldr	r2, [r7, #32]
 8002f18:	4413      	add	r3, r2
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	74fb      	strb	r3, [r7, #19]
          x -= 3 * c;
 8002f1e:	7cfb      	ldrb	r3, [r7, #19]
 8002f20:	461a      	mov	r2, r3
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4413      	add	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
          y -= c;
 8002f2c:	7cfb      	ldrb	r3, [r7, #19]
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	617b      	str	r3, [r7, #20]
          c = *( cp - *p++ );
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	1c5a      	adds	r2, r3, #1
 8002f38:	61fa      	str	r2, [r7, #28]
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	425b      	negs	r3, r3
 8002f3e:	6a3a      	ldr	r2, [r7, #32]
 8002f40:	4413      	add	r3, r2
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	74fb      	strb	r3, [r7, #19]
          x -= 2 * c;
 8002f46:	7cfb      	ldrb	r3, [r7, #19]
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	61bb      	str	r3, [r7, #24]
          y -= c;
 8002f50:	7cfb      	ldrb	r3, [r7, #19]
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	617b      	str	r3, [r7, #20]
          c = *( cp - *p++ );
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	1c5a      	adds	r2, r3, #1
 8002f5c:	61fa      	str	r2, [r7, #28]
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	425b      	negs	r3, r3
 8002f62:	6a3a      	ldr	r2, [r7, #32]
 8002f64:	4413      	add	r3, r2
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	74fb      	strb	r3, [r7, #19]
          x -= c;
 8002f6a:	7cfb      	ldrb	r3, [r7, #19]
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	61bb      	str	r3, [r7, #24]
          y -= c;
 8002f72:	7cfb      	ldrb	r3, [r7, #19]
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	617b      	str	r3, [r7, #20]
          c = *( cp - *p++ );
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	61fa      	str	r2, [r7, #28]
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	425b      	negs	r3, r3
 8002f84:	6a3a      	ldr	r2, [r7, #32]
 8002f86:	4413      	add	r3, r2
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	74fb      	strb	r3, [r7, #19]
          y -= c;
 8002f8c:	7cfb      	ldrb	r3, [r7, #19]
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	617b      	str	r3, [r7, #20]
          c = *( cp - *p++ );
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	1c5a      	adds	r2, r3, #1
 8002f98:	61fa      	str	r2, [r7, #28]
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	425b      	negs	r3, r3
 8002f9e:	6a3a      	ldr	r2, [r7, #32]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	74fb      	strb	r3, [r7, #19]
          x += c;
 8002fa6:	7cfb      	ldrb	r3, [r7, #19]
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4413      	add	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
          y -= c;
 8002fae:	7cfb      	ldrb	r3, [r7, #19]
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	617b      	str	r3, [r7, #20]
          c = *( cp - *p++ );
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	61fa      	str	r2, [r7, #28]
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	425b      	negs	r3, r3
 8002fc0:	6a3a      	ldr	r2, [r7, #32]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	74fb      	strb	r3, [r7, #19]
          x += 2 * c;
 8002fc8:	7cfb      	ldrb	r3, [r7, #19]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4413      	add	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
          y -= c;
 8002fd2:	7cfb      	ldrb	r3, [r7, #19]
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	617b      	str	r3, [r7, #20]
          c = *( cp - *p );
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	425b      	negs	r3, r3
 8002fe0:	6a3a      	ldr	r2, [r7, #32]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	74fb      	strb	r3, [r7, #19]
          x += 3 * c;
 8002fe8:	7cfa      	ldrb	r2, [r7, #19]
 8002fea:	4613      	mov	r3, r2
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	4413      	add	r3, r2
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
          y -= c;
 8002ff6:	7cfb      	ldrb	r3, [r7, #19]
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	617b      	str	r3, [r7, #20]
          p += x_size - 6;
 8002ffe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003000:	3b06      	subs	r3, #6
 8003002:	69fa      	ldr	r2, [r7, #28]
 8003004:	4413      	add	r3, r2
 8003006:	61fb      	str	r3, [r7, #28]

          c = *( cp - *p++ );
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	61fa      	str	r2, [r7, #28]
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	425b      	negs	r3, r3
 8003012:	6a3a      	ldr	r2, [r7, #32]
 8003014:	4413      	add	r3, r2
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	74fb      	strb	r3, [r7, #19]
          x -= 3 * c;
 800301a:	7cfb      	ldrb	r3, [r7, #19]
 800301c:	461a      	mov	r2, r3
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4413      	add	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
          c = *( cp - *p++ );
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	61fa      	str	r2, [r7, #28]
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	425b      	negs	r3, r3
 8003032:	6a3a      	ldr	r2, [r7, #32]
 8003034:	4413      	add	r3, r2
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	74fb      	strb	r3, [r7, #19]
          x -= 2 * c;
 800303a:	7cfb      	ldrb	r3, [r7, #19]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	61bb      	str	r3, [r7, #24]
          c = *( cp - *p );
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	425b      	negs	r3, r3
 800304a:	6a3a      	ldr	r2, [r7, #32]
 800304c:	4413      	add	r3, r2
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	74fb      	strb	r3, [r7, #19]
          x -= c;
 8003052:	7cfb      	ldrb	r3, [r7, #19]
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	61bb      	str	r3, [r7, #24]
          p += 2;
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	3302      	adds	r3, #2
 800305e:	61fb      	str	r3, [r7, #28]
          c = *( cp - *p++ );
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	61fa      	str	r2, [r7, #28]
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	425b      	negs	r3, r3
 800306a:	6a3a      	ldr	r2, [r7, #32]
 800306c:	4413      	add	r3, r2
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	74fb      	strb	r3, [r7, #19]
          x += c;
 8003072:	7cfb      	ldrb	r3, [r7, #19]
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4413      	add	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
          c = *( cp - *p++ );
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	1c5a      	adds	r2, r3, #1
 800307e:	61fa      	str	r2, [r7, #28]
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	425b      	negs	r3, r3
 8003084:	6a3a      	ldr	r2, [r7, #32]
 8003086:	4413      	add	r3, r2
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	74fb      	strb	r3, [r7, #19]
          x += 2 * c;
 800308c:	7cfb      	ldrb	r3, [r7, #19]
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4413      	add	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
          c = *( cp - *p );
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	425b      	negs	r3, r3
 800309c:	6a3a      	ldr	r2, [r7, #32]
 800309e:	4413      	add	r3, r2
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	74fb      	strb	r3, [r7, #19]
          x += 3 * c;
 80030a4:	7cfa      	ldrb	r2, [r7, #19]
 80030a6:	4613      	mov	r3, r2
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	4413      	add	r3, r2
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4413      	add	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
          p += x_size - 6;
 80030b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030b4:	3b06      	subs	r3, #6
 80030b6:	69fa      	ldr	r2, [r7, #28]
 80030b8:	4413      	add	r3, r2
 80030ba:	61fb      	str	r3, [r7, #28]

          c = *( cp - *p++ );
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	1c5a      	adds	r2, r3, #1
 80030c0:	61fa      	str	r2, [r7, #28]
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	425b      	negs	r3, r3
 80030c6:	6a3a      	ldr	r2, [r7, #32]
 80030c8:	4413      	add	r3, r2
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	74fb      	strb	r3, [r7, #19]
          x -= 3 * c;
 80030ce:	7cfb      	ldrb	r3, [r7, #19]
 80030d0:	461a      	mov	r2, r3
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	4413      	add	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
          y += c;
 80030dc:	7cfb      	ldrb	r3, [r7, #19]
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	4413      	add	r3, r2
 80030e2:	617b      	str	r3, [r7, #20]
          c = *( cp - *p++ );
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	61fa      	str	r2, [r7, #28]
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	425b      	negs	r3, r3
 80030ee:	6a3a      	ldr	r2, [r7, #32]
 80030f0:	4413      	add	r3, r2
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	74fb      	strb	r3, [r7, #19]
          x -= 2 * c;
 80030f6:	7cfb      	ldrb	r3, [r7, #19]
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	61bb      	str	r3, [r7, #24]
          y += c;
 8003100:	7cfb      	ldrb	r3, [r7, #19]
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	4413      	add	r3, r2
 8003106:	617b      	str	r3, [r7, #20]
          c = *( cp - *p++ );
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	61fa      	str	r2, [r7, #28]
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	425b      	negs	r3, r3
 8003112:	6a3a      	ldr	r2, [r7, #32]
 8003114:	4413      	add	r3, r2
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	74fb      	strb	r3, [r7, #19]
          x -= c;
 800311a:	7cfb      	ldrb	r3, [r7, #19]
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	61bb      	str	r3, [r7, #24]
          y += c;
 8003122:	7cfb      	ldrb	r3, [r7, #19]
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	4413      	add	r3, r2
 8003128:	617b      	str	r3, [r7, #20]
          c = *( cp - *p++ );
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	61fa      	str	r2, [r7, #28]
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	425b      	negs	r3, r3
 8003134:	6a3a      	ldr	r2, [r7, #32]
 8003136:	4413      	add	r3, r2
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	74fb      	strb	r3, [r7, #19]
          y += c;
 800313c:	7cfb      	ldrb	r3, [r7, #19]
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	4413      	add	r3, r2
 8003142:	617b      	str	r3, [r7, #20]
          c = *( cp - *p++ );
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	1c5a      	adds	r2, r3, #1
 8003148:	61fa      	str	r2, [r7, #28]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	425b      	negs	r3, r3
 800314e:	6a3a      	ldr	r2, [r7, #32]
 8003150:	4413      	add	r3, r2
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	74fb      	strb	r3, [r7, #19]
          x += c;
 8003156:	7cfb      	ldrb	r3, [r7, #19]
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4413      	add	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
          y += c;
 800315e:	7cfb      	ldrb	r3, [r7, #19]
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	4413      	add	r3, r2
 8003164:	617b      	str	r3, [r7, #20]
          c = *( cp - *p++ );
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	61fa      	str	r2, [r7, #28]
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	425b      	negs	r3, r3
 8003170:	6a3a      	ldr	r2, [r7, #32]
 8003172:	4413      	add	r3, r2
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	74fb      	strb	r3, [r7, #19]
          x += 2 * c;
 8003178:	7cfb      	ldrb	r3, [r7, #19]
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4413      	add	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
          y += c;
 8003182:	7cfb      	ldrb	r3, [r7, #19]
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	4413      	add	r3, r2
 8003188:	617b      	str	r3, [r7, #20]
          c = *( cp - *p );
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	425b      	negs	r3, r3
 8003190:	6a3a      	ldr	r2, [r7, #32]
 8003192:	4413      	add	r3, r2
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	74fb      	strb	r3, [r7, #19]
          x += 3 * c;
 8003198:	7cfa      	ldrb	r2, [r7, #19]
 800319a:	4613      	mov	r3, r2
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	4413      	add	r3, r2
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4413      	add	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
          y += c;
 80031a6:	7cfb      	ldrb	r3, [r7, #19]
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	4413      	add	r3, r2
 80031ac:	617b      	str	r3, [r7, #20]
          p += x_size - 5;
 80031ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031b0:	3b05      	subs	r3, #5
 80031b2:	69fa      	ldr	r2, [r7, #28]
 80031b4:	4413      	add	r3, r2
 80031b6:	61fb      	str	r3, [r7, #28]

          c = *( cp - *p++ );
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	1c5a      	adds	r2, r3, #1
 80031bc:	61fa      	str	r2, [r7, #28]
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	425b      	negs	r3, r3
 80031c2:	6a3a      	ldr	r2, [r7, #32]
 80031c4:	4413      	add	r3, r2
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	74fb      	strb	r3, [r7, #19]
          x -= 2 * c;
 80031ca:	7cfb      	ldrb	r3, [r7, #19]
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	61bb      	str	r3, [r7, #24]
          y += 2 * c;
 80031d4:	7cfb      	ldrb	r3, [r7, #19]
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	4413      	add	r3, r2
 80031dc:	617b      	str	r3, [r7, #20]
          c = *( cp - *p++ );
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	61fa      	str	r2, [r7, #28]
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	425b      	negs	r3, r3
 80031e8:	6a3a      	ldr	r2, [r7, #32]
 80031ea:	4413      	add	r3, r2
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	74fb      	strb	r3, [r7, #19]
          x -= c;
 80031f0:	7cfb      	ldrb	r3, [r7, #19]
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	61bb      	str	r3, [r7, #24]
          y += 2 * c;
 80031f8:	7cfb      	ldrb	r3, [r7, #19]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	4413      	add	r3, r2
 8003200:	617b      	str	r3, [r7, #20]
          c = *( cp - *p++ );
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	61fa      	str	r2, [r7, #28]
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	425b      	negs	r3, r3
 800320c:	6a3a      	ldr	r2, [r7, #32]
 800320e:	4413      	add	r3, r2
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	74fb      	strb	r3, [r7, #19]
          y += 2 * c;
 8003214:	7cfb      	ldrb	r3, [r7, #19]
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	4413      	add	r3, r2
 800321c:	617b      	str	r3, [r7, #20]
          c = *( cp - *p++ );
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	1c5a      	adds	r2, r3, #1
 8003222:	61fa      	str	r2, [r7, #28]
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	425b      	negs	r3, r3
 8003228:	6a3a      	ldr	r2, [r7, #32]
 800322a:	4413      	add	r3, r2
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	74fb      	strb	r3, [r7, #19]
          x += c;
 8003230:	7cfb      	ldrb	r3, [r7, #19]
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4413      	add	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
          y += 2 * c;
 8003238:	7cfb      	ldrb	r3, [r7, #19]
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	4413      	add	r3, r2
 8003240:	617b      	str	r3, [r7, #20]
          c = *( cp - *p );
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	425b      	negs	r3, r3
 8003248:	6a3a      	ldr	r2, [r7, #32]
 800324a:	4413      	add	r3, r2
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	74fb      	strb	r3, [r7, #19]
          x += 2 * c;
 8003250:	7cfb      	ldrb	r3, [r7, #19]
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	4413      	add	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
          y += 2 * c;
 800325a:	7cfb      	ldrb	r3, [r7, #19]
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	4413      	add	r3, r2
 8003262:	617b      	str	r3, [r7, #20]
          p += x_size - 3;
 8003264:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003266:	3b03      	subs	r3, #3
 8003268:	69fa      	ldr	r2, [r7, #28]
 800326a:	4413      	add	r3, r2
 800326c:	61fb      	str	r3, [r7, #28]

          c = *( cp - *p++ );
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	61fa      	str	r2, [r7, #28]
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	425b      	negs	r3, r3
 8003278:	6a3a      	ldr	r2, [r7, #32]
 800327a:	4413      	add	r3, r2
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	74fb      	strb	r3, [r7, #19]
          x -= c;
 8003280:	7cfb      	ldrb	r3, [r7, #19]
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	61bb      	str	r3, [r7, #24]
          y += 3 * c;
 8003288:	7cfa      	ldrb	r2, [r7, #19]
 800328a:	4613      	mov	r3, r2
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	4413      	add	r3, r2
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	4413      	add	r3, r2
 8003294:	617b      	str	r3, [r7, #20]
          c = *( cp - *p++ );
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	1c5a      	adds	r2, r3, #1
 800329a:	61fa      	str	r2, [r7, #28]
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	425b      	negs	r3, r3
 80032a0:	6a3a      	ldr	r2, [r7, #32]
 80032a2:	4413      	add	r3, r2
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	74fb      	strb	r3, [r7, #19]
          y += 3 * c;
 80032a8:	7cfa      	ldrb	r2, [r7, #19]
 80032aa:	4613      	mov	r3, r2
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	4413      	add	r3, r2
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	4413      	add	r3, r2
 80032b4:	617b      	str	r3, [r7, #20]
          c = *( cp - *p );
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	425b      	negs	r3, r3
 80032bc:	6a3a      	ldr	r2, [r7, #32]
 80032be:	4413      	add	r3, r2
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	74fb      	strb	r3, [r7, #19]
          x += c;
 80032c4:	7cfb      	ldrb	r3, [r7, #19]
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4413      	add	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
          y += 3 * c;
 80032cc:	7cfa      	ldrb	r2, [r7, #19]
 80032ce:	4613      	mov	r3, r2
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	4413      	add	r3, r2
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	4413      	add	r3, r2
 80032d8:	617b      	str	r3, [r7, #20]

          z = susan_sqrtf( ( float )( ( x * x ) + ( y * y ) ) );
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	fb03 f203 	mul.w	r2, r3, r3
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	fb03 f303 	mul.w	r3, r3, r3
 80032e6:	4413      	add	r3, r2
 80032e8:	ee07 3a90 	vmov	s15, r3
 80032ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032f0:	eeb0 0a67 	vmov.f32	s0, s15
 80032f4:	f7fd fc60 	bl	8000bb8 <susan_sqrtf>
 80032f8:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
          if ( z > ( 0.9 * ( float )n ) ) { /* 0.5 */
 80032fc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80032fe:	f7fd f91b 	bl	8000538 <__aeabi_f2d>
 8003302:	4604      	mov	r4, r0
 8003304:	460d      	mov	r5, r1
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	ee07 3a90 	vmov	s15, r3
 800330c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003310:	ee17 0a90 	vmov	r0, s15
 8003314:	f7fd f910 	bl	8000538 <__aeabi_f2d>
 8003318:	a35e      	add	r3, pc, #376	; (adr r3, 8003494 <susan_edges+0xb74>)
 800331a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331e:	f7fd f963 	bl	80005e8 <__aeabi_dmul>
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	4620      	mov	r0, r4
 8003328:	4629      	mov	r1, r5
 800332a:	f7fd fbed 	bl	8000b08 <__aeabi_dcmpgt>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 80aa 	beq.w	800348a <susan_edges+0xb6a>
            do_symmetry = 0;
 8003336:	2300      	movs	r3, #0
 8003338:	643b      	str	r3, [r7, #64]	; 0x40
            if ( x == 0 )
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d102      	bne.n	8003346 <susan_edges+0xa26>
              z = 1000000.0;
 8003340:	4b53      	ldr	r3, [pc, #332]	; (8003490 <susan_edges+0xb70>)
 8003342:	647b      	str	r3, [r7, #68]	; 0x44
 8003344:	e00d      	b.n	8003362 <susan_edges+0xa42>
            else
              z = ( ( float )y ) / ( ( float )x );
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	ee07 3a90 	vmov	s15, r3
 800334c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	ee07 3a90 	vmov	s15, r3
 8003356:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800335a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800335e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
            if ( z < 0 ) {
 8003362:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003366:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800336a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800336e:	d509      	bpl.n	8003384 <susan_edges+0xa64>
              z = -z;
 8003370:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003374:	eef1 7a67 	vneg.f32	s15, s15
 8003378:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
              w = -1;
 800337c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003380:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003382:	e001      	b.n	8003388 <susan_edges+0xa68>
            } else w = 1;
 8003384:	2301      	movs	r3, #1
 8003386:	62fb      	str	r3, [r7, #44]	; 0x2c
            if ( z < 0.5 ) {
 8003388:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800338c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003390:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003398:	d504      	bpl.n	80033a4 <susan_edges+0xa84>
              /* vert_edge */ a = 0;
 800339a:	2300      	movs	r3, #0
 800339c:	637b      	str	r3, [r7, #52]	; 0x34
              b = 1;
 800339e:	2301      	movs	r3, #1
 80033a0:	633b      	str	r3, [r7, #48]	; 0x30
 80033a2:	e01a      	b.n	80033da <susan_edges+0xaba>
            } else {
              if ( z > 2.0 ) {
 80033a4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80033a8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80033ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b4:	dd04      	ble.n	80033c0 <susan_edges+0xaa0>
                /* hor_edge */ a = 1;
 80033b6:	2301      	movs	r3, #1
 80033b8:	637b      	str	r3, [r7, #52]	; 0x34
                b = 0;
 80033ba:	2300      	movs	r3, #0
 80033bc:	633b      	str	r3, [r7, #48]	; 0x30
 80033be:	e00c      	b.n	80033da <susan_edges+0xaba>
              } else {
                /* diag_edge */ if ( w > 0 ) {
 80033c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	dd04      	ble.n	80033d0 <susan_edges+0xab0>
                  a = 1;
 80033c6:	2301      	movs	r3, #1
 80033c8:	637b      	str	r3, [r7, #52]	; 0x34
                  b = 1;
 80033ca:	2301      	movs	r3, #1
 80033cc:	633b      	str	r3, [r7, #48]	; 0x30
 80033ce:	e004      	b.n	80033da <susan_edges+0xaba>
                } else {
                  a = -1;
 80033d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033d4:	637b      	str	r3, [r7, #52]	; 0x34
                  b = 1;
 80033d6:	2301      	movs	r3, #1
 80033d8:	633b      	str	r3, [r7, #48]	; 0x30
                }
              }
            }
            if ( ( m > r[ ( i + a )*x_size + j + b ] ) &&
 80033da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033de:	4413      	add	r3, r2
 80033e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80033e2:	fb02 f203 	mul.w	r2, r2, r3
 80033e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e8:	441a      	add	r2, r3
 80033ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ec:	4413      	add	r3, r2
 80033ee:	461a      	mov	r2, r3
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	4413      	add	r3, r2
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	461a      	mov	r2, r3
 80033f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fa:	4293      	cmp	r3, r2
 80033fc:	dd50      	ble.n	80034a0 <susan_edges+0xb80>
                 ( m >= r[ ( i - a )*x_size + j - b ] ) &&
 80033fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003406:	fb02 f203 	mul.w	r2, r2, r3
 800340a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340c:	441a      	add	r2, r3
 800340e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	461a      	mov	r2, r3
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	4413      	add	r3, r2
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	461a      	mov	r2, r3
            if ( ( m > r[ ( i + a )*x_size + j + b ] ) &&
 800341c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341e:	4293      	cmp	r3, r2
 8003420:	db3e      	blt.n	80034a0 <susan_edges+0xb80>
                 ( m > r[ ( i + ( 2 * a ) )*x_size + j + ( 2 * b ) ] ) &&
 8003422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003424:	005a      	lsls	r2, r3, #1
 8003426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003428:	4413      	add	r3, r2
 800342a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800342c:	fb02 f203 	mul.w	r2, r2, r3
 8003430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003432:	441a      	add	r2, r3
 8003434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	4413      	add	r3, r2
 800343a:	461a      	mov	r2, r3
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	4413      	add	r3, r2
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	461a      	mov	r2, r3
                 ( m >= r[ ( i - a )*x_size + j - b ] ) &&
 8003444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003446:	4293      	cmp	r3, r2
 8003448:	dd2a      	ble.n	80034a0 <susan_edges+0xb80>
                 ( m >= r[ ( i - ( 2 * a ) )*x_size + j - ( 2 * b ) ] ) )
 800344a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003454:	fb02 f203 	mul.w	r2, r2, r3
 8003458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345a:	441a      	add	r2, r3
 800345c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	461a      	mov	r2, r3
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	4413      	add	r3, r2
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	461a      	mov	r2, r3
                 ( m > r[ ( i + ( 2 * a ) )*x_size + j + ( 2 * b ) ] ) &&
 800346c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346e:	4293      	cmp	r3, r2
 8003470:	db16      	blt.n	80034a0 <susan_edges+0xb80>
              mid[ i * x_size + j ] = 1;
 8003472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003474:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003476:	fb02 f203 	mul.w	r2, r2, r3
 800347a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800347c:	4413      	add	r3, r2
 800347e:	461a      	mov	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4413      	add	r3, r2
 8003484:	2201      	movs	r2, #1
 8003486:	701a      	strb	r2, [r3, #0]
 8003488:	e00a      	b.n	80034a0 <susan_edges+0xb80>
          } else
            do_symmetry = 1;
 800348a:	2301      	movs	r3, #1
 800348c:	643b      	str	r3, [r7, #64]	; 0x40
 800348e:	e007      	b.n	80034a0 <susan_edges+0xb80>
 8003490:	49742400 	.word	0x49742400
 8003494:	cccccccd 	.word	0xcccccccd
 8003498:	3feccccc 	.word	0x3feccccc
        } else
          do_symmetry = 1;
 800349c:	2301      	movs	r3, #1
 800349e:	643b      	str	r3, [r7, #64]	; 0x40

        if ( do_symmetry == 1 ) {
 80034a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	f040 83a7 	bne.w	8003bf6 <susan_edges+0x12d6>
          p = in + ( i - 3 ) * x_size + j - 1;
 80034a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034aa:	3b03      	subs	r3, #3
 80034ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80034ae:	fb02 f303 	mul.w	r3, r2, r3
 80034b2:	461a      	mov	r2, r3
 80034b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b6:	4413      	add	r3, r2
 80034b8:	3b01      	subs	r3, #1
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	4413      	add	r3, r2
 80034be:	61fb      	str	r3, [r7, #28]
          x = 0;
 80034c0:	2300      	movs	r3, #0
 80034c2:	61bb      	str	r3, [r7, #24]
          y = 0;
 80034c4:	2300      	movs	r3, #0
 80034c6:	617b      	str	r3, [r7, #20]
          w = 0;
 80034c8:	2300      	movs	r3, #0
 80034ca:	62fb      	str	r3, [r7, #44]	; 0x2c

          /*   |      \
               y  -x-  w
               |        \   */

          c = *( cp - *p++ );
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	61fa      	str	r2, [r7, #28]
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	425b      	negs	r3, r3
 80034d6:	6a3a      	ldr	r2, [r7, #32]
 80034d8:	4413      	add	r3, r2
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	74fb      	strb	r3, [r7, #19]
          x += c;
 80034de:	7cfb      	ldrb	r3, [r7, #19]
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	4413      	add	r3, r2
 80034e4:	61bb      	str	r3, [r7, #24]
          y += 9 * c;
 80034e6:	7cfa      	ldrb	r2, [r7, #19]
 80034e8:	4613      	mov	r3, r2
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	4413      	add	r3, r2
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	4413      	add	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]
          w += 3 * c;
 80034f4:	7cfa      	ldrb	r2, [r7, #19]
 80034f6:	4613      	mov	r3, r2
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	4413      	add	r3, r2
 80034fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034fe:	4413      	add	r3, r2
 8003500:	62fb      	str	r3, [r7, #44]	; 0x2c
          c = *( cp - *p++ );
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	61fa      	str	r2, [r7, #28]
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	425b      	negs	r3, r3
 800350c:	6a3a      	ldr	r2, [r7, #32]
 800350e:	4413      	add	r3, r2
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	74fb      	strb	r3, [r7, #19]
          y += 9 * c;
 8003514:	7cfa      	ldrb	r2, [r7, #19]
 8003516:	4613      	mov	r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	4413      	add	r3, r2
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	4413      	add	r3, r2
 8003520:	617b      	str	r3, [r7, #20]
          c = *( cp - *p );
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	425b      	negs	r3, r3
 8003528:	6a3a      	ldr	r2, [r7, #32]
 800352a:	4413      	add	r3, r2
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	74fb      	strb	r3, [r7, #19]
          x += c;
 8003530:	7cfb      	ldrb	r3, [r7, #19]
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	4413      	add	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
          y += 9 * c;
 8003538:	7cfa      	ldrb	r2, [r7, #19]
 800353a:	4613      	mov	r3, r2
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	4413      	add	r3, r2
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	4413      	add	r3, r2
 8003544:	617b      	str	r3, [r7, #20]
          w -= 3 * c;
 8003546:	7cfb      	ldrb	r3, [r7, #19]
 8003548:	461a      	mov	r2, r3
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003550:	4413      	add	r3, r2
 8003552:	62fb      	str	r3, [r7, #44]	; 0x2c
          p += x_size - 3;
 8003554:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003556:	3b03      	subs	r3, #3
 8003558:	69fa      	ldr	r2, [r7, #28]
 800355a:	4413      	add	r3, r2
 800355c:	61fb      	str	r3, [r7, #28]

          c = *( cp - *p++ );
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	1c5a      	adds	r2, r3, #1
 8003562:	61fa      	str	r2, [r7, #28]
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	425b      	negs	r3, r3
 8003568:	6a3a      	ldr	r2, [r7, #32]
 800356a:	4413      	add	r3, r2
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	74fb      	strb	r3, [r7, #19]
          x += 4 * c;
 8003570:	7cfb      	ldrb	r3, [r7, #19]
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	4413      	add	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
          y += 4 * c;
 800357a:	7cfb      	ldrb	r3, [r7, #19]
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	4413      	add	r3, r2
 8003582:	617b      	str	r3, [r7, #20]
          w += 4 * c;
 8003584:	7cfb      	ldrb	r3, [r7, #19]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800358a:	4413      	add	r3, r2
 800358c:	62fb      	str	r3, [r7, #44]	; 0x2c
          c = *( cp - *p++ );
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	1c5a      	adds	r2, r3, #1
 8003592:	61fa      	str	r2, [r7, #28]
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	425b      	negs	r3, r3
 8003598:	6a3a      	ldr	r2, [r7, #32]
 800359a:	4413      	add	r3, r2
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	74fb      	strb	r3, [r7, #19]
          x += c;
 80035a0:	7cfb      	ldrb	r3, [r7, #19]
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	4413      	add	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
          y += 4 * c;
 80035a8:	7cfb      	ldrb	r3, [r7, #19]
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	4413      	add	r3, r2
 80035b0:	617b      	str	r3, [r7, #20]
          w += 2 * c;
 80035b2:	7cfb      	ldrb	r3, [r7, #19]
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035b8:	4413      	add	r3, r2
 80035ba:	62fb      	str	r3, [r7, #44]	; 0x2c
          c = *( cp - *p++ );
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	1c5a      	adds	r2, r3, #1
 80035c0:	61fa      	str	r2, [r7, #28]
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	425b      	negs	r3, r3
 80035c6:	6a3a      	ldr	r2, [r7, #32]
 80035c8:	4413      	add	r3, r2
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	74fb      	strb	r3, [r7, #19]
          y += 4 * c;
 80035ce:	7cfb      	ldrb	r3, [r7, #19]
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	4413      	add	r3, r2
 80035d6:	617b      	str	r3, [r7, #20]
          c = *( cp - *p++ );
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	61fa      	str	r2, [r7, #28]
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	425b      	negs	r3, r3
 80035e2:	6a3a      	ldr	r2, [r7, #32]
 80035e4:	4413      	add	r3, r2
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	74fb      	strb	r3, [r7, #19]
          x += c;
 80035ea:	7cfb      	ldrb	r3, [r7, #19]
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	4413      	add	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
          y += 4 * c;
 80035f2:	7cfb      	ldrb	r3, [r7, #19]
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	4413      	add	r3, r2
 80035fa:	617b      	str	r3, [r7, #20]
          w -= 2 * c;
 80035fc:	7cfb      	ldrb	r3, [r7, #19]
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	62fb      	str	r3, [r7, #44]	; 0x2c
          c = *( cp - *p );
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	425b      	negs	r3, r3
 800360c:	6a3a      	ldr	r2, [r7, #32]
 800360e:	4413      	add	r3, r2
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	74fb      	strb	r3, [r7, #19]
          x += 4 * c;
 8003614:	7cfb      	ldrb	r3, [r7, #19]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	4413      	add	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
          y += 4 * c;
 800361e:	7cfb      	ldrb	r3, [r7, #19]
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	4413      	add	r3, r2
 8003626:	617b      	str	r3, [r7, #20]
          w -= 4 * c;
 8003628:	7cfb      	ldrb	r3, [r7, #19]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	62fb      	str	r3, [r7, #44]	; 0x2c
          p += x_size - 5;
 8003632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003634:	3b05      	subs	r3, #5
 8003636:	69fa      	ldr	r2, [r7, #28]
 8003638:	4413      	add	r3, r2
 800363a:	61fb      	str	r3, [r7, #28]

          c = *( cp - *p++ );
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	61fa      	str	r2, [r7, #28]
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	425b      	negs	r3, r3
 8003646:	6a3a      	ldr	r2, [r7, #32]
 8003648:	4413      	add	r3, r2
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	74fb      	strb	r3, [r7, #19]
          x += 9 * c;
 800364e:	7cfa      	ldrb	r2, [r7, #19]
 8003650:	4613      	mov	r3, r2
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4413      	add	r3, r2
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4413      	add	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
          y += c;
 800365c:	7cfb      	ldrb	r3, [r7, #19]
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	4413      	add	r3, r2
 8003662:	617b      	str	r3, [r7, #20]
          w += 3 * c;
 8003664:	7cfa      	ldrb	r2, [r7, #19]
 8003666:	4613      	mov	r3, r2
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	4413      	add	r3, r2
 800366c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800366e:	4413      	add	r3, r2
 8003670:	62fb      	str	r3, [r7, #44]	; 0x2c
          c = *( cp - *p++ );
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	61fa      	str	r2, [r7, #28]
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	425b      	negs	r3, r3
 800367c:	6a3a      	ldr	r2, [r7, #32]
 800367e:	4413      	add	r3, r2
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	74fb      	strb	r3, [r7, #19]
          x += 4 * c;
 8003684:	7cfb      	ldrb	r3, [r7, #19]
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4413      	add	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
          y += c;
 800368e:	7cfb      	ldrb	r3, [r7, #19]
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	4413      	add	r3, r2
 8003694:	617b      	str	r3, [r7, #20]
          w += 2 * c;
 8003696:	7cfb      	ldrb	r3, [r7, #19]
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800369c:	4413      	add	r3, r2
 800369e:	62fb      	str	r3, [r7, #44]	; 0x2c
          c = *( cp - *p++ );
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	1c5a      	adds	r2, r3, #1
 80036a4:	61fa      	str	r2, [r7, #28]
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	425b      	negs	r3, r3
 80036aa:	6a3a      	ldr	r2, [r7, #32]
 80036ac:	4413      	add	r3, r2
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	74fb      	strb	r3, [r7, #19]
          x += c;
 80036b2:	7cfb      	ldrb	r3, [r7, #19]
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	4413      	add	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
          y += c;
 80036ba:	7cfb      	ldrb	r3, [r7, #19]
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	4413      	add	r3, r2
 80036c0:	617b      	str	r3, [r7, #20]
          w += c;
 80036c2:	7cfb      	ldrb	r3, [r7, #19]
 80036c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036c6:	4413      	add	r3, r2
 80036c8:	62fb      	str	r3, [r7, #44]	; 0x2c
          c = *( cp - *p++ );
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	1c5a      	adds	r2, r3, #1
 80036ce:	61fa      	str	r2, [r7, #28]
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	425b      	negs	r3, r3
 80036d4:	6a3a      	ldr	r2, [r7, #32]
 80036d6:	4413      	add	r3, r2
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	74fb      	strb	r3, [r7, #19]
          y += c;
 80036dc:	7cfb      	ldrb	r3, [r7, #19]
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	4413      	add	r3, r2
 80036e2:	617b      	str	r3, [r7, #20]
          c = *( cp - *p++ );
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	1c5a      	adds	r2, r3, #1
 80036e8:	61fa      	str	r2, [r7, #28]
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	425b      	negs	r3, r3
 80036ee:	6a3a      	ldr	r2, [r7, #32]
 80036f0:	4413      	add	r3, r2
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	74fb      	strb	r3, [r7, #19]
          x += c;
 80036f6:	7cfb      	ldrb	r3, [r7, #19]
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	4413      	add	r3, r2
 80036fc:	61bb      	str	r3, [r7, #24]
          y += c;
 80036fe:	7cfb      	ldrb	r3, [r7, #19]
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	4413      	add	r3, r2
 8003704:	617b      	str	r3, [r7, #20]
          w -= c;
 8003706:	7cfb      	ldrb	r3, [r7, #19]
 8003708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	62fb      	str	r3, [r7, #44]	; 0x2c
          c = *( cp - *p++ );
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	1c5a      	adds	r2, r3, #1
 8003712:	61fa      	str	r2, [r7, #28]
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	425b      	negs	r3, r3
 8003718:	6a3a      	ldr	r2, [r7, #32]
 800371a:	4413      	add	r3, r2
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	74fb      	strb	r3, [r7, #19]
          x += 4 * c;
 8003720:	7cfb      	ldrb	r3, [r7, #19]
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	4413      	add	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
          y += c;
 800372a:	7cfb      	ldrb	r3, [r7, #19]
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	4413      	add	r3, r2
 8003730:	617b      	str	r3, [r7, #20]
          w -= 2 * c;
 8003732:	7cfb      	ldrb	r3, [r7, #19]
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	62fb      	str	r3, [r7, #44]	; 0x2c
          c = *( cp - *p );
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	425b      	negs	r3, r3
 8003742:	6a3a      	ldr	r2, [r7, #32]
 8003744:	4413      	add	r3, r2
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	74fb      	strb	r3, [r7, #19]
          x += 9 * c;
 800374a:	7cfa      	ldrb	r2, [r7, #19]
 800374c:	4613      	mov	r3, r2
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	4413      	add	r3, r2
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	4413      	add	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
          y += c;
 8003758:	7cfb      	ldrb	r3, [r7, #19]
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	4413      	add	r3, r2
 800375e:	617b      	str	r3, [r7, #20]
          w -= 3 * c;
 8003760:	7cfb      	ldrb	r3, [r7, #19]
 8003762:	461a      	mov	r2, r3
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800376a:	4413      	add	r3, r2
 800376c:	62fb      	str	r3, [r7, #44]	; 0x2c
          p += x_size - 6;
 800376e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003770:	3b06      	subs	r3, #6
 8003772:	69fa      	ldr	r2, [r7, #28]
 8003774:	4413      	add	r3, r2
 8003776:	61fb      	str	r3, [r7, #28]

          c = *( cp - *p++ );
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	1c5a      	adds	r2, r3, #1
 800377c:	61fa      	str	r2, [r7, #28]
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	425b      	negs	r3, r3
 8003782:	6a3a      	ldr	r2, [r7, #32]
 8003784:	4413      	add	r3, r2
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	74fb      	strb	r3, [r7, #19]
          x += 9 * c;
 800378a:	7cfa      	ldrb	r2, [r7, #19]
 800378c:	4613      	mov	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	4413      	add	r3, r2
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4413      	add	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
          c = *( cp - *p++ );
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	61fa      	str	r2, [r7, #28]
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	425b      	negs	r3, r3
 80037a2:	6a3a      	ldr	r2, [r7, #32]
 80037a4:	4413      	add	r3, r2
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	74fb      	strb	r3, [r7, #19]
          x += 4 * c;
 80037aa:	7cfb      	ldrb	r3, [r7, #19]
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	4413      	add	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
          c = *( cp - *p );
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	425b      	negs	r3, r3
 80037ba:	6a3a      	ldr	r2, [r7, #32]
 80037bc:	4413      	add	r3, r2
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	74fb      	strb	r3, [r7, #19]
          x += c;
 80037c2:	7cfb      	ldrb	r3, [r7, #19]
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	4413      	add	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
          p += 2;
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	3302      	adds	r3, #2
 80037ce:	61fb      	str	r3, [r7, #28]
          c = *( cp - *p++ );
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	1c5a      	adds	r2, r3, #1
 80037d4:	61fa      	str	r2, [r7, #28]
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	425b      	negs	r3, r3
 80037da:	6a3a      	ldr	r2, [r7, #32]
 80037dc:	4413      	add	r3, r2
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	74fb      	strb	r3, [r7, #19]
          x += c;
 80037e2:	7cfb      	ldrb	r3, [r7, #19]
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	4413      	add	r3, r2
 80037e8:	61bb      	str	r3, [r7, #24]
          c = *( cp - *p++ );
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	1c5a      	adds	r2, r3, #1
 80037ee:	61fa      	str	r2, [r7, #28]
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	425b      	negs	r3, r3
 80037f4:	6a3a      	ldr	r2, [r7, #32]
 80037f6:	4413      	add	r3, r2
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	74fb      	strb	r3, [r7, #19]
          x += 4 * c;
 80037fc:	7cfb      	ldrb	r3, [r7, #19]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	4413      	add	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
          c = *( cp - *p );
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	425b      	negs	r3, r3
 800380c:	6a3a      	ldr	r2, [r7, #32]
 800380e:	4413      	add	r3, r2
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	74fb      	strb	r3, [r7, #19]
          x += 9 * c;
 8003814:	7cfa      	ldrb	r2, [r7, #19]
 8003816:	4613      	mov	r3, r2
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	4413      	add	r3, r2
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	4413      	add	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
          p += x_size - 6;
 8003822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003824:	3b06      	subs	r3, #6
 8003826:	69fa      	ldr	r2, [r7, #28]
 8003828:	4413      	add	r3, r2
 800382a:	61fb      	str	r3, [r7, #28]

          c = *( cp - *p++ );
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	61fa      	str	r2, [r7, #28]
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	425b      	negs	r3, r3
 8003836:	6a3a      	ldr	r2, [r7, #32]
 8003838:	4413      	add	r3, r2
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	74fb      	strb	r3, [r7, #19]
          x += 9 * c;
 800383e:	7cfa      	ldrb	r2, [r7, #19]
 8003840:	4613      	mov	r3, r2
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	4413      	add	r3, r2
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	4413      	add	r3, r2
 800384a:	61bb      	str	r3, [r7, #24]
          y += c;
 800384c:	7cfb      	ldrb	r3, [r7, #19]
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	4413      	add	r3, r2
 8003852:	617b      	str	r3, [r7, #20]
          w -= 3 * c;
 8003854:	7cfb      	ldrb	r3, [r7, #19]
 8003856:	461a      	mov	r2, r3
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800385e:	4413      	add	r3, r2
 8003860:	62fb      	str	r3, [r7, #44]	; 0x2c
          c = *( cp - *p++ );
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	1c5a      	adds	r2, r3, #1
 8003866:	61fa      	str	r2, [r7, #28]
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	425b      	negs	r3, r3
 800386c:	6a3a      	ldr	r2, [r7, #32]
 800386e:	4413      	add	r3, r2
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	74fb      	strb	r3, [r7, #19]
          x += 4 * c;
 8003874:	7cfb      	ldrb	r3, [r7, #19]
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	4413      	add	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
          y += c;
 800387e:	7cfb      	ldrb	r3, [r7, #19]
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	4413      	add	r3, r2
 8003884:	617b      	str	r3, [r7, #20]
          w -= 2 * c;
 8003886:	7cfb      	ldrb	r3, [r7, #19]
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	62fb      	str	r3, [r7, #44]	; 0x2c
          c = *( cp - *p++ );
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	1c5a      	adds	r2, r3, #1
 8003894:	61fa      	str	r2, [r7, #28]
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	425b      	negs	r3, r3
 800389a:	6a3a      	ldr	r2, [r7, #32]
 800389c:	4413      	add	r3, r2
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	74fb      	strb	r3, [r7, #19]
          x += c;
 80038a2:	7cfb      	ldrb	r3, [r7, #19]
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4413      	add	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
          y += c;
 80038aa:	7cfb      	ldrb	r3, [r7, #19]
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	4413      	add	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]
          w -= c;
 80038b2:	7cfb      	ldrb	r3, [r7, #19]
 80038b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	62fb      	str	r3, [r7, #44]	; 0x2c
          c = *( cp - *p++ );
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	1c5a      	adds	r2, r3, #1
 80038be:	61fa      	str	r2, [r7, #28]
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	425b      	negs	r3, r3
 80038c4:	6a3a      	ldr	r2, [r7, #32]
 80038c6:	4413      	add	r3, r2
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	74fb      	strb	r3, [r7, #19]
          y += c;
 80038cc:	7cfb      	ldrb	r3, [r7, #19]
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	4413      	add	r3, r2
 80038d2:	617b      	str	r3, [r7, #20]
          c = *( cp - *p++ );
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	61fa      	str	r2, [r7, #28]
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	425b      	negs	r3, r3
 80038de:	6a3a      	ldr	r2, [r7, #32]
 80038e0:	4413      	add	r3, r2
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	74fb      	strb	r3, [r7, #19]
          x += c;
 80038e6:	7cfb      	ldrb	r3, [r7, #19]
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	4413      	add	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
          y += c;
 80038ee:	7cfb      	ldrb	r3, [r7, #19]
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	4413      	add	r3, r2
 80038f4:	617b      	str	r3, [r7, #20]
          w += c;
 80038f6:	7cfb      	ldrb	r3, [r7, #19]
 80038f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038fa:	4413      	add	r3, r2
 80038fc:	62fb      	str	r3, [r7, #44]	; 0x2c
          c = *( cp - *p++ );
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	61fa      	str	r2, [r7, #28]
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	425b      	negs	r3, r3
 8003908:	6a3a      	ldr	r2, [r7, #32]
 800390a:	4413      	add	r3, r2
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	74fb      	strb	r3, [r7, #19]
          x += 4 * c;
 8003910:	7cfb      	ldrb	r3, [r7, #19]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	4413      	add	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
          y += c;
 800391a:	7cfb      	ldrb	r3, [r7, #19]
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	4413      	add	r3, r2
 8003920:	617b      	str	r3, [r7, #20]
          w += 2 * c;
 8003922:	7cfb      	ldrb	r3, [r7, #19]
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003928:	4413      	add	r3, r2
 800392a:	62fb      	str	r3, [r7, #44]	; 0x2c
          c = *( cp - *p );
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	425b      	negs	r3, r3
 8003932:	6a3a      	ldr	r2, [r7, #32]
 8003934:	4413      	add	r3, r2
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	74fb      	strb	r3, [r7, #19]
          x += 9 * c;
 800393a:	7cfa      	ldrb	r2, [r7, #19]
 800393c:	4613      	mov	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	4413      	add	r3, r2
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4413      	add	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
          y += c;
 8003948:	7cfb      	ldrb	r3, [r7, #19]
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	4413      	add	r3, r2
 800394e:	617b      	str	r3, [r7, #20]
          w += 3 * c;
 8003950:	7cfa      	ldrb	r2, [r7, #19]
 8003952:	4613      	mov	r3, r2
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	4413      	add	r3, r2
 8003958:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800395a:	4413      	add	r3, r2
 800395c:	62fb      	str	r3, [r7, #44]	; 0x2c
          p += x_size - 5;
 800395e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003960:	3b05      	subs	r3, #5
 8003962:	69fa      	ldr	r2, [r7, #28]
 8003964:	4413      	add	r3, r2
 8003966:	61fb      	str	r3, [r7, #28]

          c = *( cp - *p++ );
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	61fa      	str	r2, [r7, #28]
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	425b      	negs	r3, r3
 8003972:	6a3a      	ldr	r2, [r7, #32]
 8003974:	4413      	add	r3, r2
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	74fb      	strb	r3, [r7, #19]
          x += 4 * c;
 800397a:	7cfb      	ldrb	r3, [r7, #19]
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	4413      	add	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
          y += 4 * c;
 8003984:	7cfb      	ldrb	r3, [r7, #19]
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	4413      	add	r3, r2
 800398c:	617b      	str	r3, [r7, #20]
          w -= 4 * c;
 800398e:	7cfb      	ldrb	r3, [r7, #19]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	62fb      	str	r3, [r7, #44]	; 0x2c
          c = *( cp - *p++ );
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	1c5a      	adds	r2, r3, #1
 800399c:	61fa      	str	r2, [r7, #28]
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	425b      	negs	r3, r3
 80039a2:	6a3a      	ldr	r2, [r7, #32]
 80039a4:	4413      	add	r3, r2
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	74fb      	strb	r3, [r7, #19]
          x += c;
 80039aa:	7cfb      	ldrb	r3, [r7, #19]
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4413      	add	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
          y += 4 * c;
 80039b2:	7cfb      	ldrb	r3, [r7, #19]
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	4413      	add	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]
          w -= 2 * c;
 80039bc:	7cfb      	ldrb	r3, [r7, #19]
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	62fb      	str	r3, [r7, #44]	; 0x2c
          c = *( cp - *p++ );
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	61fa      	str	r2, [r7, #28]
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	425b      	negs	r3, r3
 80039d0:	6a3a      	ldr	r2, [r7, #32]
 80039d2:	4413      	add	r3, r2
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	74fb      	strb	r3, [r7, #19]
          y += 4 * c;
 80039d8:	7cfb      	ldrb	r3, [r7, #19]
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	4413      	add	r3, r2
 80039e0:	617b      	str	r3, [r7, #20]
          c = *( cp - *p++ );
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	1c5a      	adds	r2, r3, #1
 80039e6:	61fa      	str	r2, [r7, #28]
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	425b      	negs	r3, r3
 80039ec:	6a3a      	ldr	r2, [r7, #32]
 80039ee:	4413      	add	r3, r2
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	74fb      	strb	r3, [r7, #19]
          x += c;
 80039f4:	7cfb      	ldrb	r3, [r7, #19]
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4413      	add	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
          y += 4 * c;
 80039fc:	7cfb      	ldrb	r3, [r7, #19]
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	4413      	add	r3, r2
 8003a04:	617b      	str	r3, [r7, #20]
          w += 2 * c;
 8003a06:	7cfb      	ldrb	r3, [r7, #19]
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a0c:	4413      	add	r3, r2
 8003a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
          c = *( cp - *p );
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	425b      	negs	r3, r3
 8003a16:	6a3a      	ldr	r2, [r7, #32]
 8003a18:	4413      	add	r3, r2
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	74fb      	strb	r3, [r7, #19]
          x += 4 * c;
 8003a1e:	7cfb      	ldrb	r3, [r7, #19]
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	4413      	add	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
          y += 4 * c;
 8003a28:	7cfb      	ldrb	r3, [r7, #19]
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	4413      	add	r3, r2
 8003a30:	617b      	str	r3, [r7, #20]
          w += 4 * c;
 8003a32:	7cfb      	ldrb	r3, [r7, #19]
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a38:	4413      	add	r3, r2
 8003a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
          p += x_size - 3;
 8003a3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a3e:	3b03      	subs	r3, #3
 8003a40:	69fa      	ldr	r2, [r7, #28]
 8003a42:	4413      	add	r3, r2
 8003a44:	61fb      	str	r3, [r7, #28]

          c = *( cp - *p++ );
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	1c5a      	adds	r2, r3, #1
 8003a4a:	61fa      	str	r2, [r7, #28]
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	425b      	negs	r3, r3
 8003a50:	6a3a      	ldr	r2, [r7, #32]
 8003a52:	4413      	add	r3, r2
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	74fb      	strb	r3, [r7, #19]
          x += c;
 8003a58:	7cfb      	ldrb	r3, [r7, #19]
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
          y += 9 * c;
 8003a60:	7cfa      	ldrb	r2, [r7, #19]
 8003a62:	4613      	mov	r3, r2
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	4413      	add	r3, r2
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	617b      	str	r3, [r7, #20]
          w -= 3 * c;
 8003a6e:	7cfb      	ldrb	r3, [r7, #19]
 8003a70:	461a      	mov	r2, r3
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a78:	4413      	add	r3, r2
 8003a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
          c = *( cp - *p++ );
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	1c5a      	adds	r2, r3, #1
 8003a80:	61fa      	str	r2, [r7, #28]
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	425b      	negs	r3, r3
 8003a86:	6a3a      	ldr	r2, [r7, #32]
 8003a88:	4413      	add	r3, r2
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	74fb      	strb	r3, [r7, #19]
          y += 9 * c;
 8003a8e:	7cfa      	ldrb	r2, [r7, #19]
 8003a90:	4613      	mov	r3, r2
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	4413      	add	r3, r2
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	4413      	add	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]
          c = *( cp - *p );
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	425b      	negs	r3, r3
 8003aa2:	6a3a      	ldr	r2, [r7, #32]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	74fb      	strb	r3, [r7, #19]
          x += c;
 8003aaa:	7cfb      	ldrb	r3, [r7, #19]
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4413      	add	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
          y += 9 * c;
 8003ab2:	7cfa      	ldrb	r2, [r7, #19]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	4413      	add	r3, r2
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	4413      	add	r3, r2
 8003abe:	617b      	str	r3, [r7, #20]
          w += 3 * c;
 8003ac0:	7cfa      	ldrb	r2, [r7, #19]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	4413      	add	r3, r2
 8003ac8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aca:	4413      	add	r3, r2
 8003acc:	62fb      	str	r3, [r7, #44]	; 0x2c

          if ( y == 0 )
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d102      	bne.n	8003ada <susan_edges+0x11ba>
            z = 1000000.0;
 8003ad4:	4b53      	ldr	r3, [pc, #332]	; (8003c24 <susan_edges+0x1304>)
 8003ad6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ad8:	e00d      	b.n	8003af6 <susan_edges+0x11d6>
          else
            z = ( ( float )x ) / ( ( float )y );
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	ee07 3a90 	vmov	s15, r3
 8003ae0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	ee07 3a90 	vmov	s15, r3
 8003aea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003aee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003af2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
          if ( z < 0.5 ) {
 8003af6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003afa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003afe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b06:	d504      	bpl.n	8003b12 <susan_edges+0x11f2>
            /* vertical */ a = 0;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	637b      	str	r3, [r7, #52]	; 0x34
            b = 1;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	633b      	str	r3, [r7, #48]	; 0x30
 8003b10:	e01a      	b.n	8003b48 <susan_edges+0x1228>
          } else {
            if ( z > 2.0 ) {
 8003b12:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003b16:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003b1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b22:	dd04      	ble.n	8003b2e <susan_edges+0x120e>
              /* horizontal */ a = 1;
 8003b24:	2301      	movs	r3, #1
 8003b26:	637b      	str	r3, [r7, #52]	; 0x34
              b = 0;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	633b      	str	r3, [r7, #48]	; 0x30
 8003b2c:	e00c      	b.n	8003b48 <susan_edges+0x1228>
            } else {
              /* diagonal */ if ( w > 0 ) {
 8003b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	dd05      	ble.n	8003b40 <susan_edges+0x1220>
                a = -1;
 8003b34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b38:	637b      	str	r3, [r7, #52]	; 0x34
                b = 1;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	633b      	str	r3, [r7, #48]	; 0x30
 8003b3e:	e003      	b.n	8003b48 <susan_edges+0x1228>
              } else {
                a = 1;
 8003b40:	2301      	movs	r3, #1
 8003b42:	637b      	str	r3, [r7, #52]	; 0x34
                b = 1;
 8003b44:	2301      	movs	r3, #1
 8003b46:	633b      	str	r3, [r7, #48]	; 0x30
              }
            }
          }
          if ( ( m > r[ ( i + a )*x_size + j + b ] ) &&
 8003b48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b4c:	4413      	add	r3, r2
 8003b4e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b50:	fb02 f203 	mul.w	r2, r2, r3
 8003b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b56:	441a      	add	r2, r3
 8003b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5a:	4413      	add	r3, r2
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	4413      	add	r3, r2
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	461a      	mov	r2, r3
 8003b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	dd44      	ble.n	8003bf6 <susan_edges+0x12d6>
               ( m >= r[ ( i - a )*x_size + j - b ] ) &&
 8003b6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b74:	fb02 f203 	mul.w	r2, r2, r3
 8003b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b7a:	441a      	add	r2, r3
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	461a      	mov	r2, r3
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	4413      	add	r3, r2
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	461a      	mov	r2, r3
          if ( ( m > r[ ( i + a )*x_size + j + b ] ) &&
 8003b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	db32      	blt.n	8003bf6 <susan_edges+0x12d6>
               ( m > r[ ( i + ( 2 * a ) )*x_size + j + ( 2 * b ) ] ) &&
 8003b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b92:	005a      	lsls	r2, r3, #1
 8003b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b96:	4413      	add	r3, r2
 8003b98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b9a:	fb02 f203 	mul.w	r2, r2, r3
 8003b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba0:	441a      	add	r2, r3
 8003ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	4413      	add	r3, r2
 8003ba8:	461a      	mov	r2, r3
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	4413      	add	r3, r2
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	461a      	mov	r2, r3
               ( m >= r[ ( i - a )*x_size + j - b ] ) &&
 8003bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	dd1e      	ble.n	8003bf6 <susan_edges+0x12d6>
               ( m >= r[ ( i - ( 2 * a ) )*x_size + j - ( 2 * b ) ] ) )
 8003bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003bc2:	fb02 f203 	mul.w	r2, r2, r3
 8003bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc8:	441a      	add	r2, r3
 8003bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	461a      	mov	r2, r3
               ( m > r[ ( i + ( 2 * a ) )*x_size + j + ( 2 * b ) ] ) &&
 8003bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	db0a      	blt.n	8003bf6 <susan_edges+0x12d6>
            mid[ i * x_size + j ] = 2;
 8003be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003be2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003be4:	fb02 f203 	mul.w	r2, r2, r3
 8003be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bea:	4413      	add	r3, r2
 8003bec:	461a      	mov	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	701a      	strb	r2, [r3, #0]
    for ( j = 4; j < x_size - 4; j++ ) {
 8003bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bfe:	3b04      	subs	r3, #4
 8003c00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c02:	429a      	cmp	r2, r3
 8003c04:	f6ff a8ad 	blt.w	8002d62 <susan_edges+0x442>
  for ( i = 4; i < y_size - 4; i++ ) {
 8003c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c10:	3b04      	subs	r3, #4
 8003c12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c14:	429a      	cmp	r2, r3
 8003c16:	f6ff a8a0 	blt.w	8002d5a <susan_edges+0x43a>
        }
      }
    }
  }
}
 8003c1a:	bf00      	nop
 8003c1c:	bf00      	nop
 8003c1e:	3748      	adds	r7, #72	; 0x48
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bdb0      	pop	{r4, r5, r7, pc}
 8003c24:	49742400 	.word	0x49742400

08003c28 <susan_edges_small>:


void susan_edges_small( uchar *in, char *r, uchar *mid, uchar *bp,
                        int max_no, int x_size, int y_size )
{
 8003c28:	b5b0      	push	{r4, r5, r7, lr}
 8003c2a:	b092      	sub	sp, #72	; 0x48
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
 8003c34:	603b      	str	r3, [r7, #0]
  float z;
  int   do_symmetry, i, j, m, n, a, b, x, y, w;
  uchar c, *p, *cp;

  susan_wccmemset( r, 0, x_size * y_size );
 8003c36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c3a:	fb02 f303 	mul.w	r3, r2, r3
 8003c3e:	461a      	mov	r2, r3
 8003c40:	2100      	movs	r1, #0
 8003c42:	68b8      	ldr	r0, [r7, #8]
 8003c44:	f003 fc36 	bl	80074b4 <susan_wccmemset>

  _Pragma( "loopbound min 0 max 0" )
  for ( i = 1; i < y_size - 1; i++ ) {
 8003c48:	2301      	movs	r3, #1
 8003c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c4c:	e0a3      	b.n	8003d96 <susan_edges_small+0x16e>
    _Pragma( "loopbound min 0 max 0" )
    for ( j = 1; j < x_size - 1; j++ ) {
 8003c4e:	2301      	movs	r3, #1
 8003c50:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c52:	e097      	b.n	8003d84 <susan_edges_small+0x15c>
      n = 100;
 8003c54:	2364      	movs	r3, #100	; 0x64
 8003c56:	627b      	str	r3, [r7, #36]	; 0x24
      p = in + ( i - 1 ) * x_size + j - 1;
 8003c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c5e:	fb02 f303 	mul.w	r3, r2, r3
 8003c62:	461a      	mov	r2, r3
 8003c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c66:	4413      	add	r3, r2
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	61fb      	str	r3, [r7, #28]
      cp = bp + in[ i * x_size + j ];
 8003c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c72:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c74:	fb02 f203 	mul.w	r2, r2, r3
 8003c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7a:	4413      	add	r3, r2
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	4413      	add	r3, r2
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	461a      	mov	r2, r3
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	4413      	add	r3, r2
 8003c8a:	623b      	str	r3, [r7, #32]

      n += *( cp - *p++ );
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	1c5a      	adds	r2, r3, #1
 8003c90:	61fa      	str	r2, [r7, #28]
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	425b      	negs	r3, r3
 8003c96:	6a3a      	ldr	r2, [r7, #32]
 8003c98:	4413      	add	r3, r2
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	4413      	add	r3, r2
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24
      n += *( cp - *p++ );
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	1c5a      	adds	r2, r3, #1
 8003ca8:	61fa      	str	r2, [r7, #28]
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	425b      	negs	r3, r3
 8003cae:	6a3a      	ldr	r2, [r7, #32]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	4413      	add	r3, r2
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
      n += *( cp - *p );
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	425b      	negs	r3, r3
 8003cc2:	6a3a      	ldr	r2, [r7, #32]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	461a      	mov	r2, r3
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	4413      	add	r3, r2
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24
      p += x_size - 2;
 8003cd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cd2:	3b02      	subs	r3, #2
 8003cd4:	69fa      	ldr	r2, [r7, #28]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	61fb      	str	r3, [r7, #28]

      n += *( cp - *p );
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	425b      	negs	r3, r3
 8003ce0:	6a3a      	ldr	r2, [r7, #32]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cea:	4413      	add	r3, r2
 8003cec:	627b      	str	r3, [r7, #36]	; 0x24
      p += 2;
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	3302      	adds	r3, #2
 8003cf2:	61fb      	str	r3, [r7, #28]
      n += *( cp - *p );
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	425b      	negs	r3, r3
 8003cfa:	6a3a      	ldr	r2, [r7, #32]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	461a      	mov	r2, r3
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d04:	4413      	add	r3, r2
 8003d06:	627b      	str	r3, [r7, #36]	; 0x24
      p += x_size - 2;
 8003d08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d0a:	3b02      	subs	r3, #2
 8003d0c:	69fa      	ldr	r2, [r7, #28]
 8003d0e:	4413      	add	r3, r2
 8003d10:	61fb      	str	r3, [r7, #28]

      n += *( cp - *p++ );
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	1c5a      	adds	r2, r3, #1
 8003d16:	61fa      	str	r2, [r7, #28]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	425b      	negs	r3, r3
 8003d1c:	6a3a      	ldr	r2, [r7, #32]
 8003d1e:	4413      	add	r3, r2
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	461a      	mov	r2, r3
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	4413      	add	r3, r2
 8003d28:	627b      	str	r3, [r7, #36]	; 0x24
      n += *( cp - *p++ );
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	1c5a      	adds	r2, r3, #1
 8003d2e:	61fa      	str	r2, [r7, #28]
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	425b      	negs	r3, r3
 8003d34:	6a3a      	ldr	r2, [r7, #32]
 8003d36:	4413      	add	r3, r2
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	4413      	add	r3, r2
 8003d40:	627b      	str	r3, [r7, #36]	; 0x24
      n += *( cp - *p );
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	425b      	negs	r3, r3
 8003d48:	6a3a      	ldr	r2, [r7, #32]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	4413      	add	r3, r2
 8003d54:	627b      	str	r3, [r7, #36]	; 0x24

      if ( n <= max_no )
 8003d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	dc0f      	bgt.n	8003d7e <susan_edges_small+0x156>
        r[ i * x_size + j ] = max_no - n;
 8003d5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d60:	b2d9      	uxtb	r1, r3
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d68:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003d6a:	fb00 f003 	mul.w	r0, r0, r3
 8003d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d70:	4403      	add	r3, r0
 8003d72:	4618      	mov	r0, r3
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	4403      	add	r3, r0
 8003d78:	1a8a      	subs	r2, r1, r2
 8003d7a:	b2d2      	uxtb	r2, r2
 8003d7c:	701a      	strb	r2, [r3, #0]
    for ( j = 1; j < x_size - 1; j++ ) {
 8003d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d80:	3301      	adds	r3, #1
 8003d82:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d86:	3b01      	subs	r3, #1
 8003d88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	f6ff af62 	blt.w	8003c54 <susan_edges_small+0x2c>
  for ( i = 1; i < y_size - 1; i++ ) {
 8003d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d92:	3301      	adds	r3, #1
 8003d94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	f6ff af56 	blt.w	8003c4e <susan_edges_small+0x26>
    }
  }

  _Pragma( "loopbound min 0 max 0" )
  for ( i = 2; i < y_size - 2; i++ ) {
 8003da2:	2302      	movs	r3, #2
 8003da4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003da6:	e295      	b.n	80042d4 <susan_edges_small+0x6ac>
    _Pragma( "loopbound min 0 max 0" )
    for ( j = 2; j < x_size - 2; j++ ) {
 8003da8:	2302      	movs	r3, #2
 8003daa:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dac:	e289      	b.n	80042c2 <susan_edges_small+0x69a>
      if ( r[ i * x_size + j ] > 0 ) {
 8003dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003db0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003db2:	fb02 f203 	mul.w	r2, r2, r3
 8003db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db8:	4413      	add	r3, r2
 8003dba:	461a      	mov	r2, r3
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 827a 	beq.w	80042bc <susan_edges_small+0x694>
        m = r[ i * x_size + j ];
 8003dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003dcc:	fb02 f203 	mul.w	r2, r2, r3
 8003dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd2:	4413      	add	r3, r2
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	4413      	add	r3, r2
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	62bb      	str	r3, [r7, #40]	; 0x28
        n = max_no - m;
 8003dde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	627b      	str	r3, [r7, #36]	; 0x24
        cp = bp + in[ i * x_size + j ];
 8003de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003de8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003dea:	fb02 f203 	mul.w	r2, r2, r3
 8003dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df0:	4413      	add	r3, r2
 8003df2:	461a      	mov	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4413      	add	r3, r2
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	4413      	add	r3, r2
 8003e00:	623b      	str	r3, [r7, #32]

        if ( n > 250 ) {
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	2bfa      	cmp	r3, #250	; 0xfa
 8003e06:	f340 8140 	ble.w	800408a <susan_edges_small+0x462>
          p = in + ( i - 1 ) * x_size + j - 1;
 8003e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e10:	fb02 f303 	mul.w	r3, r2, r3
 8003e14:	461a      	mov	r2, r3
 8003e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e18:	4413      	add	r3, r2
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	4413      	add	r3, r2
 8003e20:	61fb      	str	r3, [r7, #28]
          x = 0;
 8003e22:	2300      	movs	r3, #0
 8003e24:	61bb      	str	r3, [r7, #24]
          y = 0;
 8003e26:	2300      	movs	r3, #0
 8003e28:	617b      	str	r3, [r7, #20]

          c = *( cp - *p++ );
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	1c5a      	adds	r2, r3, #1
 8003e2e:	61fa      	str	r2, [r7, #28]
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	425b      	negs	r3, r3
 8003e34:	6a3a      	ldr	r2, [r7, #32]
 8003e36:	4413      	add	r3, r2
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	74fb      	strb	r3, [r7, #19]
          x -= c;
 8003e3c:	7cfb      	ldrb	r3, [r7, #19]
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	61bb      	str	r3, [r7, #24]
          y -= c;
 8003e44:	7cfb      	ldrb	r3, [r7, #19]
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	617b      	str	r3, [r7, #20]
          c = *( cp - *p++ );
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	61fa      	str	r2, [r7, #28]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	425b      	negs	r3, r3
 8003e56:	6a3a      	ldr	r2, [r7, #32]
 8003e58:	4413      	add	r3, r2
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	74fb      	strb	r3, [r7, #19]
          y -= c;
 8003e5e:	7cfb      	ldrb	r3, [r7, #19]
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	617b      	str	r3, [r7, #20]
          c = *( cp - *p );
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	425b      	negs	r3, r3
 8003e6c:	6a3a      	ldr	r2, [r7, #32]
 8003e6e:	4413      	add	r3, r2
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	74fb      	strb	r3, [r7, #19]
          x += c;
 8003e74:	7cfb      	ldrb	r3, [r7, #19]
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	4413      	add	r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]
          y -= c;
 8003e7c:	7cfb      	ldrb	r3, [r7, #19]
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	617b      	str	r3, [r7, #20]
          p += x_size - 2;
 8003e84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e86:	3b02      	subs	r3, #2
 8003e88:	69fa      	ldr	r2, [r7, #28]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	61fb      	str	r3, [r7, #28]

          c = *( cp - *p );
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	425b      	negs	r3, r3
 8003e94:	6a3a      	ldr	r2, [r7, #32]
 8003e96:	4413      	add	r3, r2
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	74fb      	strb	r3, [r7, #19]
          x -= c;
 8003e9c:	7cfb      	ldrb	r3, [r7, #19]
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	61bb      	str	r3, [r7, #24]
          p += 2;
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	3302      	adds	r3, #2
 8003ea8:	61fb      	str	r3, [r7, #28]
          c = *( cp - *p );
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	425b      	negs	r3, r3
 8003eb0:	6a3a      	ldr	r2, [r7, #32]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	74fb      	strb	r3, [r7, #19]
          x += c;
 8003eb8:	7cfb      	ldrb	r3, [r7, #19]
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	61bb      	str	r3, [r7, #24]
          p += x_size - 2;
 8003ec0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ec2:	3b02      	subs	r3, #2
 8003ec4:	69fa      	ldr	r2, [r7, #28]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	61fb      	str	r3, [r7, #28]

          c = *( cp - *p++ );
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	1c5a      	adds	r2, r3, #1
 8003ece:	61fa      	str	r2, [r7, #28]
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	425b      	negs	r3, r3
 8003ed4:	6a3a      	ldr	r2, [r7, #32]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	74fb      	strb	r3, [r7, #19]
          x -= c;
 8003edc:	7cfb      	ldrb	r3, [r7, #19]
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	61bb      	str	r3, [r7, #24]
          y += c;
 8003ee4:	7cfb      	ldrb	r3, [r7, #19]
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	4413      	add	r3, r2
 8003eea:	617b      	str	r3, [r7, #20]
          c = *( cp - *p++ );
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	61fa      	str	r2, [r7, #28]
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	425b      	negs	r3, r3
 8003ef6:	6a3a      	ldr	r2, [r7, #32]
 8003ef8:	4413      	add	r3, r2
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	74fb      	strb	r3, [r7, #19]
          y += c;
 8003efe:	7cfb      	ldrb	r3, [r7, #19]
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	4413      	add	r3, r2
 8003f04:	617b      	str	r3, [r7, #20]
          c = *( cp - *p );
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	425b      	negs	r3, r3
 8003f0c:	6a3a      	ldr	r2, [r7, #32]
 8003f0e:	4413      	add	r3, r2
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	74fb      	strb	r3, [r7, #19]
          x += c;
 8003f14:	7cfb      	ldrb	r3, [r7, #19]
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	4413      	add	r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]
          y += c;
 8003f1c:	7cfb      	ldrb	r3, [r7, #19]
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	4413      	add	r3, r2
 8003f22:	617b      	str	r3, [r7, #20]

          z = susan_sqrtf( ( float )( ( x * x ) + ( y * y ) ) );
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	fb03 f203 	mul.w	r2, r3, r3
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	fb03 f303 	mul.w	r3, r3, r3
 8003f30:	4413      	add	r3, r2
 8003f32:	ee07 3a90 	vmov	s15, r3
 8003f36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f3a:	eeb0 0a67 	vmov.f32	s0, s15
 8003f3e:	f7fc fe3b 	bl	8000bb8 <susan_sqrtf>
 8003f42:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
          if ( z > ( 0.4 * ( float )n ) ) { /* 0.6 */
 8003f46:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003f48:	f7fc faf6 	bl	8000538 <__aeabi_f2d>
 8003f4c:	4604      	mov	r4, r0
 8003f4e:	460d      	mov	r5, r1
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	ee07 3a90 	vmov	s15, r3
 8003f56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f5a:	ee17 0a90 	vmov	r0, s15
 8003f5e:	f7fc faeb 	bl	8000538 <__aeabi_f2d>
 8003f62:	a3b6      	add	r3, pc, #728	; (adr r3, 800423c <susan_edges_small+0x614>)
 8003f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f68:	f7fc fb3e 	bl	80005e8 <__aeabi_dmul>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	460b      	mov	r3, r1
 8003f70:	4620      	mov	r0, r4
 8003f72:	4629      	mov	r1, r5
 8003f74:	f7fc fdc8 	bl	8000b08 <__aeabi_dcmpgt>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 8082 	beq.w	8004084 <susan_edges_small+0x45c>
            do_symmetry = 0;
 8003f80:	2300      	movs	r3, #0
 8003f82:	643b      	str	r3, [r7, #64]	; 0x40
            if ( x == 0 )
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d102      	bne.n	8003f90 <susan_edges_small+0x368>
              z = 1000000.0;
 8003f8a:	4bab      	ldr	r3, [pc, #684]	; (8004238 <susan_edges_small+0x610>)
 8003f8c:	647b      	str	r3, [r7, #68]	; 0x44
 8003f8e:	e00d      	b.n	8003fac <susan_edges_small+0x384>
            else
              z = ( ( float )y ) / ( ( float )x );
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	ee07 3a90 	vmov	s15, r3
 8003f96:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	ee07 3a90 	vmov	s15, r3
 8003fa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fa8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
            if ( z < 0 ) {
 8003fac:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003fb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fb8:	d509      	bpl.n	8003fce <susan_edges_small+0x3a6>
              z = -z;
 8003fba:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003fbe:	eef1 7a67 	vneg.f32	s15, s15
 8003fc2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
              w = -1;
 8003fc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fcc:	e001      	b.n	8003fd2 <susan_edges_small+0x3aa>
            } else w = 1;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
            if ( z < 0.5 ) {
 8003fd2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003fd6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003fda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fe2:	d504      	bpl.n	8003fee <susan_edges_small+0x3c6>
              /* vert_edge */ a = 0;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	637b      	str	r3, [r7, #52]	; 0x34
              b = 1;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	633b      	str	r3, [r7, #48]	; 0x30
 8003fec:	e01a      	b.n	8004024 <susan_edges_small+0x3fc>
            } else {
              if ( z > 2.0 ) {
 8003fee:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003ff2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003ff6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ffe:	dd04      	ble.n	800400a <susan_edges_small+0x3e2>
                /* hor_edge */ a = 1;
 8004000:	2301      	movs	r3, #1
 8004002:	637b      	str	r3, [r7, #52]	; 0x34
                b = 0;
 8004004:	2300      	movs	r3, #0
 8004006:	633b      	str	r3, [r7, #48]	; 0x30
 8004008:	e00c      	b.n	8004024 <susan_edges_small+0x3fc>
              } else {
                /* diag_edge */ if ( w > 0 ) {
 800400a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400c:	2b00      	cmp	r3, #0
 800400e:	dd04      	ble.n	800401a <susan_edges_small+0x3f2>
                  a = 1;
 8004010:	2301      	movs	r3, #1
 8004012:	637b      	str	r3, [r7, #52]	; 0x34
                  b = 1;
 8004014:	2301      	movs	r3, #1
 8004016:	633b      	str	r3, [r7, #48]	; 0x30
 8004018:	e004      	b.n	8004024 <susan_edges_small+0x3fc>
                } else {
                  a = -1;
 800401a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800401e:	637b      	str	r3, [r7, #52]	; 0x34
                  b = 1;
 8004020:	2301      	movs	r3, #1
 8004022:	633b      	str	r3, [r7, #48]	; 0x30
                }
              }
            }
            if ( ( m > r[ ( i + a )*x_size + j + b ] ) &&
 8004024:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004028:	4413      	add	r3, r2
 800402a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800402c:	fb02 f203 	mul.w	r2, r2, r3
 8004030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004032:	441a      	add	r2, r3
 8004034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004036:	4413      	add	r3, r2
 8004038:	461a      	mov	r2, r3
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	4413      	add	r3, r2
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	461a      	mov	r2, r3
 8004042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004044:	4293      	cmp	r3, r2
 8004046:	dd22      	ble.n	800408e <susan_edges_small+0x466>
                 ( m >= r[ ( i - a )*x_size + j - b ] ) )
 8004048:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800404a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004050:	fb02 f203 	mul.w	r2, r2, r3
 8004054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004056:	441a      	add	r2, r3
 8004058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	461a      	mov	r2, r3
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	4413      	add	r3, r2
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	461a      	mov	r2, r3
            if ( ( m > r[ ( i + a )*x_size + j + b ] ) &&
 8004066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004068:	4293      	cmp	r3, r2
 800406a:	db10      	blt.n	800408e <susan_edges_small+0x466>
              mid[ i * x_size + j ] = 1;
 800406c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800406e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004070:	fb02 f203 	mul.w	r2, r2, r3
 8004074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004076:	4413      	add	r3, r2
 8004078:	461a      	mov	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4413      	add	r3, r2
 800407e:	2201      	movs	r2, #1
 8004080:	701a      	strb	r2, [r3, #0]
 8004082:	e004      	b.n	800408e <susan_edges_small+0x466>
          } else
            do_symmetry = 1;
 8004084:	2301      	movs	r3, #1
 8004086:	643b      	str	r3, [r7, #64]	; 0x40
 8004088:	e001      	b.n	800408e <susan_edges_small+0x466>
        } else
          do_symmetry = 1;
 800408a:	2301      	movs	r3, #1
 800408c:	643b      	str	r3, [r7, #64]	; 0x40

        if ( do_symmetry == 1 ) {
 800408e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004090:	2b01      	cmp	r3, #1
 8004092:	f040 8113 	bne.w	80042bc <susan_edges_small+0x694>
          p = in + ( i - 1 ) * x_size + j - 1;
 8004096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004098:	3b01      	subs	r3, #1
 800409a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800409c:	fb02 f303 	mul.w	r3, r2, r3
 80040a0:	461a      	mov	r2, r3
 80040a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a4:	4413      	add	r3, r2
 80040a6:	3b01      	subs	r3, #1
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	4413      	add	r3, r2
 80040ac:	61fb      	str	r3, [r7, #28]
          x = 0;
 80040ae:	2300      	movs	r3, #0
 80040b0:	61bb      	str	r3, [r7, #24]
          y = 0;
 80040b2:	2300      	movs	r3, #0
 80040b4:	617b      	str	r3, [r7, #20]
          w = 0;
 80040b6:	2300      	movs	r3, #0
 80040b8:	62fb      	str	r3, [r7, #44]	; 0x2c

          /*   |      \
               y  -x-  w
               |        \   */

          c = *( cp - *p++ );
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	1c5a      	adds	r2, r3, #1
 80040be:	61fa      	str	r2, [r7, #28]
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	425b      	negs	r3, r3
 80040c4:	6a3a      	ldr	r2, [r7, #32]
 80040c6:	4413      	add	r3, r2
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	74fb      	strb	r3, [r7, #19]
          x += c;
 80040cc:	7cfb      	ldrb	r3, [r7, #19]
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	4413      	add	r3, r2
 80040d2:	61bb      	str	r3, [r7, #24]
          y += c;
 80040d4:	7cfb      	ldrb	r3, [r7, #19]
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	4413      	add	r3, r2
 80040da:	617b      	str	r3, [r7, #20]
          w += c;
 80040dc:	7cfb      	ldrb	r3, [r7, #19]
 80040de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040e0:	4413      	add	r3, r2
 80040e2:	62fb      	str	r3, [r7, #44]	; 0x2c
          c = *( cp - *p++ );
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	61fa      	str	r2, [r7, #28]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	425b      	negs	r3, r3
 80040ee:	6a3a      	ldr	r2, [r7, #32]
 80040f0:	4413      	add	r3, r2
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	74fb      	strb	r3, [r7, #19]
          y += c;
 80040f6:	7cfb      	ldrb	r3, [r7, #19]
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	4413      	add	r3, r2
 80040fc:	617b      	str	r3, [r7, #20]
          c = *( cp - *p );
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	425b      	negs	r3, r3
 8004104:	6a3a      	ldr	r2, [r7, #32]
 8004106:	4413      	add	r3, r2
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	74fb      	strb	r3, [r7, #19]
          x += c;
 800410c:	7cfb      	ldrb	r3, [r7, #19]
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	4413      	add	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
          y += c;
 8004114:	7cfb      	ldrb	r3, [r7, #19]
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	4413      	add	r3, r2
 800411a:	617b      	str	r3, [r7, #20]
          w -= c;
 800411c:	7cfb      	ldrb	r3, [r7, #19]
 800411e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	62fb      	str	r3, [r7, #44]	; 0x2c
          p += x_size - 2;
 8004124:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004126:	3b02      	subs	r3, #2
 8004128:	69fa      	ldr	r2, [r7, #28]
 800412a:	4413      	add	r3, r2
 800412c:	61fb      	str	r3, [r7, #28]

          c = *( cp - *p );
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	425b      	negs	r3, r3
 8004134:	6a3a      	ldr	r2, [r7, #32]
 8004136:	4413      	add	r3, r2
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	74fb      	strb	r3, [r7, #19]
          x += c;
 800413c:	7cfb      	ldrb	r3, [r7, #19]
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	4413      	add	r3, r2
 8004142:	61bb      	str	r3, [r7, #24]
          p += 2;
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	3302      	adds	r3, #2
 8004148:	61fb      	str	r3, [r7, #28]
          c = *( cp - *p );
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	425b      	negs	r3, r3
 8004150:	6a3a      	ldr	r2, [r7, #32]
 8004152:	4413      	add	r3, r2
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	74fb      	strb	r3, [r7, #19]
          x += c;
 8004158:	7cfb      	ldrb	r3, [r7, #19]
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	4413      	add	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
          p += x_size - 2;
 8004160:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004162:	3b02      	subs	r3, #2
 8004164:	69fa      	ldr	r2, [r7, #28]
 8004166:	4413      	add	r3, r2
 8004168:	61fb      	str	r3, [r7, #28]

          c = *( cp - *p++ );
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	61fa      	str	r2, [r7, #28]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	425b      	negs	r3, r3
 8004174:	6a3a      	ldr	r2, [r7, #32]
 8004176:	4413      	add	r3, r2
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	74fb      	strb	r3, [r7, #19]
          x += c;
 800417c:	7cfb      	ldrb	r3, [r7, #19]
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	4413      	add	r3, r2
 8004182:	61bb      	str	r3, [r7, #24]
          y += c;
 8004184:	7cfb      	ldrb	r3, [r7, #19]
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	4413      	add	r3, r2
 800418a:	617b      	str	r3, [r7, #20]
          w -= c;
 800418c:	7cfb      	ldrb	r3, [r7, #19]
 800418e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	62fb      	str	r3, [r7, #44]	; 0x2c
          c = *( cp - *p++ );
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	1c5a      	adds	r2, r3, #1
 8004198:	61fa      	str	r2, [r7, #28]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	425b      	negs	r3, r3
 800419e:	6a3a      	ldr	r2, [r7, #32]
 80041a0:	4413      	add	r3, r2
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	74fb      	strb	r3, [r7, #19]
          y += c;
 80041a6:	7cfb      	ldrb	r3, [r7, #19]
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	4413      	add	r3, r2
 80041ac:	617b      	str	r3, [r7, #20]
          c = *( cp - *p );
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	425b      	negs	r3, r3
 80041b4:	6a3a      	ldr	r2, [r7, #32]
 80041b6:	4413      	add	r3, r2
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	74fb      	strb	r3, [r7, #19]
          x += c;
 80041bc:	7cfb      	ldrb	r3, [r7, #19]
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	4413      	add	r3, r2
 80041c2:	61bb      	str	r3, [r7, #24]
          y += c;
 80041c4:	7cfb      	ldrb	r3, [r7, #19]
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	4413      	add	r3, r2
 80041ca:	617b      	str	r3, [r7, #20]
          w += c;
 80041cc:	7cfb      	ldrb	r3, [r7, #19]
 80041ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041d0:	4413      	add	r3, r2
 80041d2:	62fb      	str	r3, [r7, #44]	; 0x2c

          if ( y == 0 )
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d102      	bne.n	80041e0 <susan_edges_small+0x5b8>
            z = 1000000.0;
 80041da:	4b17      	ldr	r3, [pc, #92]	; (8004238 <susan_edges_small+0x610>)
 80041dc:	647b      	str	r3, [r7, #68]	; 0x44
 80041de:	e00d      	b.n	80041fc <susan_edges_small+0x5d4>
          else
            z = ( ( float )x ) / ( ( float )y );
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	ee07 3a90 	vmov	s15, r3
 80041e6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	ee07 3a90 	vmov	s15, r3
 80041f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041f8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
          if ( z < 0.5 ) {
 80041fc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004200:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004204:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800420c:	d504      	bpl.n	8004218 <susan_edges_small+0x5f0>
            /* vertical */ a = 0;
 800420e:	2300      	movs	r3, #0
 8004210:	637b      	str	r3, [r7, #52]	; 0x34
            b = 1;
 8004212:	2301      	movs	r3, #1
 8004214:	633b      	str	r3, [r7, #48]	; 0x30
 8004216:	e022      	b.n	800425e <susan_edges_small+0x636>
          } else {
            if ( z > 2.0 ) {
 8004218:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800421c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004220:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004228:	dd0c      	ble.n	8004244 <susan_edges_small+0x61c>
              /* horizontal */ a = 1;
 800422a:	2301      	movs	r3, #1
 800422c:	637b      	str	r3, [r7, #52]	; 0x34
              b = 0;
 800422e:	2300      	movs	r3, #0
 8004230:	633b      	str	r3, [r7, #48]	; 0x30
 8004232:	e014      	b.n	800425e <susan_edges_small+0x636>
 8004234:	f3af 8000 	nop.w
 8004238:	49742400 	.word	0x49742400
 800423c:	9999999a 	.word	0x9999999a
 8004240:	3fd99999 	.word	0x3fd99999
            } else {
              /* diagonal */ if ( w > 0 ) {
 8004244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004246:	2b00      	cmp	r3, #0
 8004248:	dd05      	ble.n	8004256 <susan_edges_small+0x62e>
                a = -1;
 800424a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800424e:	637b      	str	r3, [r7, #52]	; 0x34
                b = 1;
 8004250:	2301      	movs	r3, #1
 8004252:	633b      	str	r3, [r7, #48]	; 0x30
 8004254:	e003      	b.n	800425e <susan_edges_small+0x636>
              } else {
                a = 1;
 8004256:	2301      	movs	r3, #1
 8004258:	637b      	str	r3, [r7, #52]	; 0x34
                b = 1;
 800425a:	2301      	movs	r3, #1
 800425c:	633b      	str	r3, [r7, #48]	; 0x30
              }
            }
          }
          if ( ( m > r[ ( i + a )*x_size + j + b ] ) &&
 800425e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004262:	4413      	add	r3, r2
 8004264:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004266:	fb02 f203 	mul.w	r2, r2, r3
 800426a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426c:	441a      	add	r2, r3
 800426e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004270:	4413      	add	r3, r2
 8004272:	461a      	mov	r2, r3
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	4413      	add	r3, r2
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	461a      	mov	r2, r3
 800427c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427e:	4293      	cmp	r3, r2
 8004280:	dd1c      	ble.n	80042bc <susan_edges_small+0x694>
               ( m >= r[ ( i - a )*x_size + j - b ] ) )
 8004282:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800428a:	fb02 f203 	mul.w	r2, r2, r3
 800428e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004290:	441a      	add	r2, r3
 8004292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	461a      	mov	r2, r3
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	4413      	add	r3, r2
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	461a      	mov	r2, r3
          if ( ( m > r[ ( i + a )*x_size + j + b ] ) &&
 80042a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a2:	4293      	cmp	r3, r2
 80042a4:	db0a      	blt.n	80042bc <susan_edges_small+0x694>
            mid[ i * x_size + j ] = 2;
 80042a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042aa:	fb02 f203 	mul.w	r2, r2, r3
 80042ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b0:	4413      	add	r3, r2
 80042b2:	461a      	mov	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4413      	add	r3, r2
 80042b8:	2202      	movs	r2, #2
 80042ba:	701a      	strb	r2, [r3, #0]
    for ( j = 2; j < x_size - 2; j++ ) {
 80042bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042be:	3301      	adds	r3, #1
 80042c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80042c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042c4:	3b02      	subs	r3, #2
 80042c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042c8:	429a      	cmp	r2, r3
 80042ca:	f6ff ad70 	blt.w	8003dae <susan_edges_small+0x186>
  for ( i = 2; i < y_size - 2; i++ ) {
 80042ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042d0:	3301      	adds	r3, #1
 80042d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042d6:	3b02      	subs	r3, #2
 80042d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042da:	429a      	cmp	r2, r3
 80042dc:	f6ff ad64 	blt.w	8003da8 <susan_edges_small+0x180>
        }
      }
    }
  }
}
 80042e0:	bf00      	nop
 80042e2:	bf00      	nop
 80042e4:	3748      	adds	r7, #72	; 0x48
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bdb0      	pop	{r4, r5, r7, pc}
 80042ea:	bf00      	nop

080042ec <susan_corner_draw>:
#ifdef PROGRAM_ON_CCM2
__attribute__((section(".ccmram")))
#endif
void susan_corner_draw( uchar *in, CORNER_LIST corner_list,
                        int x_size, int drawing_mode )
{
 80042ec:	b480      	push	{r7}
 80042ee:	b087      	sub	sp, #28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
 80042f8:	603b      	str	r3, [r7, #0]
  uchar *p;
  int   n = 0;
 80042fa:	2300      	movs	r3, #0
 80042fc:	617b      	str	r3, [r7, #20]

  _Pragma( "loopbound min 0 max 0" )
  while ( corner_list[ n ].info != 7 ) {
 80042fe:	e073      	b.n	80043e8 <susan_corner_draw+0xfc>
    if ( drawing_mode == 0 ) {
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d150      	bne.n	80043a8 <susan_corner_draw+0xbc>
      p = in + ( corner_list[ n ].y - 1 ) * x_size + corner_list[ n ].x - 1;
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	4613      	mov	r3, r2
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	4413      	add	r3, r2
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	461a      	mov	r2, r3
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	4413      	add	r3, r2
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	3b01      	subs	r3, #1
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	fb02 f303 	mul.w	r3, r2, r3
 8004320:	4619      	mov	r1, r3
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	4613      	mov	r3, r2
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	4413      	add	r3, r2
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	461a      	mov	r2, r3
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	4413      	add	r3, r2
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	440b      	add	r3, r1
 8004336:	3b01      	subs	r3, #1
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	4413      	add	r3, r2
 800433c:	613b      	str	r3, [r7, #16]
      *p++ = 255;
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1c5a      	adds	r2, r3, #1
 8004342:	613a      	str	r2, [r7, #16]
 8004344:	22ff      	movs	r2, #255	; 0xff
 8004346:	701a      	strb	r2, [r3, #0]
      *p++ = 255;
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1c5a      	adds	r2, r3, #1
 800434c:	613a      	str	r2, [r7, #16]
 800434e:	22ff      	movs	r2, #255	; 0xff
 8004350:	701a      	strb	r2, [r3, #0]
      *p = 255;
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	22ff      	movs	r2, #255	; 0xff
 8004356:	701a      	strb	r2, [r3, #0]
      p += x_size - 2;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	3b02      	subs	r3, #2
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	4413      	add	r3, r2
 8004360:	613b      	str	r3, [r7, #16]
      *p++ = 255;
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	613a      	str	r2, [r7, #16]
 8004368:	22ff      	movs	r2, #255	; 0xff
 800436a:	701a      	strb	r2, [r3, #0]
      *p++ = 0;
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1c5a      	adds	r2, r3, #1
 8004370:	613a      	str	r2, [r7, #16]
 8004372:	2200      	movs	r2, #0
 8004374:	701a      	strb	r2, [r3, #0]
      *p = 255;
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	22ff      	movs	r2, #255	; 0xff
 800437a:	701a      	strb	r2, [r3, #0]
      p += x_size - 2;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3b02      	subs	r3, #2
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	4413      	add	r3, r2
 8004384:	613b      	str	r3, [r7, #16]
      *p++ = 255;
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	613a      	str	r2, [r7, #16]
 800438c:	22ff      	movs	r2, #255	; 0xff
 800438e:	701a      	strb	r2, [r3, #0]
      *p++ = 255;
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1c5a      	adds	r2, r3, #1
 8004394:	613a      	str	r2, [r7, #16]
 8004396:	22ff      	movs	r2, #255	; 0xff
 8004398:	701a      	strb	r2, [r3, #0]
      *p = 255;
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	22ff      	movs	r2, #255	; 0xff
 800439e:	701a      	strb	r2, [r3, #0]
      n++;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	3301      	adds	r3, #1
 80043a4:	617b      	str	r3, [r7, #20]
 80043a6:	e01f      	b.n	80043e8 <susan_corner_draw+0xfc>
    } else {
      p = in + corner_list[ n ].y * x_size + corner_list[ n ].x;
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	4613      	mov	r3, r2
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	4413      	add	r3, r2
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	461a      	mov	r2, r3
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	4413      	add	r3, r2
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	fb02 f303 	mul.w	r3, r2, r3
 80043c0:	4619      	mov	r1, r3
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	4613      	mov	r3, r2
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	4413      	add	r3, r2
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	461a      	mov	r2, r3
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	4413      	add	r3, r2
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	440b      	add	r3, r1
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	4413      	add	r3, r2
 80043da:	613b      	str	r3, [r7, #16]
      *p = 0;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	2200      	movs	r2, #0
 80043e0:	701a      	strb	r2, [r3, #0]
      n++;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	3301      	adds	r3, #1
 80043e6:	617b      	str	r3, [r7, #20]
  while ( corner_list[ n ].info != 7 ) {
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	4613      	mov	r3, r2
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	4413      	add	r3, r2
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	461a      	mov	r2, r3
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	4413      	add	r3, r2
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	2b07      	cmp	r3, #7
 80043fc:	d180      	bne.n	8004300 <susan_corner_draw+0x14>
    }
  }
}
 80043fe:	bf00      	nop
 8004400:	bf00      	nop
 8004402:	371c      	adds	r7, #28
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <susan_corners>:
#ifdef PROGRAM_ON_CCM2
__attribute__((section(".ccmram")))
#endif
void susan_corners( uchar *in, char *r, uchar *bp,
                    int max_no, CORNER_LIST corner_list, int x_size, int y_size )
{
 800440c:	b5b0      	push	{r4, r5, r7, lr}
 800440e:	b092      	sub	sp, #72	; 0x48
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
 8004418:	603b      	str	r3, [r7, #0]
        i, j;
  float divide;
  uchar c, *p, *cp;
  char  *cgx, *cgy;

  susan_wccmemset( r, 0, x_size * y_size );
 800441a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800441c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800441e:	fb02 f303 	mul.w	r3, r2, r3
 8004422:	461a      	mov	r2, r3
 8004424:	2100      	movs	r1, #0
 8004426:	68b8      	ldr	r0, [r7, #8]
 8004428:	f003 f844 	bl	80074b4 <susan_wccmemset>

  cgx = ( char * )susan_wccmalloc( x_size * y_size );
 800442c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800442e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004430:	fb02 f303 	mul.w	r3, r2, r3
 8004434:	4618      	mov	r0, r3
 8004436:	f002 ffe1 	bl	80073fc <susan_wccmalloc>
 800443a:	6378      	str	r0, [r7, #52]	; 0x34
  cgy = ( char * )susan_wccmalloc( x_size * y_size );
 800443c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800443e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004440:	fb02 f303 	mul.w	r3, r2, r3
 8004444:	4618      	mov	r0, r3
 8004446:	f002 ffd9 	bl	80073fc <susan_wccmalloc>
 800444a:	6338      	str	r0, [r7, #48]	; 0x30

  _Pragma( "loopbound min 85 max 85" )
  for ( i = 5; i < y_size - 5; i++ ) {
 800444c:	2305      	movs	r3, #5
 800444e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004450:	f000 bf0b 	b.w	800526a <susan_corners+0xe5e>
    _Pragma( "loopbound min 66 max 66" )
    for ( j = 5; j < x_size - 5; j++ ) {
 8004454:	2305      	movs	r3, #5
 8004456:	63bb      	str	r3, [r7, #56]	; 0x38
 8004458:	f000 befe 	b.w	8005258 <susan_corners+0xe4c>
      n = 100;
 800445c:	2364      	movs	r3, #100	; 0x64
 800445e:	647b      	str	r3, [r7, #68]	; 0x44
      p = in + ( i - 3 ) * x_size + j - 1;
 8004460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004462:	3b03      	subs	r3, #3
 8004464:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004466:	fb02 f303 	mul.w	r3, r2, r3
 800446a:	461a      	mov	r2, r3
 800446c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446e:	4413      	add	r3, r2
 8004470:	3b01      	subs	r3, #1
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	4413      	add	r3, r2
 8004476:	62bb      	str	r3, [r7, #40]	; 0x28
      cp = bp + in[ i * x_size + j ];
 8004478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800447a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800447c:	fb02 f203 	mul.w	r2, r2, r3
 8004480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004482:	4413      	add	r3, r2
 8004484:	461a      	mov	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	4413      	add	r3, r2
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	461a      	mov	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4413      	add	r3, r2
 8004492:	627b      	str	r3, [r7, #36]	; 0x24

      n += *( cp - *p++ );
 8004494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004496:	1c5a      	adds	r2, r3, #1
 8004498:	62ba      	str	r2, [r7, #40]	; 0x28
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	425b      	negs	r3, r3
 800449e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a0:	4413      	add	r3, r2
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	461a      	mov	r2, r3
 80044a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044a8:	4413      	add	r3, r2
 80044aa:	647b      	str	r3, [r7, #68]	; 0x44
      n += *( cp - *p++ );
 80044ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	62ba      	str	r2, [r7, #40]	; 0x28
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	425b      	negs	r3, r3
 80044b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b8:	4413      	add	r3, r2
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	461a      	mov	r2, r3
 80044be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044c0:	4413      	add	r3, r2
 80044c2:	647b      	str	r3, [r7, #68]	; 0x44
      n += *( cp - *p );
 80044c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	425b      	negs	r3, r3
 80044ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044cc:	4413      	add	r3, r2
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	461a      	mov	r2, r3
 80044d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044d4:	4413      	add	r3, r2
 80044d6:	647b      	str	r3, [r7, #68]	; 0x44
      p += x_size - 3;
 80044d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044da:	3b03      	subs	r3, #3
 80044dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044de:	4413      	add	r3, r2
 80044e0:	62bb      	str	r3, [r7, #40]	; 0x28

      n += *( cp - *p++ );
 80044e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e4:	1c5a      	adds	r2, r3, #1
 80044e6:	62ba      	str	r2, [r7, #40]	; 0x28
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	425b      	negs	r3, r3
 80044ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ee:	4413      	add	r3, r2
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	461a      	mov	r2, r3
 80044f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044f6:	4413      	add	r3, r2
 80044f8:	647b      	str	r3, [r7, #68]	; 0x44
      n += *( cp - *p++ );
 80044fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	62ba      	str	r2, [r7, #40]	; 0x28
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	425b      	negs	r3, r3
 8004504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004506:	4413      	add	r3, r2
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	461a      	mov	r2, r3
 800450c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800450e:	4413      	add	r3, r2
 8004510:	647b      	str	r3, [r7, #68]	; 0x44
      n += *( cp - *p++ );
 8004512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	62ba      	str	r2, [r7, #40]	; 0x28
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	425b      	negs	r3, r3
 800451c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800451e:	4413      	add	r3, r2
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004526:	4413      	add	r3, r2
 8004528:	647b      	str	r3, [r7, #68]	; 0x44
      n += *( cp - *p++ );
 800452a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452c:	1c5a      	adds	r2, r3, #1
 800452e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	425b      	negs	r3, r3
 8004534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004536:	4413      	add	r3, r2
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	461a      	mov	r2, r3
 800453c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800453e:	4413      	add	r3, r2
 8004540:	647b      	str	r3, [r7, #68]	; 0x44
      n += *( cp - *p );
 8004542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	425b      	negs	r3, r3
 8004548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800454a:	4413      	add	r3, r2
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	461a      	mov	r2, r3
 8004550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004552:	4413      	add	r3, r2
 8004554:	647b      	str	r3, [r7, #68]	; 0x44
      p += x_size - 5;
 8004556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004558:	3b05      	subs	r3, #5
 800455a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800455c:	4413      	add	r3, r2
 800455e:	62bb      	str	r3, [r7, #40]	; 0x28

      n += *( cp - *p++ );
 8004560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004562:	1c5a      	adds	r2, r3, #1
 8004564:	62ba      	str	r2, [r7, #40]	; 0x28
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	425b      	negs	r3, r3
 800456a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800456c:	4413      	add	r3, r2
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	461a      	mov	r2, r3
 8004572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004574:	4413      	add	r3, r2
 8004576:	647b      	str	r3, [r7, #68]	; 0x44
      n += *( cp - *p++ );
 8004578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	62ba      	str	r2, [r7, #40]	; 0x28
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	425b      	negs	r3, r3
 8004582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004584:	4413      	add	r3, r2
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	461a      	mov	r2, r3
 800458a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800458c:	4413      	add	r3, r2
 800458e:	647b      	str	r3, [r7, #68]	; 0x44
      n += *( cp - *p++ );
 8004590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004592:	1c5a      	adds	r2, r3, #1
 8004594:	62ba      	str	r2, [r7, #40]	; 0x28
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	425b      	negs	r3, r3
 800459a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800459c:	4413      	add	r3, r2
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	461a      	mov	r2, r3
 80045a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045a4:	4413      	add	r3, r2
 80045a6:	647b      	str	r3, [r7, #68]	; 0x44
      n += *( cp - *p++ );
 80045a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	62ba      	str	r2, [r7, #40]	; 0x28
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	425b      	negs	r3, r3
 80045b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045b4:	4413      	add	r3, r2
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	461a      	mov	r2, r3
 80045ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045bc:	4413      	add	r3, r2
 80045be:	647b      	str	r3, [r7, #68]	; 0x44
      n += *( cp - *p++ );
 80045c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c2:	1c5a      	adds	r2, r3, #1
 80045c4:	62ba      	str	r2, [r7, #40]	; 0x28
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	425b      	negs	r3, r3
 80045ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045cc:	4413      	add	r3, r2
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	461a      	mov	r2, r3
 80045d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045d4:	4413      	add	r3, r2
 80045d6:	647b      	str	r3, [r7, #68]	; 0x44
      n += *( cp - *p++ );
 80045d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045da:	1c5a      	adds	r2, r3, #1
 80045dc:	62ba      	str	r2, [r7, #40]	; 0x28
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	425b      	negs	r3, r3
 80045e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045e4:	4413      	add	r3, r2
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	461a      	mov	r2, r3
 80045ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045ec:	4413      	add	r3, r2
 80045ee:	647b      	str	r3, [r7, #68]	; 0x44
      n += *( cp - *p );
 80045f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	425b      	negs	r3, r3
 80045f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f8:	4413      	add	r3, r2
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	461a      	mov	r2, r3
 80045fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004600:	4413      	add	r3, r2
 8004602:	647b      	str	r3, [r7, #68]	; 0x44
      p += x_size - 6;
 8004604:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004606:	3b06      	subs	r3, #6
 8004608:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800460a:	4413      	add	r3, r2
 800460c:	62bb      	str	r3, [r7, #40]	; 0x28

      n += *( cp - *p++ );
 800460e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004610:	1c5a      	adds	r2, r3, #1
 8004612:	62ba      	str	r2, [r7, #40]	; 0x28
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	425b      	negs	r3, r3
 8004618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800461a:	4413      	add	r3, r2
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	461a      	mov	r2, r3
 8004620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004622:	4413      	add	r3, r2
 8004624:	647b      	str	r3, [r7, #68]	; 0x44
      n += *( cp - *p++ );
 8004626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	62ba      	str	r2, [r7, #40]	; 0x28
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	425b      	negs	r3, r3
 8004630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004632:	4413      	add	r3, r2
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	461a      	mov	r2, r3
 8004638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800463a:	4413      	add	r3, r2
 800463c:	647b      	str	r3, [r7, #68]	; 0x44
      n += *( cp - *p );
 800463e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	425b      	negs	r3, r3
 8004644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004646:	4413      	add	r3, r2
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	461a      	mov	r2, r3
 800464c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800464e:	4413      	add	r3, r2
 8004650:	647b      	str	r3, [r7, #68]	; 0x44
      if ( n < max_no ) { /* do this test early and often ONLY to save wasted computation */
 8004652:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	429a      	cmp	r2, r3
 8004658:	f280 85fb 	bge.w	8005252 <susan_corners+0xe46>
        p += 2;
 800465c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465e:	3302      	adds	r3, #2
 8004660:	62bb      	str	r3, [r7, #40]	; 0x28
        n += *( cp - *p++ );
 8004662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004664:	1c5a      	adds	r2, r3, #1
 8004666:	62ba      	str	r2, [r7, #40]	; 0x28
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	425b      	negs	r3, r3
 800466c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800466e:	4413      	add	r3, r2
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	461a      	mov	r2, r3
 8004674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004676:	4413      	add	r3, r2
 8004678:	647b      	str	r3, [r7, #68]	; 0x44
        if ( n < max_no ) {
 800467a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	429a      	cmp	r2, r3
 8004680:	f280 85e7 	bge.w	8005252 <susan_corners+0xe46>
          n += *( cp - *p++ );
 8004684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004686:	1c5a      	adds	r2, r3, #1
 8004688:	62ba      	str	r2, [r7, #40]	; 0x28
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	425b      	negs	r3, r3
 800468e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004690:	4413      	add	r3, r2
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	461a      	mov	r2, r3
 8004696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004698:	4413      	add	r3, r2
 800469a:	647b      	str	r3, [r7, #68]	; 0x44
          if ( n < max_no ) {
 800469c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	f280 85d6 	bge.w	8005252 <susan_corners+0xe46>
            n += *( cp - *p );
 80046a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	425b      	negs	r3, r3
 80046ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ae:	4413      	add	r3, r2
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	461a      	mov	r2, r3
 80046b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046b6:	4413      	add	r3, r2
 80046b8:	647b      	str	r3, [r7, #68]	; 0x44
            if ( n < max_no ) {
 80046ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	429a      	cmp	r2, r3
 80046c0:	f280 85c7 	bge.w	8005252 <susan_corners+0xe46>
              p += x_size - 6;
 80046c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046c6:	3b06      	subs	r3, #6
 80046c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046ca:	4413      	add	r3, r2
 80046cc:	62bb      	str	r3, [r7, #40]	; 0x28

              n += *( cp - *p++ );
 80046ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d0:	1c5a      	adds	r2, r3, #1
 80046d2:	62ba      	str	r2, [r7, #40]	; 0x28
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	425b      	negs	r3, r3
 80046d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046da:	4413      	add	r3, r2
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	461a      	mov	r2, r3
 80046e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046e2:	4413      	add	r3, r2
 80046e4:	647b      	str	r3, [r7, #68]	; 0x44
              if ( n < max_no ) {
 80046e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	f280 85b1 	bge.w	8005252 <susan_corners+0xe46>
                n += *( cp - *p++ );
 80046f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	62ba      	str	r2, [r7, #40]	; 0x28
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	425b      	negs	r3, r3
 80046fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046fc:	4413      	add	r3, r2
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	461a      	mov	r2, r3
 8004702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004704:	4413      	add	r3, r2
 8004706:	647b      	str	r3, [r7, #68]	; 0x44
                if ( n < max_no ) {
 8004708:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	429a      	cmp	r2, r3
 800470e:	f280 85a0 	bge.w	8005252 <susan_corners+0xe46>
                  n += *( cp - *p++ );
 8004712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004714:	1c5a      	adds	r2, r3, #1
 8004716:	62ba      	str	r2, [r7, #40]	; 0x28
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	425b      	negs	r3, r3
 800471c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800471e:	4413      	add	r3, r2
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	461a      	mov	r2, r3
 8004724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004726:	4413      	add	r3, r2
 8004728:	647b      	str	r3, [r7, #68]	; 0x44
                  if ( n < max_no ) {
 800472a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	f280 858f 	bge.w	8005252 <susan_corners+0xe46>
                    n += *( cp - *p++ );
 8004734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004736:	1c5a      	adds	r2, r3, #1
 8004738:	62ba      	str	r2, [r7, #40]	; 0x28
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	425b      	negs	r3, r3
 800473e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004740:	4413      	add	r3, r2
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	461a      	mov	r2, r3
 8004746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004748:	4413      	add	r3, r2
 800474a:	647b      	str	r3, [r7, #68]	; 0x44
                    if ( n < max_no ) {
 800474c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	429a      	cmp	r2, r3
 8004752:	f280 857e 	bge.w	8005252 <susan_corners+0xe46>
                      n += *( cp - *p++ );
 8004756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004758:	1c5a      	adds	r2, r3, #1
 800475a:	62ba      	str	r2, [r7, #40]	; 0x28
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	425b      	negs	r3, r3
 8004760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004762:	4413      	add	r3, r2
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	461a      	mov	r2, r3
 8004768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800476a:	4413      	add	r3, r2
 800476c:	647b      	str	r3, [r7, #68]	; 0x44
                      if ( n < max_no ) {
 800476e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	429a      	cmp	r2, r3
 8004774:	f280 856d 	bge.w	8005252 <susan_corners+0xe46>
                        n += *( cp - *p++ );
 8004778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477a:	1c5a      	adds	r2, r3, #1
 800477c:	62ba      	str	r2, [r7, #40]	; 0x28
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	425b      	negs	r3, r3
 8004782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004784:	4413      	add	r3, r2
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	461a      	mov	r2, r3
 800478a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800478c:	4413      	add	r3, r2
 800478e:	647b      	str	r3, [r7, #68]	; 0x44
                        if ( n < max_no ) {
 8004790:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	429a      	cmp	r2, r3
 8004796:	f280 855c 	bge.w	8005252 <susan_corners+0xe46>
                          n += *( cp - *p );
 800479a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	425b      	negs	r3, r3
 80047a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a2:	4413      	add	r3, r2
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	461a      	mov	r2, r3
 80047a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047aa:	4413      	add	r3, r2
 80047ac:	647b      	str	r3, [r7, #68]	; 0x44
                          if ( n < max_no ) {
 80047ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	f280 854d 	bge.w	8005252 <susan_corners+0xe46>
                            p += x_size - 5;
 80047b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ba:	3b05      	subs	r3, #5
 80047bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047be:	4413      	add	r3, r2
 80047c0:	62bb      	str	r3, [r7, #40]	; 0x28

                            n += *( cp - *p++ );
 80047c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c4:	1c5a      	adds	r2, r3, #1
 80047c6:	62ba      	str	r2, [r7, #40]	; 0x28
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	425b      	negs	r3, r3
 80047cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ce:	4413      	add	r3, r2
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	461a      	mov	r2, r3
 80047d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047d6:	4413      	add	r3, r2
 80047d8:	647b      	str	r3, [r7, #68]	; 0x44
                            if ( n < max_no ) {
 80047da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	429a      	cmp	r2, r3
 80047e0:	f280 8537 	bge.w	8005252 <susan_corners+0xe46>
                              n += *( cp - *p++ );
 80047e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	62ba      	str	r2, [r7, #40]	; 0x28
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	425b      	negs	r3, r3
 80047ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f0:	4413      	add	r3, r2
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	461a      	mov	r2, r3
 80047f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047f8:	4413      	add	r3, r2
 80047fa:	647b      	str	r3, [r7, #68]	; 0x44
                              if ( n < max_no ) {
 80047fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	429a      	cmp	r2, r3
 8004802:	f280 8526 	bge.w	8005252 <susan_corners+0xe46>
                                n += *( cp - *p++ );
 8004806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004808:	1c5a      	adds	r2, r3, #1
 800480a:	62ba      	str	r2, [r7, #40]	; 0x28
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	425b      	negs	r3, r3
 8004810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004812:	4413      	add	r3, r2
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	461a      	mov	r2, r3
 8004818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800481a:	4413      	add	r3, r2
 800481c:	647b      	str	r3, [r7, #68]	; 0x44
                                if ( n < max_no ) {
 800481e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	f280 8515 	bge.w	8005252 <susan_corners+0xe46>
                                  n += *( cp - *p++ );
 8004828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482a:	1c5a      	adds	r2, r3, #1
 800482c:	62ba      	str	r2, [r7, #40]	; 0x28
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	425b      	negs	r3, r3
 8004832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004834:	4413      	add	r3, r2
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	461a      	mov	r2, r3
 800483a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800483c:	4413      	add	r3, r2
 800483e:	647b      	str	r3, [r7, #68]	; 0x44
                                  if ( n < max_no ) {
 8004840:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	429a      	cmp	r2, r3
 8004846:	f280 8504 	bge.w	8005252 <susan_corners+0xe46>
                                    n += *( cp - *p );
 800484a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	425b      	negs	r3, r3
 8004850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004852:	4413      	add	r3, r2
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	461a      	mov	r2, r3
 8004858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800485a:	4413      	add	r3, r2
 800485c:	647b      	str	r3, [r7, #68]	; 0x44
                                    if ( n < max_no ) {
 800485e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	f280 84f5 	bge.w	8005252 <susan_corners+0xe46>
                                      p += x_size - 3;
 8004868:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800486a:	3b03      	subs	r3, #3
 800486c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800486e:	4413      	add	r3, r2
 8004870:	62bb      	str	r3, [r7, #40]	; 0x28

                                      n += *( cp - *p++ );
 8004872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004874:	1c5a      	adds	r2, r3, #1
 8004876:	62ba      	str	r2, [r7, #40]	; 0x28
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	425b      	negs	r3, r3
 800487c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800487e:	4413      	add	r3, r2
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	461a      	mov	r2, r3
 8004884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004886:	4413      	add	r3, r2
 8004888:	647b      	str	r3, [r7, #68]	; 0x44
                                      if ( n < max_no ) {
 800488a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	429a      	cmp	r2, r3
 8004890:	f280 84df 	bge.w	8005252 <susan_corners+0xe46>
                                        n += *( cp - *p++ );
 8004894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004896:	1c5a      	adds	r2, r3, #1
 8004898:	62ba      	str	r2, [r7, #40]	; 0x28
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	425b      	negs	r3, r3
 800489e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a0:	4413      	add	r3, r2
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	461a      	mov	r2, r3
 80048a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048a8:	4413      	add	r3, r2
 80048aa:	647b      	str	r3, [r7, #68]	; 0x44
                                        if ( n < max_no ) {
 80048ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	f280 84ce 	bge.w	8005252 <susan_corners+0xe46>
                                          n += *( cp - *p );
 80048b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	425b      	negs	r3, r3
 80048bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048be:	4413      	add	r3, r2
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	461a      	mov	r2, r3
 80048c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048c6:	4413      	add	r3, r2
 80048c8:	647b      	str	r3, [r7, #68]	; 0x44

                                          if ( n < max_no ) {
 80048ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	f280 84bf 	bge.w	8005252 <susan_corners+0xe46>
                                            x = 0;
 80048d4:	2300      	movs	r3, #0
 80048d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                                            y = 0;
 80048d8:	2300      	movs	r3, #0
 80048da:	623b      	str	r3, [r7, #32]
                                            p = in + ( i - 3 ) * x_size + j - 1;
 80048dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048de:	3b03      	subs	r3, #3
 80048e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80048e2:	fb02 f303 	mul.w	r3, r2, r3
 80048e6:	461a      	mov	r2, r3
 80048e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ea:	4413      	add	r3, r2
 80048ec:	3b01      	subs	r3, #1
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	4413      	add	r3, r2
 80048f2:	62bb      	str	r3, [r7, #40]	; 0x28

                                            c = *( cp - *p++ );
 80048f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f6:	1c5a      	adds	r2, r3, #1
 80048f8:	62ba      	str	r2, [r7, #40]	; 0x28
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	425b      	negs	r3, r3
 80048fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004900:	4413      	add	r3, r2
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	77fb      	strb	r3, [r7, #31]
                                            x -= c;
 8004906:	7ffb      	ldrb	r3, [r7, #31]
 8004908:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	62fb      	str	r3, [r7, #44]	; 0x2c
                                            y -= 3 * c;
 800490e:	7ffb      	ldrb	r3, [r7, #31]
 8004910:	461a      	mov	r2, r3
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	6a3a      	ldr	r2, [r7, #32]
 8004918:	4413      	add	r3, r2
 800491a:	623b      	str	r3, [r7, #32]
                                            c = *( cp - *p++ );
 800491c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	62ba      	str	r2, [r7, #40]	; 0x28
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	425b      	negs	r3, r3
 8004926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004928:	4413      	add	r3, r2
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	77fb      	strb	r3, [r7, #31]
                                            y -= 3 * c;
 800492e:	7ffb      	ldrb	r3, [r7, #31]
 8004930:	461a      	mov	r2, r3
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	6a3a      	ldr	r2, [r7, #32]
 8004938:	4413      	add	r3, r2
 800493a:	623b      	str	r3, [r7, #32]
                                            c = *( cp - *p );
 800493c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	425b      	negs	r3, r3
 8004942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004944:	4413      	add	r3, r2
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	77fb      	strb	r3, [r7, #31]
                                            x += c;
 800494a:	7ffb      	ldrb	r3, [r7, #31]
 800494c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800494e:	4413      	add	r3, r2
 8004950:	62fb      	str	r3, [r7, #44]	; 0x2c
                                            y -= 3 * c;
 8004952:	7ffb      	ldrb	r3, [r7, #31]
 8004954:	461a      	mov	r2, r3
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	6a3a      	ldr	r2, [r7, #32]
 800495c:	4413      	add	r3, r2
 800495e:	623b      	str	r3, [r7, #32]
                                            p += x_size - 3;
 8004960:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004962:	3b03      	subs	r3, #3
 8004964:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004966:	4413      	add	r3, r2
 8004968:	62bb      	str	r3, [r7, #40]	; 0x28

                                            c = *( cp - *p++ );
 800496a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	425b      	negs	r3, r3
 8004974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004976:	4413      	add	r3, r2
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	77fb      	strb	r3, [r7, #31]
                                            x -= 2 * c;
 800497c:	7ffb      	ldrb	r3, [r7, #31]
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	62fb      	str	r3, [r7, #44]	; 0x2c
                                            y -= 2 * c;
 8004986:	7ffb      	ldrb	r3, [r7, #31]
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	6a3a      	ldr	r2, [r7, #32]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	623b      	str	r3, [r7, #32]
                                            c = *( cp - *p++ );
 8004990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	62ba      	str	r2, [r7, #40]	; 0x28
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	425b      	negs	r3, r3
 800499a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800499c:	4413      	add	r3, r2
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	77fb      	strb	r3, [r7, #31]
                                            x -= c;
 80049a2:	7ffb      	ldrb	r3, [r7, #31]
 80049a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                                            y -= 2 * c;
 80049aa:	7ffb      	ldrb	r3, [r7, #31]
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	6a3a      	ldr	r2, [r7, #32]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	623b      	str	r3, [r7, #32]
                                            c = *( cp - *p++ );
 80049b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b6:	1c5a      	adds	r2, r3, #1
 80049b8:	62ba      	str	r2, [r7, #40]	; 0x28
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	425b      	negs	r3, r3
 80049be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c0:	4413      	add	r3, r2
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	77fb      	strb	r3, [r7, #31]
                                            y -= 2 * c;
 80049c6:	7ffb      	ldrb	r3, [r7, #31]
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	6a3a      	ldr	r2, [r7, #32]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	623b      	str	r3, [r7, #32]
                                            c = *( cp - *p++ );
 80049d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	62ba      	str	r2, [r7, #40]	; 0x28
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	425b      	negs	r3, r3
 80049da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049dc:	4413      	add	r3, r2
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	77fb      	strb	r3, [r7, #31]
                                            x += c;
 80049e2:	7ffb      	ldrb	r3, [r7, #31]
 80049e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049e6:	4413      	add	r3, r2
 80049e8:	62fb      	str	r3, [r7, #44]	; 0x2c
                                            y -= 2 * c;
 80049ea:	7ffb      	ldrb	r3, [r7, #31]
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	6a3a      	ldr	r2, [r7, #32]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	623b      	str	r3, [r7, #32]
                                            c = *( cp - *p );
 80049f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	425b      	negs	r3, r3
 80049fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049fc:	4413      	add	r3, r2
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	77fb      	strb	r3, [r7, #31]
                                            x += 2 * c;
 8004a02:	7ffb      	ldrb	r3, [r7, #31]
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a08:	4413      	add	r3, r2
 8004a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                            y -= 2 * c;
 8004a0c:	7ffb      	ldrb	r3, [r7, #31]
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	6a3a      	ldr	r2, [r7, #32]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	623b      	str	r3, [r7, #32]
                                            p += x_size - 5;
 8004a16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a18:	3b05      	subs	r3, #5
 8004a1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a1c:	4413      	add	r3, r2
 8004a1e:	62bb      	str	r3, [r7, #40]	; 0x28

                                            c = *( cp - *p++ );
 8004a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a22:	1c5a      	adds	r2, r3, #1
 8004a24:	62ba      	str	r2, [r7, #40]	; 0x28
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	425b      	negs	r3, r3
 8004a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a2c:	4413      	add	r3, r2
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	77fb      	strb	r3, [r7, #31]
                                            x -= 3 * c;
 8004a32:	7ffb      	ldrb	r3, [r7, #31]
 8004a34:	461a      	mov	r2, r3
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a3c:	4413      	add	r3, r2
 8004a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                            y -= c;
 8004a40:	7ffb      	ldrb	r3, [r7, #31]
 8004a42:	6a3a      	ldr	r2, [r7, #32]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	623b      	str	r3, [r7, #32]
                                            c = *( cp - *p++ );
 8004a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4a:	1c5a      	adds	r2, r3, #1
 8004a4c:	62ba      	str	r2, [r7, #40]	; 0x28
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	425b      	negs	r3, r3
 8004a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a54:	4413      	add	r3, r2
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	77fb      	strb	r3, [r7, #31]
                                            x -= 2 * c;
 8004a5a:	7ffb      	ldrb	r3, [r7, #31]
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	62fb      	str	r3, [r7, #44]	; 0x2c
                                            y -= c;
 8004a64:	7ffb      	ldrb	r3, [r7, #31]
 8004a66:	6a3a      	ldr	r2, [r7, #32]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	623b      	str	r3, [r7, #32]
                                            c = *( cp - *p++ );
 8004a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6e:	1c5a      	adds	r2, r3, #1
 8004a70:	62ba      	str	r2, [r7, #40]	; 0x28
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	425b      	negs	r3, r3
 8004a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a78:	4413      	add	r3, r2
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	77fb      	strb	r3, [r7, #31]
                                            x -= c;
 8004a7e:	7ffb      	ldrb	r3, [r7, #31]
 8004a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	62fb      	str	r3, [r7, #44]	; 0x2c
                                            y -= c;
 8004a86:	7ffb      	ldrb	r3, [r7, #31]
 8004a88:	6a3a      	ldr	r2, [r7, #32]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	623b      	str	r3, [r7, #32]
                                            c = *( cp - *p++ );
 8004a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	62ba      	str	r2, [r7, #40]	; 0x28
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	425b      	negs	r3, r3
 8004a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a9a:	4413      	add	r3, r2
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	77fb      	strb	r3, [r7, #31]
                                            y -= c;
 8004aa0:	7ffb      	ldrb	r3, [r7, #31]
 8004aa2:	6a3a      	ldr	r2, [r7, #32]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	623b      	str	r3, [r7, #32]
                                            c = *( cp - *p++ );
 8004aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aaa:	1c5a      	adds	r2, r3, #1
 8004aac:	62ba      	str	r2, [r7, #40]	; 0x28
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	425b      	negs	r3, r3
 8004ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab4:	4413      	add	r3, r2
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	77fb      	strb	r3, [r7, #31]
                                            x += c;
 8004aba:	7ffb      	ldrb	r3, [r7, #31]
 8004abc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004abe:	4413      	add	r3, r2
 8004ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
                                            y -= c;
 8004ac2:	7ffb      	ldrb	r3, [r7, #31]
 8004ac4:	6a3a      	ldr	r2, [r7, #32]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	623b      	str	r3, [r7, #32]
                                            c = *( cp - *p++ );
 8004aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	62ba      	str	r2, [r7, #40]	; 0x28
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	425b      	negs	r3, r3
 8004ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad6:	4413      	add	r3, r2
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	77fb      	strb	r3, [r7, #31]
                                            x += 2 * c;
 8004adc:	7ffb      	ldrb	r3, [r7, #31]
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ae2:	4413      	add	r3, r2
 8004ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
                                            y -= c;
 8004ae6:	7ffb      	ldrb	r3, [r7, #31]
 8004ae8:	6a3a      	ldr	r2, [r7, #32]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	623b      	str	r3, [r7, #32]
                                            c = *( cp - *p );
 8004aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	425b      	negs	r3, r3
 8004af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004af6:	4413      	add	r3, r2
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	77fb      	strb	r3, [r7, #31]
                                            x += 3 * c;
 8004afc:	7ffa      	ldrb	r2, [r7, #31]
 8004afe:	4613      	mov	r3, r2
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	4413      	add	r3, r2
 8004b04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b06:	4413      	add	r3, r2
 8004b08:	62fb      	str	r3, [r7, #44]	; 0x2c
                                            y -= c;
 8004b0a:	7ffb      	ldrb	r3, [r7, #31]
 8004b0c:	6a3a      	ldr	r2, [r7, #32]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	623b      	str	r3, [r7, #32]
                                            p += x_size - 6;
 8004b12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b14:	3b06      	subs	r3, #6
 8004b16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b18:	4413      	add	r3, r2
 8004b1a:	62bb      	str	r3, [r7, #40]	; 0x28

                                            c = *( cp - *p++ );
 8004b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1e:	1c5a      	adds	r2, r3, #1
 8004b20:	62ba      	str	r2, [r7, #40]	; 0x28
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	425b      	negs	r3, r3
 8004b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b28:	4413      	add	r3, r2
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	77fb      	strb	r3, [r7, #31]
                                            x -= 3 * c;
 8004b2e:	7ffb      	ldrb	r3, [r7, #31]
 8004b30:	461a      	mov	r2, r3
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b38:	4413      	add	r3, r2
 8004b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                            c = *( cp - *p++ );
 8004b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3e:	1c5a      	adds	r2, r3, #1
 8004b40:	62ba      	str	r2, [r7, #40]	; 0x28
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	425b      	negs	r3, r3
 8004b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b48:	4413      	add	r3, r2
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	77fb      	strb	r3, [r7, #31]
                                            x -= 2 * c;
 8004b4e:	7ffb      	ldrb	r3, [r7, #31]
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	62fb      	str	r3, [r7, #44]	; 0x2c
                                            c = *( cp - *p );
 8004b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	425b      	negs	r3, r3
 8004b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b60:	4413      	add	r3, r2
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	77fb      	strb	r3, [r7, #31]
                                            x -= c;
 8004b66:	7ffb      	ldrb	r3, [r7, #31]
 8004b68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
                                            p += 2;
 8004b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b70:	3302      	adds	r3, #2
 8004b72:	62bb      	str	r3, [r7, #40]	; 0x28
                                            c = *( cp - *p++ );
 8004b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b76:	1c5a      	adds	r2, r3, #1
 8004b78:	62ba      	str	r2, [r7, #40]	; 0x28
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	425b      	negs	r3, r3
 8004b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b80:	4413      	add	r3, r2
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	77fb      	strb	r3, [r7, #31]
                                            x += c;
 8004b86:	7ffb      	ldrb	r3, [r7, #31]
 8004b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b8a:	4413      	add	r3, r2
 8004b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
                                            c = *( cp - *p++ );
 8004b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b90:	1c5a      	adds	r2, r3, #1
 8004b92:	62ba      	str	r2, [r7, #40]	; 0x28
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	425b      	negs	r3, r3
 8004b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b9a:	4413      	add	r3, r2
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	77fb      	strb	r3, [r7, #31]
                                            x += 2 * c;
 8004ba0:	7ffb      	ldrb	r3, [r7, #31]
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ba6:	4413      	add	r3, r2
 8004ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
                                            c = *( cp - *p );
 8004baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	425b      	negs	r3, r3
 8004bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb2:	4413      	add	r3, r2
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	77fb      	strb	r3, [r7, #31]
                                            x += 3 * c;
 8004bb8:	7ffa      	ldrb	r2, [r7, #31]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	4413      	add	r3, r2
 8004bc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bc2:	4413      	add	r3, r2
 8004bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
                                            p += x_size - 6;
 8004bc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bc8:	3b06      	subs	r3, #6
 8004bca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bcc:	4413      	add	r3, r2
 8004bce:	62bb      	str	r3, [r7, #40]	; 0x28

                                            c = *( cp - *p++ );
 8004bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd2:	1c5a      	adds	r2, r3, #1
 8004bd4:	62ba      	str	r2, [r7, #40]	; 0x28
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	425b      	negs	r3, r3
 8004bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bdc:	4413      	add	r3, r2
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	77fb      	strb	r3, [r7, #31]
                                            x -= 3 * c;
 8004be2:	7ffb      	ldrb	r3, [r7, #31]
 8004be4:	461a      	mov	r2, r3
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bec:	4413      	add	r3, r2
 8004bee:	62fb      	str	r3, [r7, #44]	; 0x2c
                                            y += c;
 8004bf0:	7ffb      	ldrb	r3, [r7, #31]
 8004bf2:	6a3a      	ldr	r2, [r7, #32]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	623b      	str	r3, [r7, #32]
                                            c = *( cp - *p++ );
 8004bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfa:	1c5a      	adds	r2, r3, #1
 8004bfc:	62ba      	str	r2, [r7, #40]	; 0x28
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	425b      	negs	r3, r3
 8004c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c04:	4413      	add	r3, r2
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	77fb      	strb	r3, [r7, #31]
                                            x -= 2 * c;
 8004c0a:	7ffb      	ldrb	r3, [r7, #31]
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	62fb      	str	r3, [r7, #44]	; 0x2c
                                            y += c;
 8004c14:	7ffb      	ldrb	r3, [r7, #31]
 8004c16:	6a3a      	ldr	r2, [r7, #32]
 8004c18:	4413      	add	r3, r2
 8004c1a:	623b      	str	r3, [r7, #32]
                                            c = *( cp - *p++ );
 8004c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1e:	1c5a      	adds	r2, r3, #1
 8004c20:	62ba      	str	r2, [r7, #40]	; 0x28
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	425b      	negs	r3, r3
 8004c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c28:	4413      	add	r3, r2
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	77fb      	strb	r3, [r7, #31]
                                            x -= c;
 8004c2e:	7ffb      	ldrb	r3, [r7, #31]
 8004c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	62fb      	str	r3, [r7, #44]	; 0x2c
                                            y += c;
 8004c36:	7ffb      	ldrb	r3, [r7, #31]
 8004c38:	6a3a      	ldr	r2, [r7, #32]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	623b      	str	r3, [r7, #32]
                                            c = *( cp - *p++ );
 8004c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c40:	1c5a      	adds	r2, r3, #1
 8004c42:	62ba      	str	r2, [r7, #40]	; 0x28
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	425b      	negs	r3, r3
 8004c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c4a:	4413      	add	r3, r2
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	77fb      	strb	r3, [r7, #31]
                                            y += c;
 8004c50:	7ffb      	ldrb	r3, [r7, #31]
 8004c52:	6a3a      	ldr	r2, [r7, #32]
 8004c54:	4413      	add	r3, r2
 8004c56:	623b      	str	r3, [r7, #32]
                                            c = *( cp - *p++ );
 8004c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5a:	1c5a      	adds	r2, r3, #1
 8004c5c:	62ba      	str	r2, [r7, #40]	; 0x28
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	425b      	negs	r3, r3
 8004c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c64:	4413      	add	r3, r2
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	77fb      	strb	r3, [r7, #31]
                                            x += c;
 8004c6a:	7ffb      	ldrb	r3, [r7, #31]
 8004c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c6e:	4413      	add	r3, r2
 8004c70:	62fb      	str	r3, [r7, #44]	; 0x2c
                                            y += c;
 8004c72:	7ffb      	ldrb	r3, [r7, #31]
 8004c74:	6a3a      	ldr	r2, [r7, #32]
 8004c76:	4413      	add	r3, r2
 8004c78:	623b      	str	r3, [r7, #32]
                                            c = *( cp - *p++ );
 8004c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	425b      	negs	r3, r3
 8004c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c86:	4413      	add	r3, r2
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	77fb      	strb	r3, [r7, #31]
                                            x += 2 * c;
 8004c8c:	7ffb      	ldrb	r3, [r7, #31]
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c92:	4413      	add	r3, r2
 8004c94:	62fb      	str	r3, [r7, #44]	; 0x2c
                                            y += c;
 8004c96:	7ffb      	ldrb	r3, [r7, #31]
 8004c98:	6a3a      	ldr	r2, [r7, #32]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	623b      	str	r3, [r7, #32]
                                            c = *( cp - *p );
 8004c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	425b      	negs	r3, r3
 8004ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca6:	4413      	add	r3, r2
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	77fb      	strb	r3, [r7, #31]
                                            x += 3 * c;
 8004cac:	7ffa      	ldrb	r2, [r7, #31]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	4413      	add	r3, r2
 8004cb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cb6:	4413      	add	r3, r2
 8004cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
                                            y += c;
 8004cba:	7ffb      	ldrb	r3, [r7, #31]
 8004cbc:	6a3a      	ldr	r2, [r7, #32]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	623b      	str	r3, [r7, #32]
                                            p += x_size - 5;
 8004cc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cc4:	3b05      	subs	r3, #5
 8004cc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cc8:	4413      	add	r3, r2
 8004cca:	62bb      	str	r3, [r7, #40]	; 0x28

                                            c = *( cp - *p++ );
 8004ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cce:	1c5a      	adds	r2, r3, #1
 8004cd0:	62ba      	str	r2, [r7, #40]	; 0x28
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	425b      	negs	r3, r3
 8004cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd8:	4413      	add	r3, r2
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	77fb      	strb	r3, [r7, #31]
                                            x -= 2 * c;
 8004cde:	7ffb      	ldrb	r3, [r7, #31]
 8004ce0:	005b      	lsls	r3, r3, #1
 8004ce2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
                                            y += 2 * c;
 8004ce8:	7ffb      	ldrb	r3, [r7, #31]
 8004cea:	005b      	lsls	r3, r3, #1
 8004cec:	6a3a      	ldr	r2, [r7, #32]
 8004cee:	4413      	add	r3, r2
 8004cf0:	623b      	str	r3, [r7, #32]
                                            c = *( cp - *p++ );
 8004cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf4:	1c5a      	adds	r2, r3, #1
 8004cf6:	62ba      	str	r2, [r7, #40]	; 0x28
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	425b      	negs	r3, r3
 8004cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cfe:	4413      	add	r3, r2
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	77fb      	strb	r3, [r7, #31]
                                            x -= c;
 8004d04:	7ffb      	ldrb	r3, [r7, #31]
 8004d06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                            y += 2 * c;
 8004d0c:	7ffb      	ldrb	r3, [r7, #31]
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	6a3a      	ldr	r2, [r7, #32]
 8004d12:	4413      	add	r3, r2
 8004d14:	623b      	str	r3, [r7, #32]
                                            c = *( cp - *p++ );
 8004d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d18:	1c5a      	adds	r2, r3, #1
 8004d1a:	62ba      	str	r2, [r7, #40]	; 0x28
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	425b      	negs	r3, r3
 8004d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d22:	4413      	add	r3, r2
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	77fb      	strb	r3, [r7, #31]
                                            y += 2 * c;
 8004d28:	7ffb      	ldrb	r3, [r7, #31]
 8004d2a:	005b      	lsls	r3, r3, #1
 8004d2c:	6a3a      	ldr	r2, [r7, #32]
 8004d2e:	4413      	add	r3, r2
 8004d30:	623b      	str	r3, [r7, #32]
                                            c = *( cp - *p++ );
 8004d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d34:	1c5a      	adds	r2, r3, #1
 8004d36:	62ba      	str	r2, [r7, #40]	; 0x28
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	425b      	negs	r3, r3
 8004d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d3e:	4413      	add	r3, r2
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	77fb      	strb	r3, [r7, #31]
                                            x += c;
 8004d44:	7ffb      	ldrb	r3, [r7, #31]
 8004d46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d48:	4413      	add	r3, r2
 8004d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                            y += 2 * c;
 8004d4c:	7ffb      	ldrb	r3, [r7, #31]
 8004d4e:	005b      	lsls	r3, r3, #1
 8004d50:	6a3a      	ldr	r2, [r7, #32]
 8004d52:	4413      	add	r3, r2
 8004d54:	623b      	str	r3, [r7, #32]
                                            c = *( cp - *p );
 8004d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	425b      	negs	r3, r3
 8004d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d5e:	4413      	add	r3, r2
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	77fb      	strb	r3, [r7, #31]
                                            x += 2 * c;
 8004d64:	7ffb      	ldrb	r3, [r7, #31]
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d6a:	4413      	add	r3, r2
 8004d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
                                            y += 2 * c;
 8004d6e:	7ffb      	ldrb	r3, [r7, #31]
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	6a3a      	ldr	r2, [r7, #32]
 8004d74:	4413      	add	r3, r2
 8004d76:	623b      	str	r3, [r7, #32]
                                            p += x_size - 3;
 8004d78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d7a:	3b03      	subs	r3, #3
 8004d7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d7e:	4413      	add	r3, r2
 8004d80:	62bb      	str	r3, [r7, #40]	; 0x28

                                            c = *( cp - *p++ );
 8004d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	62ba      	str	r2, [r7, #40]	; 0x28
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	425b      	negs	r3, r3
 8004d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d8e:	4413      	add	r3, r2
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	77fb      	strb	r3, [r7, #31]
                                            x -= c;
 8004d94:	7ffb      	ldrb	r3, [r7, #31]
 8004d96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                            y += 3 * c;
 8004d9c:	7ffa      	ldrb	r2, [r7, #31]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	005b      	lsls	r3, r3, #1
 8004da2:	4413      	add	r3, r2
 8004da4:	6a3a      	ldr	r2, [r7, #32]
 8004da6:	4413      	add	r3, r2
 8004da8:	623b      	str	r3, [r7, #32]
                                            c = *( cp - *p++ );
 8004daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dac:	1c5a      	adds	r2, r3, #1
 8004dae:	62ba      	str	r2, [r7, #40]	; 0x28
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	425b      	negs	r3, r3
 8004db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004db6:	4413      	add	r3, r2
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	77fb      	strb	r3, [r7, #31]
                                            y += 3 * c;
 8004dbc:	7ffa      	ldrb	r2, [r7, #31]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	4413      	add	r3, r2
 8004dc4:	6a3a      	ldr	r2, [r7, #32]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	623b      	str	r3, [r7, #32]
                                            c = *( cp - *p );
 8004dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	425b      	negs	r3, r3
 8004dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd2:	4413      	add	r3, r2
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	77fb      	strb	r3, [r7, #31]
                                            x += c;
 8004dd8:	7ffb      	ldrb	r3, [r7, #31]
 8004dda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ddc:	4413      	add	r3, r2
 8004dde:	62fb      	str	r3, [r7, #44]	; 0x2c
                                            y += 3 * c;
 8004de0:	7ffa      	ldrb	r2, [r7, #31]
 8004de2:	4613      	mov	r3, r2
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	4413      	add	r3, r2
 8004de8:	6a3a      	ldr	r2, [r7, #32]
 8004dea:	4413      	add	r3, r2
 8004dec:	623b      	str	r3, [r7, #32]

                                            xx = x * x;
 8004dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df0:	fb03 f303 	mul.w	r3, r3, r3
 8004df4:	61bb      	str	r3, [r7, #24]
                                            yy = y * y;
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	fb03 f303 	mul.w	r3, r3, r3
 8004dfc:	617b      	str	r3, [r7, #20]
                                            sq = xx + yy;
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	4413      	add	r3, r2
 8004e04:	643b      	str	r3, [r7, #64]	; 0x40
                                            if ( sq > ( ( n * n ) / 2 ) ) {
 8004e06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e08:	fb03 f303 	mul.w	r3, r3, r3
 8004e0c:	0fda      	lsrs	r2, r3, #31
 8004e0e:	4413      	add	r3, r2
 8004e10:	105b      	asrs	r3, r3, #1
 8004e12:	461a      	mov	r2, r3
 8004e14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e16:	4293      	cmp	r3, r2
 8004e18:	f340 821b 	ble.w	8005252 <susan_corners+0xe46>
                                              if ( yy < xx ) {
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	f280 80ec 	bge.w	8004ffe <susan_corners+0xbf2>
                                                divide = ( float )y / ( float )abs( x );
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	ee07 3a90 	vmov	s15, r3
 8004e2c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	da06      	bge.n	8004e44 <susan_corners+0xa38>
 8004e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e38:	425b      	negs	r3, r3
 8004e3a:	ee07 3a90 	vmov	s15, r3
 8004e3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e42:	e004      	b.n	8004e4e <susan_corners+0xa42>
 8004e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e46:	ee07 3a90 	vmov	s15, r3
 8004e4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e52:	ed87 7a04 	vstr	s14, [r7, #16]
                                                sq = abs( x ) / x;
 8004e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	da02      	bge.n	8004e62 <susan_corners+0xa56>
 8004e5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e60:	e000      	b.n	8004e64 <susan_corners+0xa58>
 8004e62:	2301      	movs	r3, #1
 8004e64:	643b      	str	r3, [r7, #64]	; 0x40
                                                sq = *( cp - in[ ( i + FTOI( divide ) ) * x_size + j + sq ] ) +
 8004e66:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e72:	d50f      	bpl.n	8004e94 <susan_corners+0xa88>
 8004e74:	6938      	ldr	r0, [r7, #16]
 8004e76:	f7fb fb5f 	bl	8000538 <__aeabi_f2d>
 8004e7a:	f04f 0200 	mov.w	r2, #0
 8004e7e:	4bc5      	ldr	r3, [pc, #788]	; (8005194 <susan_corners+0xd88>)
 8004e80:	f7fb f9fa 	bl	8000278 <__aeabi_dsub>
 8004e84:	4602      	mov	r2, r0
 8004e86:	460b      	mov	r3, r1
 8004e88:	4610      	mov	r0, r2
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	f7fb fe46 	bl	8000b1c <__aeabi_d2iz>
 8004e90:	4603      	mov	r3, r0
 8004e92:	e00e      	b.n	8004eb2 <susan_corners+0xaa6>
 8004e94:	6938      	ldr	r0, [r7, #16]
 8004e96:	f7fb fb4f 	bl	8000538 <__aeabi_f2d>
 8004e9a:	f04f 0200 	mov.w	r2, #0
 8004e9e:	4bbd      	ldr	r3, [pc, #756]	; (8005194 <susan_corners+0xd88>)
 8004ea0:	f7fb f9ec 	bl	800027c <__adddf3>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	4610      	mov	r0, r2
 8004eaa:	4619      	mov	r1, r3
 8004eac:	f7fb fe36 	bl	8000b1c <__aeabi_d2iz>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004eb4:	4413      	add	r3, r2
 8004eb6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004eb8:	fb02 f203 	mul.w	r2, r2, r3
 8004ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebe:	441a      	add	r2, r3
 8004ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ec2:	4413      	add	r3, r2
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	4413      	add	r3, r2
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	425b      	negs	r3, r3
 8004ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ed0:	4413      	add	r3, r2
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	461c      	mov	r4, r3
                                                     *( cp - in[ ( i + FTOI( 2 * divide ) ) * x_size + j + 2 * sq ] ) +
 8004ed6:	edd7 7a04 	vldr	s15, [r7, #16]
 8004eda:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004ede:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ee6:	d514      	bpl.n	8004f12 <susan_corners+0xb06>
 8004ee8:	edd7 7a04 	vldr	s15, [r7, #16]
 8004eec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004ef0:	ee17 0a90 	vmov	r0, s15
 8004ef4:	f7fb fb20 	bl	8000538 <__aeabi_f2d>
 8004ef8:	f04f 0200 	mov.w	r2, #0
 8004efc:	4ba5      	ldr	r3, [pc, #660]	; (8005194 <susan_corners+0xd88>)
 8004efe:	f7fb f9bb 	bl	8000278 <__aeabi_dsub>
 8004f02:	4602      	mov	r2, r0
 8004f04:	460b      	mov	r3, r1
 8004f06:	4610      	mov	r0, r2
 8004f08:	4619      	mov	r1, r3
 8004f0a:	f7fb fe07 	bl	8000b1c <__aeabi_d2iz>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	e013      	b.n	8004f3a <susan_corners+0xb2e>
 8004f12:	edd7 7a04 	vldr	s15, [r7, #16]
 8004f16:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004f1a:	ee17 0a90 	vmov	r0, s15
 8004f1e:	f7fb fb0b 	bl	8000538 <__aeabi_f2d>
 8004f22:	f04f 0200 	mov.w	r2, #0
 8004f26:	4b9b      	ldr	r3, [pc, #620]	; (8005194 <susan_corners+0xd88>)
 8004f28:	f7fb f9a8 	bl	800027c <__adddf3>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	460b      	mov	r3, r1
 8004f30:	4610      	mov	r0, r2
 8004f32:	4619      	mov	r1, r3
 8004f34:	f7fb fdf2 	bl	8000b1c <__aeabi_d2iz>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f3c:	4413      	add	r3, r2
 8004f3e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f40:	fb02 f203 	mul.w	r2, r2, r3
 8004f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f46:	441a      	add	r2, r3
 8004f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	4413      	add	r3, r2
 8004f4e:	461a      	mov	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	4413      	add	r3, r2
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	425b      	negs	r3, r3
 8004f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f5a:	4413      	add	r3, r2
 8004f5c:	781b      	ldrb	r3, [r3, #0]
                                                sq = *( cp - in[ ( i + FTOI( divide ) ) * x_size + j + sq ] ) +
 8004f5e:	441c      	add	r4, r3
                                                     *( cp - in[ ( i + FTOI( 3 * divide ) ) * x_size + j + 3 * sq ] );
 8004f60:	edd7 7a04 	vldr	s15, [r7, #16]
 8004f64:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004f68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f74:	d516      	bpl.n	8004fa4 <susan_corners+0xb98>
 8004f76:	edd7 7a04 	vldr	s15, [r7, #16]
 8004f7a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004f7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f82:	ee17 0a90 	vmov	r0, s15
 8004f86:	f7fb fad7 	bl	8000538 <__aeabi_f2d>
 8004f8a:	f04f 0200 	mov.w	r2, #0
 8004f8e:	4b81      	ldr	r3, [pc, #516]	; (8005194 <susan_corners+0xd88>)
 8004f90:	f7fb f972 	bl	8000278 <__aeabi_dsub>
 8004f94:	4602      	mov	r2, r0
 8004f96:	460b      	mov	r3, r1
 8004f98:	4610      	mov	r0, r2
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	f7fb fdbe 	bl	8000b1c <__aeabi_d2iz>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	e015      	b.n	8004fd0 <susan_corners+0xbc4>
 8004fa4:	edd7 7a04 	vldr	s15, [r7, #16]
 8004fa8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004fac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fb0:	ee17 0a90 	vmov	r0, s15
 8004fb4:	f7fb fac0 	bl	8000538 <__aeabi_f2d>
 8004fb8:	f04f 0200 	mov.w	r2, #0
 8004fbc:	4b75      	ldr	r3, [pc, #468]	; (8005194 <susan_corners+0xd88>)
 8004fbe:	f7fb f95d 	bl	800027c <__adddf3>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	4610      	mov	r0, r2
 8004fc8:	4619      	mov	r1, r3
 8004fca:	f7fb fda7 	bl	8000b1c <__aeabi_d2iz>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fd2:	4413      	add	r3, r2
 8004fd4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004fd6:	fb02 f203 	mul.w	r2, r2, r3
 8004fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fdc:	18d1      	adds	r1, r2, r3
 8004fde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	005b      	lsls	r3, r3, #1
 8004fe4:	4413      	add	r3, r2
 8004fe6:	440b      	add	r3, r1
 8004fe8:	461a      	mov	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	4413      	add	r3, r2
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	425b      	negs	r3, r3
 8004ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff4:	4413      	add	r3, r2
 8004ff6:	781b      	ldrb	r3, [r3, #0]
                                                sq = *( cp - in[ ( i + FTOI( divide ) ) * x_size + j + sq ] ) +
 8004ff8:	4423      	add	r3, r4
 8004ffa:	643b      	str	r3, [r7, #64]	; 0x40
 8004ffc:	e0ed      	b.n	80051da <susan_corners+0xdce>
                                              } else {
                                                divide = ( float )x / ( float )abs( y );
 8004ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005000:	ee07 3a90 	vmov	s15, r3
 8005004:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005008:	6a3b      	ldr	r3, [r7, #32]
 800500a:	2b00      	cmp	r3, #0
 800500c:	da06      	bge.n	800501c <susan_corners+0xc10>
 800500e:	6a3b      	ldr	r3, [r7, #32]
 8005010:	425b      	negs	r3, r3
 8005012:	ee07 3a90 	vmov	s15, r3
 8005016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800501a:	e004      	b.n	8005026 <susan_corners+0xc1a>
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	ee07 3a90 	vmov	s15, r3
 8005022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800502a:	ed87 7a04 	vstr	s14, [r7, #16]
                                                sq = abs( y ) / y;
 800502e:	6a3b      	ldr	r3, [r7, #32]
 8005030:	2b00      	cmp	r3, #0
 8005032:	da02      	bge.n	800503a <susan_corners+0xc2e>
 8005034:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005038:	e000      	b.n	800503c <susan_corners+0xc30>
 800503a:	2301      	movs	r3, #1
 800503c:	643b      	str	r3, [r7, #64]	; 0x40
                                                sq = *( cp - in[ ( i + sq ) * x_size + j + FTOI( divide ) ] ) +
 800503e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005042:	4413      	add	r3, r2
 8005044:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005046:	fb02 f203 	mul.w	r2, r2, r3
 800504a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504c:	18d4      	adds	r4, r2, r3
 800504e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005052:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800505a:	d50f      	bpl.n	800507c <susan_corners+0xc70>
 800505c:	6938      	ldr	r0, [r7, #16]
 800505e:	f7fb fa6b 	bl	8000538 <__aeabi_f2d>
 8005062:	f04f 0200 	mov.w	r2, #0
 8005066:	4b4b      	ldr	r3, [pc, #300]	; (8005194 <susan_corners+0xd88>)
 8005068:	f7fb f906 	bl	8000278 <__aeabi_dsub>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	4610      	mov	r0, r2
 8005072:	4619      	mov	r1, r3
 8005074:	f7fb fd52 	bl	8000b1c <__aeabi_d2iz>
 8005078:	4603      	mov	r3, r0
 800507a:	e00e      	b.n	800509a <susan_corners+0xc8e>
 800507c:	6938      	ldr	r0, [r7, #16]
 800507e:	f7fb fa5b 	bl	8000538 <__aeabi_f2d>
 8005082:	f04f 0200 	mov.w	r2, #0
 8005086:	4b43      	ldr	r3, [pc, #268]	; (8005194 <susan_corners+0xd88>)
 8005088:	f7fb f8f8 	bl	800027c <__adddf3>
 800508c:	4602      	mov	r2, r0
 800508e:	460b      	mov	r3, r1
 8005090:	4610      	mov	r0, r2
 8005092:	4619      	mov	r1, r3
 8005094:	f7fb fd42 	bl	8000b1c <__aeabi_d2iz>
 8005098:	4603      	mov	r3, r0
 800509a:	4423      	add	r3, r4
 800509c:	461a      	mov	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	4413      	add	r3, r2
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	425b      	negs	r3, r3
 80050a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a8:	4413      	add	r3, r2
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	461d      	mov	r5, r3
                                                     *( cp - in[ ( i + 2 * sq ) * x_size + j + FTOI( 2 * divide ) ] ) +
 80050ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050b0:	005a      	lsls	r2, r3, #1
 80050b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050b4:	4413      	add	r3, r2
 80050b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050b8:	fb02 f203 	mul.w	r2, r2, r3
 80050bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050be:	18d4      	adds	r4, r2, r3
 80050c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80050c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80050c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80050cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050d0:	d514      	bpl.n	80050fc <susan_corners+0xcf0>
 80050d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80050d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80050da:	ee17 0a90 	vmov	r0, s15
 80050de:	f7fb fa2b 	bl	8000538 <__aeabi_f2d>
 80050e2:	f04f 0200 	mov.w	r2, #0
 80050e6:	4b2b      	ldr	r3, [pc, #172]	; (8005194 <susan_corners+0xd88>)
 80050e8:	f7fb f8c6 	bl	8000278 <__aeabi_dsub>
 80050ec:	4602      	mov	r2, r0
 80050ee:	460b      	mov	r3, r1
 80050f0:	4610      	mov	r0, r2
 80050f2:	4619      	mov	r1, r3
 80050f4:	f7fb fd12 	bl	8000b1c <__aeabi_d2iz>
 80050f8:	4603      	mov	r3, r0
 80050fa:	e013      	b.n	8005124 <susan_corners+0xd18>
 80050fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8005100:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005104:	ee17 0a90 	vmov	r0, s15
 8005108:	f7fb fa16 	bl	8000538 <__aeabi_f2d>
 800510c:	f04f 0200 	mov.w	r2, #0
 8005110:	4b20      	ldr	r3, [pc, #128]	; (8005194 <susan_corners+0xd88>)
 8005112:	f7fb f8b3 	bl	800027c <__adddf3>
 8005116:	4602      	mov	r2, r0
 8005118:	460b      	mov	r3, r1
 800511a:	4610      	mov	r0, r2
 800511c:	4619      	mov	r1, r3
 800511e:	f7fb fcfd 	bl	8000b1c <__aeabi_d2iz>
 8005122:	4603      	mov	r3, r0
 8005124:	4423      	add	r3, r4
 8005126:	461a      	mov	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	4413      	add	r3, r2
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	425b      	negs	r3, r3
 8005130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005132:	4413      	add	r3, r2
 8005134:	781b      	ldrb	r3, [r3, #0]
                                                sq = *( cp - in[ ( i + sq ) * x_size + j + FTOI( divide ) ] ) +
 8005136:	18ec      	adds	r4, r5, r3
                                                     *( cp - in[ ( i + 3 * sq ) * x_size + j + FTOI( 3 * divide ) ] );
 8005138:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800513a:	4613      	mov	r3, r2
 800513c:	005b      	lsls	r3, r3, #1
 800513e:	441a      	add	r2, r3
 8005140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005142:	4413      	add	r3, r2
 8005144:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005146:	fb02 f203 	mul.w	r2, r2, r3
 800514a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514c:	18d5      	adds	r5, r2, r3
 800514e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005152:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005156:	ee67 7a87 	vmul.f32	s15, s15, s14
 800515a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800515e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005162:	d519      	bpl.n	8005198 <susan_corners+0xd8c>
 8005164:	edd7 7a04 	vldr	s15, [r7, #16]
 8005168:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800516c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005170:	ee17 0a90 	vmov	r0, s15
 8005174:	f7fb f9e0 	bl	8000538 <__aeabi_f2d>
 8005178:	f04f 0200 	mov.w	r2, #0
 800517c:	4b05      	ldr	r3, [pc, #20]	; (8005194 <susan_corners+0xd88>)
 800517e:	f7fb f87b 	bl	8000278 <__aeabi_dsub>
 8005182:	4602      	mov	r2, r0
 8005184:	460b      	mov	r3, r1
 8005186:	4610      	mov	r0, r2
 8005188:	4619      	mov	r1, r3
 800518a:	f7fb fcc7 	bl	8000b1c <__aeabi_d2iz>
 800518e:	4603      	mov	r3, r0
 8005190:	e018      	b.n	80051c4 <susan_corners+0xdb8>
 8005192:	bf00      	nop
 8005194:	3fe00000 	.word	0x3fe00000
 8005198:	edd7 7a04 	vldr	s15, [r7, #16]
 800519c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80051a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051a4:	ee17 0a90 	vmov	r0, s15
 80051a8:	f7fb f9c6 	bl	8000538 <__aeabi_f2d>
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	4b35      	ldr	r3, [pc, #212]	; (8005288 <susan_corners+0xe7c>)
 80051b2:	f7fb f863 	bl	800027c <__adddf3>
 80051b6:	4602      	mov	r2, r0
 80051b8:	460b      	mov	r3, r1
 80051ba:	4610      	mov	r0, r2
 80051bc:	4619      	mov	r1, r3
 80051be:	f7fb fcad 	bl	8000b1c <__aeabi_d2iz>
 80051c2:	4603      	mov	r3, r0
 80051c4:	442b      	add	r3, r5
 80051c6:	461a      	mov	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	4413      	add	r3, r2
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	425b      	negs	r3, r3
 80051d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d2:	4413      	add	r3, r2
 80051d4:	781b      	ldrb	r3, [r3, #0]
                                                sq = *( cp - in[ ( i + sq ) * x_size + j + FTOI( divide ) ] ) +
 80051d6:	4423      	add	r3, r4
 80051d8:	643b      	str	r3, [r7, #64]	; 0x40
                                              }

                                              if ( sq > 290 ) {
 80051da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051dc:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 80051e0:	dd37      	ble.n	8005252 <susan_corners+0xe46>
                                                r[ i * x_size + j ] = max_no - n;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	b2d9      	uxtb	r1, r3
 80051e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ec:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80051ee:	fb00 f003 	mul.w	r0, r0, r3
 80051f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f4:	4403      	add	r3, r0
 80051f6:	4618      	mov	r0, r3
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	4403      	add	r3, r0
 80051fc:	1a8a      	subs	r2, r1, r2
 80051fe:	b2d2      	uxtb	r2, r2
 8005200:	701a      	strb	r2, [r3, #0]
                                                cgx[ i * x_size + j ] = ( 51 * x ) / n;
 8005202:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005204:	4613      	mov	r3, r2
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	4413      	add	r3, r2
 800520a:	011a      	lsls	r2, r3, #4
 800520c:	441a      	add	r2, r3
 800520e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005210:	fb92 f1f3 	sdiv	r1, r2, r3
 8005214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005216:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005218:	fb02 f203 	mul.w	r2, r2, r3
 800521c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521e:	4413      	add	r3, r2
 8005220:	461a      	mov	r2, r3
 8005222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005224:	4413      	add	r3, r2
 8005226:	b2ca      	uxtb	r2, r1
 8005228:	701a      	strb	r2, [r3, #0]
                                                cgy[ i * x_size + j ] = ( 51 * y ) / n;
 800522a:	6a3a      	ldr	r2, [r7, #32]
 800522c:	4613      	mov	r3, r2
 800522e:	005b      	lsls	r3, r3, #1
 8005230:	4413      	add	r3, r2
 8005232:	011a      	lsls	r2, r3, #4
 8005234:	441a      	add	r2, r3
 8005236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005238:	fb92 f1f3 	sdiv	r1, r2, r3
 800523c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800523e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005240:	fb02 f203 	mul.w	r2, r2, r3
 8005244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005246:	4413      	add	r3, r2
 8005248:	461a      	mov	r2, r3
 800524a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524c:	4413      	add	r3, r2
 800524e:	b2ca      	uxtb	r2, r1
 8005250:	701a      	strb	r2, [r3, #0]
    for ( j = 5; j < x_size - 5; j++ ) {
 8005252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005254:	3301      	adds	r3, #1
 8005256:	63bb      	str	r3, [r7, #56]	; 0x38
 8005258:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800525a:	3b05      	subs	r3, #5
 800525c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800525e:	429a      	cmp	r2, r3
 8005260:	f6ff a8fc 	blt.w	800445c <susan_corners+0x50>
  for ( i = 5; i < y_size - 5; i++ ) {
 8005264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005266:	3301      	adds	r3, #1
 8005268:	63fb      	str	r3, [r7, #60]	; 0x3c
 800526a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800526c:	3b05      	subs	r3, #5
 800526e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005270:	429a      	cmp	r2, r3
 8005272:	f6ff a8ef 	blt.w	8004454 <susan_corners+0x48>
      }
    }
  }

  /* to locate the local maxima */
  n = 0;
 8005276:	2300      	movs	r3, #0
 8005278:	647b      	str	r3, [r7, #68]	; 0x44
  _Pragma( "loopbound min 85 max 85" )
  for ( i = 5; i < y_size - 5; i++ ) {
 800527a:	2305      	movs	r3, #5
 800527c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800527e:	e374      	b.n	800596a <susan_corners+0x155e>
    _Pragma( "loopbound min 66 max 66" )
    for ( j = 5; j < x_size - 5; j++ ) {
 8005280:	2305      	movs	r3, #5
 8005282:	63bb      	str	r3, [r7, #56]	; 0x38
 8005284:	e368      	b.n	8005958 <susan_corners+0x154c>
 8005286:	bf00      	nop
 8005288:	3fe00000 	.word	0x3fe00000
      x = r[ i * x_size + j ];
 800528c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800528e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005290:	fb02 f203 	mul.w	r2, r2, r3
 8005294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005296:	4413      	add	r3, r2
 8005298:	461a      	mov	r2, r3
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	4413      	add	r3, r2
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ( x > 0 )  {
 80052a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f340 8354 	ble.w	8005952 <susan_corners+0x1546>
             ( x >= r[ ( i  )*x_size + j - 2 ] ) &&
             ( x >= r[ ( i  )*x_size + j - 1 ] ) &&
             ( x >= r[ ( i + 1 )*x_size + j - 2 ] ) )
        #endif
        #ifdef SEVEN_SUPP
          if ( ( x > r[ ( i - 3 )*x_size + j - 3 ] ) &&
 80052aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ac:	3b03      	subs	r3, #3
 80052ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052b0:	fb02 f203 	mul.w	r2, r2, r3
 80052b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b6:	4413      	add	r3, r2
 80052b8:	3b03      	subs	r3, #3
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	4413      	add	r3, r2
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	461a      	mov	r2, r3
 80052c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c4:	4293      	cmp	r3, r2
 80052c6:	f340 8344 	ble.w	8005952 <susan_corners+0x1546>
               ( x > r[ ( i - 3 )*x_size + j - 2 ] ) &&
 80052ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052cc:	3b03      	subs	r3, #3
 80052ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052d0:	fb02 f203 	mul.w	r2, r2, r3
 80052d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d6:	4413      	add	r3, r2
 80052d8:	3b02      	subs	r3, #2
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	4413      	add	r3, r2
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	461a      	mov	r2, r3
          if ( ( x > r[ ( i - 3 )*x_size + j - 3 ] ) &&
 80052e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e4:	4293      	cmp	r3, r2
 80052e6:	f340 8334 	ble.w	8005952 <susan_corners+0x1546>
               ( x > r[ ( i - 3 )*x_size + j - 1 ] ) &&
 80052ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ec:	3b03      	subs	r3, #3
 80052ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052f0:	fb02 f203 	mul.w	r2, r2, r3
 80052f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f6:	4413      	add	r3, r2
 80052f8:	3b01      	subs	r3, #1
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	4413      	add	r3, r2
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	461a      	mov	r2, r3
               ( x > r[ ( i - 3 )*x_size + j - 2 ] ) &&
 8005302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005304:	4293      	cmp	r3, r2
 8005306:	f340 8324 	ble.w	8005952 <susan_corners+0x1546>
               ( x > r[ ( i - 3 )*x_size + j   ] ) &&
 800530a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800530c:	3b03      	subs	r3, #3
 800530e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005310:	fb02 f203 	mul.w	r2, r2, r3
 8005314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005316:	4413      	add	r3, r2
 8005318:	461a      	mov	r2, r3
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	4413      	add	r3, r2
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	461a      	mov	r2, r3
               ( x > r[ ( i - 3 )*x_size + j - 1 ] ) &&
 8005322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005324:	4293      	cmp	r3, r2
 8005326:	f340 8314 	ble.w	8005952 <susan_corners+0x1546>
               ( x > r[ ( i - 3 )*x_size + j + 1 ] ) &&
 800532a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800532c:	3b03      	subs	r3, #3
 800532e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005330:	fb02 f203 	mul.w	r2, r2, r3
 8005334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005336:	4413      	add	r3, r2
 8005338:	3301      	adds	r3, #1
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	4413      	add	r3, r2
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	461a      	mov	r2, r3
               ( x > r[ ( i - 3 )*x_size + j   ] ) &&
 8005342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005344:	4293      	cmp	r3, r2
 8005346:	f340 8304 	ble.w	8005952 <susan_corners+0x1546>
               ( x > r[ ( i - 3 )*x_size + j + 2 ] ) &&
 800534a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800534c:	3b03      	subs	r3, #3
 800534e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005350:	fb02 f203 	mul.w	r2, r2, r3
 8005354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005356:	4413      	add	r3, r2
 8005358:	3302      	adds	r3, #2
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	4413      	add	r3, r2
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	461a      	mov	r2, r3
               ( x > r[ ( i - 3 )*x_size + j + 1 ] ) &&
 8005362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005364:	4293      	cmp	r3, r2
 8005366:	f340 82f4 	ble.w	8005952 <susan_corners+0x1546>
               ( x > r[ ( i - 3 )*x_size + j + 3 ] ) &&
 800536a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800536c:	3b03      	subs	r3, #3
 800536e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005370:	fb02 f203 	mul.w	r2, r2, r3
 8005374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005376:	4413      	add	r3, r2
 8005378:	3303      	adds	r3, #3
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	4413      	add	r3, r2
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	461a      	mov	r2, r3
               ( x > r[ ( i - 3 )*x_size + j + 2 ] ) &&
 8005382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005384:	4293      	cmp	r3, r2
 8005386:	f340 82e4 	ble.w	8005952 <susan_corners+0x1546>

               ( x > r[ ( i - 2 )*x_size + j - 3 ] ) &&
 800538a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800538c:	3b02      	subs	r3, #2
 800538e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005390:	fb02 f203 	mul.w	r2, r2, r3
 8005394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005396:	4413      	add	r3, r2
 8005398:	3b03      	subs	r3, #3
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	4413      	add	r3, r2
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	461a      	mov	r2, r3
               ( x > r[ ( i - 3 )*x_size + j + 3 ] ) &&
 80053a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a4:	4293      	cmp	r3, r2
 80053a6:	f340 82d4 	ble.w	8005952 <susan_corners+0x1546>
               ( x > r[ ( i - 2 )*x_size + j - 2 ] ) &&
 80053aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ac:	3b02      	subs	r3, #2
 80053ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053b0:	fb02 f203 	mul.w	r2, r2, r3
 80053b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b6:	4413      	add	r3, r2
 80053b8:	3b02      	subs	r3, #2
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	4413      	add	r3, r2
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	461a      	mov	r2, r3
               ( x > r[ ( i - 2 )*x_size + j - 3 ] ) &&
 80053c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c4:	4293      	cmp	r3, r2
 80053c6:	f340 82c4 	ble.w	8005952 <susan_corners+0x1546>
               ( x > r[ ( i - 2 )*x_size + j - 1 ] ) &&
 80053ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053cc:	3b02      	subs	r3, #2
 80053ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053d0:	fb02 f203 	mul.w	r2, r2, r3
 80053d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d6:	4413      	add	r3, r2
 80053d8:	3b01      	subs	r3, #1
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	4413      	add	r3, r2
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	461a      	mov	r2, r3
               ( x > r[ ( i - 2 )*x_size + j - 2 ] ) &&
 80053e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e4:	4293      	cmp	r3, r2
 80053e6:	f340 82b4 	ble.w	8005952 <susan_corners+0x1546>
               ( x > r[ ( i - 2 )*x_size + j   ] ) &&
 80053ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ec:	3b02      	subs	r3, #2
 80053ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053f0:	fb02 f203 	mul.w	r2, r2, r3
 80053f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f6:	4413      	add	r3, r2
 80053f8:	461a      	mov	r2, r3
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	4413      	add	r3, r2
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	461a      	mov	r2, r3
               ( x > r[ ( i - 2 )*x_size + j - 1 ] ) &&
 8005402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005404:	4293      	cmp	r3, r2
 8005406:	f340 82a4 	ble.w	8005952 <susan_corners+0x1546>
               ( x > r[ ( i - 2 )*x_size + j + 1 ] ) &&
 800540a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800540c:	3b02      	subs	r3, #2
 800540e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005410:	fb02 f203 	mul.w	r2, r2, r3
 8005414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005416:	4413      	add	r3, r2
 8005418:	3301      	adds	r3, #1
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	4413      	add	r3, r2
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	461a      	mov	r2, r3
               ( x > r[ ( i - 2 )*x_size + j   ] ) &&
 8005422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005424:	4293      	cmp	r3, r2
 8005426:	f340 8294 	ble.w	8005952 <susan_corners+0x1546>
               ( x > r[ ( i - 2 )*x_size + j + 2 ] ) &&
 800542a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800542c:	3b02      	subs	r3, #2
 800542e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005430:	fb02 f203 	mul.w	r2, r2, r3
 8005434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005436:	4413      	add	r3, r2
 8005438:	3302      	adds	r3, #2
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	4413      	add	r3, r2
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	461a      	mov	r2, r3
               ( x > r[ ( i - 2 )*x_size + j + 1 ] ) &&
 8005442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005444:	4293      	cmp	r3, r2
 8005446:	f340 8284 	ble.w	8005952 <susan_corners+0x1546>
               ( x > r[ ( i - 2 )*x_size + j + 3 ] ) &&
 800544a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800544c:	3b02      	subs	r3, #2
 800544e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005450:	fb02 f203 	mul.w	r2, r2, r3
 8005454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005456:	4413      	add	r3, r2
 8005458:	3303      	adds	r3, #3
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	4413      	add	r3, r2
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	461a      	mov	r2, r3
               ( x > r[ ( i - 2 )*x_size + j + 2 ] ) &&
 8005462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005464:	4293      	cmp	r3, r2
 8005466:	f340 8274 	ble.w	8005952 <susan_corners+0x1546>

               ( x > r[ ( i - 1 )*x_size + j - 3 ] ) &&
 800546a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800546c:	3b01      	subs	r3, #1
 800546e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005470:	fb02 f203 	mul.w	r2, r2, r3
 8005474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005476:	4413      	add	r3, r2
 8005478:	3b03      	subs	r3, #3
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	4413      	add	r3, r2
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	461a      	mov	r2, r3
               ( x > r[ ( i - 2 )*x_size + j + 3 ] ) &&
 8005482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005484:	4293      	cmp	r3, r2
 8005486:	f340 8264 	ble.w	8005952 <susan_corners+0x1546>
               ( x > r[ ( i - 1 )*x_size + j - 2 ] ) &&
 800548a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800548c:	3b01      	subs	r3, #1
 800548e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005490:	fb02 f203 	mul.w	r2, r2, r3
 8005494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005496:	4413      	add	r3, r2
 8005498:	3b02      	subs	r3, #2
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	4413      	add	r3, r2
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	461a      	mov	r2, r3
               ( x > r[ ( i - 1 )*x_size + j - 3 ] ) &&
 80054a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a4:	4293      	cmp	r3, r2
 80054a6:	f340 8254 	ble.w	8005952 <susan_corners+0x1546>
               ( x > r[ ( i - 1 )*x_size + j - 1 ] ) &&
 80054aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ac:	3b01      	subs	r3, #1
 80054ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054b0:	fb02 f203 	mul.w	r2, r2, r3
 80054b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b6:	4413      	add	r3, r2
 80054b8:	3b01      	subs	r3, #1
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	4413      	add	r3, r2
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	461a      	mov	r2, r3
               ( x > r[ ( i - 1 )*x_size + j - 2 ] ) &&
 80054c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c4:	4293      	cmp	r3, r2
 80054c6:	f340 8244 	ble.w	8005952 <susan_corners+0x1546>
               ( x > r[ ( i - 1 )*x_size + j   ] ) &&
 80054ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054cc:	3b01      	subs	r3, #1
 80054ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054d0:	fb02 f203 	mul.w	r2, r2, r3
 80054d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d6:	4413      	add	r3, r2
 80054d8:	461a      	mov	r2, r3
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	4413      	add	r3, r2
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	461a      	mov	r2, r3
               ( x > r[ ( i - 1 )*x_size + j - 1 ] ) &&
 80054e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e4:	4293      	cmp	r3, r2
 80054e6:	f340 8234 	ble.w	8005952 <susan_corners+0x1546>
               ( x > r[ ( i - 1 )*x_size + j + 1 ] ) &&
 80054ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ec:	3b01      	subs	r3, #1
 80054ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054f0:	fb02 f203 	mul.w	r2, r2, r3
 80054f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f6:	4413      	add	r3, r2
 80054f8:	3301      	adds	r3, #1
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	4413      	add	r3, r2
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	461a      	mov	r2, r3
               ( x > r[ ( i - 1 )*x_size + j   ] ) &&
 8005502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005504:	4293      	cmp	r3, r2
 8005506:	f340 8224 	ble.w	8005952 <susan_corners+0x1546>
               ( x > r[ ( i - 1 )*x_size + j + 2 ] ) &&
 800550a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800550c:	3b01      	subs	r3, #1
 800550e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005510:	fb02 f203 	mul.w	r2, r2, r3
 8005514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005516:	4413      	add	r3, r2
 8005518:	3302      	adds	r3, #2
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	4413      	add	r3, r2
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	461a      	mov	r2, r3
               ( x > r[ ( i - 1 )*x_size + j + 1 ] ) &&
 8005522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005524:	4293      	cmp	r3, r2
 8005526:	f340 8214 	ble.w	8005952 <susan_corners+0x1546>
               ( x > r[ ( i - 1 )*x_size + j + 3 ] ) &&
 800552a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800552c:	3b01      	subs	r3, #1
 800552e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005530:	fb02 f203 	mul.w	r2, r2, r3
 8005534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005536:	4413      	add	r3, r2
 8005538:	3303      	adds	r3, #3
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	4413      	add	r3, r2
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	461a      	mov	r2, r3
               ( x > r[ ( i - 1 )*x_size + j + 2 ] ) &&
 8005542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005544:	4293      	cmp	r3, r2
 8005546:	f340 8204 	ble.w	8005952 <susan_corners+0x1546>

               ( x > r[ ( i )*x_size + j - 3 ] ) &&
 800554a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800554c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800554e:	fb02 f203 	mul.w	r2, r2, r3
 8005552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005554:	4413      	add	r3, r2
 8005556:	3b03      	subs	r3, #3
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	4413      	add	r3, r2
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	461a      	mov	r2, r3
               ( x > r[ ( i - 1 )*x_size + j + 3 ] ) &&
 8005560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005562:	4293      	cmp	r3, r2
 8005564:	f340 81f5 	ble.w	8005952 <susan_corners+0x1546>
               ( x > r[ ( i )*x_size + j - 2 ] ) &&
 8005568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800556a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800556c:	fb02 f203 	mul.w	r2, r2, r3
 8005570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005572:	4413      	add	r3, r2
 8005574:	3b02      	subs	r3, #2
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	4413      	add	r3, r2
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	461a      	mov	r2, r3
               ( x > r[ ( i )*x_size + j - 3 ] ) &&
 800557e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005580:	4293      	cmp	r3, r2
 8005582:	f340 81e6 	ble.w	8005952 <susan_corners+0x1546>
               ( x > r[ ( i )*x_size + j - 1 ] ) &&
 8005586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005588:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800558a:	fb02 f203 	mul.w	r2, r2, r3
 800558e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005590:	4413      	add	r3, r2
 8005592:	3b01      	subs	r3, #1
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	4413      	add	r3, r2
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	461a      	mov	r2, r3
               ( x > r[ ( i )*x_size + j - 2 ] ) &&
 800559c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559e:	4293      	cmp	r3, r2
 80055a0:	f340 81d7 	ble.w	8005952 <susan_corners+0x1546>
               ( x >= r[ ( i )*x_size + j + 1 ] ) &&
 80055a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055a8:	fb02 f203 	mul.w	r2, r2, r3
 80055ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ae:	4413      	add	r3, r2
 80055b0:	3301      	adds	r3, #1
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	4413      	add	r3, r2
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	461a      	mov	r2, r3
               ( x > r[ ( i )*x_size + j - 1 ] ) &&
 80055ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055bc:	4293      	cmp	r3, r2
 80055be:	f2c0 81c8 	blt.w	8005952 <susan_corners+0x1546>
               ( x >= r[ ( i )*x_size + j + 2 ] ) &&
 80055c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055c6:	fb02 f203 	mul.w	r2, r2, r3
 80055ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055cc:	4413      	add	r3, r2
 80055ce:	3302      	adds	r3, #2
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	4413      	add	r3, r2
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	461a      	mov	r2, r3
               ( x >= r[ ( i )*x_size + j + 1 ] ) &&
 80055d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055da:	4293      	cmp	r3, r2
 80055dc:	f2c0 81b9 	blt.w	8005952 <susan_corners+0x1546>
               ( x >= r[ ( i )*x_size + j + 3 ] ) &&
 80055e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055e4:	fb02 f203 	mul.w	r2, r2, r3
 80055e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ea:	4413      	add	r3, r2
 80055ec:	3303      	adds	r3, #3
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	4413      	add	r3, r2
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	461a      	mov	r2, r3
               ( x >= r[ ( i )*x_size + j + 2 ] ) &&
 80055f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f8:	4293      	cmp	r3, r2
 80055fa:	f2c0 81aa 	blt.w	8005952 <susan_corners+0x1546>

               ( x >= r[ ( i + 1 )*x_size + j - 3 ] ) &&
 80055fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005600:	3301      	adds	r3, #1
 8005602:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005604:	fb02 f203 	mul.w	r2, r2, r3
 8005608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560a:	4413      	add	r3, r2
 800560c:	3b03      	subs	r3, #3
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	4413      	add	r3, r2
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	461a      	mov	r2, r3
               ( x >= r[ ( i )*x_size + j + 3 ] ) &&
 8005616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005618:	4293      	cmp	r3, r2
 800561a:	f2c0 819a 	blt.w	8005952 <susan_corners+0x1546>
               ( x >= r[ ( i + 1 )*x_size + j - 2 ] ) &&
 800561e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005620:	3301      	adds	r3, #1
 8005622:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005624:	fb02 f203 	mul.w	r2, r2, r3
 8005628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562a:	4413      	add	r3, r2
 800562c:	3b02      	subs	r3, #2
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	4413      	add	r3, r2
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	461a      	mov	r2, r3
               ( x >= r[ ( i + 1 )*x_size + j - 3 ] ) &&
 8005636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005638:	4293      	cmp	r3, r2
 800563a:	f2c0 818a 	blt.w	8005952 <susan_corners+0x1546>
               ( x >= r[ ( i + 1 )*x_size + j - 1 ] ) &&
 800563e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005640:	3301      	adds	r3, #1
 8005642:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005644:	fb02 f203 	mul.w	r2, r2, r3
 8005648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564a:	4413      	add	r3, r2
 800564c:	3b01      	subs	r3, #1
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	4413      	add	r3, r2
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	461a      	mov	r2, r3
               ( x >= r[ ( i + 1 )*x_size + j - 2 ] ) &&
 8005656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005658:	4293      	cmp	r3, r2
 800565a:	f2c0 817a 	blt.w	8005952 <susan_corners+0x1546>
               ( x >= r[ ( i + 1 )*x_size + j   ] ) &&
 800565e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005660:	3301      	adds	r3, #1
 8005662:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005664:	fb02 f203 	mul.w	r2, r2, r3
 8005668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566a:	4413      	add	r3, r2
 800566c:	461a      	mov	r2, r3
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	4413      	add	r3, r2
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	461a      	mov	r2, r3
               ( x >= r[ ( i + 1 )*x_size + j - 1 ] ) &&
 8005676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005678:	4293      	cmp	r3, r2
 800567a:	f2c0 816a 	blt.w	8005952 <susan_corners+0x1546>
               ( x >= r[ ( i + 1 )*x_size + j + 1 ] ) &&
 800567e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005680:	3301      	adds	r3, #1
 8005682:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005684:	fb02 f203 	mul.w	r2, r2, r3
 8005688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568a:	4413      	add	r3, r2
 800568c:	3301      	adds	r3, #1
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	4413      	add	r3, r2
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	461a      	mov	r2, r3
               ( x >= r[ ( i + 1 )*x_size + j   ] ) &&
 8005696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005698:	4293      	cmp	r3, r2
 800569a:	f2c0 815a 	blt.w	8005952 <susan_corners+0x1546>
               ( x >= r[ ( i + 1 )*x_size + j + 2 ] ) &&
 800569e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056a0:	3301      	adds	r3, #1
 80056a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80056a4:	fb02 f203 	mul.w	r2, r2, r3
 80056a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056aa:	4413      	add	r3, r2
 80056ac:	3302      	adds	r3, #2
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	4413      	add	r3, r2
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	461a      	mov	r2, r3
               ( x >= r[ ( i + 1 )*x_size + j + 1 ] ) &&
 80056b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b8:	4293      	cmp	r3, r2
 80056ba:	f2c0 814a 	blt.w	8005952 <susan_corners+0x1546>
               ( x >= r[ ( i + 1 )*x_size + j + 3 ] ) &&
 80056be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056c0:	3301      	adds	r3, #1
 80056c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80056c4:	fb02 f203 	mul.w	r2, r2, r3
 80056c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ca:	4413      	add	r3, r2
 80056cc:	3303      	adds	r3, #3
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	4413      	add	r3, r2
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	461a      	mov	r2, r3
               ( x >= r[ ( i + 1 )*x_size + j + 2 ] ) &&
 80056d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d8:	4293      	cmp	r3, r2
 80056da:	f2c0 813a 	blt.w	8005952 <susan_corners+0x1546>

               ( x >= r[ ( i + 2 )*x_size + j - 3 ] ) &&
 80056de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056e0:	3302      	adds	r3, #2
 80056e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80056e4:	fb02 f203 	mul.w	r2, r2, r3
 80056e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ea:	4413      	add	r3, r2
 80056ec:	3b03      	subs	r3, #3
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	4413      	add	r3, r2
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	461a      	mov	r2, r3
               ( x >= r[ ( i + 1 )*x_size + j + 3 ] ) &&
 80056f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f8:	4293      	cmp	r3, r2
 80056fa:	f2c0 812a 	blt.w	8005952 <susan_corners+0x1546>
               ( x >= r[ ( i + 2 )*x_size + j - 2 ] ) &&
 80056fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005700:	3302      	adds	r3, #2
 8005702:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005704:	fb02 f203 	mul.w	r2, r2, r3
 8005708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800570a:	4413      	add	r3, r2
 800570c:	3b02      	subs	r3, #2
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	4413      	add	r3, r2
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	461a      	mov	r2, r3
               ( x >= r[ ( i + 2 )*x_size + j - 3 ] ) &&
 8005716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005718:	4293      	cmp	r3, r2
 800571a:	f2c0 811a 	blt.w	8005952 <susan_corners+0x1546>
               ( x >= r[ ( i + 2 )*x_size + j - 1 ] ) &&
 800571e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005720:	3302      	adds	r3, #2
 8005722:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005724:	fb02 f203 	mul.w	r2, r2, r3
 8005728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572a:	4413      	add	r3, r2
 800572c:	3b01      	subs	r3, #1
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	4413      	add	r3, r2
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	461a      	mov	r2, r3
               ( x >= r[ ( i + 2 )*x_size + j - 2 ] ) &&
 8005736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005738:	4293      	cmp	r3, r2
 800573a:	f2c0 810a 	blt.w	8005952 <susan_corners+0x1546>
               ( x >= r[ ( i + 2 )*x_size + j   ] ) &&
 800573e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005740:	3302      	adds	r3, #2
 8005742:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005744:	fb02 f203 	mul.w	r2, r2, r3
 8005748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574a:	4413      	add	r3, r2
 800574c:	461a      	mov	r2, r3
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	4413      	add	r3, r2
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	461a      	mov	r2, r3
               ( x >= r[ ( i + 2 )*x_size + j - 1 ] ) &&
 8005756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005758:	4293      	cmp	r3, r2
 800575a:	f2c0 80fa 	blt.w	8005952 <susan_corners+0x1546>
               ( x >= r[ ( i + 2 )*x_size + j + 1 ] ) &&
 800575e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005760:	3302      	adds	r3, #2
 8005762:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005764:	fb02 f203 	mul.w	r2, r2, r3
 8005768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576a:	4413      	add	r3, r2
 800576c:	3301      	adds	r3, #1
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	4413      	add	r3, r2
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	461a      	mov	r2, r3
               ( x >= r[ ( i + 2 )*x_size + j   ] ) &&
 8005776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005778:	4293      	cmp	r3, r2
 800577a:	f2c0 80ea 	blt.w	8005952 <susan_corners+0x1546>
               ( x >= r[ ( i + 2 )*x_size + j + 2 ] ) &&
 800577e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005780:	3302      	adds	r3, #2
 8005782:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005784:	fb02 f203 	mul.w	r2, r2, r3
 8005788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578a:	4413      	add	r3, r2
 800578c:	3302      	adds	r3, #2
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	4413      	add	r3, r2
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	461a      	mov	r2, r3
               ( x >= r[ ( i + 2 )*x_size + j + 1 ] ) &&
 8005796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005798:	4293      	cmp	r3, r2
 800579a:	f2c0 80da 	blt.w	8005952 <susan_corners+0x1546>
               ( x >= r[ ( i + 2 )*x_size + j + 3 ] ) &&
 800579e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057a0:	3302      	adds	r3, #2
 80057a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80057a4:	fb02 f203 	mul.w	r2, r2, r3
 80057a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057aa:	4413      	add	r3, r2
 80057ac:	3303      	adds	r3, #3
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	4413      	add	r3, r2
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	461a      	mov	r2, r3
               ( x >= r[ ( i + 2 )*x_size + j + 2 ] ) &&
 80057b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b8:	4293      	cmp	r3, r2
 80057ba:	f2c0 80ca 	blt.w	8005952 <susan_corners+0x1546>

               ( x >= r[ ( i + 3 )*x_size + j - 3 ] ) &&
 80057be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c0:	3303      	adds	r3, #3
 80057c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80057c4:	fb02 f203 	mul.w	r2, r2, r3
 80057c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ca:	4413      	add	r3, r2
 80057cc:	3b03      	subs	r3, #3
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	4413      	add	r3, r2
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	461a      	mov	r2, r3
               ( x >= r[ ( i + 2 )*x_size + j + 3 ] ) &&
 80057d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d8:	4293      	cmp	r3, r2
 80057da:	f2c0 80ba 	blt.w	8005952 <susan_corners+0x1546>
               ( x >= r[ ( i + 3 )*x_size + j - 2 ] ) &&
 80057de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057e0:	3303      	adds	r3, #3
 80057e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80057e4:	fb02 f203 	mul.w	r2, r2, r3
 80057e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ea:	4413      	add	r3, r2
 80057ec:	3b02      	subs	r3, #2
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	4413      	add	r3, r2
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	461a      	mov	r2, r3
               ( x >= r[ ( i + 3 )*x_size + j - 3 ] ) &&
 80057f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f8:	4293      	cmp	r3, r2
 80057fa:	f2c0 80aa 	blt.w	8005952 <susan_corners+0x1546>
               ( x >= r[ ( i + 3 )*x_size + j - 1 ] ) &&
 80057fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005800:	3303      	adds	r3, #3
 8005802:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005804:	fb02 f203 	mul.w	r2, r2, r3
 8005808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580a:	4413      	add	r3, r2
 800580c:	3b01      	subs	r3, #1
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	4413      	add	r3, r2
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	461a      	mov	r2, r3
               ( x >= r[ ( i + 3 )*x_size + j - 2 ] ) &&
 8005816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005818:	4293      	cmp	r3, r2
 800581a:	f2c0 809a 	blt.w	8005952 <susan_corners+0x1546>
               ( x >= r[ ( i + 3 )*x_size + j   ] ) &&
 800581e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005820:	3303      	adds	r3, #3
 8005822:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005824:	fb02 f203 	mul.w	r2, r2, r3
 8005828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582a:	4413      	add	r3, r2
 800582c:	461a      	mov	r2, r3
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	4413      	add	r3, r2
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	461a      	mov	r2, r3
               ( x >= r[ ( i + 3 )*x_size + j - 1 ] ) &&
 8005836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005838:	4293      	cmp	r3, r2
 800583a:	f2c0 808a 	blt.w	8005952 <susan_corners+0x1546>
               ( x >= r[ ( i + 3 )*x_size + j + 1 ] ) &&
 800583e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005840:	3303      	adds	r3, #3
 8005842:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005844:	fb02 f203 	mul.w	r2, r2, r3
 8005848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584a:	4413      	add	r3, r2
 800584c:	3301      	adds	r3, #1
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	4413      	add	r3, r2
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	461a      	mov	r2, r3
               ( x >= r[ ( i + 3 )*x_size + j   ] ) &&
 8005856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005858:	4293      	cmp	r3, r2
 800585a:	db7a      	blt.n	8005952 <susan_corners+0x1546>
               ( x >= r[ ( i + 3 )*x_size + j + 2 ] ) &&
 800585c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800585e:	3303      	adds	r3, #3
 8005860:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005862:	fb02 f203 	mul.w	r2, r2, r3
 8005866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005868:	4413      	add	r3, r2
 800586a:	3302      	adds	r3, #2
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	4413      	add	r3, r2
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	461a      	mov	r2, r3
               ( x >= r[ ( i + 3 )*x_size + j + 1 ] ) &&
 8005874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005876:	4293      	cmp	r3, r2
 8005878:	db6b      	blt.n	8005952 <susan_corners+0x1546>
               ( x >= r[ ( i + 3 )*x_size + j + 3 ] ) )
 800587a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800587c:	3303      	adds	r3, #3
 800587e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005880:	fb02 f203 	mul.w	r2, r2, r3
 8005884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005886:	4413      	add	r3, r2
 8005888:	3303      	adds	r3, #3
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	4413      	add	r3, r2
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	461a      	mov	r2, r3
               ( x >= r[ ( i + 3 )*x_size + j + 2 ] ) &&
 8005892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005894:	4293      	cmp	r3, r2
 8005896:	db5c      	blt.n	8005952 <susan_corners+0x1546>
        #endif
          {
            corner_list[ n ].info = 0;
 8005898:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800589a:	4613      	mov	r3, r2
 800589c:	005b      	lsls	r3, r3, #1
 800589e:	4413      	add	r3, r2
 80058a0:	00db      	lsls	r3, r3, #3
 80058a2:	461a      	mov	r2, r3
 80058a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058a6:	4413      	add	r3, r2
 80058a8:	2200      	movs	r2, #0
 80058aa:	609a      	str	r2, [r3, #8]
            corner_list[ n ].x = j;
 80058ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058ae:	4613      	mov	r3, r2
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	4413      	add	r3, r2
 80058b4:	00db      	lsls	r3, r3, #3
 80058b6:	461a      	mov	r2, r3
 80058b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058ba:	4413      	add	r3, r2
 80058bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058be:	601a      	str	r2, [r3, #0]
            corner_list[ n ].y = i;
 80058c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058c2:	4613      	mov	r3, r2
 80058c4:	005b      	lsls	r3, r3, #1
 80058c6:	4413      	add	r3, r2
 80058c8:	00db      	lsls	r3, r3, #3
 80058ca:	461a      	mov	r2, r3
 80058cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058ce:	4413      	add	r3, r2
 80058d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058d2:	605a      	str	r2, [r3, #4]
            corner_list[ n ].dx = cgx[ i * x_size + j ];
 80058d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80058d8:	fb02 f203 	mul.w	r2, r2, r3
 80058dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058de:	4413      	add	r3, r2
 80058e0:	461a      	mov	r2, r3
 80058e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e4:	4413      	add	r3, r2
 80058e6:	7819      	ldrb	r1, [r3, #0]
 80058e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058ea:	4613      	mov	r3, r2
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	4413      	add	r3, r2
 80058f0:	00db      	lsls	r3, r3, #3
 80058f2:	461a      	mov	r2, r3
 80058f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058f6:	4413      	add	r3, r2
 80058f8:	460a      	mov	r2, r1
 80058fa:	60da      	str	r2, [r3, #12]
            corner_list[ n ].dy = cgy[ i * x_size + j ];
 80058fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005900:	fb02 f203 	mul.w	r2, r2, r3
 8005904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005906:	4413      	add	r3, r2
 8005908:	461a      	mov	r2, r3
 800590a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590c:	4413      	add	r3, r2
 800590e:	7819      	ldrb	r1, [r3, #0]
 8005910:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005912:	4613      	mov	r3, r2
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	4413      	add	r3, r2
 8005918:	00db      	lsls	r3, r3, #3
 800591a:	461a      	mov	r2, r3
 800591c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800591e:	4413      	add	r3, r2
 8005920:	460a      	mov	r2, r1
 8005922:	611a      	str	r2, [r3, #16]
            corner_list[ n ].I = in[ i * x_size + j ];
 8005924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005926:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005928:	fb02 f203 	mul.w	r2, r2, r3
 800592c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592e:	4413      	add	r3, r2
 8005930:	461a      	mov	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	4413      	add	r3, r2
 8005936:	7819      	ldrb	r1, [r3, #0]
 8005938:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800593a:	4613      	mov	r3, r2
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	4413      	add	r3, r2
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	461a      	mov	r2, r3
 8005944:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005946:	4413      	add	r3, r2
 8005948:	460a      	mov	r2, r1
 800594a:	615a      	str	r2, [r3, #20]
            n++;
 800594c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800594e:	3301      	adds	r3, #1
 8005950:	647b      	str	r3, [r7, #68]	; 0x44
    for ( j = 5; j < x_size - 5; j++ ) {
 8005952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005954:	3301      	adds	r3, #1
 8005956:	63bb      	str	r3, [r7, #56]	; 0x38
 8005958:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800595a:	3b05      	subs	r3, #5
 800595c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800595e:	429a      	cmp	r2, r3
 8005960:	f6ff ac94 	blt.w	800528c <susan_corners+0xe80>
  for ( i = 5; i < y_size - 5; i++ ) {
 8005964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005966:	3301      	adds	r3, #1
 8005968:	63fb      	str	r3, [r7, #60]	; 0x3c
 800596a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800596c:	3b05      	subs	r3, #5
 800596e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005970:	429a      	cmp	r2, r3
 8005972:	f6ff ac85 	blt.w	8005280 <susan_corners+0xe74>
            }
          }
      }
    }
  }
  corner_list[ n ].info = 7;
 8005976:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005978:	4613      	mov	r3, r2
 800597a:	005b      	lsls	r3, r3, #1
 800597c:	4413      	add	r3, r2
 800597e:	00db      	lsls	r3, r3, #3
 8005980:	461a      	mov	r2, r3
 8005982:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005984:	4413      	add	r3, r2
 8005986:	2207      	movs	r2, #7
 8005988:	609a      	str	r2, [r3, #8]
}
 800598a:	bf00      	nop
 800598c:	3748      	adds	r7, #72	; 0x48
 800598e:	46bd      	mov	sp, r7
 8005990:	bdb0      	pop	{r4, r5, r7, pc}
 8005992:	bf00      	nop

08005994 <susan_corners_quick>:


void susan_corners_quick( uchar *in, char *r, uchar *bp,
                          int max_no, CORNER_LIST corner_list, int x_size, int y_size )
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b08c      	sub	sp, #48	; 0x30
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
 80059a0:	603b      	str	r3, [r7, #0]
  int   n, x, y, i, j;
  uchar *p, *cp;

  susan_wccmemset( r, 0, x_size * y_size );
 80059a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059a6:	fb02 f303 	mul.w	r3, r2, r3
 80059aa:	461a      	mov	r2, r3
 80059ac:	2100      	movs	r1, #0
 80059ae:	68b8      	ldr	r0, [r7, #8]
 80059b0:	f001 fd80 	bl	80074b4 <susan_wccmemset>

  _Pragma( "loopbound min 0 max 0" )
  for ( i = 7; i < y_size - 7; i++ ) {
 80059b4:	2307      	movs	r3, #7
 80059b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80059b8:	e253      	b.n	8005e62 <susan_corners_quick+0x4ce>
    _Pragma( "loopbound min 0 max 0" )
    for ( j = 7; j < x_size - 7; j++ ) {
 80059ba:	2307      	movs	r3, #7
 80059bc:	627b      	str	r3, [r7, #36]	; 0x24
 80059be:	e247      	b.n	8005e50 <susan_corners_quick+0x4bc>
      n = 100;
 80059c0:	2364      	movs	r3, #100	; 0x64
 80059c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      p = in + ( i - 3 ) * x_size + j - 1;
 80059c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c6:	3b03      	subs	r3, #3
 80059c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80059ca:	fb02 f303 	mul.w	r3, r2, r3
 80059ce:	461a      	mov	r2, r3
 80059d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d2:	4413      	add	r3, r2
 80059d4:	3b01      	subs	r3, #1
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4413      	add	r3, r2
 80059da:	61bb      	str	r3, [r7, #24]
      cp = bp + in[ i * x_size + j ];
 80059dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80059e0:	fb02 f203 	mul.w	r2, r2, r3
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	4413      	add	r3, r2
 80059e8:	461a      	mov	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	4413      	add	r3, r2
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	461a      	mov	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4413      	add	r3, r2
 80059f6:	617b      	str	r3, [r7, #20]

      n += *( cp - *p++ );
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	1c5a      	adds	r2, r3, #1
 80059fc:	61ba      	str	r2, [r7, #24]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	425b      	negs	r3, r3
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	4413      	add	r3, r2
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	461a      	mov	r2, r3
 8005a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0c:	4413      	add	r3, r2
 8005a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      n += *( cp - *p++ );
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	1c5a      	adds	r2, r3, #1
 8005a14:	61ba      	str	r2, [r7, #24]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	425b      	negs	r3, r3
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	461a      	mov	r2, r3
 8005a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a24:	4413      	add	r3, r2
 8005a26:	62fb      	str	r3, [r7, #44]	; 0x2c
      n += *( cp - *p );
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	425b      	negs	r3, r3
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	4413      	add	r3, r2
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	461a      	mov	r2, r3
 8005a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a38:	4413      	add	r3, r2
 8005a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      p += x_size - 3;
 8005a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a3e:	3b03      	subs	r3, #3
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	4413      	add	r3, r2
 8005a44:	61bb      	str	r3, [r7, #24]

      n += *( cp - *p++ );
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	1c5a      	adds	r2, r3, #1
 8005a4a:	61ba      	str	r2, [r7, #24]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	425b      	negs	r3, r3
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	4413      	add	r3, r2
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	461a      	mov	r2, r3
 8005a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5a:	4413      	add	r3, r2
 8005a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      n += *( cp - *p++ );
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	1c5a      	adds	r2, r3, #1
 8005a62:	61ba      	str	r2, [r7, #24]
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	425b      	negs	r3, r3
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a72:	4413      	add	r3, r2
 8005a74:	62fb      	str	r3, [r7, #44]	; 0x2c
      n += *( cp - *p++ );
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	1c5a      	adds	r2, r3, #1
 8005a7a:	61ba      	str	r2, [r7, #24]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	425b      	negs	r3, r3
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	4413      	add	r3, r2
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	461a      	mov	r2, r3
 8005a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8a:	4413      	add	r3, r2
 8005a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      n += *( cp - *p++ );
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	1c5a      	adds	r2, r3, #1
 8005a92:	61ba      	str	r2, [r7, #24]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	425b      	negs	r3, r3
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa2:	4413      	add	r3, r2
 8005aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
      n += *( cp - *p );
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	425b      	negs	r3, r3
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	4413      	add	r3, r2
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab6:	4413      	add	r3, r2
 8005ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
      p += x_size - 5;
 8005aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005abc:	3b05      	subs	r3, #5
 8005abe:	69ba      	ldr	r2, [r7, #24]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	61bb      	str	r3, [r7, #24]

      n += *( cp - *p++ );
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	1c5a      	adds	r2, r3, #1
 8005ac8:	61ba      	str	r2, [r7, #24]
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	425b      	negs	r3, r3
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad8:	4413      	add	r3, r2
 8005ada:	62fb      	str	r3, [r7, #44]	; 0x2c
      n += *( cp - *p++ );
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	1c5a      	adds	r2, r3, #1
 8005ae0:	61ba      	str	r2, [r7, #24]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	425b      	negs	r3, r3
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	4413      	add	r3, r2
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	461a      	mov	r2, r3
 8005aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af0:	4413      	add	r3, r2
 8005af2:	62fb      	str	r3, [r7, #44]	; 0x2c
      n += *( cp - *p++ );
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	1c5a      	adds	r2, r3, #1
 8005af8:	61ba      	str	r2, [r7, #24]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	425b      	negs	r3, r3
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	4413      	add	r3, r2
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	461a      	mov	r2, r3
 8005b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b08:	4413      	add	r3, r2
 8005b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      n += *( cp - *p++ );
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	1c5a      	adds	r2, r3, #1
 8005b10:	61ba      	str	r2, [r7, #24]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	425b      	negs	r3, r3
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	4413      	add	r3, r2
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b20:	4413      	add	r3, r2
 8005b22:	62fb      	str	r3, [r7, #44]	; 0x2c
      n += *( cp - *p++ );
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	1c5a      	adds	r2, r3, #1
 8005b28:	61ba      	str	r2, [r7, #24]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	425b      	negs	r3, r3
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	4413      	add	r3, r2
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	461a      	mov	r2, r3
 8005b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b38:	4413      	add	r3, r2
 8005b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      n += *( cp - *p++ );
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	1c5a      	adds	r2, r3, #1
 8005b40:	61ba      	str	r2, [r7, #24]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	425b      	negs	r3, r3
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	4413      	add	r3, r2
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b50:	4413      	add	r3, r2
 8005b52:	62fb      	str	r3, [r7, #44]	; 0x2c
      n += *( cp - *p );
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	425b      	negs	r3, r3
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	461a      	mov	r2, r3
 8005b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b64:	4413      	add	r3, r2
 8005b66:	62fb      	str	r3, [r7, #44]	; 0x2c
      p += x_size - 6;
 8005b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b6a:	3b06      	subs	r3, #6
 8005b6c:	69ba      	ldr	r2, [r7, #24]
 8005b6e:	4413      	add	r3, r2
 8005b70:	61bb      	str	r3, [r7, #24]

      n += *( cp - *p++ );
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	1c5a      	adds	r2, r3, #1
 8005b76:	61ba      	str	r2, [r7, #24]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	425b      	negs	r3, r3
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	4413      	add	r3, r2
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	461a      	mov	r2, r3
 8005b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b86:	4413      	add	r3, r2
 8005b88:	62fb      	str	r3, [r7, #44]	; 0x2c
      n += *( cp - *p++ );
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	1c5a      	adds	r2, r3, #1
 8005b8e:	61ba      	str	r2, [r7, #24]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	425b      	negs	r3, r3
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	4413      	add	r3, r2
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9e:	4413      	add	r3, r2
 8005ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
      n += *( cp - *p );
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	425b      	negs	r3, r3
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	4413      	add	r3, r2
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	461a      	mov	r2, r3
 8005bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb2:	4413      	add	r3, r2
 8005bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ( n < max_no ) {
 8005bb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	f280 8145 	bge.w	8005e4a <susan_corners_quick+0x4b6>
        p += 2;
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	3302      	adds	r3, #2
 8005bc4:	61bb      	str	r3, [r7, #24]
        n += *( cp - *p++ );
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	1c5a      	adds	r2, r3, #1
 8005bca:	61ba      	str	r2, [r7, #24]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	425b      	negs	r3, r3
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bda:	4413      	add	r3, r2
 8005bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        if ( n < max_no ) {
 8005bde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	f280 8131 	bge.w	8005e4a <susan_corners_quick+0x4b6>
          n += *( cp - *p++ );
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	61ba      	str	r2, [r7, #24]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	425b      	negs	r3, r3
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfc:	4413      	add	r3, r2
 8005bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
          if ( n < max_no ) {
 8005c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	f280 8120 	bge.w	8005e4a <susan_corners_quick+0x4b6>
            n += *( cp - *p );
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	425b      	negs	r3, r3
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	4413      	add	r3, r2
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	461a      	mov	r2, r3
 8005c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1a:	4413      	add	r3, r2
 8005c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
            if ( n < max_no ) {
 8005c1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	f280 8111 	bge.w	8005e4a <susan_corners_quick+0x4b6>
              p += x_size - 6;
 8005c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c2a:	3b06      	subs	r3, #6
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	4413      	add	r3, r2
 8005c30:	61bb      	str	r3, [r7, #24]

              n += *( cp - *p++ );
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	1c5a      	adds	r2, r3, #1
 8005c36:	61ba      	str	r2, [r7, #24]
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	425b      	negs	r3, r3
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	4413      	add	r3, r2
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	461a      	mov	r2, r3
 8005c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c46:	4413      	add	r3, r2
 8005c48:	62fb      	str	r3, [r7, #44]	; 0x2c
              if ( n < max_no ) {
 8005c4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	f280 80fb 	bge.w	8005e4a <susan_corners_quick+0x4b6>
                n += *( cp - *p++ );
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	1c5a      	adds	r2, r3, #1
 8005c58:	61ba      	str	r2, [r7, #24]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	425b      	negs	r3, r3
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	4413      	add	r3, r2
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	461a      	mov	r2, r3
 8005c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c68:	4413      	add	r3, r2
 8005c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
                if ( n < max_no ) {
 8005c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	f280 80ea 	bge.w	8005e4a <susan_corners_quick+0x4b6>
                  n += *( cp - *p++ );
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	1c5a      	adds	r2, r3, #1
 8005c7a:	61ba      	str	r2, [r7, #24]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	425b      	negs	r3, r3
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	4413      	add	r3, r2
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	461a      	mov	r2, r3
 8005c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8a:	4413      	add	r3, r2
 8005c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
                  if ( n < max_no ) {
 8005c8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	f280 80d9 	bge.w	8005e4a <susan_corners_quick+0x4b6>
                    n += *( cp - *p++ );
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	1c5a      	adds	r2, r3, #1
 8005c9c:	61ba      	str	r2, [r7, #24]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	425b      	negs	r3, r3
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	461a      	mov	r2, r3
 8005caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cac:	4413      	add	r3, r2
 8005cae:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if ( n < max_no ) {
 8005cb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	f280 80c8 	bge.w	8005e4a <susan_corners_quick+0x4b6>
                      n += *( cp - *p++ );
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	1c5a      	adds	r2, r3, #1
 8005cbe:	61ba      	str	r2, [r7, #24]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	425b      	negs	r3, r3
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cce:	4413      	add	r3, r2
 8005cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
                      if ( n < max_no ) {
 8005cd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	f280 80b7 	bge.w	8005e4a <susan_corners_quick+0x4b6>
                        n += *( cp - *p++ );
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	1c5a      	adds	r2, r3, #1
 8005ce0:	61ba      	str	r2, [r7, #24]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	425b      	negs	r3, r3
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	4413      	add	r3, r2
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	461a      	mov	r2, r3
 8005cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf0:	4413      	add	r3, r2
 8005cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
                        if ( n < max_no ) {
 8005cf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	f280 80a6 	bge.w	8005e4a <susan_corners_quick+0x4b6>
                          n += *( cp - *p );
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	425b      	negs	r3, r3
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	4413      	add	r3, r2
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0e:	4413      	add	r3, r2
 8005d10:	62fb      	str	r3, [r7, #44]	; 0x2c
                          if ( n < max_no ) {
 8005d12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	f280 8097 	bge.w	8005e4a <susan_corners_quick+0x4b6>
                            p += x_size - 5;
 8005d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d1e:	3b05      	subs	r3, #5
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	4413      	add	r3, r2
 8005d24:	61bb      	str	r3, [r7, #24]

                            n += *( cp - *p++ );
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	1c5a      	adds	r2, r3, #1
 8005d2a:	61ba      	str	r2, [r7, #24]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	425b      	negs	r3, r3
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	4413      	add	r3, r2
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	461a      	mov	r2, r3
 8005d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3a:	4413      	add	r3, r2
 8005d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
                            if ( n < max_no ) {
 8005d3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	f280 8081 	bge.w	8005e4a <susan_corners_quick+0x4b6>
                              n += *( cp - *p++ );
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	1c5a      	adds	r2, r3, #1
 8005d4c:	61ba      	str	r2, [r7, #24]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	425b      	negs	r3, r3
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	4413      	add	r3, r2
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	461a      	mov	r2, r3
 8005d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5c:	4413      	add	r3, r2
 8005d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              if ( n < max_no ) {
 8005d60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	da70      	bge.n	8005e4a <susan_corners_quick+0x4b6>
                                n += *( cp - *p++ );
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	1c5a      	adds	r2, r3, #1
 8005d6c:	61ba      	str	r2, [r7, #24]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	425b      	negs	r3, r3
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	4413      	add	r3, r2
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	461a      	mov	r2, r3
 8005d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7c:	4413      	add	r3, r2
 8005d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                if ( n < max_no ) {
 8005d80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	da60      	bge.n	8005e4a <susan_corners_quick+0x4b6>
                                  n += *( cp - *p++ );
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	1c5a      	adds	r2, r3, #1
 8005d8c:	61ba      	str	r2, [r7, #24]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	425b      	negs	r3, r3
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	4413      	add	r3, r2
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	461a      	mov	r2, r3
 8005d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9c:	4413      	add	r3, r2
 8005d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  if ( n < max_no ) {
 8005da0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	da50      	bge.n	8005e4a <susan_corners_quick+0x4b6>
                                    n += *( cp - *p );
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	425b      	negs	r3, r3
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	4413      	add	r3, r2
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	461a      	mov	r2, r3
 8005db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db8:	4413      	add	r3, r2
 8005dba:	62fb      	str	r3, [r7, #44]	; 0x2c
                                    if ( n < max_no ) {
 8005dbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	da42      	bge.n	8005e4a <susan_corners_quick+0x4b6>
                                      p += x_size - 3;
 8005dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dc6:	3b03      	subs	r3, #3
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	4413      	add	r3, r2
 8005dcc:	61bb      	str	r3, [r7, #24]

                                      n += *( cp - *p++ );
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	1c5a      	adds	r2, r3, #1
 8005dd2:	61ba      	str	r2, [r7, #24]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	425b      	negs	r3, r3
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	4413      	add	r3, r2
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	461a      	mov	r2, r3
 8005de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de2:	4413      	add	r3, r2
 8005de4:	62fb      	str	r3, [r7, #44]	; 0x2c
                                      if ( n < max_no ) {
 8005de6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	da2d      	bge.n	8005e4a <susan_corners_quick+0x4b6>
                                        n += *( cp - *p++ );
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	1c5a      	adds	r2, r3, #1
 8005df2:	61ba      	str	r2, [r7, #24]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	425b      	negs	r3, r3
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	461a      	mov	r2, r3
 8005e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e02:	4413      	add	r3, r2
 8005e04:	62fb      	str	r3, [r7, #44]	; 0x2c
                                        if ( n < max_no ) {
 8005e06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	da1d      	bge.n	8005e4a <susan_corners_quick+0x4b6>
                                          n += *( cp - *p );
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	425b      	negs	r3, r3
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	4413      	add	r3, r2
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1e:	4413      	add	r3, r2
 8005e20:	62fb      	str	r3, [r7, #44]	; 0x2c

                                          if ( n < max_no )
 8005e22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	da0f      	bge.n	8005e4a <susan_corners_quick+0x4b6>
                                            r[ i * x_size + j ] = max_no - n;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	b2d9      	uxtb	r1, r3
 8005e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e34:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005e36:	fb00 f003 	mul.w	r0, r0, r3
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	4403      	add	r3, r0
 8005e3e:	4618      	mov	r0, r3
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	4403      	add	r3, r0
 8005e44:	1a8a      	subs	r2, r1, r2
 8005e46:	b2d2      	uxtb	r2, r2
 8005e48:	701a      	strb	r2, [r3, #0]
    for ( j = 7; j < x_size - 7; j++ ) {
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e52:	3b07      	subs	r3, #7
 8005e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e56:	429a      	cmp	r2, r3
 8005e58:	f6ff adb2 	blt.w	80059c0 <susan_corners_quick+0x2c>
  for ( i = 7; i < y_size - 7; i++ ) {
 8005e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5e:	3301      	adds	r3, #1
 8005e60:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e64:	3b07      	subs	r3, #7
 8005e66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	f6ff ada6 	blt.w	80059ba <susan_corners_quick+0x26>
      }
    }
  }

  /* to locate the local maxima */
  n = 0;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  _Pragma( "loopbound min 0 max 0" )
  for ( i = 7; i < y_size - 7; i++ ) {
 8005e72:	2307      	movs	r3, #7
 8005e74:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e76:	f000 be84 	b.w	8006b82 <susan_corners_quick+0x11ee>
    _Pragma( "loopbound min 0 max 0" )
    for ( j = 7; j < x_size - 7; j++ ) {
 8005e7a:	2307      	movs	r3, #7
 8005e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e7e:	f000 be77 	b.w	8006b70 <susan_corners_quick+0x11dc>
      x = r[ i * x_size + j ];
 8005e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e86:	fb02 f203 	mul.w	r2, r2, r3
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8c:	4413      	add	r3, r2
 8005e8e:	461a      	mov	r2, r3
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	4413      	add	r3, r2
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	623b      	str	r3, [r7, #32]
      if ( x > 0 )  {
 8005e98:	6a3b      	ldr	r3, [r7, #32]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f340 8665 	ble.w	8006b6a <susan_corners_quick+0x11d6>
             ( x >= r[ ( i  )*x_size + j - 2 ] ) &&
             ( x >= r[ ( i  )*x_size + j - 1 ] ) &&
             ( x >= r[ ( i + 1 )*x_size + j - 2 ] ) )
        #endif
        #ifdef SEVEN_SUPP
          if ( ( x > r[ ( i - 3 )*x_size + j - 3 ] ) &&
 8005ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea2:	3b03      	subs	r3, #3
 8005ea4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ea6:	fb02 f203 	mul.w	r2, r2, r3
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eac:	4413      	add	r3, r2
 8005eae:	3b03      	subs	r3, #3
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	f340 8655 	ble.w	8006b6a <susan_corners_quick+0x11d6>
               ( x > r[ ( i - 3 )*x_size + j - 2 ] ) &&
 8005ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec2:	3b03      	subs	r3, #3
 8005ec4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ec6:	fb02 f203 	mul.w	r2, r2, r3
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	4413      	add	r3, r2
 8005ece:	3b02      	subs	r3, #2
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	461a      	mov	r2, r3
          if ( ( x > r[ ( i - 3 )*x_size + j - 3 ] ) &&
 8005ed8:	6a3b      	ldr	r3, [r7, #32]
 8005eda:	4293      	cmp	r3, r2
 8005edc:	f340 8645 	ble.w	8006b6a <susan_corners_quick+0x11d6>
               ( x > r[ ( i - 3 )*x_size + j - 1 ] ) &&
 8005ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee2:	3b03      	subs	r3, #3
 8005ee4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ee6:	fb02 f203 	mul.w	r2, r2, r3
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	4413      	add	r3, r2
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	68ba      	ldr	r2, [r7, #8]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	461a      	mov	r2, r3
               ( x > r[ ( i - 3 )*x_size + j - 2 ] ) &&
 8005ef8:	6a3b      	ldr	r3, [r7, #32]
 8005efa:	4293      	cmp	r3, r2
 8005efc:	f340 8635 	ble.w	8006b6a <susan_corners_quick+0x11d6>
               ( x > r[ ( i - 3 )*x_size + j   ] ) &&
 8005f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f02:	3b03      	subs	r3, #3
 8005f04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f06:	fb02 f203 	mul.w	r2, r2, r3
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	4413      	add	r3, r2
 8005f0e:	461a      	mov	r2, r3
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	4413      	add	r3, r2
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	461a      	mov	r2, r3
               ( x > r[ ( i - 3 )*x_size + j - 1 ] ) &&
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	f340 8625 	ble.w	8006b6a <susan_corners_quick+0x11d6>
               ( x > r[ ( i - 3 )*x_size + j + 1 ] ) &&
 8005f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f22:	3b03      	subs	r3, #3
 8005f24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f26:	fb02 f203 	mul.w	r2, r2, r3
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2c:	4413      	add	r3, r2
 8005f2e:	3301      	adds	r3, #1
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	4413      	add	r3, r2
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	461a      	mov	r2, r3
               ( x > r[ ( i - 3 )*x_size + j   ] ) &&
 8005f38:	6a3b      	ldr	r3, [r7, #32]
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	f340 8615 	ble.w	8006b6a <susan_corners_quick+0x11d6>
               ( x > r[ ( i - 3 )*x_size + j + 2 ] ) &&
 8005f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f42:	3b03      	subs	r3, #3
 8005f44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f46:	fb02 f203 	mul.w	r2, r2, r3
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	4413      	add	r3, r2
 8005f4e:	3302      	adds	r3, #2
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	4413      	add	r3, r2
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	461a      	mov	r2, r3
               ( x > r[ ( i - 3 )*x_size + j + 1 ] ) &&
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	f340 8605 	ble.w	8006b6a <susan_corners_quick+0x11d6>
               ( x > r[ ( i - 3 )*x_size + j + 3 ] ) &&
 8005f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f62:	3b03      	subs	r3, #3
 8005f64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f66:	fb02 f203 	mul.w	r2, r2, r3
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6c:	4413      	add	r3, r2
 8005f6e:	3303      	adds	r3, #3
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	4413      	add	r3, r2
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	461a      	mov	r2, r3
               ( x > r[ ( i - 3 )*x_size + j + 2 ] ) &&
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	f340 85f5 	ble.w	8006b6a <susan_corners_quick+0x11d6>

               ( x > r[ ( i - 2 )*x_size + j - 3 ] ) &&
 8005f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f82:	3b02      	subs	r3, #2
 8005f84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f86:	fb02 f203 	mul.w	r2, r2, r3
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8c:	4413      	add	r3, r2
 8005f8e:	3b03      	subs	r3, #3
 8005f90:	68ba      	ldr	r2, [r7, #8]
 8005f92:	4413      	add	r3, r2
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	461a      	mov	r2, r3
               ( x > r[ ( i - 3 )*x_size + j + 3 ] ) &&
 8005f98:	6a3b      	ldr	r3, [r7, #32]
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	f340 85e5 	ble.w	8006b6a <susan_corners_quick+0x11d6>
               ( x > r[ ( i - 2 )*x_size + j - 2 ] ) &&
 8005fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa2:	3b02      	subs	r3, #2
 8005fa4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fa6:	fb02 f203 	mul.w	r2, r2, r3
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	4413      	add	r3, r2
 8005fae:	3b02      	subs	r3, #2
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	461a      	mov	r2, r3
               ( x > r[ ( i - 2 )*x_size + j - 3 ] ) &&
 8005fb8:	6a3b      	ldr	r3, [r7, #32]
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	f340 85d5 	ble.w	8006b6a <susan_corners_quick+0x11d6>
               ( x > r[ ( i - 2 )*x_size + j - 1 ] ) &&
 8005fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc2:	3b02      	subs	r3, #2
 8005fc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fc6:	fb02 f203 	mul.w	r2, r2, r3
 8005fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fcc:	4413      	add	r3, r2
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	461a      	mov	r2, r3
               ( x > r[ ( i - 2 )*x_size + j - 2 ] ) &&
 8005fd8:	6a3b      	ldr	r3, [r7, #32]
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	f340 85c5 	ble.w	8006b6a <susan_corners_quick+0x11d6>
               ( x > r[ ( i - 2 )*x_size + j   ] ) &&
 8005fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe2:	3b02      	subs	r3, #2
 8005fe4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fe6:	fb02 f203 	mul.w	r2, r2, r3
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	4413      	add	r3, r2
 8005fee:	461a      	mov	r2, r3
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	461a      	mov	r2, r3
               ( x > r[ ( i - 2 )*x_size + j - 1 ] ) &&
 8005ff8:	6a3b      	ldr	r3, [r7, #32]
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	f340 85b5 	ble.w	8006b6a <susan_corners_quick+0x11d6>
               ( x > r[ ( i - 2 )*x_size + j + 1 ] ) &&
 8006000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006002:	3b02      	subs	r3, #2
 8006004:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006006:	fb02 f203 	mul.w	r2, r2, r3
 800600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600c:	4413      	add	r3, r2
 800600e:	3301      	adds	r3, #1
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	4413      	add	r3, r2
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	461a      	mov	r2, r3
               ( x > r[ ( i - 2 )*x_size + j   ] ) &&
 8006018:	6a3b      	ldr	r3, [r7, #32]
 800601a:	4293      	cmp	r3, r2
 800601c:	f340 85a5 	ble.w	8006b6a <susan_corners_quick+0x11d6>
               ( x > r[ ( i - 2 )*x_size + j + 2 ] ) &&
 8006020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006022:	3b02      	subs	r3, #2
 8006024:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006026:	fb02 f203 	mul.w	r2, r2, r3
 800602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602c:	4413      	add	r3, r2
 800602e:	3302      	adds	r3, #2
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	4413      	add	r3, r2
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	461a      	mov	r2, r3
               ( x > r[ ( i - 2 )*x_size + j + 1 ] ) &&
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	4293      	cmp	r3, r2
 800603c:	f340 8595 	ble.w	8006b6a <susan_corners_quick+0x11d6>
               ( x > r[ ( i - 2 )*x_size + j + 3 ] ) &&
 8006040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006042:	3b02      	subs	r3, #2
 8006044:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006046:	fb02 f203 	mul.w	r2, r2, r3
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	4413      	add	r3, r2
 800604e:	3303      	adds	r3, #3
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	4413      	add	r3, r2
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	461a      	mov	r2, r3
               ( x > r[ ( i - 2 )*x_size + j + 2 ] ) &&
 8006058:	6a3b      	ldr	r3, [r7, #32]
 800605a:	4293      	cmp	r3, r2
 800605c:	f340 8585 	ble.w	8006b6a <susan_corners_quick+0x11d6>

               ( x > r[ ( i - 1 )*x_size + j - 3 ] ) &&
 8006060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006062:	3b01      	subs	r3, #1
 8006064:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006066:	fb02 f203 	mul.w	r2, r2, r3
 800606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606c:	4413      	add	r3, r2
 800606e:	3b03      	subs	r3, #3
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	4413      	add	r3, r2
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	461a      	mov	r2, r3
               ( x > r[ ( i - 2 )*x_size + j + 3 ] ) &&
 8006078:	6a3b      	ldr	r3, [r7, #32]
 800607a:	4293      	cmp	r3, r2
 800607c:	f340 8575 	ble.w	8006b6a <susan_corners_quick+0x11d6>
               ( x > r[ ( i - 1 )*x_size + j - 2 ] ) &&
 8006080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006082:	3b01      	subs	r3, #1
 8006084:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006086:	fb02 f203 	mul.w	r2, r2, r3
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	4413      	add	r3, r2
 800608e:	3b02      	subs	r3, #2
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	4413      	add	r3, r2
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	461a      	mov	r2, r3
               ( x > r[ ( i - 1 )*x_size + j - 3 ] ) &&
 8006098:	6a3b      	ldr	r3, [r7, #32]
 800609a:	4293      	cmp	r3, r2
 800609c:	f340 8565 	ble.w	8006b6a <susan_corners_quick+0x11d6>
               ( x > r[ ( i - 1 )*x_size + j - 1 ] ) &&
 80060a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a2:	3b01      	subs	r3, #1
 80060a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060a6:	fb02 f203 	mul.w	r2, r2, r3
 80060aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ac:	4413      	add	r3, r2
 80060ae:	3b01      	subs	r3, #1
 80060b0:	68ba      	ldr	r2, [r7, #8]
 80060b2:	4413      	add	r3, r2
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	461a      	mov	r2, r3
               ( x > r[ ( i - 1 )*x_size + j - 2 ] ) &&
 80060b8:	6a3b      	ldr	r3, [r7, #32]
 80060ba:	4293      	cmp	r3, r2
 80060bc:	f340 8555 	ble.w	8006b6a <susan_corners_quick+0x11d6>
               ( x > r[ ( i - 1 )*x_size + j   ] ) &&
 80060c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c2:	3b01      	subs	r3, #1
 80060c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060c6:	fb02 f203 	mul.w	r2, r2, r3
 80060ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060cc:	4413      	add	r3, r2
 80060ce:	461a      	mov	r2, r3
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	4413      	add	r3, r2
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	461a      	mov	r2, r3
               ( x > r[ ( i - 1 )*x_size + j - 1 ] ) &&
 80060d8:	6a3b      	ldr	r3, [r7, #32]
 80060da:	4293      	cmp	r3, r2
 80060dc:	f340 8545 	ble.w	8006b6a <susan_corners_quick+0x11d6>
               ( x > r[ ( i - 1 )*x_size + j + 1 ] ) &&
 80060e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e2:	3b01      	subs	r3, #1
 80060e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060e6:	fb02 f203 	mul.w	r2, r2, r3
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	4413      	add	r3, r2
 80060ee:	3301      	adds	r3, #1
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	4413      	add	r3, r2
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	461a      	mov	r2, r3
               ( x > r[ ( i - 1 )*x_size + j   ] ) &&
 80060f8:	6a3b      	ldr	r3, [r7, #32]
 80060fa:	4293      	cmp	r3, r2
 80060fc:	f340 8535 	ble.w	8006b6a <susan_corners_quick+0x11d6>
               ( x > r[ ( i - 1 )*x_size + j + 2 ] ) &&
 8006100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006102:	3b01      	subs	r3, #1
 8006104:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006106:	fb02 f203 	mul.w	r2, r2, r3
 800610a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610c:	4413      	add	r3, r2
 800610e:	3302      	adds	r3, #2
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	4413      	add	r3, r2
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	461a      	mov	r2, r3
               ( x > r[ ( i - 1 )*x_size + j + 1 ] ) &&
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	4293      	cmp	r3, r2
 800611c:	f340 8525 	ble.w	8006b6a <susan_corners_quick+0x11d6>
               ( x > r[ ( i - 1 )*x_size + j + 3 ] ) &&
 8006120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006122:	3b01      	subs	r3, #1
 8006124:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006126:	fb02 f203 	mul.w	r2, r2, r3
 800612a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612c:	4413      	add	r3, r2
 800612e:	3303      	adds	r3, #3
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	4413      	add	r3, r2
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	461a      	mov	r2, r3
               ( x > r[ ( i - 1 )*x_size + j + 2 ] ) &&
 8006138:	6a3b      	ldr	r3, [r7, #32]
 800613a:	4293      	cmp	r3, r2
 800613c:	f340 8515 	ble.w	8006b6a <susan_corners_quick+0x11d6>

               ( x > r[ ( i )*x_size + j - 3 ] ) &&
 8006140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006142:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006144:	fb02 f203 	mul.w	r2, r2, r3
 8006148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614a:	4413      	add	r3, r2
 800614c:	3b03      	subs	r3, #3
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	4413      	add	r3, r2
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	461a      	mov	r2, r3
               ( x > r[ ( i - 1 )*x_size + j + 3 ] ) &&
 8006156:	6a3b      	ldr	r3, [r7, #32]
 8006158:	4293      	cmp	r3, r2
 800615a:	f340 8506 	ble.w	8006b6a <susan_corners_quick+0x11d6>
               ( x > r[ ( i )*x_size + j - 2 ] ) &&
 800615e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006160:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006162:	fb02 f203 	mul.w	r2, r2, r3
 8006166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006168:	4413      	add	r3, r2
 800616a:	3b02      	subs	r3, #2
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	4413      	add	r3, r2
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	461a      	mov	r2, r3
               ( x > r[ ( i )*x_size + j - 3 ] ) &&
 8006174:	6a3b      	ldr	r3, [r7, #32]
 8006176:	4293      	cmp	r3, r2
 8006178:	f340 84f7 	ble.w	8006b6a <susan_corners_quick+0x11d6>
               ( x > r[ ( i )*x_size + j - 1 ] ) &&
 800617c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006180:	fb02 f203 	mul.w	r2, r2, r3
 8006184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006186:	4413      	add	r3, r2
 8006188:	3b01      	subs	r3, #1
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	4413      	add	r3, r2
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	461a      	mov	r2, r3
               ( x > r[ ( i )*x_size + j - 2 ] ) &&
 8006192:	6a3b      	ldr	r3, [r7, #32]
 8006194:	4293      	cmp	r3, r2
 8006196:	f340 84e8 	ble.w	8006b6a <susan_corners_quick+0x11d6>
               ( x >= r[ ( i )*x_size + j + 1 ] ) &&
 800619a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800619e:	fb02 f203 	mul.w	r2, r2, r3
 80061a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a4:	4413      	add	r3, r2
 80061a6:	3301      	adds	r3, #1
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	4413      	add	r3, r2
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	461a      	mov	r2, r3
               ( x > r[ ( i )*x_size + j - 1 ] ) &&
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	4293      	cmp	r3, r2
 80061b4:	f2c0 84d9 	blt.w	8006b6a <susan_corners_quick+0x11d6>
               ( x >= r[ ( i )*x_size + j + 2 ] ) &&
 80061b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061bc:	fb02 f203 	mul.w	r2, r2, r3
 80061c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c2:	4413      	add	r3, r2
 80061c4:	3302      	adds	r3, #2
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	4413      	add	r3, r2
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	461a      	mov	r2, r3
               ( x >= r[ ( i )*x_size + j + 1 ] ) &&
 80061ce:	6a3b      	ldr	r3, [r7, #32]
 80061d0:	4293      	cmp	r3, r2
 80061d2:	f2c0 84ca 	blt.w	8006b6a <susan_corners_quick+0x11d6>
               ( x >= r[ ( i )*x_size + j + 3 ] ) &&
 80061d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061da:	fb02 f203 	mul.w	r2, r2, r3
 80061de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e0:	4413      	add	r3, r2
 80061e2:	3303      	adds	r3, #3
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	4413      	add	r3, r2
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	461a      	mov	r2, r3
               ( x >= r[ ( i )*x_size + j + 2 ] ) &&
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	4293      	cmp	r3, r2
 80061f0:	f2c0 84bb 	blt.w	8006b6a <susan_corners_quick+0x11d6>

               ( x >= r[ ( i + 1 )*x_size + j - 3 ] ) &&
 80061f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f6:	3301      	adds	r3, #1
 80061f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061fa:	fb02 f203 	mul.w	r2, r2, r3
 80061fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006200:	4413      	add	r3, r2
 8006202:	3b03      	subs	r3, #3
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	4413      	add	r3, r2
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	461a      	mov	r2, r3
               ( x >= r[ ( i )*x_size + j + 3 ] ) &&
 800620c:	6a3b      	ldr	r3, [r7, #32]
 800620e:	4293      	cmp	r3, r2
 8006210:	f2c0 84ab 	blt.w	8006b6a <susan_corners_quick+0x11d6>
               ( x >= r[ ( i + 1 )*x_size + j - 2 ] ) &&
 8006214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006216:	3301      	adds	r3, #1
 8006218:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800621a:	fb02 f203 	mul.w	r2, r2, r3
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	4413      	add	r3, r2
 8006222:	3b02      	subs	r3, #2
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	4413      	add	r3, r2
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	461a      	mov	r2, r3
               ( x >= r[ ( i + 1 )*x_size + j - 3 ] ) &&
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	4293      	cmp	r3, r2
 8006230:	f2c0 849b 	blt.w	8006b6a <susan_corners_quick+0x11d6>
               ( x >= r[ ( i + 1 )*x_size + j - 1 ] ) &&
 8006234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006236:	3301      	adds	r3, #1
 8006238:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800623a:	fb02 f203 	mul.w	r2, r2, r3
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006240:	4413      	add	r3, r2
 8006242:	3b01      	subs	r3, #1
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	4413      	add	r3, r2
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	461a      	mov	r2, r3
               ( x >= r[ ( i + 1 )*x_size + j - 2 ] ) &&
 800624c:	6a3b      	ldr	r3, [r7, #32]
 800624e:	4293      	cmp	r3, r2
 8006250:	f2c0 848b 	blt.w	8006b6a <susan_corners_quick+0x11d6>
               ( x >= r[ ( i + 1 )*x_size + j   ] ) &&
 8006254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006256:	3301      	adds	r3, #1
 8006258:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800625a:	fb02 f203 	mul.w	r2, r2, r3
 800625e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006260:	4413      	add	r3, r2
 8006262:	461a      	mov	r2, r3
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	4413      	add	r3, r2
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	461a      	mov	r2, r3
               ( x >= r[ ( i + 1 )*x_size + j - 1 ] ) &&
 800626c:	6a3b      	ldr	r3, [r7, #32]
 800626e:	4293      	cmp	r3, r2
 8006270:	f2c0 847b 	blt.w	8006b6a <susan_corners_quick+0x11d6>
               ( x >= r[ ( i + 1 )*x_size + j + 1 ] ) &&
 8006274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006276:	3301      	adds	r3, #1
 8006278:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800627a:	fb02 f203 	mul.w	r2, r2, r3
 800627e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006280:	4413      	add	r3, r2
 8006282:	3301      	adds	r3, #1
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	4413      	add	r3, r2
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	461a      	mov	r2, r3
               ( x >= r[ ( i + 1 )*x_size + j   ] ) &&
 800628c:	6a3b      	ldr	r3, [r7, #32]
 800628e:	4293      	cmp	r3, r2
 8006290:	f2c0 846b 	blt.w	8006b6a <susan_corners_quick+0x11d6>
               ( x >= r[ ( i + 1 )*x_size + j + 2 ] ) &&
 8006294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006296:	3301      	adds	r3, #1
 8006298:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800629a:	fb02 f203 	mul.w	r2, r2, r3
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	4413      	add	r3, r2
 80062a2:	3302      	adds	r3, #2
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	4413      	add	r3, r2
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	461a      	mov	r2, r3
               ( x >= r[ ( i + 1 )*x_size + j + 1 ] ) &&
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	4293      	cmp	r3, r2
 80062b0:	f2c0 845b 	blt.w	8006b6a <susan_corners_quick+0x11d6>
               ( x >= r[ ( i + 1 )*x_size + j + 3 ] ) &&
 80062b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b6:	3301      	adds	r3, #1
 80062b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80062ba:	fb02 f203 	mul.w	r2, r2, r3
 80062be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c0:	4413      	add	r3, r2
 80062c2:	3303      	adds	r3, #3
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	4413      	add	r3, r2
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	461a      	mov	r2, r3
               ( x >= r[ ( i + 1 )*x_size + j + 2 ] ) &&
 80062cc:	6a3b      	ldr	r3, [r7, #32]
 80062ce:	4293      	cmp	r3, r2
 80062d0:	f2c0 844b 	blt.w	8006b6a <susan_corners_quick+0x11d6>

               ( x >= r[ ( i + 2 )*x_size + j - 3 ] ) &&
 80062d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d6:	3302      	adds	r3, #2
 80062d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80062da:	fb02 f203 	mul.w	r2, r2, r3
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	4413      	add	r3, r2
 80062e2:	3b03      	subs	r3, #3
 80062e4:	68ba      	ldr	r2, [r7, #8]
 80062e6:	4413      	add	r3, r2
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	461a      	mov	r2, r3
               ( x >= r[ ( i + 1 )*x_size + j + 3 ] ) &&
 80062ec:	6a3b      	ldr	r3, [r7, #32]
 80062ee:	4293      	cmp	r3, r2
 80062f0:	f2c0 843b 	blt.w	8006b6a <susan_corners_quick+0x11d6>
               ( x >= r[ ( i + 2 )*x_size + j - 2 ] ) &&
 80062f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f6:	3302      	adds	r3, #2
 80062f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80062fa:	fb02 f203 	mul.w	r2, r2, r3
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	4413      	add	r3, r2
 8006302:	3b02      	subs	r3, #2
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	4413      	add	r3, r2
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	461a      	mov	r2, r3
               ( x >= r[ ( i + 2 )*x_size + j - 3 ] ) &&
 800630c:	6a3b      	ldr	r3, [r7, #32]
 800630e:	4293      	cmp	r3, r2
 8006310:	f2c0 842b 	blt.w	8006b6a <susan_corners_quick+0x11d6>
               ( x >= r[ ( i + 2 )*x_size + j - 1 ] ) &&
 8006314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006316:	3302      	adds	r3, #2
 8006318:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800631a:	fb02 f203 	mul.w	r2, r2, r3
 800631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006320:	4413      	add	r3, r2
 8006322:	3b01      	subs	r3, #1
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	4413      	add	r3, r2
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	461a      	mov	r2, r3
               ( x >= r[ ( i + 2 )*x_size + j - 2 ] ) &&
 800632c:	6a3b      	ldr	r3, [r7, #32]
 800632e:	4293      	cmp	r3, r2
 8006330:	f2c0 841b 	blt.w	8006b6a <susan_corners_quick+0x11d6>
               ( x >= r[ ( i + 2 )*x_size + j   ] ) &&
 8006334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006336:	3302      	adds	r3, #2
 8006338:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800633a:	fb02 f203 	mul.w	r2, r2, r3
 800633e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006340:	4413      	add	r3, r2
 8006342:	461a      	mov	r2, r3
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	4413      	add	r3, r2
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	461a      	mov	r2, r3
               ( x >= r[ ( i + 2 )*x_size + j - 1 ] ) &&
 800634c:	6a3b      	ldr	r3, [r7, #32]
 800634e:	4293      	cmp	r3, r2
 8006350:	f2c0 840b 	blt.w	8006b6a <susan_corners_quick+0x11d6>
               ( x >= r[ ( i + 2 )*x_size + j + 1 ] ) &&
 8006354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006356:	3302      	adds	r3, #2
 8006358:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800635a:	fb02 f203 	mul.w	r2, r2, r3
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006360:	4413      	add	r3, r2
 8006362:	3301      	adds	r3, #1
 8006364:	68ba      	ldr	r2, [r7, #8]
 8006366:	4413      	add	r3, r2
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	461a      	mov	r2, r3
               ( x >= r[ ( i + 2 )*x_size + j   ] ) &&
 800636c:	6a3b      	ldr	r3, [r7, #32]
 800636e:	4293      	cmp	r3, r2
 8006370:	f2c0 83fb 	blt.w	8006b6a <susan_corners_quick+0x11d6>
               ( x >= r[ ( i + 2 )*x_size + j + 2 ] ) &&
 8006374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006376:	3302      	adds	r3, #2
 8006378:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800637a:	fb02 f203 	mul.w	r2, r2, r3
 800637e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006380:	4413      	add	r3, r2
 8006382:	3302      	adds	r3, #2
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	4413      	add	r3, r2
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	461a      	mov	r2, r3
               ( x >= r[ ( i + 2 )*x_size + j + 1 ] ) &&
 800638c:	6a3b      	ldr	r3, [r7, #32]
 800638e:	4293      	cmp	r3, r2
 8006390:	f2c0 83eb 	blt.w	8006b6a <susan_corners_quick+0x11d6>
               ( x >= r[ ( i + 2 )*x_size + j + 3 ] ) &&
 8006394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006396:	3302      	adds	r3, #2
 8006398:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800639a:	fb02 f203 	mul.w	r2, r2, r3
 800639e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a0:	4413      	add	r3, r2
 80063a2:	3303      	adds	r3, #3
 80063a4:	68ba      	ldr	r2, [r7, #8]
 80063a6:	4413      	add	r3, r2
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	461a      	mov	r2, r3
               ( x >= r[ ( i + 2 )*x_size + j + 2 ] ) &&
 80063ac:	6a3b      	ldr	r3, [r7, #32]
 80063ae:	4293      	cmp	r3, r2
 80063b0:	f2c0 83db 	blt.w	8006b6a <susan_corners_quick+0x11d6>

               ( x >= r[ ( i + 3 )*x_size + j - 3 ] ) &&
 80063b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b6:	3303      	adds	r3, #3
 80063b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063ba:	fb02 f203 	mul.w	r2, r2, r3
 80063be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c0:	4413      	add	r3, r2
 80063c2:	3b03      	subs	r3, #3
 80063c4:	68ba      	ldr	r2, [r7, #8]
 80063c6:	4413      	add	r3, r2
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	461a      	mov	r2, r3
               ( x >= r[ ( i + 2 )*x_size + j + 3 ] ) &&
 80063cc:	6a3b      	ldr	r3, [r7, #32]
 80063ce:	4293      	cmp	r3, r2
 80063d0:	f2c0 83cb 	blt.w	8006b6a <susan_corners_quick+0x11d6>
               ( x >= r[ ( i + 3 )*x_size + j - 2 ] ) &&
 80063d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d6:	3303      	adds	r3, #3
 80063d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063da:	fb02 f203 	mul.w	r2, r2, r3
 80063de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e0:	4413      	add	r3, r2
 80063e2:	3b02      	subs	r3, #2
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	4413      	add	r3, r2
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	461a      	mov	r2, r3
               ( x >= r[ ( i + 3 )*x_size + j - 3 ] ) &&
 80063ec:	6a3b      	ldr	r3, [r7, #32]
 80063ee:	4293      	cmp	r3, r2
 80063f0:	f2c0 83bb 	blt.w	8006b6a <susan_corners_quick+0x11d6>
               ( x >= r[ ( i + 3 )*x_size + j - 1 ] ) &&
 80063f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f6:	3303      	adds	r3, #3
 80063f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063fa:	fb02 f203 	mul.w	r2, r2, r3
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	4413      	add	r3, r2
 8006402:	3b01      	subs	r3, #1
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	4413      	add	r3, r2
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	461a      	mov	r2, r3
               ( x >= r[ ( i + 3 )*x_size + j - 2 ] ) &&
 800640c:	6a3b      	ldr	r3, [r7, #32]
 800640e:	4293      	cmp	r3, r2
 8006410:	f2c0 83ab 	blt.w	8006b6a <susan_corners_quick+0x11d6>
               ( x >= r[ ( i + 3 )*x_size + j   ] ) &&
 8006414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006416:	3303      	adds	r3, #3
 8006418:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800641a:	fb02 f203 	mul.w	r2, r2, r3
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	4413      	add	r3, r2
 8006422:	461a      	mov	r2, r3
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	4413      	add	r3, r2
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	461a      	mov	r2, r3
               ( x >= r[ ( i + 3 )*x_size + j - 1 ] ) &&
 800642c:	6a3b      	ldr	r3, [r7, #32]
 800642e:	4293      	cmp	r3, r2
 8006430:	f2c0 839b 	blt.w	8006b6a <susan_corners_quick+0x11d6>
               ( x >= r[ ( i + 3 )*x_size + j + 1 ] ) &&
 8006434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006436:	3303      	adds	r3, #3
 8006438:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800643a:	fb02 f203 	mul.w	r2, r2, r3
 800643e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006440:	4413      	add	r3, r2
 8006442:	3301      	adds	r3, #1
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	4413      	add	r3, r2
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	461a      	mov	r2, r3
               ( x >= r[ ( i + 3 )*x_size + j   ] ) &&
 800644c:	6a3b      	ldr	r3, [r7, #32]
 800644e:	4293      	cmp	r3, r2
 8006450:	f2c0 838b 	blt.w	8006b6a <susan_corners_quick+0x11d6>
               ( x >= r[ ( i + 3 )*x_size + j + 2 ] ) &&
 8006454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006456:	3303      	adds	r3, #3
 8006458:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800645a:	fb02 f203 	mul.w	r2, r2, r3
 800645e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006460:	4413      	add	r3, r2
 8006462:	3302      	adds	r3, #2
 8006464:	68ba      	ldr	r2, [r7, #8]
 8006466:	4413      	add	r3, r2
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	461a      	mov	r2, r3
               ( x >= r[ ( i + 3 )*x_size + j + 1 ] ) &&
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	4293      	cmp	r3, r2
 8006470:	f2c0 837b 	blt.w	8006b6a <susan_corners_quick+0x11d6>
               ( x >= r[ ( i + 3 )*x_size + j + 3 ] ) )
 8006474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006476:	3303      	adds	r3, #3
 8006478:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800647a:	fb02 f203 	mul.w	r2, r2, r3
 800647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006480:	4413      	add	r3, r2
 8006482:	3303      	adds	r3, #3
 8006484:	68ba      	ldr	r2, [r7, #8]
 8006486:	4413      	add	r3, r2
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	461a      	mov	r2, r3
               ( x >= r[ ( i + 3 )*x_size + j + 2 ] ) &&
 800648c:	6a3b      	ldr	r3, [r7, #32]
 800648e:	4293      	cmp	r3, r2
 8006490:	f2c0 836b 	blt.w	8006b6a <susan_corners_quick+0x11d6>
        #endif
          {
            corner_list[ n ].info = 0;
 8006494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006496:	4613      	mov	r3, r2
 8006498:	005b      	lsls	r3, r3, #1
 800649a:	4413      	add	r3, r2
 800649c:	00db      	lsls	r3, r3, #3
 800649e:	461a      	mov	r2, r3
 80064a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a2:	4413      	add	r3, r2
 80064a4:	2200      	movs	r2, #0
 80064a6:	609a      	str	r2, [r3, #8]
            corner_list[ n ].x = j;
 80064a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064aa:	4613      	mov	r3, r2
 80064ac:	005b      	lsls	r3, r3, #1
 80064ae:	4413      	add	r3, r2
 80064b0:	00db      	lsls	r3, r3, #3
 80064b2:	461a      	mov	r2, r3
 80064b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b6:	4413      	add	r3, r2
 80064b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ba:	601a      	str	r2, [r3, #0]
            corner_list[ n ].y = i;
 80064bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064be:	4613      	mov	r3, r2
 80064c0:	005b      	lsls	r3, r3, #1
 80064c2:	4413      	add	r3, r2
 80064c4:	00db      	lsls	r3, r3, #3
 80064c6:	461a      	mov	r2, r3
 80064c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ca:	4413      	add	r3, r2
 80064cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064ce:	605a      	str	r2, [r3, #4]
            x = in[ ( i - 2 ) * x_size + j - 2 ] + in[ ( i - 2 ) * x_size + j - 1 ] + in[ ( i -
 80064d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d2:	3b02      	subs	r3, #2
 80064d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064d6:	fb02 f203 	mul.w	r2, r2, r3
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	4413      	add	r3, r2
 80064de:	3b02      	subs	r3, #2
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	4413      	add	r3, r2
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	4619      	mov	r1, r3
 80064e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ea:	3b02      	subs	r3, #2
 80064ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064ee:	fb02 f203 	mul.w	r2, r2, r3
 80064f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f4:	4413      	add	r3, r2
 80064f6:	3b01      	subs	r3, #1
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	4413      	add	r3, r2
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	440b      	add	r3, r1
 8006500:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006502:	3a02      	subs	r2, #2
                2 ) * x_size + j ] + in[ ( i - 2 ) * x_size + j + 1 ] + in[ ( i - 2 ) * x_size + j +
 8006504:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006506:	fb01 f102 	mul.w	r1, r1, r2
 800650a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800650c:	440a      	add	r2, r1
 800650e:	4611      	mov	r1, r2
            x = in[ ( i - 2 ) * x_size + j - 2 ] + in[ ( i - 2 ) * x_size + j - 1 ] + in[ ( i -
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	440a      	add	r2, r1
 8006514:	7812      	ldrb	r2, [r2, #0]
 8006516:	4413      	add	r3, r2
                2 ) * x_size + j ] + in[ ( i - 2 ) * x_size + j + 1 ] + in[ ( i - 2 ) * x_size + j +
 8006518:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800651a:	3a02      	subs	r2, #2
 800651c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800651e:	fb01 f102 	mul.w	r1, r1, r2
 8006522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006524:	440a      	add	r2, r1
 8006526:	3201      	adds	r2, #1
 8006528:	68f9      	ldr	r1, [r7, #12]
 800652a:	440a      	add	r2, r1
 800652c:	7812      	ldrb	r2, [r2, #0]
 800652e:	4413      	add	r3, r2
 8006530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006532:	3a02      	subs	r2, #2
 8006534:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006536:	fb01 f102 	mul.w	r1, r1, r2
 800653a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800653c:	440a      	add	r2, r1
 800653e:	3202      	adds	r2, #2
 8006540:	68f9      	ldr	r1, [r7, #12]
 8006542:	440a      	add	r2, r1
 8006544:	7812      	ldrb	r2, [r2, #0]
 8006546:	4413      	add	r3, r2
                    2 ] +
                in[ ( i - 1 ) * x_size + j - 2 ] + in[ ( i - 1 ) * x_size + j - 1 ] + in[ ( i - 1 ) *
 8006548:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800654a:	3a01      	subs	r2, #1
 800654c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800654e:	fb01 f102 	mul.w	r1, r1, r2
 8006552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006554:	440a      	add	r2, r1
 8006556:	3a02      	subs	r2, #2
 8006558:	68f9      	ldr	r1, [r7, #12]
 800655a:	440a      	add	r2, r1
 800655c:	7812      	ldrb	r2, [r2, #0]
                    2 ] +
 800655e:	4413      	add	r3, r2
                in[ ( i - 1 ) * x_size + j - 2 ] + in[ ( i - 1 ) * x_size + j - 1 ] + in[ ( i - 1 ) *
 8006560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006562:	3a01      	subs	r2, #1
 8006564:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006566:	fb01 f102 	mul.w	r1, r1, r2
 800656a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800656c:	440a      	add	r2, r1
 800656e:	3a01      	subs	r2, #1
 8006570:	68f9      	ldr	r1, [r7, #12]
 8006572:	440a      	add	r2, r1
 8006574:	7812      	ldrb	r2, [r2, #0]
 8006576:	4413      	add	r3, r2
 8006578:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800657a:	3a01      	subs	r2, #1
 800657c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800657e:	fb01 f102 	mul.w	r1, r1, r2
                    x_size + j ] + in[ ( i - 1 ) * x_size + j + 1 ] + in[ ( i - 1 ) * x_size + j + 2 ] +
 8006582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006584:	440a      	add	r2, r1
 8006586:	4611      	mov	r1, r2
                in[ ( i - 1 ) * x_size + j - 2 ] + in[ ( i - 1 ) * x_size + j - 1 ] + in[ ( i - 1 ) *
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	440a      	add	r2, r1
 800658c:	7812      	ldrb	r2, [r2, #0]
 800658e:	4413      	add	r3, r2
                    x_size + j ] + in[ ( i - 1 ) * x_size + j + 1 ] + in[ ( i - 1 ) * x_size + j + 2 ] +
 8006590:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006592:	3a01      	subs	r2, #1
 8006594:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006596:	fb01 f102 	mul.w	r1, r1, r2
 800659a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800659c:	440a      	add	r2, r1
 800659e:	3201      	adds	r2, #1
 80065a0:	68f9      	ldr	r1, [r7, #12]
 80065a2:	440a      	add	r2, r1
 80065a4:	7812      	ldrb	r2, [r2, #0]
 80065a6:	4413      	add	r3, r2
 80065a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065aa:	3a01      	subs	r2, #1
 80065ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065ae:	fb01 f102 	mul.w	r1, r1, r2
 80065b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065b4:	440a      	add	r2, r1
 80065b6:	3202      	adds	r2, #2
 80065b8:	68f9      	ldr	r1, [r7, #12]
 80065ba:	440a      	add	r2, r1
 80065bc:	7812      	ldrb	r2, [r2, #0]
 80065be:	4413      	add	r3, r2
                in[ ( i  ) * x_size + j - 2 ] + in[ ( i  ) * x_size + j - 1 ] + in[ ( i  ) * x_size +
 80065c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065c4:	fb01 f102 	mul.w	r1, r1, r2
 80065c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ca:	440a      	add	r2, r1
 80065cc:	3a02      	subs	r2, #2
 80065ce:	68f9      	ldr	r1, [r7, #12]
 80065d0:	440a      	add	r2, r1
 80065d2:	7812      	ldrb	r2, [r2, #0]
                    x_size + j ] + in[ ( i - 1 ) * x_size + j + 1 ] + in[ ( i - 1 ) * x_size + j + 2 ] +
 80065d4:	4413      	add	r3, r2
                in[ ( i  ) * x_size + j - 2 ] + in[ ( i  ) * x_size + j - 1 ] + in[ ( i  ) * x_size +
 80065d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065da:	fb01 f102 	mul.w	r1, r1, r2
 80065de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065e0:	440a      	add	r2, r1
 80065e2:	3a01      	subs	r2, #1
 80065e4:	68f9      	ldr	r1, [r7, #12]
 80065e6:	440a      	add	r2, r1
 80065e8:	7812      	ldrb	r2, [r2, #0]
 80065ea:	4413      	add	r3, r2
 80065ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065f0:	fb01 f102 	mul.w	r1, r1, r2
 80065f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065f6:	440a      	add	r2, r1
 80065f8:	4611      	mov	r1, r2
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	440a      	add	r2, r1
 80065fe:	7812      	ldrb	r2, [r2, #0]
 8006600:	4413      	add	r3, r2
                    j ] + in[ ( i  ) * x_size + j + 1 ] + in[ ( i  ) * x_size + j + 2 ] +
 8006602:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006604:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006606:	fb01 f102 	mul.w	r1, r1, r2
 800660a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800660c:	440a      	add	r2, r1
 800660e:	3201      	adds	r2, #1
 8006610:	68f9      	ldr	r1, [r7, #12]
 8006612:	440a      	add	r2, r1
 8006614:	7812      	ldrb	r2, [r2, #0]
 8006616:	4413      	add	r3, r2
 8006618:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800661a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800661c:	fb01 f102 	mul.w	r1, r1, r2
 8006620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006622:	440a      	add	r2, r1
 8006624:	3202      	adds	r2, #2
 8006626:	68f9      	ldr	r1, [r7, #12]
 8006628:	440a      	add	r2, r1
 800662a:	7812      	ldrb	r2, [r2, #0]
 800662c:	4413      	add	r3, r2
                in[ ( i + 1 ) * x_size + j - 2 ] + in[ ( i + 1 ) * x_size + j - 1 ] + in[ ( i + 1 ) *
 800662e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006630:	3201      	adds	r2, #1
 8006632:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006634:	fb01 f102 	mul.w	r1, r1, r2
 8006638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800663a:	440a      	add	r2, r1
 800663c:	3a02      	subs	r2, #2
 800663e:	68f9      	ldr	r1, [r7, #12]
 8006640:	440a      	add	r2, r1
 8006642:	7812      	ldrb	r2, [r2, #0]
                    j ] + in[ ( i  ) * x_size + j + 1 ] + in[ ( i  ) * x_size + j + 2 ] +
 8006644:	4413      	add	r3, r2
                in[ ( i + 1 ) * x_size + j - 2 ] + in[ ( i + 1 ) * x_size + j - 1 ] + in[ ( i + 1 ) *
 8006646:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006648:	3201      	adds	r2, #1
 800664a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800664c:	fb01 f102 	mul.w	r1, r1, r2
 8006650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006652:	440a      	add	r2, r1
 8006654:	3a01      	subs	r2, #1
 8006656:	68f9      	ldr	r1, [r7, #12]
 8006658:	440a      	add	r2, r1
 800665a:	7812      	ldrb	r2, [r2, #0]
 800665c:	4413      	add	r3, r2
 800665e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006660:	3201      	adds	r2, #1
 8006662:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006664:	fb01 f102 	mul.w	r1, r1, r2
                    x_size + j ] + in[ ( i + 1 ) * x_size + j + 1 ] + in[ ( i + 1 ) * x_size + j + 2 ] +
 8006668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800666a:	440a      	add	r2, r1
 800666c:	4611      	mov	r1, r2
                in[ ( i + 1 ) * x_size + j - 2 ] + in[ ( i + 1 ) * x_size + j - 1 ] + in[ ( i + 1 ) *
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	440a      	add	r2, r1
 8006672:	7812      	ldrb	r2, [r2, #0]
 8006674:	4413      	add	r3, r2
                    x_size + j ] + in[ ( i + 1 ) * x_size + j + 1 ] + in[ ( i + 1 ) * x_size + j + 2 ] +
 8006676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006678:	3201      	adds	r2, #1
 800667a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800667c:	fb01 f102 	mul.w	r1, r1, r2
 8006680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006682:	440a      	add	r2, r1
 8006684:	3201      	adds	r2, #1
 8006686:	68f9      	ldr	r1, [r7, #12]
 8006688:	440a      	add	r2, r1
 800668a:	7812      	ldrb	r2, [r2, #0]
 800668c:	4413      	add	r3, r2
 800668e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006690:	3201      	adds	r2, #1
 8006692:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006694:	fb01 f102 	mul.w	r1, r1, r2
 8006698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800669a:	440a      	add	r2, r1
 800669c:	3202      	adds	r2, #2
 800669e:	68f9      	ldr	r1, [r7, #12]
 80066a0:	440a      	add	r2, r1
 80066a2:	7812      	ldrb	r2, [r2, #0]
 80066a4:	4413      	add	r3, r2
                in[ ( i + 2 ) * x_size + j - 2 ] + in[ ( i + 2 ) * x_size + j - 1 ] + in[ ( i + 2 ) *
 80066a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066a8:	3202      	adds	r2, #2
 80066aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066ac:	fb01 f102 	mul.w	r1, r1, r2
 80066b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066b2:	440a      	add	r2, r1
 80066b4:	3a02      	subs	r2, #2
 80066b6:	68f9      	ldr	r1, [r7, #12]
 80066b8:	440a      	add	r2, r1
 80066ba:	7812      	ldrb	r2, [r2, #0]
                    x_size + j ] + in[ ( i + 1 ) * x_size + j + 1 ] + in[ ( i + 1 ) * x_size + j + 2 ] +
 80066bc:	4413      	add	r3, r2
                in[ ( i + 2 ) * x_size + j - 2 ] + in[ ( i + 2 ) * x_size + j - 1 ] + in[ ( i + 2 ) *
 80066be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066c0:	3202      	adds	r2, #2
 80066c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066c4:	fb01 f102 	mul.w	r1, r1, r2
 80066c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ca:	440a      	add	r2, r1
 80066cc:	3a01      	subs	r2, #1
 80066ce:	68f9      	ldr	r1, [r7, #12]
 80066d0:	440a      	add	r2, r1
 80066d2:	7812      	ldrb	r2, [r2, #0]
 80066d4:	4413      	add	r3, r2
 80066d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066d8:	3202      	adds	r2, #2
 80066da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066dc:	fb01 f102 	mul.w	r1, r1, r2
                    x_size + j ] + in[ ( i + 2 ) * x_size + j + 1 ] + in[ ( i + 2 ) * x_size + j + 2 ];
 80066e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066e2:	440a      	add	r2, r1
 80066e4:	4611      	mov	r1, r2
                in[ ( i + 2 ) * x_size + j - 2 ] + in[ ( i + 2 ) * x_size + j - 1 ] + in[ ( i + 2 ) *
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	440a      	add	r2, r1
 80066ea:	7812      	ldrb	r2, [r2, #0]
 80066ec:	4413      	add	r3, r2
                    x_size + j ] + in[ ( i + 2 ) * x_size + j + 1 ] + in[ ( i + 2 ) * x_size + j + 2 ];
 80066ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066f0:	3202      	adds	r2, #2
 80066f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066f4:	fb01 f102 	mul.w	r1, r1, r2
 80066f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066fa:	440a      	add	r2, r1
 80066fc:	3201      	adds	r2, #1
 80066fe:	68f9      	ldr	r1, [r7, #12]
 8006700:	440a      	add	r2, r1
 8006702:	7812      	ldrb	r2, [r2, #0]
 8006704:	4413      	add	r3, r2
 8006706:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006708:	3202      	adds	r2, #2
 800670a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800670c:	fb01 f102 	mul.w	r1, r1, r2
 8006710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006712:	440a      	add	r2, r1
 8006714:	3202      	adds	r2, #2
 8006716:	68f9      	ldr	r1, [r7, #12]
 8006718:	440a      	add	r2, r1
 800671a:	7812      	ldrb	r2, [r2, #0]
            x = in[ ( i - 2 ) * x_size + j - 2 ] + in[ ( i - 2 ) * x_size + j - 1 ] + in[ ( i -
 800671c:	4413      	add	r3, r2
 800671e:	623b      	str	r3, [r7, #32]

            corner_list[ n ].I = x / 25;
 8006720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006722:	4613      	mov	r3, r2
 8006724:	005b      	lsls	r3, r3, #1
 8006726:	4413      	add	r3, r2
 8006728:	00db      	lsls	r3, r3, #3
 800672a:	461a      	mov	r2, r3
 800672c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672e:	441a      	add	r2, r3
 8006730:	6a3b      	ldr	r3, [r7, #32]
 8006732:	49b3      	ldr	r1, [pc, #716]	; (8006a00 <susan_corners_quick+0x106c>)
 8006734:	fb81 0103 	smull	r0, r1, r1, r3
 8006738:	10c9      	asrs	r1, r1, #3
 800673a:	17db      	asrs	r3, r3, #31
 800673c:	1acb      	subs	r3, r1, r3
 800673e:	6153      	str	r3, [r2, #20]
            /*corner_list[ n ].I=in[ i*x_size+j ];*/
            x = in[ ( i - 2 ) * x_size + j + 2 ] + in[ ( i - 1 ) * x_size + j + 2 ] + in[ ( i ) *
 8006740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006742:	3b02      	subs	r3, #2
 8006744:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006746:	fb02 f203 	mul.w	r2, r2, r3
 800674a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674c:	4413      	add	r3, r2
 800674e:	3302      	adds	r3, #2
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	4413      	add	r3, r2
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	4619      	mov	r1, r3
 8006758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675a:	3b01      	subs	r3, #1
 800675c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800675e:	fb02 f203 	mul.w	r2, r2, r3
 8006762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006764:	4413      	add	r3, r2
 8006766:	3302      	adds	r3, #2
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	4413      	add	r3, r2
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	440b      	add	r3, r1
 8006770:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006772:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006774:	fb01 f102 	mul.w	r1, r1, r2
                x_size + j + 2 ] + in[ ( i + 1 ) * x_size + j + 2 ] + in[ ( i + 2 ) * x_size + j +
 8006778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800677a:	440a      	add	r2, r1
            x = in[ ( i - 2 ) * x_size + j + 2 ] + in[ ( i - 1 ) * x_size + j + 2 ] + in[ ( i ) *
 800677c:	3202      	adds	r2, #2
 800677e:	68f9      	ldr	r1, [r7, #12]
 8006780:	440a      	add	r2, r1
 8006782:	7812      	ldrb	r2, [r2, #0]
 8006784:	4413      	add	r3, r2
                x_size + j + 2 ] + in[ ( i + 1 ) * x_size + j + 2 ] + in[ ( i + 2 ) * x_size + j +
 8006786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006788:	3201      	adds	r2, #1
 800678a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800678c:	fb01 f102 	mul.w	r1, r1, r2
 8006790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006792:	440a      	add	r2, r1
 8006794:	3202      	adds	r2, #2
 8006796:	68f9      	ldr	r1, [r7, #12]
 8006798:	440a      	add	r2, r1
 800679a:	7812      	ldrb	r2, [r2, #0]
 800679c:	4413      	add	r3, r2
 800679e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067a0:	3202      	adds	r2, #2
 80067a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067a4:	fb01 f102 	mul.w	r1, r1, r2
 80067a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067aa:	440a      	add	r2, r1
 80067ac:	3202      	adds	r2, #2
 80067ae:	68f9      	ldr	r1, [r7, #12]
 80067b0:	440a      	add	r2, r1
 80067b2:	7812      	ldrb	r2, [r2, #0]
 80067b4:	441a      	add	r2, r3
                    2 ] -
                ( in[ ( i - 2 ) * x_size + j - 2 ] + in[ ( i - 1 ) * x_size + j - 2 ] + in[ ( i ) *
 80067b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b8:	3b02      	subs	r3, #2
 80067ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067bc:	fb01 f103 	mul.w	r1, r1, r3
 80067c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c2:	440b      	add	r3, r1
 80067c4:	3b02      	subs	r3, #2
 80067c6:	68f9      	ldr	r1, [r7, #12]
 80067c8:	440b      	add	r3, r1
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	4618      	mov	r0, r3
 80067ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d0:	3b01      	subs	r3, #1
 80067d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067d4:	fb01 f103 	mul.w	r1, r1, r3
 80067d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067da:	440b      	add	r3, r1
 80067dc:	3b02      	subs	r3, #2
 80067de:	68f9      	ldr	r1, [r7, #12]
 80067e0:	440b      	add	r3, r1
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	4403      	add	r3, r0
 80067e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80067ea:	fb00 f001 	mul.w	r0, r0, r1
                    x_size + j - 2 ] + in[ ( i + 1 ) * x_size + j - 2 ] + in[ ( i + 2 ) * x_size + j -
 80067ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80067f0:	4401      	add	r1, r0
                ( in[ ( i - 2 ) * x_size + j - 2 ] + in[ ( i - 1 ) * x_size + j - 2 ] + in[ ( i ) *
 80067f2:	3902      	subs	r1, #2
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	4401      	add	r1, r0
 80067f8:	7809      	ldrb	r1, [r1, #0]
 80067fa:	440b      	add	r3, r1
                    x_size + j - 2 ] + in[ ( i + 1 ) * x_size + j - 2 ] + in[ ( i + 2 ) * x_size + j -
 80067fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067fe:	3101      	adds	r1, #1
 8006800:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006802:	fb00 f001 	mul.w	r0, r0, r1
 8006806:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006808:	4401      	add	r1, r0
 800680a:	3902      	subs	r1, #2
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	4401      	add	r1, r0
 8006810:	7809      	ldrb	r1, [r1, #0]
 8006812:	440b      	add	r3, r1
 8006814:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006816:	3102      	adds	r1, #2
 8006818:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800681a:	fb00 f001 	mul.w	r0, r0, r1
 800681e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006820:	4401      	add	r1, r0
 8006822:	3902      	subs	r1, #2
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	4401      	add	r1, r0
 8006828:	7809      	ldrb	r1, [r1, #0]
 800682a:	440b      	add	r3, r1
            x = in[ ( i - 2 ) * x_size + j + 2 ] + in[ ( i - 1 ) * x_size + j + 2 ] + in[ ( i ) *
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	623b      	str	r3, [r7, #32]
                        2 ] );
            x += x + in[ ( i - 2 ) * x_size + j + 1 ] + in[ ( i - 1 ) * x_size + j + 1 ] +
 8006830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006832:	3b02      	subs	r3, #2
 8006834:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006836:	fb02 f203 	mul.w	r2, r2, r3
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	4413      	add	r3, r2
 800683e:	3301      	adds	r3, #1
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	4413      	add	r3, r2
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	461a      	mov	r2, r3
 8006848:	6a3b      	ldr	r3, [r7, #32]
 800684a:	4413      	add	r3, r2
 800684c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800684e:	3a01      	subs	r2, #1
 8006850:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006852:	fb01 f102 	mul.w	r1, r1, r2
 8006856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006858:	440a      	add	r2, r1
 800685a:	3201      	adds	r2, #1
 800685c:	68f9      	ldr	r1, [r7, #12]
 800685e:	440a      	add	r2, r1
 8006860:	7812      	ldrb	r2, [r2, #0]
 8006862:	4413      	add	r3, r2
                 in[ ( i ) * x_size + j + 1 ] + in[ ( i + 1 ) * x_size + j + 1 ] + in[ ( i + 2 ) *
 8006864:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006866:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006868:	fb01 f102 	mul.w	r1, r1, r2
 800686c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800686e:	440a      	add	r2, r1
 8006870:	3201      	adds	r2, #1
 8006872:	68f9      	ldr	r1, [r7, #12]
 8006874:	440a      	add	r2, r1
 8006876:	7812      	ldrb	r2, [r2, #0]
            x += x + in[ ( i - 2 ) * x_size + j + 1 ] + in[ ( i - 1 ) * x_size + j + 1 ] +
 8006878:	4413      	add	r3, r2
                 in[ ( i ) * x_size + j + 1 ] + in[ ( i + 1 ) * x_size + j + 1 ] + in[ ( i + 2 ) *
 800687a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800687c:	3201      	adds	r2, #1
 800687e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006880:	fb01 f102 	mul.w	r1, r1, r2
 8006884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006886:	440a      	add	r2, r1
 8006888:	3201      	adds	r2, #1
 800688a:	68f9      	ldr	r1, [r7, #12]
 800688c:	440a      	add	r2, r1
 800688e:	7812      	ldrb	r2, [r2, #0]
 8006890:	4413      	add	r3, r2
 8006892:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006894:	3202      	adds	r2, #2
 8006896:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006898:	fb01 f102 	mul.w	r1, r1, r2
                     x_size + j + 1 ] -
 800689c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800689e:	440a      	add	r2, r1
                 in[ ( i ) * x_size + j + 1 ] + in[ ( i + 1 ) * x_size + j + 1 ] + in[ ( i + 2 ) *
 80068a0:	3201      	adds	r2, #1
 80068a2:	68f9      	ldr	r1, [r7, #12]
 80068a4:	440a      	add	r2, r1
 80068a6:	7812      	ldrb	r2, [r2, #0]
 80068a8:	441a      	add	r2, r3
                 ( in[ ( i - 2 ) * x_size + j - 1 ] + in[ ( i - 1 ) * x_size + j - 1 ] + in[ ( i ) *
 80068aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ac:	3b02      	subs	r3, #2
 80068ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068b0:	fb01 f103 	mul.w	r1, r1, r3
 80068b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b6:	440b      	add	r3, r1
 80068b8:	3b01      	subs	r3, #1
 80068ba:	68f9      	ldr	r1, [r7, #12]
 80068bc:	440b      	add	r3, r1
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	4618      	mov	r0, r3
 80068c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c4:	3b01      	subs	r3, #1
 80068c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068c8:	fb01 f103 	mul.w	r1, r1, r3
 80068cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ce:	440b      	add	r3, r1
 80068d0:	3b01      	subs	r3, #1
 80068d2:	68f9      	ldr	r1, [r7, #12]
 80068d4:	440b      	add	r3, r1
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	4403      	add	r3, r0
 80068da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80068de:	fb00 f001 	mul.w	r0, r0, r1
                     x_size + j - 1 ] + in[ ( i + 1 ) * x_size + j - 1 ] + in[ ( i + 2 ) * x_size + j -
 80068e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068e4:	4401      	add	r1, r0
                 ( in[ ( i - 2 ) * x_size + j - 1 ] + in[ ( i - 1 ) * x_size + j - 1 ] + in[ ( i ) *
 80068e6:	3901      	subs	r1, #1
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	4401      	add	r1, r0
 80068ec:	7809      	ldrb	r1, [r1, #0]
 80068ee:	440b      	add	r3, r1
                     x_size + j - 1 ] + in[ ( i + 1 ) * x_size + j - 1 ] + in[ ( i + 2 ) * x_size + j -
 80068f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068f2:	3101      	adds	r1, #1
 80068f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80068f6:	fb00 f001 	mul.w	r0, r0, r1
 80068fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068fc:	4401      	add	r1, r0
 80068fe:	3901      	subs	r1, #1
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	4401      	add	r1, r0
 8006904:	7809      	ldrb	r1, [r1, #0]
 8006906:	440b      	add	r3, r1
 8006908:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800690a:	3102      	adds	r1, #2
 800690c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800690e:	fb00 f001 	mul.w	r0, r0, r1
 8006912:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006914:	4401      	add	r1, r0
 8006916:	3901      	subs	r1, #1
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	4401      	add	r1, r0
 800691c:	7809      	ldrb	r1, [r1, #0]
 800691e:	440b      	add	r3, r1
                     x_size + j + 1 ] -
 8006920:	1ad3      	subs	r3, r2, r3
            x += x + in[ ( i - 2 ) * x_size + j + 1 ] + in[ ( i - 1 ) * x_size + j + 1 ] +
 8006922:	6a3a      	ldr	r2, [r7, #32]
 8006924:	4413      	add	r3, r2
 8006926:	623b      	str	r3, [r7, #32]
                         1 ] );

            y = in[ ( i + 2 ) * x_size + j - 2 ] + in[ ( i + 2 ) * x_size + j - 1 ] + in[ ( i +
 8006928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692a:	3302      	adds	r3, #2
 800692c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800692e:	fb02 f203 	mul.w	r2, r2, r3
 8006932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006934:	4413      	add	r3, r2
 8006936:	3b02      	subs	r3, #2
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	4413      	add	r3, r2
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	4619      	mov	r1, r3
 8006940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006942:	3302      	adds	r3, #2
 8006944:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006946:	fb02 f203 	mul.w	r2, r2, r3
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	4413      	add	r3, r2
 800694e:	3b01      	subs	r3, #1
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	4413      	add	r3, r2
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	440b      	add	r3, r1
 8006958:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800695a:	3202      	adds	r2, #2
                2 ) * x_size + j ] + in[ ( i + 2 ) * x_size + j + 1 ] + in[ ( i + 2 ) * x_size + j +
 800695c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800695e:	fb01 f102 	mul.w	r1, r1, r2
 8006962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006964:	440a      	add	r2, r1
 8006966:	4611      	mov	r1, r2
            y = in[ ( i + 2 ) * x_size + j - 2 ] + in[ ( i + 2 ) * x_size + j - 1 ] + in[ ( i +
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	440a      	add	r2, r1
 800696c:	7812      	ldrb	r2, [r2, #0]
 800696e:	4413      	add	r3, r2
                2 ) * x_size + j ] + in[ ( i + 2 ) * x_size + j + 1 ] + in[ ( i + 2 ) * x_size + j +
 8006970:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006972:	3202      	adds	r2, #2
 8006974:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006976:	fb01 f102 	mul.w	r1, r1, r2
 800697a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800697c:	440a      	add	r2, r1
 800697e:	3201      	adds	r2, #1
 8006980:	68f9      	ldr	r1, [r7, #12]
 8006982:	440a      	add	r2, r1
 8006984:	7812      	ldrb	r2, [r2, #0]
 8006986:	4413      	add	r3, r2
 8006988:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800698a:	3202      	adds	r2, #2
 800698c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800698e:	fb01 f102 	mul.w	r1, r1, r2
 8006992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006994:	440a      	add	r2, r1
 8006996:	3202      	adds	r2, #2
 8006998:	68f9      	ldr	r1, [r7, #12]
 800699a:	440a      	add	r2, r1
 800699c:	7812      	ldrb	r2, [r2, #0]
 800699e:	441a      	add	r2, r3
                    2 ] -
                ( in[ ( i - 2 ) * x_size + j - 2 ] + in[ ( i - 2 ) * x_size + j - 1 ] + in[ ( i - 2 )
 80069a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a2:	3b02      	subs	r3, #2
 80069a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069a6:	fb01 f103 	mul.w	r1, r1, r3
 80069aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ac:	440b      	add	r3, r1
 80069ae:	3b02      	subs	r3, #2
 80069b0:	68f9      	ldr	r1, [r7, #12]
 80069b2:	440b      	add	r3, r1
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	4618      	mov	r0, r3
 80069b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ba:	3b02      	subs	r3, #2
 80069bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069be:	fb01 f103 	mul.w	r1, r1, r3
 80069c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c4:	440b      	add	r3, r1
 80069c6:	3b01      	subs	r3, #1
 80069c8:	68f9      	ldr	r1, [r7, #12]
 80069ca:	440b      	add	r3, r1
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	4403      	add	r3, r0
 80069d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069d2:	3902      	subs	r1, #2
                    * x_size + j ] + in[ ( i - 2 ) * x_size + j + 1 ] + in[ ( i - 2 ) * x_size + j +
 80069d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80069d6:	fb00 f001 	mul.w	r0, r0, r1
 80069da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069dc:	4401      	add	r1, r0
 80069de:	4608      	mov	r0, r1
                ( in[ ( i - 2 ) * x_size + j - 2 ] + in[ ( i - 2 ) * x_size + j - 1 ] + in[ ( i - 2 )
 80069e0:	68f9      	ldr	r1, [r7, #12]
 80069e2:	4401      	add	r1, r0
 80069e4:	7809      	ldrb	r1, [r1, #0]
 80069e6:	440b      	add	r3, r1
                    * x_size + j ] + in[ ( i - 2 ) * x_size + j + 1 ] + in[ ( i - 2 ) * x_size + j +
 80069e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069ea:	3902      	subs	r1, #2
 80069ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80069ee:	fb00 f001 	mul.w	r0, r0, r1
 80069f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069f4:	4401      	add	r1, r0
 80069f6:	3101      	adds	r1, #1
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	4401      	add	r1, r0
 80069fc:	e002      	b.n	8006a04 <susan_corners_quick+0x1070>
 80069fe:	bf00      	nop
 8006a00:	51eb851f 	.word	0x51eb851f
 8006a04:	7809      	ldrb	r1, [r1, #0]
 8006a06:	440b      	add	r3, r1
 8006a08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a0a:	3902      	subs	r1, #2
 8006a0c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006a0e:	fb00 f001 	mul.w	r0, r0, r1
 8006a12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a14:	4401      	add	r1, r0
 8006a16:	3102      	adds	r1, #2
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	4401      	add	r1, r0
 8006a1c:	7809      	ldrb	r1, [r1, #0]
 8006a1e:	440b      	add	r3, r1
            y = in[ ( i + 2 ) * x_size + j - 2 ] + in[ ( i + 2 ) * x_size + j - 1 ] + in[ ( i +
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	61fb      	str	r3, [r7, #28]
                        2 ] );
            y += y + in[ ( i + 1 ) * x_size + j - 2 ] + in[ ( i + 1 ) * x_size + j - 1 ] +
 8006a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a26:	3301      	adds	r3, #1
 8006a28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a2a:	fb02 f203 	mul.w	r2, r2, r3
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	4413      	add	r3, r2
 8006a32:	3b02      	subs	r3, #2
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	4413      	add	r3, r2
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	4413      	add	r3, r2
 8006a40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a42:	3201      	adds	r2, #1
 8006a44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a46:	fb01 f102 	mul.w	r1, r1, r2
 8006a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a4c:	440a      	add	r2, r1
 8006a4e:	3a01      	subs	r2, #1
 8006a50:	68f9      	ldr	r1, [r7, #12]
 8006a52:	440a      	add	r2, r1
 8006a54:	7812      	ldrb	r2, [r2, #0]
 8006a56:	4413      	add	r3, r2
                 in[ ( i + 1 ) * x_size + j ] + in[ ( i + 1 ) * x_size + j + 1 ] + in[ ( i + 1 ) *
 8006a58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a5a:	3201      	adds	r2, #1
 8006a5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a5e:	fb01 f102 	mul.w	r1, r1, r2
 8006a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a64:	440a      	add	r2, r1
 8006a66:	4611      	mov	r1, r2
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	440a      	add	r2, r1
 8006a6c:	7812      	ldrb	r2, [r2, #0]
            y += y + in[ ( i + 1 ) * x_size + j - 2 ] + in[ ( i + 1 ) * x_size + j - 1 ] +
 8006a6e:	4413      	add	r3, r2
                 in[ ( i + 1 ) * x_size + j ] + in[ ( i + 1 ) * x_size + j + 1 ] + in[ ( i + 1 ) *
 8006a70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a72:	3201      	adds	r2, #1
 8006a74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a76:	fb01 f102 	mul.w	r1, r1, r2
 8006a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a7c:	440a      	add	r2, r1
 8006a7e:	3201      	adds	r2, #1
 8006a80:	68f9      	ldr	r1, [r7, #12]
 8006a82:	440a      	add	r2, r1
 8006a84:	7812      	ldrb	r2, [r2, #0]
 8006a86:	4413      	add	r3, r2
 8006a88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a8a:	3201      	adds	r2, #1
 8006a8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a8e:	fb01 f102 	mul.w	r1, r1, r2
                     x_size + j + 2 ] -
 8006a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a94:	440a      	add	r2, r1
                 in[ ( i + 1 ) * x_size + j ] + in[ ( i + 1 ) * x_size + j + 1 ] + in[ ( i + 1 ) *
 8006a96:	3202      	adds	r2, #2
 8006a98:	68f9      	ldr	r1, [r7, #12]
 8006a9a:	440a      	add	r2, r1
 8006a9c:	7812      	ldrb	r2, [r2, #0]
 8006a9e:	441a      	add	r2, r3
                 ( in[ ( i - 1 ) * x_size + j - 2 ] + in[ ( i - 1 ) * x_size + j - 1 ] + in[ ( i - 1 )
 8006aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006aa6:	fb01 f103 	mul.w	r1, r1, r3
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	440b      	add	r3, r1
 8006aae:	3b02      	subs	r3, #2
 8006ab0:	68f9      	ldr	r1, [r7, #12]
 8006ab2:	440b      	add	r3, r1
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aba:	3b01      	subs	r3, #1
 8006abc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006abe:	fb01 f103 	mul.w	r1, r1, r3
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac4:	440b      	add	r3, r1
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	68f9      	ldr	r1, [r7, #12]
 8006aca:	440b      	add	r3, r1
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	4403      	add	r3, r0
 8006ad0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ad2:	3901      	subs	r1, #1
                     * x_size + j ] + in[ ( i - 1 ) * x_size + j + 1 ] + in[ ( i - 1 ) * x_size + j +
 8006ad4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006ad6:	fb00 f001 	mul.w	r0, r0, r1
 8006ada:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006adc:	4401      	add	r1, r0
 8006ade:	4608      	mov	r0, r1
                 ( in[ ( i - 1 ) * x_size + j - 2 ] + in[ ( i - 1 ) * x_size + j - 1 ] + in[ ( i - 1 )
 8006ae0:	68f9      	ldr	r1, [r7, #12]
 8006ae2:	4401      	add	r1, r0
 8006ae4:	7809      	ldrb	r1, [r1, #0]
 8006ae6:	440b      	add	r3, r1
                     * x_size + j ] + in[ ( i - 1 ) * x_size + j + 1 ] + in[ ( i - 1 ) * x_size + j +
 8006ae8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006aea:	3901      	subs	r1, #1
 8006aec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006aee:	fb00 f001 	mul.w	r0, r0, r1
 8006af2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006af4:	4401      	add	r1, r0
 8006af6:	3101      	adds	r1, #1
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	4401      	add	r1, r0
 8006afc:	7809      	ldrb	r1, [r1, #0]
 8006afe:	440b      	add	r3, r1
 8006b00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b02:	3901      	subs	r1, #1
 8006b04:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006b06:	fb00 f001 	mul.w	r0, r0, r1
 8006b0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b0c:	4401      	add	r1, r0
 8006b0e:	3102      	adds	r1, #2
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	4401      	add	r1, r0
 8006b14:	7809      	ldrb	r1, [r1, #0]
 8006b16:	440b      	add	r3, r1
                     x_size + j + 2 ] -
 8006b18:	1ad3      	subs	r3, r2, r3
            y += y + in[ ( i + 1 ) * x_size + j - 2 ] + in[ ( i + 1 ) * x_size + j - 1 ] +
 8006b1a:	69fa      	ldr	r2, [r7, #28]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	61fb      	str	r3, [r7, #28]
                         2 ] );
            corner_list[ n ].dx = x / 15;
 8006b20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b22:	4613      	mov	r3, r2
 8006b24:	005b      	lsls	r3, r3, #1
 8006b26:	4413      	add	r3, r2
 8006b28:	00db      	lsls	r3, r3, #3
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2e:	441a      	add	r2, r3
 8006b30:	6a3b      	ldr	r3, [r7, #32]
 8006b32:	491e      	ldr	r1, [pc, #120]	; (8006bac <susan_corners_quick+0x1218>)
 8006b34:	fb81 0103 	smull	r0, r1, r1, r3
 8006b38:	4419      	add	r1, r3
 8006b3a:	10c9      	asrs	r1, r1, #3
 8006b3c:	17db      	asrs	r3, r3, #31
 8006b3e:	1acb      	subs	r3, r1, r3
 8006b40:	60d3      	str	r3, [r2, #12]
            corner_list[ n ].dy = y / 15;
 8006b42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b44:	4613      	mov	r3, r2
 8006b46:	005b      	lsls	r3, r3, #1
 8006b48:	4413      	add	r3, r2
 8006b4a:	00db      	lsls	r3, r3, #3
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b50:	441a      	add	r2, r3
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	4915      	ldr	r1, [pc, #84]	; (8006bac <susan_corners_quick+0x1218>)
 8006b56:	fb81 0103 	smull	r0, r1, r1, r3
 8006b5a:	4419      	add	r1, r3
 8006b5c:	10c9      	asrs	r1, r1, #3
 8006b5e:	17db      	asrs	r3, r3, #31
 8006b60:	1acb      	subs	r3, r1, r3
 8006b62:	6113      	str	r3, [r2, #16]
            n++;
 8006b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b66:	3301      	adds	r3, #1
 8006b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    for ( j = 7; j < x_size - 7; j++ ) {
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b72:	3b07      	subs	r3, #7
 8006b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b76:	429a      	cmp	r2, r3
 8006b78:	f6ff a983 	blt.w	8005e82 <susan_corners_quick+0x4ee>
  for ( i = 7; i < y_size - 7; i++ ) {
 8006b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7e:	3301      	adds	r3, #1
 8006b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b84:	3b07      	subs	r3, #7
 8006b86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	f6ff a976 	blt.w	8005e7a <susan_corners_quick+0x4e6>
            }
          }
      }
    }
  }
  corner_list[ n ].info = 7;
 8006b8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b90:	4613      	mov	r3, r2
 8006b92:	005b      	lsls	r3, r3, #1
 8006b94:	4413      	add	r3, r2
 8006b96:	00db      	lsls	r3, r3, #3
 8006b98:	461a      	mov	r2, r3
 8006b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9c:	4413      	add	r3, r2
 8006b9e:	2207      	movs	r2, #7
 8006ba0:	609a      	str	r2, [r3, #8]
}
 8006ba2:	bf00      	nop
 8006ba4:	3730      	adds	r7, #48	; 0x30
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	88888889 	.word	0x88888889

08006bb0 <susan_main>:
  // dt=10.0; /* Distance threshold, smoothing mode, (default=4) */
  // bt=50; /* Brightness threshold, all modes, (default=20) */
}

void susan_main( void )
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	af00      	add	r7, sp, #0
//  susan_call_susan( &susan_file, 0 );
//  susan_wccfreeall();
//  susan_call_susan( &susan_file, 1 );
//  susan_wccfreeall();
  susan_call_susan( &susan_file, 2 );
 8006bb4:	2102      	movs	r1, #2
 8006bb6:	4803      	ldr	r0, [pc, #12]	; (8006bc4 <susan_main+0x14>)
 8006bb8:	f004 f80a 	bl	800abd0 <__susan_call_susan_veneer>
  susan_wccfreeall();
 8006bbc:	f000 fc4a 	bl	8007454 <susan_wccfreeall>
}
 8006bc0:	bf00      	nop
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	20001d2c 	.word	0x20001d2c

08006bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006bc8:	b5b0      	push	{r4, r5, r7, lr}
 8006bca:	b098      	sub	sp, #96	; 0x60
 8006bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
    int time1 __attribute__((aligned (4))) = 0;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	65bb      	str	r3, [r7, #88]	; 0x58
    int time2 __attribute__((aligned (4))) = 0;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	657b      	str	r3, [r7, #84]	; 0x54
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006bd6:	f000 fcb7 	bl	8007548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006bda:	f000 f8f1 	bl	8006dc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006bde:	f000 f9c7 	bl	8006f70 <MX_GPIO_Init>
  MX_TIM2_Init();
 8006be2:	f000 f947 	bl	8006e74 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8006be6:	f000 f993 	bl	8006f10 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
//  int n = 1000;
//  TIM2->CR1&=~TIM_CR1_DIR;

  // enable update interrupts
  TIM2->DIER|=TIM_DIER_UIE;
 8006bea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006bf4:	f043 0301 	orr.w	r3, r3, #1
 8006bf8:	60d3      	str	r3, [r2, #12]
  //NVIC_EnableIRQ(TIM2_IRQn);



  //start the timer
  HAL_TIM_Base_Start(&htim2);
 8006bfa:	4869      	ldr	r0, [pc, #420]	; (8006da0 <main+0x1d8>)
 8006bfc:	f002 fadc 	bl	80091b8 <HAL_TIM_Base_Start>
  //set the over flow counter to 0
  overflow_cnt = 0;
 8006c00:	4b68      	ldr	r3, [pc, #416]	; (8006da4 <main+0x1dc>)
 8006c02:	2200      	movs	r2, #0
 8006c04:	601a      	str	r2, [r3, #0]

  time1 = TIM2->CNT;
 8006c06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0c:	65bb      	str	r3, [r7, #88]	; 0x58
  //execution time is in ms

  // MAX_CORNERS now is 1000
  // the original was 15000 (15KB which causes a stack overflow)
  // Even if we set it to 1500 it will cause a stack overflow
  susan_init();
 8006c0e:	f003 ffe3 	bl	800abd8 <__susan_init_veneer>
  susan_main();
 8006c12:	f7ff ffcd 	bl	8006bb0 <susan_main>

  //41.099 on CCM
  //


  time2 = TIM2->CNT;
 8006c16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1c:	657b      	str	r3, [r7, #84]	; 0x54
  tim_cnt = time2 -time1;
 8006c1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	461a      	mov	r2, r3
 8006c26:	4b60      	ldr	r3, [pc, #384]	; (8006da8 <main+0x1e0>)
 8006c28:	601a      	str	r2, [r3, #0]

  execution_time = overflow_cnt*1000 + (double)tim_cnt/(1000);
 8006c2a:	4b5e      	ldr	r3, [pc, #376]	; (8006da4 <main+0x1dc>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c32:	fb02 f303 	mul.w	r3, r2, r3
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7f9 fc5c 	bl	80004f4 <__aeabi_ui2d>
 8006c3c:	4604      	mov	r4, r0
 8006c3e:	460d      	mov	r5, r1
 8006c40:	4b59      	ldr	r3, [pc, #356]	; (8006da8 <main+0x1e0>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7f9 fc55 	bl	80004f4 <__aeabi_ui2d>
 8006c4a:	f04f 0200 	mov.w	r2, #0
 8006c4e:	4b57      	ldr	r3, [pc, #348]	; (8006dac <main+0x1e4>)
 8006c50:	f7f9 fdf4 	bl	800083c <__aeabi_ddiv>
 8006c54:	4602      	mov	r2, r0
 8006c56:	460b      	mov	r3, r1
 8006c58:	4620      	mov	r0, r4
 8006c5a:	4629      	mov	r1, r5
 8006c5c:	f7f9 fb0e 	bl	800027c <__adddf3>
 8006c60:	4602      	mov	r2, r0
 8006c62:	460b      	mov	r3, r1
 8006c64:	4952      	ldr	r1, [pc, #328]	; (8006db0 <main+0x1e8>)
 8006c66:	e9c1 2300 	strd	r2, r3, [r1]
  uint8_t msg[40] = {'\0'};
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006c72:	2224      	movs	r2, #36	; 0x24
 8006c74:	2100      	movs	r1, #0
 8006c76:	4618      	mov	r0, r3
 8006c78:	f003 fb68 	bl	800a34c <memset>

  sprintf(msg,"\n\rSUSAN\n\r%d", (int)(execution_time*1000));
 8006c7c:	4b4c      	ldr	r3, [pc, #304]	; (8006db0 <main+0x1e8>)
 8006c7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006c82:	f04f 0200 	mov.w	r2, #0
 8006c86:	4b49      	ldr	r3, [pc, #292]	; (8006dac <main+0x1e4>)
 8006c88:	f7f9 fcae 	bl	80005e8 <__aeabi_dmul>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	460b      	mov	r3, r1
 8006c90:	4610      	mov	r0, r2
 8006c92:	4619      	mov	r1, r3
 8006c94:	f7f9 ff42 	bl	8000b1c <__aeabi_d2iz>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006c9e:	4945      	ldr	r1, [pc, #276]	; (8006db4 <main+0x1ec>)
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f003 fb5b 	bl	800a35c <siprintf>
  HAL_UART_Transmit(&huart1, msg, sizeof(msg), 0xffff);
 8006ca6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8006caa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006cae:	2228      	movs	r2, #40	; 0x28
 8006cb0:	4841      	ldr	r0, [pc, #260]	; (8006db8 <main+0x1f0>)
 8006cb2:	f002 ff09 	bl	8009ac8 <HAL_UART_Transmit>

  //measure 5 times
  // no CCM: 45.921
  // CCM1: 45.811
  // CCM2: 44.396
  int i = 0;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	65fb      	str	r3, [r7, #92]	; 0x5c
  while (i<50)
 8006cba:	e068      	b.n	8006d8e <main+0x1c6>
  {

	  MX_TIM2_Init();
 8006cbc:	f000 f8da 	bl	8006e74 <MX_TIM2_Init>
	  	  TIM2->DIER|=TIM_DIER_UIE;
 8006cc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006cca:	f043 0301 	orr.w	r3, r3, #1
 8006cce:	60d3      	str	r3, [r2, #12]
	  	  //start the timer
	  	  HAL_TIM_Base_Start(&htim2);
 8006cd0:	4833      	ldr	r0, [pc, #204]	; (8006da0 <main+0x1d8>)
 8006cd2:	f002 fa71 	bl	80091b8 <HAL_TIM_Base_Start>
	  	  overflow_cnt = 0;
 8006cd6:	4b33      	ldr	r3, [pc, #204]	; (8006da4 <main+0x1dc>)
 8006cd8:	2200      	movs	r2, #0
 8006cda:	601a      	str	r2, [r3, #0]

	  	  time1 = TIM2->CNT;
 8006cdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce2:	65bb      	str	r3, [r7, #88]	; 0x58

	  	  susan_init();
 8006ce4:	f003 ff78 	bl	800abd8 <__susan_init_veneer>
	  	  susan_main();
 8006ce8:	f7ff ff62 	bl	8006bb0 <susan_main>

	  	  time2 = TIM2->CNT;
 8006cec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf2:	657b      	str	r3, [r7, #84]	; 0x54
	  	  tim_cnt = time2 -time1;
 8006cf4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006cf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	4b2a      	ldr	r3, [pc, #168]	; (8006da8 <main+0x1e0>)
 8006cfe:	601a      	str	r2, [r3, #0]

	  	  execution_time = overflow_cnt*1000 + (double)tim_cnt/(1000);
 8006d00:	4b28      	ldr	r3, [pc, #160]	; (8006da4 <main+0x1dc>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006d08:	fb02 f303 	mul.w	r3, r2, r3
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7f9 fbf1 	bl	80004f4 <__aeabi_ui2d>
 8006d12:	4604      	mov	r4, r0
 8006d14:	460d      	mov	r5, r1
 8006d16:	4b24      	ldr	r3, [pc, #144]	; (8006da8 <main+0x1e0>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7f9 fbea 	bl	80004f4 <__aeabi_ui2d>
 8006d20:	f04f 0200 	mov.w	r2, #0
 8006d24:	4b21      	ldr	r3, [pc, #132]	; (8006dac <main+0x1e4>)
 8006d26:	f7f9 fd89 	bl	800083c <__aeabi_ddiv>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	4620      	mov	r0, r4
 8006d30:	4629      	mov	r1, r5
 8006d32:	f7f9 faa3 	bl	800027c <__adddf3>
 8006d36:	4602      	mov	r2, r0
 8006d38:	460b      	mov	r3, r1
 8006d3a:	491d      	ldr	r1, [pc, #116]	; (8006db0 <main+0x1e8>)
 8006d3c:	e9c1 2300 	strd	r2, r3, [r1]
	  	  uint8_t msg[40] = {'\0'};
 8006d40:	2300      	movs	r3, #0
 8006d42:	607b      	str	r3, [r7, #4]
 8006d44:	f107 0308 	add.w	r3, r7, #8
 8006d48:	2224      	movs	r2, #36	; 0x24
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f003 fafd 	bl	800a34c <memset>

	  	  sprintf(msg,"\n\r%d", (int)(execution_time*1000));
 8006d52:	4b17      	ldr	r3, [pc, #92]	; (8006db0 <main+0x1e8>)
 8006d54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006d58:	f04f 0200 	mov.w	r2, #0
 8006d5c:	4b13      	ldr	r3, [pc, #76]	; (8006dac <main+0x1e4>)
 8006d5e:	f7f9 fc43 	bl	80005e8 <__aeabi_dmul>
 8006d62:	4602      	mov	r2, r0
 8006d64:	460b      	mov	r3, r1
 8006d66:	4610      	mov	r0, r2
 8006d68:	4619      	mov	r1, r3
 8006d6a:	f7f9 fed7 	bl	8000b1c <__aeabi_d2iz>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	1d3b      	adds	r3, r7, #4
 8006d72:	4912      	ldr	r1, [pc, #72]	; (8006dbc <main+0x1f4>)
 8006d74:	4618      	mov	r0, r3
 8006d76:	f003 faf1 	bl	800a35c <siprintf>
	  	  HAL_UART_Transmit(&huart1, msg, sizeof(msg), 0xffff);
 8006d7a:	1d39      	adds	r1, r7, #4
 8006d7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d80:	2228      	movs	r2, #40	; 0x28
 8006d82:	480d      	ldr	r0, [pc, #52]	; (8006db8 <main+0x1f0>)
 8006d84:	f002 fea0 	bl	8009ac8 <HAL_UART_Transmit>
	  	  i++;
 8006d88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  while (i<50)
 8006d8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d90:	2b31      	cmp	r3, #49	; 0x31
 8006d92:	dd93      	ble.n	8006cbc <main+0xf4>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  return 0;
 8006d94:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3760      	adds	r7, #96	; 0x60
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bdb0      	pop	{r4, r5, r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	20001ddc 	.word	0x20001ddc
 8006da4:	20001d24 	.word	0x20001d24
 8006da8:	20001d18 	.word	0x20001d18
 8006dac:	408f4000 	.word	0x408f4000
 8006db0:	20001dc8 	.word	0x20001dc8
 8006db4:	0800abe0 	.word	0x0800abe0
 8006db8:	20001d38 	.word	0x20001d38
 8006dbc:	0800abec 	.word	0x0800abec

08006dc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b09e      	sub	sp, #120	; 0x78
 8006dc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006dc6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006dca:	2228      	movs	r2, #40	; 0x28
 8006dcc:	2100      	movs	r1, #0
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f003 fabc 	bl	800a34c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006dd4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006dd8:	2200      	movs	r2, #0
 8006dda:	601a      	str	r2, [r3, #0]
 8006ddc:	605a      	str	r2, [r3, #4]
 8006dde:	609a      	str	r2, [r3, #8]
 8006de0:	60da      	str	r2, [r3, #12]
 8006de2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006de4:	463b      	mov	r3, r7
 8006de6:	223c      	movs	r2, #60	; 0x3c
 8006de8:	2100      	movs	r1, #0
 8006dea:	4618      	mov	r0, r3
 8006dec:	f003 faae 	bl	800a34c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006df0:	2301      	movs	r3, #1
 8006df2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006df4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006df8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006e02:	2302      	movs	r3, #2
 8006e04:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006e06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006e0a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8006e0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006e10:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006e12:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006e16:	4618      	mov	r0, r3
 8006e18:	f000 fe88 	bl	8007b2c <HAL_RCC_OscConfig>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d001      	beq.n	8006e26 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8006e22:	f000 f8db 	bl	8006fdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006e26:	230f      	movs	r3, #15
 8006e28:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006e2a:	2302      	movs	r3, #2
 8006e2c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006e32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8006e3c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006e40:	2100      	movs	r1, #0
 8006e42:	4618      	mov	r0, r3
 8006e44:	f001 fd7a 	bl	800893c <HAL_RCC_ClockConfig>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d001      	beq.n	8006e52 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8006e4e:	f000 f8c5 	bl	8006fdc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006e52:	2301      	movs	r3, #1
 8006e54:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006e56:	2300      	movs	r3, #0
 8006e58:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006e5a:	463b      	mov	r3, r7
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f001 ffa3 	bl	8008da8 <HAL_RCCEx_PeriphCLKConfig>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d001      	beq.n	8006e6c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8006e68:	f000 f8b8 	bl	8006fdc <Error_Handler>
  }
}
 8006e6c:	bf00      	nop
 8006e6e:	3778      	adds	r7, #120	; 0x78
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b088      	sub	sp, #32
 8006e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006e7a:	f107 0310 	add.w	r3, r7, #16
 8006e7e:	2200      	movs	r2, #0
 8006e80:	601a      	str	r2, [r3, #0]
 8006e82:	605a      	str	r2, [r3, #4]
 8006e84:	609a      	str	r2, [r3, #8]
 8006e86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006e88:	1d3b      	adds	r3, r7, #4
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	601a      	str	r2, [r3, #0]
 8006e8e:	605a      	str	r2, [r3, #4]
 8006e90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006e92:	4b1d      	ldr	r3, [pc, #116]	; (8006f08 <MX_TIM2_Init+0x94>)
 8006e94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006e98:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = (24-1);
 8006e9a:	4b1b      	ldr	r3, [pc, #108]	; (8006f08 <MX_TIM2_Init+0x94>)
 8006e9c:	2217      	movs	r2, #23
 8006e9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ea0:	4b19      	ldr	r3, [pc, #100]	; (8006f08 <MX_TIM2_Init+0x94>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = (1000000-1);
 8006ea6:	4b18      	ldr	r3, [pc, #96]	; (8006f08 <MX_TIM2_Init+0x94>)
 8006ea8:	4a18      	ldr	r2, [pc, #96]	; (8006f0c <MX_TIM2_Init+0x98>)
 8006eaa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006eac:	4b16      	ldr	r3, [pc, #88]	; (8006f08 <MX_TIM2_Init+0x94>)
 8006eae:	2200      	movs	r2, #0
 8006eb0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006eb2:	4b15      	ldr	r3, [pc, #84]	; (8006f08 <MX_TIM2_Init+0x94>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006eb8:	4813      	ldr	r0, [pc, #76]	; (8006f08 <MX_TIM2_Init+0x94>)
 8006eba:	f002 f925 	bl	8009108 <HAL_TIM_Base_Init>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d001      	beq.n	8006ec8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8006ec4:	f000 f88a 	bl	8006fdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006ec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ecc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006ece:	f107 0310 	add.w	r3, r7, #16
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	480c      	ldr	r0, [pc, #48]	; (8006f08 <MX_TIM2_Init+0x94>)
 8006ed6:	f002 faf0 	bl	80094ba <HAL_TIM_ConfigClockSource>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d001      	beq.n	8006ee4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8006ee0:	f000 f87c 	bl	8006fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006eec:	1d3b      	adds	r3, r7, #4
 8006eee:	4619      	mov	r1, r3
 8006ef0:	4805      	ldr	r0, [pc, #20]	; (8006f08 <MX_TIM2_Init+0x94>)
 8006ef2:	f002 fcfd 	bl	80098f0 <HAL_TIMEx_MasterConfigSynchronization>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d001      	beq.n	8006f00 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8006efc:	f000 f86e 	bl	8006fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006f00:	bf00      	nop
 8006f02:	3720      	adds	r7, #32
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	20001ddc 	.word	0x20001ddc
 8006f0c:	000f423f 	.word	0x000f423f

08006f10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006f14:	4b14      	ldr	r3, [pc, #80]	; (8006f68 <MX_USART1_UART_Init+0x58>)
 8006f16:	4a15      	ldr	r2, [pc, #84]	; (8006f6c <MX_USART1_UART_Init+0x5c>)
 8006f18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8006f1a:	4b13      	ldr	r3, [pc, #76]	; (8006f68 <MX_USART1_UART_Init+0x58>)
 8006f1c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8006f20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006f22:	4b11      	ldr	r3, [pc, #68]	; (8006f68 <MX_USART1_UART_Init+0x58>)
 8006f24:	2200      	movs	r2, #0
 8006f26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006f28:	4b0f      	ldr	r3, [pc, #60]	; (8006f68 <MX_USART1_UART_Init+0x58>)
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006f2e:	4b0e      	ldr	r3, [pc, #56]	; (8006f68 <MX_USART1_UART_Init+0x58>)
 8006f30:	2200      	movs	r2, #0
 8006f32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006f34:	4b0c      	ldr	r3, [pc, #48]	; (8006f68 <MX_USART1_UART_Init+0x58>)
 8006f36:	220c      	movs	r2, #12
 8006f38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006f3a:	4b0b      	ldr	r3, [pc, #44]	; (8006f68 <MX_USART1_UART_Init+0x58>)
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006f40:	4b09      	ldr	r3, [pc, #36]	; (8006f68 <MX_USART1_UART_Init+0x58>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006f46:	4b08      	ldr	r3, [pc, #32]	; (8006f68 <MX_USART1_UART_Init+0x58>)
 8006f48:	2200      	movs	r2, #0
 8006f4a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006f4c:	4b06      	ldr	r3, [pc, #24]	; (8006f68 <MX_USART1_UART_Init+0x58>)
 8006f4e:	2200      	movs	r2, #0
 8006f50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006f52:	4805      	ldr	r0, [pc, #20]	; (8006f68 <MX_USART1_UART_Init+0x58>)
 8006f54:	f002 fd6a 	bl	8009a2c <HAL_UART_Init>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8006f5e:	f000 f83d 	bl	8006fdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006f62:	bf00      	nop
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	20001d38 	.word	0x20001d38
 8006f6c:	40013800 	.word	0x40013800

08006f70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006f76:	4b0f      	ldr	r3, [pc, #60]	; (8006fb4 <MX_GPIO_Init+0x44>)
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	4a0e      	ldr	r2, [pc, #56]	; (8006fb4 <MX_GPIO_Init+0x44>)
 8006f7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006f80:	6153      	str	r3, [r2, #20]
 8006f82:	4b0c      	ldr	r3, [pc, #48]	; (8006fb4 <MX_GPIO_Init+0x44>)
 8006f84:	695b      	ldr	r3, [r3, #20]
 8006f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f8a:	607b      	str	r3, [r7, #4]
 8006f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f8e:	4b09      	ldr	r3, [pc, #36]	; (8006fb4 <MX_GPIO_Init+0x44>)
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	4a08      	ldr	r2, [pc, #32]	; (8006fb4 <MX_GPIO_Init+0x44>)
 8006f94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f98:	6153      	str	r3, [r2, #20]
 8006f9a:	4b06      	ldr	r3, [pc, #24]	; (8006fb4 <MX_GPIO_Init+0x44>)
 8006f9c:	695b      	ldr	r3, [r3, #20]
 8006f9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006fa2:	603b      	str	r3, [r7, #0]
 8006fa4:	683b      	ldr	r3, [r7, #0]

}
 8006fa6:	bf00      	nop
 8006fa8:	370c      	adds	r7, #12
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	40021000 	.word	0x40021000

08006fb8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
	overflow_cnt++;
 8006fc0:	4b05      	ldr	r3, [pc, #20]	; (8006fd8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	4a04      	ldr	r2, [pc, #16]	; (8006fd8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006fc8:	6013      	str	r3, [r2, #0]

}
 8006fca:	bf00      	nop
 8006fcc:	370c      	adds	r7, #12
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	20001d24 	.word	0x20001d24

08006fdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006fe0:	b672      	cpsid	i
}
 8006fe2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006fe4:	e7fe      	b.n	8006fe4 <Error_Handler+0x8>
	...

08006fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fee:	4b0f      	ldr	r3, [pc, #60]	; (800702c <HAL_MspInit+0x44>)
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	4a0e      	ldr	r2, [pc, #56]	; (800702c <HAL_MspInit+0x44>)
 8006ff4:	f043 0301 	orr.w	r3, r3, #1
 8006ff8:	6193      	str	r3, [r2, #24]
 8006ffa:	4b0c      	ldr	r3, [pc, #48]	; (800702c <HAL_MspInit+0x44>)
 8006ffc:	699b      	ldr	r3, [r3, #24]
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	607b      	str	r3, [r7, #4]
 8007004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007006:	4b09      	ldr	r3, [pc, #36]	; (800702c <HAL_MspInit+0x44>)
 8007008:	69db      	ldr	r3, [r3, #28]
 800700a:	4a08      	ldr	r2, [pc, #32]	; (800702c <HAL_MspInit+0x44>)
 800700c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007010:	61d3      	str	r3, [r2, #28]
 8007012:	4b06      	ldr	r3, [pc, #24]	; (800702c <HAL_MspInit+0x44>)
 8007014:	69db      	ldr	r3, [r3, #28]
 8007016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800701a:	603b      	str	r3, [r7, #0]
 800701c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800701e:	bf00      	nop
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	40021000 	.word	0x40021000

08007030 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007040:	d113      	bne.n	800706a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007042:	4b0c      	ldr	r3, [pc, #48]	; (8007074 <HAL_TIM_Base_MspInit+0x44>)
 8007044:	69db      	ldr	r3, [r3, #28]
 8007046:	4a0b      	ldr	r2, [pc, #44]	; (8007074 <HAL_TIM_Base_MspInit+0x44>)
 8007048:	f043 0301 	orr.w	r3, r3, #1
 800704c:	61d3      	str	r3, [r2, #28]
 800704e:	4b09      	ldr	r3, [pc, #36]	; (8007074 <HAL_TIM_Base_MspInit+0x44>)
 8007050:	69db      	ldr	r3, [r3, #28]
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	60fb      	str	r3, [r7, #12]
 8007058:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800705a:	2200      	movs	r2, #0
 800705c:	2100      	movs	r1, #0
 800705e:	201c      	movs	r0, #28
 8007060:	f000 fbb3 	bl	80077ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007064:	201c      	movs	r0, #28
 8007066:	f000 fbcc 	bl	8007802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800706a:	bf00      	nop
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	40021000 	.word	0x40021000

08007078 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b08a      	sub	sp, #40	; 0x28
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007080:	f107 0314 	add.w	r3, r7, #20
 8007084:	2200      	movs	r2, #0
 8007086:	601a      	str	r2, [r3, #0]
 8007088:	605a      	str	r2, [r3, #4]
 800708a:	609a      	str	r2, [r3, #8]
 800708c:	60da      	str	r2, [r3, #12]
 800708e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a17      	ldr	r2, [pc, #92]	; (80070f4 <HAL_UART_MspInit+0x7c>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d127      	bne.n	80070ea <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800709a:	4b17      	ldr	r3, [pc, #92]	; (80070f8 <HAL_UART_MspInit+0x80>)
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	4a16      	ldr	r2, [pc, #88]	; (80070f8 <HAL_UART_MspInit+0x80>)
 80070a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80070a4:	6193      	str	r3, [r2, #24]
 80070a6:	4b14      	ldr	r3, [pc, #80]	; (80070f8 <HAL_UART_MspInit+0x80>)
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070ae:	613b      	str	r3, [r7, #16]
 80070b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80070b2:	4b11      	ldr	r3, [pc, #68]	; (80070f8 <HAL_UART_MspInit+0x80>)
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	4a10      	ldr	r2, [pc, #64]	; (80070f8 <HAL_UART_MspInit+0x80>)
 80070b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070bc:	6153      	str	r3, [r2, #20]
 80070be:	4b0e      	ldr	r3, [pc, #56]	; (80070f8 <HAL_UART_MspInit+0x80>)
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80070c6:	60fb      	str	r3, [r7, #12]
 80070c8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80070ca:	2330      	movs	r3, #48	; 0x30
 80070cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070ce:	2302      	movs	r3, #2
 80070d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070d2:	2300      	movs	r3, #0
 80070d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80070d6:	2303      	movs	r3, #3
 80070d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80070da:	2307      	movs	r3, #7
 80070dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80070de:	f107 0314 	add.w	r3, r7, #20
 80070e2:	4619      	mov	r1, r3
 80070e4:	4805      	ldr	r0, [pc, #20]	; (80070fc <HAL_UART_MspInit+0x84>)
 80070e6:	f000 fba7 	bl	8007838 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80070ea:	bf00      	nop
 80070ec:	3728      	adds	r7, #40	; 0x28
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	40013800 	.word	0x40013800
 80070f8:	40021000 	.word	0x40021000
 80070fc:	48000800 	.word	0x48000800

08007100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007100:	b480      	push	{r7}
 8007102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007104:	e7fe      	b.n	8007104 <NMI_Handler+0x4>

08007106 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007106:	b480      	push	{r7}
 8007108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800710a:	e7fe      	b.n	800710a <HardFault_Handler+0x4>

0800710c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800710c:	b480      	push	{r7}
 800710e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007110:	e7fe      	b.n	8007110 <MemManage_Handler+0x4>

08007112 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007112:	b480      	push	{r7}
 8007114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007116:	e7fe      	b.n	8007116 <BusFault_Handler+0x4>

08007118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007118:	b480      	push	{r7}
 800711a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800711c:	e7fe      	b.n	800711c <UsageFault_Handler+0x4>

0800711e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800711e:	b480      	push	{r7}
 8007120:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007122:	bf00      	nop
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800712c:	b480      	push	{r7}
 800712e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007130:	bf00      	nop
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr

0800713a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800713a:	b480      	push	{r7}
 800713c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800713e:	bf00      	nop
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800714c:	f000 fa42 	bl	80075d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007150:	bf00      	nop
 8007152:	bd80      	pop	{r7, pc}

08007154 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007158:	4802      	ldr	r0, [pc, #8]	; (8007164 <TIM2_IRQHandler+0x10>)
 800715a:	f002 f88f 	bl	800927c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800715e:	bf00      	nop
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	20001ddc 	.word	0x20001ddc

08007168 <_sbrk>:
 * @param incr Memory size
 * @return Pointer to allocated memory
 */

void *_sbrk(ptrdiff_t incr)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007170:	4a14      	ldr	r2, [pc, #80]	; (80071c4 <_sbrk+0x5c>)
 8007172:	4b15      	ldr	r3, [pc, #84]	; (80071c8 <_sbrk+0x60>)
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800717c:	4b13      	ldr	r3, [pc, #76]	; (80071cc <_sbrk+0x64>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d102      	bne.n	800718a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007184:	4b11      	ldr	r3, [pc, #68]	; (80071cc <_sbrk+0x64>)
 8007186:	4a12      	ldr	r2, [pc, #72]	; (80071d0 <_sbrk+0x68>)
 8007188:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800718a:	4b10      	ldr	r3, [pc, #64]	; (80071cc <_sbrk+0x64>)
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4413      	add	r3, r2
 8007192:	693a      	ldr	r2, [r7, #16]
 8007194:	429a      	cmp	r2, r3
 8007196:	d207      	bcs.n	80071a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007198:	f003 f8ae 	bl	800a2f8 <__errno>
 800719c:	4603      	mov	r3, r0
 800719e:	220c      	movs	r2, #12
 80071a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80071a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071a6:	e009      	b.n	80071bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80071a8:	4b08      	ldr	r3, [pc, #32]	; (80071cc <_sbrk+0x64>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80071ae:	4b07      	ldr	r3, [pc, #28]	; (80071cc <_sbrk+0x64>)
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4413      	add	r3, r2
 80071b6:	4a05      	ldr	r2, [pc, #20]	; (80071cc <_sbrk+0x64>)
 80071b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80071ba:	68fb      	ldr	r3, [r7, #12]
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3718      	adds	r7, #24
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	2000a000 	.word	0x2000a000
 80071c8:	00000400 	.word	0x00000400
 80071cc:	20001d0c 	.word	0x20001d0c
 80071d0:	20009378 	.word	0x20009378

080071d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80071d4:	b480      	push	{r7}
 80071d6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80071d8:	4b06      	ldr	r3, [pc, #24]	; (80071f4 <SystemInit+0x20>)
 80071da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071de:	4a05      	ldr	r2, [pc, #20]	; (80071f4 <SystemInit+0x20>)
 80071e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80071e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80071e8:	bf00      	nop
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	e000ed00 	.word	0xe000ed00

080071f8 <susan_wccfread>:
#ifdef PROGRAM_ON_CCM2
__attribute__((section(".ccmram")))
#endif
size_tt susan_wccfread( void *ptr, size_tt size, size_tt count,
                       struct wccFILE *stream )
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b088      	sub	sp, #32
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]
 8007204:	603b      	str	r3, [r7, #0]
  if ( susan_wccfeof( stream ) )
 8007206:	6838      	ldr	r0, [r7, #0]
 8007208:	f000 f8cb 	bl	80073a2 <susan_wccfeof>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d002      	beq.n	8007218 <susan_wccfread+0x20>
    return EOF;
 8007212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007216:	e02d      	b.n	8007274 <susan_wccfread+0x7c>

  unsigned i = stream->cur_pos, i2 = 0;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	61fb      	str	r3, [r7, #28]
 800721e:	2300      	movs	r3, #0
 8007220:	61bb      	str	r3, [r7, #24]
  size_tt number_of_chars_to_read =
    stream->size - stream->cur_pos >= size * count ?
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	fb02 f203 	mul.w	r2, r2, r3
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	6859      	ldr	r1, [r3, #4]
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	1acb      	subs	r3, r1, r3
  size_tt number_of_chars_to_read =
 8007234:	4293      	cmp	r3, r2
 8007236:	bf28      	it	cs
 8007238:	4613      	movcs	r3, r2
 800723a:	617b      	str	r3, [r7, #20]
    size * count : stream->size - stream->cur_pos;
  _Pragma( "loopbound min 7220 max 7220" )
  while ( i < stream->cur_pos + number_of_chars_to_read )
 800723c:	e00c      	b.n	8007258 <susan_wccfread+0x60>
    ( ( unsigned char * )ptr )[ i2++ ] = stream->data[ i++ ];
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	1c59      	adds	r1, r3, #1
 8007246:	61f9      	str	r1, [r7, #28]
 8007248:	441a      	add	r2, r3
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	1c59      	adds	r1, r3, #1
 800724e:	61b9      	str	r1, [r7, #24]
 8007250:	68f9      	ldr	r1, [r7, #12]
 8007252:	440b      	add	r3, r1
 8007254:	7812      	ldrb	r2, [r2, #0]
 8007256:	701a      	strb	r2, [r3, #0]
  while ( i < stream->cur_pos + number_of_chars_to_read )
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	689a      	ldr	r2, [r3, #8]
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	4413      	add	r3, r2
 8007260:	69fa      	ldr	r2, [r7, #28]
 8007262:	429a      	cmp	r2, r3
 8007264:	d3eb      	bcc.n	800723e <susan_wccfread+0x46>
  stream->cur_pos += number_of_chars_to_read;
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	689a      	ldr	r2, [r3, #8]
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	441a      	add	r2, r3
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	609a      	str	r2, [r3, #8]
  return number_of_chars_to_read;
 8007272:	697b      	ldr	r3, [r7, #20]
}
 8007274:	4618      	mov	r0, r3
 8007276:	3720      	adds	r7, #32
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <susan_wccfgetc>:

#ifdef PROGRAM_ON_CCM1
__attribute__((section(".ccmram")))
#endif
int susan_wccfgetc( struct wccFILE *stream )
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  if ( susan_wccfeof( stream ) )
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 f88c 	bl	80073a2 <susan_wccfeof>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d002      	beq.n	8007296 <susan_wccfgetc+0x1a>
    return EOF;
 8007290:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007294:	e008      	b.n	80072a8 <susan_wccfgetc+0x2c>

  else
    return stream->data[ stream->cur_pos++ ];
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	1c58      	adds	r0, r3, #1
 80072a0:	6879      	ldr	r1, [r7, #4]
 80072a2:	6088      	str	r0, [r1, #8]
 80072a4:	4413      	add	r3, r2
 80072a6:	781b      	ldrb	r3, [r3, #0]
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3708      	adds	r7, #8
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <susan_wccfgets>:


char *susan_wccfgets( char *str, int num, struct wccFILE *stream )
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b086      	sub	sp, #24
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
  if ( !stream || susan_wccfeof( stream ) || !str || num <= 0 )
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00b      	beq.n	80072da <susan_wccfgets+0x2a>
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 f86d 	bl	80073a2 <susan_wccfeof>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d105      	bne.n	80072da <susan_wccfgets+0x2a>
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d002      	beq.n	80072da <susan_wccfgets+0x2a>
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	dc01      	bgt.n	80072de <susan_wccfgets+0x2e>
    return 0;
 80072da:	2300      	movs	r3, #0
 80072dc:	e030      	b.n	8007340 <susan_wccfgets+0x90>

  int pos = 0;
 80072de:	2300      	movs	r3, #0
 80072e0:	617b      	str	r3, [r7, #20]
  _Pragma( "loopbound min 57 max 57" )
  while ( pos < num - 1 && !susan_wccfeof( stream ) ) {
 80072e2:	e017      	b.n	8007314 <susan_wccfgets+0x64>
    str[ pos ] = stream->data[ stream->cur_pos ];
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	441a      	add	r2, r3
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	68f9      	ldr	r1, [r7, #12]
 80072f2:	440b      	add	r3, r1
 80072f4:	7812      	ldrb	r2, [r2, #0]
 80072f6:	701a      	strb	r2, [r3, #0]
    if ( str[ pos ] == '\n' )
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	4413      	add	r3, r2
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	2b0a      	cmp	r3, #10
 8007302:	d013      	beq.n	800732c <susan_wccfgets+0x7c>
      break;

    stream->cur_pos++;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	1c5a      	adds	r2, r3, #1
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	609a      	str	r2, [r3, #8]
    pos++;
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	3301      	adds	r3, #1
 8007312:	617b      	str	r3, [r7, #20]
  while ( pos < num - 1 && !susan_wccfeof( stream ) ) {
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	3b01      	subs	r3, #1
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	429a      	cmp	r2, r3
 800731c:	da07      	bge.n	800732e <susan_wccfgets+0x7e>
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f83f 	bl	80073a2 <susan_wccfeof>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d0dc      	beq.n	80072e4 <susan_wccfgets+0x34>
 800732a:	e000      	b.n	800732e <susan_wccfgets+0x7e>
      break;
 800732c:	bf00      	nop
  }
  str[ pos++ ] = '\0';
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	1c5a      	adds	r2, r3, #1
 8007332:	617a      	str	r2, [r7, #20]
 8007334:	461a      	mov	r2, r3
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	4413      	add	r3, r2
 800733a:	2200      	movs	r2, #0
 800733c:	701a      	strb	r2, [r3, #0]

  return str;
 800733e:	68fb      	ldr	r3, [r7, #12]
}
 8007340:	4618      	mov	r0, r3
 8007342:	3718      	adds	r7, #24
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <susan_wccfseek>:
#ifdef PROGRAM_ON_CCM1
__attribute__((section(".ccmram")))
#endif
int susan_wccfseek( struct wccFILE *stream, long int offset,
                    enum _Origin_ origin )
{
 8007348:	b480      	push	{r7}
 800734a:	b085      	sub	sp, #20
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	4613      	mov	r3, r2
 8007354:	71fb      	strb	r3, [r7, #7]
  if ( origin == WCCSEEK_SET ) {
 8007356:	79fb      	ldrb	r3, [r7, #7]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d104      	bne.n	8007366 <susan_wccfseek+0x1e>
    stream->cur_pos = offset;
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	609a      	str	r2, [r3, #8]
    return 0;
 8007362:	2300      	movs	r3, #0
 8007364:	e017      	b.n	8007396 <susan_wccfseek+0x4e>
  } else
    if ( origin == WCCSEEK_CUR ) {
 8007366:	79fb      	ldrb	r3, [r7, #7]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d107      	bne.n	800737c <susan_wccfseek+0x34>
      stream->cur_pos += offset;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	689a      	ldr	r2, [r3, #8]
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	441a      	add	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	609a      	str	r2, [r3, #8]
      return 0;
 8007378:	2300      	movs	r3, #0
 800737a:	e00c      	b.n	8007396 <susan_wccfseek+0x4e>
    } else
      if ( origin == WCCSEEK_END ) {
 800737c:	79fb      	ldrb	r3, [r7, #7]
 800737e:	2b02      	cmp	r3, #2
 8007380:	d107      	bne.n	8007392 <susan_wccfseek+0x4a>
        stream->cur_pos = stream->size + offset;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	685a      	ldr	r2, [r3, #4]
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	441a      	add	r2, r3
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	609a      	str	r2, [r3, #8]
        return 0;
 800738e:	2300      	movs	r3, #0
 8007390:	e001      	b.n	8007396 <susan_wccfseek+0x4e>
      }
  return -1;
 8007392:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007396:	4618      	mov	r0, r3
 8007398:	3714      	adds	r7, #20
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr

080073a2 <susan_wccfeof>:
}
#ifdef PROGRAM_ON_CCM1
__attribute__((section(".ccmram")))
#endif
int susan_wccfeof( struct wccFILE *stream )
{
 80073a2:	b480      	push	{r7}
 80073a4:	b083      	sub	sp, #12
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
  return stream->cur_pos == stream->size ? 1 : 0;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	689a      	ldr	r2, [r3, #8]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	bf0c      	ite	eq
 80073b6:	2301      	moveq	r3, #1
 80073b8:	2300      	movne	r3, #0
 80073ba:	b2db      	uxtb	r3, r3
}
 80073bc:	4618      	mov	r0, r3
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <susan___fabsf>:
   fabsf(x) returns the absolute value of x.
*/


float susan___fabsf( float x )
{
 80073c8:	b480      	push	{r7}
 80073ca:	b087      	sub	sp, #28
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	ed87 0a01 	vstr	s0, [r7, #4]
  u_int32_t ix;
  GET_FLOAT_WORD( ix, x );
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	613b      	str	r3, [r7, #16]
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	617b      	str	r3, [r7, #20]
  SET_FLOAT_WORD( x, ix & 0x7fffffff );
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80073e0:	60fb      	str	r3, [r7, #12]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	607b      	str	r3, [r7, #4]
  return x;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	ee07 3a90 	vmov	s15, r3
}
 80073ec:	eeb0 0a67 	vmov.f32	s0, s15
 80073f0:	371c      	adds	r7, #28
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
	...

080073fc <susan_wccmalloc>:

#ifdef PROGRAM_ON_CCM1
__attribute__((section(".ccmram")))
#endif
void *susan_wccmalloc( unsigned int numberOfBytes )
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  // Get a 4-byte adress for alignment purposes
  unsigned int offset = ( ( unsigned long )susan_simulated_heap +
                          susan_freeHeapPos ) % 4;
 8007404:	4b11      	ldr	r3, [pc, #68]	; (800744c <susan_wccmalloc+0x50>)
 8007406:	681b      	ldr	r3, [r3, #0]
  unsigned int offset = ( ( unsigned long )susan_simulated_heap +
 8007408:	4a11      	ldr	r2, [pc, #68]	; (8007450 <susan_wccmalloc+0x54>)
 800740a:	4413      	add	r3, r2
 800740c:	f003 0303 	and.w	r3, r3, #3
 8007410:	60fb      	str	r3, [r7, #12]
  if ( offset )
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d006      	beq.n	8007426 <susan_wccmalloc+0x2a>
    susan_freeHeapPos += 4 - offset;
 8007418:	4b0c      	ldr	r3, [pc, #48]	; (800744c <susan_wccmalloc+0x50>)
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	3304      	adds	r3, #4
 8007422:	4a0a      	ldr	r2, [pc, #40]	; (800744c <susan_wccmalloc+0x50>)
 8007424:	6013      	str	r3, [r2, #0]
  void *currentPos = ( void * )&susan_simulated_heap[ susan_freeHeapPos ];
 8007426:	4b09      	ldr	r3, [pc, #36]	; (800744c <susan_wccmalloc+0x50>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a09      	ldr	r2, [pc, #36]	; (8007450 <susan_wccmalloc+0x54>)
 800742c:	4413      	add	r3, r2
 800742e:	60bb      	str	r3, [r7, #8]
  susan_freeHeapPos += numberOfBytes;
 8007430:	4b06      	ldr	r3, [pc, #24]	; (800744c <susan_wccmalloc+0x50>)
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4413      	add	r3, r2
 8007438:	4a04      	ldr	r2, [pc, #16]	; (800744c <susan_wccmalloc+0x50>)
 800743a:	6013      	str	r3, [r2, #0]
  return currentPos;
 800743c:	68bb      	ldr	r3, [r7, #8]
}
 800743e:	4618      	mov	r0, r3
 8007440:	3714      	adds	r7, #20
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	2000935c 	.word	0x2000935c
 8007450:	20001e2c 	.word	0x20001e2c

08007454 <susan_wccfreeall>:
void susan_wccfreeall( void )
{
 8007454:	b480      	push	{r7}
 8007456:	af00      	add	r7, sp, #0
  susan_freeHeapPos = 0;
 8007458:	4b03      	ldr	r3, [pc, #12]	; (8007468 <susan_wccfreeall+0x14>)
 800745a:	2200      	movs	r2, #0
 800745c:	601a      	str	r2, [r3, #0]
}
 800745e:	bf00      	nop
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr
 8007468:	2000935c 	.word	0x2000935c

0800746c <susan_wccmemcpy>:

void *susan_wccmemcpy( void *dstpp, const void *srcpp, unsigned int len )
{
 800746c:	b480      	push	{r7}
 800746e:	b089      	sub	sp, #36	; 0x24
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
  unsigned long int dstp = ( long int ) dstpp;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	61fb      	str	r3, [r7, #28]
  unsigned long int srcp = ( long int ) srcpp;
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	61bb      	str	r3, [r7, #24]

  _Pragma( "loopbound min 76 max 76" )
  while ( len > 0 ) {
 8007480:	e00e      	b.n	80074a0 <susan_wccmemcpy+0x34>
    char __x = ( ( char * ) srcp )[ 0 ];
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	75fb      	strb	r3, [r7, #23]
    srcp += 1;
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	3301      	adds	r3, #1
 800748c:	61bb      	str	r3, [r7, #24]
    len -= 1;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	3b01      	subs	r3, #1
 8007492:	607b      	str	r3, [r7, #4]
    ( ( char * ) dstp )[ 0 ] = __x;
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	7dfa      	ldrb	r2, [r7, #23]
 8007498:	701a      	strb	r2, [r3, #0]
    dstp += 1;
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	3301      	adds	r3, #1
 800749e:	61fb      	str	r3, [r7, #28]
  while ( len > 0 ) {
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1ed      	bne.n	8007482 <susan_wccmemcpy+0x16>
  }

  return dstpp;
 80074a6:	68fb      	ldr	r3, [r7, #12]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3724      	adds	r7, #36	; 0x24
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <susan_wccmemset>:

#ifdef PROGRAM_ON_CCM2
__attribute__((section(".ccmram")))
#endif
void susan_wccmemset( void *p, int value, unsigned int num )
{
 80074b4:	b480      	push	{r7}
 80074b6:	b087      	sub	sp, #28
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	607a      	str	r2, [r7, #4]
  unsigned long i;
  char *char_ptr = ( char * )p;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	613b      	str	r3, [r7, #16]

  _Pragma( "loopbound min 7220 max 7220" )
  for ( i = 0; i < num; ++i )
 80074c4:	2300      	movs	r3, #0
 80074c6:	617b      	str	r3, [r7, #20]
 80074c8:	e008      	b.n	80074dc <susan_wccmemset+0x28>
    *char_ptr++ = ( unsigned char )value;
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	1c5a      	adds	r2, r3, #1
 80074ce:	613a      	str	r2, [r7, #16]
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	b2d2      	uxtb	r2, r2
 80074d4:	701a      	strb	r2, [r3, #0]
  for ( i = 0; i < num; ++i )
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	3301      	adds	r3, #1
 80074da:	617b      	str	r3, [r7, #20]
 80074dc:	697a      	ldr	r2, [r7, #20]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d3f2      	bcc.n	80074ca <susan_wccmemset+0x16>
}
 80074e4:	bf00      	nop
 80074e6:	bf00      	nop
 80074e8:	371c      	adds	r7, #28
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
	...

080074f4 <Reset_Handler>:
 80074f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800752c <LoopForever+0x2>
 80074f8:	480d      	ldr	r0, [pc, #52]	; (8007530 <LoopForever+0x6>)
 80074fa:	490e      	ldr	r1, [pc, #56]	; (8007534 <LoopForever+0xa>)
 80074fc:	4a0e      	ldr	r2, [pc, #56]	; (8007538 <LoopForever+0xe>)
 80074fe:	2300      	movs	r3, #0
 8007500:	e002      	b.n	8007508 <LoopCopyDataInit>

08007502 <CopyDataInit>:
 8007502:	58d4      	ldr	r4, [r2, r3]
 8007504:	50c4      	str	r4, [r0, r3]
 8007506:	3304      	adds	r3, #4

08007508 <LoopCopyDataInit>:
 8007508:	18c4      	adds	r4, r0, r3
 800750a:	428c      	cmp	r4, r1
 800750c:	d3f9      	bcc.n	8007502 <CopyDataInit>
 800750e:	4a0b      	ldr	r2, [pc, #44]	; (800753c <LoopForever+0x12>)
 8007510:	4c0b      	ldr	r4, [pc, #44]	; (8007540 <LoopForever+0x16>)
 8007512:	2300      	movs	r3, #0
 8007514:	e001      	b.n	800751a <LoopFillZerobss>

08007516 <FillZerobss>:
 8007516:	6013      	str	r3, [r2, #0]
 8007518:	3204      	adds	r2, #4

0800751a <LoopFillZerobss>:
 800751a:	42a2      	cmp	r2, r4
 800751c:	d3fb      	bcc.n	8007516 <FillZerobss>
 800751e:	f7ff fe59 	bl	80071d4 <SystemInit>
 8007522:	f002 feef 	bl	800a304 <__libc_init_array>
 8007526:	f7ff fb4f 	bl	8006bc8 <main>

0800752a <LoopForever>:
 800752a:	e7fe      	b.n	800752a <LoopForever>
 800752c:	2000a000 	.word	0x2000a000
 8007530:	20000000 	.word	0x20000000
 8007534:	20001cec 	.word	0x20001cec
 8007538:	0800ac68 	.word	0x0800ac68
 800753c:	20001cf0 	.word	0x20001cf0
 8007540:	20009374 	.word	0x20009374

08007544 <ADC1_2_IRQHandler>:
 8007544:	e7fe      	b.n	8007544 <ADC1_2_IRQHandler>
	...

08007548 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800754c:	4b08      	ldr	r3, [pc, #32]	; (8007570 <HAL_Init+0x28>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a07      	ldr	r2, [pc, #28]	; (8007570 <HAL_Init+0x28>)
 8007552:	f043 0310 	orr.w	r3, r3, #16
 8007556:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007558:	2003      	movs	r0, #3
 800755a:	f000 f92b 	bl	80077b4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800755e:	200f      	movs	r0, #15
 8007560:	f000 f808 	bl	8007574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007564:	f7ff fd40 	bl	8006fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	40022000 	.word	0x40022000

08007574 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800757c:	4b12      	ldr	r3, [pc, #72]	; (80075c8 <HAL_InitTick+0x54>)
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	4b12      	ldr	r3, [pc, #72]	; (80075cc <HAL_InitTick+0x58>)
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	4619      	mov	r1, r3
 8007586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800758a:	fbb3 f3f1 	udiv	r3, r3, r1
 800758e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007592:	4618      	mov	r0, r3
 8007594:	f000 f943 	bl	800781e <HAL_SYSTICK_Config>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d001      	beq.n	80075a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e00e      	b.n	80075c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2b0f      	cmp	r3, #15
 80075a6:	d80a      	bhi.n	80075be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80075a8:	2200      	movs	r2, #0
 80075aa:	6879      	ldr	r1, [r7, #4]
 80075ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075b0:	f000 f90b 	bl	80077ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80075b4:	4a06      	ldr	r2, [pc, #24]	; (80075d0 <HAL_InitTick+0x5c>)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80075ba:	2300      	movs	r3, #0
 80075bc:	e000      	b.n	80075c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	20001c7c 	.word	0x20001c7c
 80075cc:	20001c84 	.word	0x20001c84
 80075d0:	20001c80 	.word	0x20001c80

080075d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80075d4:	b480      	push	{r7}
 80075d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80075d8:	4b06      	ldr	r3, [pc, #24]	; (80075f4 <HAL_IncTick+0x20>)
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	461a      	mov	r2, r3
 80075de:	4b06      	ldr	r3, [pc, #24]	; (80075f8 <HAL_IncTick+0x24>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4413      	add	r3, r2
 80075e4:	4a04      	ldr	r2, [pc, #16]	; (80075f8 <HAL_IncTick+0x24>)
 80075e6:	6013      	str	r3, [r2, #0]
}
 80075e8:	bf00      	nop
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	20001c84 	.word	0x20001c84
 80075f8:	20009360 	.word	0x20009360

080075fc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80075fc:	b480      	push	{r7}
 80075fe:	af00      	add	r7, sp, #0
  return uwTick;  
 8007600:	4b03      	ldr	r3, [pc, #12]	; (8007610 <HAL_GetTick+0x14>)
 8007602:	681b      	ldr	r3, [r3, #0]
}
 8007604:	4618      	mov	r0, r3
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr
 800760e:	bf00      	nop
 8007610:	20009360 	.word	0x20009360

08007614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f003 0307 	and.w	r3, r3, #7
 8007622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007624:	4b0c      	ldr	r3, [pc, #48]	; (8007658 <__NVIC_SetPriorityGrouping+0x44>)
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007630:	4013      	ands	r3, r2
 8007632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800763c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007646:	4a04      	ldr	r2, [pc, #16]	; (8007658 <__NVIC_SetPriorityGrouping+0x44>)
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	60d3      	str	r3, [r2, #12]
}
 800764c:	bf00      	nop
 800764e:	3714      	adds	r7, #20
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr
 8007658:	e000ed00 	.word	0xe000ed00

0800765c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800765c:	b480      	push	{r7}
 800765e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007660:	4b04      	ldr	r3, [pc, #16]	; (8007674 <__NVIC_GetPriorityGrouping+0x18>)
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	0a1b      	lsrs	r3, r3, #8
 8007666:	f003 0307 	and.w	r3, r3, #7
}
 800766a:	4618      	mov	r0, r3
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr
 8007674:	e000ed00 	.word	0xe000ed00

08007678 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	4603      	mov	r3, r0
 8007680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007686:	2b00      	cmp	r3, #0
 8007688:	db0b      	blt.n	80076a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800768a:	79fb      	ldrb	r3, [r7, #7]
 800768c:	f003 021f 	and.w	r2, r3, #31
 8007690:	4907      	ldr	r1, [pc, #28]	; (80076b0 <__NVIC_EnableIRQ+0x38>)
 8007692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007696:	095b      	lsrs	r3, r3, #5
 8007698:	2001      	movs	r0, #1
 800769a:	fa00 f202 	lsl.w	r2, r0, r2
 800769e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80076a2:	bf00      	nop
 80076a4:	370c      	adds	r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	e000e100 	.word	0xe000e100

080076b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	4603      	mov	r3, r0
 80076bc:	6039      	str	r1, [r7, #0]
 80076be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80076c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	db0a      	blt.n	80076de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	b2da      	uxtb	r2, r3
 80076cc:	490c      	ldr	r1, [pc, #48]	; (8007700 <__NVIC_SetPriority+0x4c>)
 80076ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076d2:	0112      	lsls	r2, r2, #4
 80076d4:	b2d2      	uxtb	r2, r2
 80076d6:	440b      	add	r3, r1
 80076d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80076dc:	e00a      	b.n	80076f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	4908      	ldr	r1, [pc, #32]	; (8007704 <__NVIC_SetPriority+0x50>)
 80076e4:	79fb      	ldrb	r3, [r7, #7]
 80076e6:	f003 030f 	and.w	r3, r3, #15
 80076ea:	3b04      	subs	r3, #4
 80076ec:	0112      	lsls	r2, r2, #4
 80076ee:	b2d2      	uxtb	r2, r2
 80076f0:	440b      	add	r3, r1
 80076f2:	761a      	strb	r2, [r3, #24]
}
 80076f4:	bf00      	nop
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr
 8007700:	e000e100 	.word	0xe000e100
 8007704:	e000ed00 	.word	0xe000ed00

08007708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007708:	b480      	push	{r7}
 800770a:	b089      	sub	sp, #36	; 0x24
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f003 0307 	and.w	r3, r3, #7
 800771a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	f1c3 0307 	rsb	r3, r3, #7
 8007722:	2b04      	cmp	r3, #4
 8007724:	bf28      	it	cs
 8007726:	2304      	movcs	r3, #4
 8007728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	3304      	adds	r3, #4
 800772e:	2b06      	cmp	r3, #6
 8007730:	d902      	bls.n	8007738 <NVIC_EncodePriority+0x30>
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	3b03      	subs	r3, #3
 8007736:	e000      	b.n	800773a <NVIC_EncodePriority+0x32>
 8007738:	2300      	movs	r3, #0
 800773a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800773c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	fa02 f303 	lsl.w	r3, r2, r3
 8007746:	43da      	mvns	r2, r3
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	401a      	ands	r2, r3
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007750:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	fa01 f303 	lsl.w	r3, r1, r3
 800775a:	43d9      	mvns	r1, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007760:	4313      	orrs	r3, r2
         );
}
 8007762:	4618      	mov	r0, r3
 8007764:	3724      	adds	r7, #36	; 0x24
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
	...

08007770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	3b01      	subs	r3, #1
 800777c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007780:	d301      	bcc.n	8007786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007782:	2301      	movs	r3, #1
 8007784:	e00f      	b.n	80077a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007786:	4a0a      	ldr	r2, [pc, #40]	; (80077b0 <SysTick_Config+0x40>)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	3b01      	subs	r3, #1
 800778c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800778e:	210f      	movs	r1, #15
 8007790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007794:	f7ff ff8e 	bl	80076b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007798:	4b05      	ldr	r3, [pc, #20]	; (80077b0 <SysTick_Config+0x40>)
 800779a:	2200      	movs	r2, #0
 800779c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800779e:	4b04      	ldr	r3, [pc, #16]	; (80077b0 <SysTick_Config+0x40>)
 80077a0:	2207      	movs	r2, #7
 80077a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3708      	adds	r7, #8
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	e000e010 	.word	0xe000e010

080077b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f7ff ff29 	bl	8007614 <__NVIC_SetPriorityGrouping>
}
 80077c2:	bf00      	nop
 80077c4:	3708      	adds	r7, #8
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b086      	sub	sp, #24
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	4603      	mov	r3, r0
 80077d2:	60b9      	str	r1, [r7, #8]
 80077d4:	607a      	str	r2, [r7, #4]
 80077d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80077d8:	2300      	movs	r3, #0
 80077da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80077dc:	f7ff ff3e 	bl	800765c <__NVIC_GetPriorityGrouping>
 80077e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	68b9      	ldr	r1, [r7, #8]
 80077e6:	6978      	ldr	r0, [r7, #20]
 80077e8:	f7ff ff8e 	bl	8007708 <NVIC_EncodePriority>
 80077ec:	4602      	mov	r2, r0
 80077ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077f2:	4611      	mov	r1, r2
 80077f4:	4618      	mov	r0, r3
 80077f6:	f7ff ff5d 	bl	80076b4 <__NVIC_SetPriority>
}
 80077fa:	bf00      	nop
 80077fc:	3718      	adds	r7, #24
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b082      	sub	sp, #8
 8007806:	af00      	add	r7, sp, #0
 8007808:	4603      	mov	r3, r0
 800780a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800780c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007810:	4618      	mov	r0, r3
 8007812:	f7ff ff31 	bl	8007678 <__NVIC_EnableIRQ>
}
 8007816:	bf00      	nop
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800781e:	b580      	push	{r7, lr}
 8007820:	b082      	sub	sp, #8
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f7ff ffa2 	bl	8007770 <SysTick_Config>
 800782c:	4603      	mov	r3, r0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3708      	adds	r7, #8
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
	...

08007838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007838:	b480      	push	{r7}
 800783a:	b087      	sub	sp, #28
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007842:	2300      	movs	r3, #0
 8007844:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007846:	e154      	b.n	8007af2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	2101      	movs	r1, #1
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	fa01 f303 	lsl.w	r3, r1, r3
 8007854:	4013      	ands	r3, r2
 8007856:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2b00      	cmp	r3, #0
 800785c:	f000 8146 	beq.w	8007aec <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	f003 0303 	and.w	r3, r3, #3
 8007868:	2b01      	cmp	r3, #1
 800786a:	d005      	beq.n	8007878 <HAL_GPIO_Init+0x40>
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	f003 0303 	and.w	r3, r3, #3
 8007874:	2b02      	cmp	r3, #2
 8007876:	d130      	bne.n	80078da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	005b      	lsls	r3, r3, #1
 8007882:	2203      	movs	r2, #3
 8007884:	fa02 f303 	lsl.w	r3, r2, r3
 8007888:	43db      	mvns	r3, r3
 800788a:	693a      	ldr	r2, [r7, #16]
 800788c:	4013      	ands	r3, r2
 800788e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	68da      	ldr	r2, [r3, #12]
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	005b      	lsls	r3, r3, #1
 8007898:	fa02 f303 	lsl.w	r3, r2, r3
 800789c:	693a      	ldr	r2, [r7, #16]
 800789e:	4313      	orrs	r3, r2
 80078a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	693a      	ldr	r2, [r7, #16]
 80078a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80078ae:	2201      	movs	r2, #1
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	fa02 f303 	lsl.w	r3, r2, r3
 80078b6:	43db      	mvns	r3, r3
 80078b8:	693a      	ldr	r2, [r7, #16]
 80078ba:	4013      	ands	r3, r2
 80078bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	091b      	lsrs	r3, r3, #4
 80078c4:	f003 0201 	and.w	r2, r3, #1
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	fa02 f303 	lsl.w	r3, r2, r3
 80078ce:	693a      	ldr	r2, [r7, #16]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	693a      	ldr	r2, [r7, #16]
 80078d8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	f003 0303 	and.w	r3, r3, #3
 80078e2:	2b03      	cmp	r3, #3
 80078e4:	d017      	beq.n	8007916 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	005b      	lsls	r3, r3, #1
 80078f0:	2203      	movs	r2, #3
 80078f2:	fa02 f303 	lsl.w	r3, r2, r3
 80078f6:	43db      	mvns	r3, r3
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	4013      	ands	r3, r2
 80078fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	689a      	ldr	r2, [r3, #8]
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	005b      	lsls	r3, r3, #1
 8007906:	fa02 f303 	lsl.w	r3, r2, r3
 800790a:	693a      	ldr	r2, [r7, #16]
 800790c:	4313      	orrs	r3, r2
 800790e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	693a      	ldr	r2, [r7, #16]
 8007914:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	f003 0303 	and.w	r3, r3, #3
 800791e:	2b02      	cmp	r3, #2
 8007920:	d123      	bne.n	800796a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	08da      	lsrs	r2, r3, #3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	3208      	adds	r2, #8
 800792a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800792e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	f003 0307 	and.w	r3, r3, #7
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	220f      	movs	r2, #15
 800793a:	fa02 f303 	lsl.w	r3, r2, r3
 800793e:	43db      	mvns	r3, r3
 8007940:	693a      	ldr	r2, [r7, #16]
 8007942:	4013      	ands	r3, r2
 8007944:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	691a      	ldr	r2, [r3, #16]
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	f003 0307 	and.w	r3, r3, #7
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	fa02 f303 	lsl.w	r3, r2, r3
 8007956:	693a      	ldr	r2, [r7, #16]
 8007958:	4313      	orrs	r3, r2
 800795a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	08da      	lsrs	r2, r3, #3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	3208      	adds	r2, #8
 8007964:	6939      	ldr	r1, [r7, #16]
 8007966:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	005b      	lsls	r3, r3, #1
 8007974:	2203      	movs	r2, #3
 8007976:	fa02 f303 	lsl.w	r3, r2, r3
 800797a:	43db      	mvns	r3, r3
 800797c:	693a      	ldr	r2, [r7, #16]
 800797e:	4013      	ands	r3, r2
 8007980:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	f003 0203 	and.w	r2, r3, #3
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	005b      	lsls	r3, r3, #1
 800798e:	fa02 f303 	lsl.w	r3, r2, r3
 8007992:	693a      	ldr	r2, [r7, #16]
 8007994:	4313      	orrs	r3, r2
 8007996:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	693a      	ldr	r2, [r7, #16]
 800799c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f000 80a0 	beq.w	8007aec <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079ac:	4b58      	ldr	r3, [pc, #352]	; (8007b10 <HAL_GPIO_Init+0x2d8>)
 80079ae:	699b      	ldr	r3, [r3, #24]
 80079b0:	4a57      	ldr	r2, [pc, #348]	; (8007b10 <HAL_GPIO_Init+0x2d8>)
 80079b2:	f043 0301 	orr.w	r3, r3, #1
 80079b6:	6193      	str	r3, [r2, #24]
 80079b8:	4b55      	ldr	r3, [pc, #340]	; (8007b10 <HAL_GPIO_Init+0x2d8>)
 80079ba:	699b      	ldr	r3, [r3, #24]
 80079bc:	f003 0301 	and.w	r3, r3, #1
 80079c0:	60bb      	str	r3, [r7, #8]
 80079c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80079c4:	4a53      	ldr	r2, [pc, #332]	; (8007b14 <HAL_GPIO_Init+0x2dc>)
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	089b      	lsrs	r3, r3, #2
 80079ca:	3302      	adds	r3, #2
 80079cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	f003 0303 	and.w	r3, r3, #3
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	220f      	movs	r2, #15
 80079dc:	fa02 f303 	lsl.w	r3, r2, r3
 80079e0:	43db      	mvns	r3, r3
 80079e2:	693a      	ldr	r2, [r7, #16]
 80079e4:	4013      	ands	r3, r2
 80079e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80079ee:	d019      	beq.n	8007a24 <HAL_GPIO_Init+0x1ec>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	4a49      	ldr	r2, [pc, #292]	; (8007b18 <HAL_GPIO_Init+0x2e0>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d013      	beq.n	8007a20 <HAL_GPIO_Init+0x1e8>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a48      	ldr	r2, [pc, #288]	; (8007b1c <HAL_GPIO_Init+0x2e4>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d00d      	beq.n	8007a1c <HAL_GPIO_Init+0x1e4>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4a47      	ldr	r2, [pc, #284]	; (8007b20 <HAL_GPIO_Init+0x2e8>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d007      	beq.n	8007a18 <HAL_GPIO_Init+0x1e0>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a46      	ldr	r2, [pc, #280]	; (8007b24 <HAL_GPIO_Init+0x2ec>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d101      	bne.n	8007a14 <HAL_GPIO_Init+0x1dc>
 8007a10:	2304      	movs	r3, #4
 8007a12:	e008      	b.n	8007a26 <HAL_GPIO_Init+0x1ee>
 8007a14:	2305      	movs	r3, #5
 8007a16:	e006      	b.n	8007a26 <HAL_GPIO_Init+0x1ee>
 8007a18:	2303      	movs	r3, #3
 8007a1a:	e004      	b.n	8007a26 <HAL_GPIO_Init+0x1ee>
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	e002      	b.n	8007a26 <HAL_GPIO_Init+0x1ee>
 8007a20:	2301      	movs	r3, #1
 8007a22:	e000      	b.n	8007a26 <HAL_GPIO_Init+0x1ee>
 8007a24:	2300      	movs	r3, #0
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	f002 0203 	and.w	r2, r2, #3
 8007a2c:	0092      	lsls	r2, r2, #2
 8007a2e:	4093      	lsls	r3, r2
 8007a30:	693a      	ldr	r2, [r7, #16]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007a36:	4937      	ldr	r1, [pc, #220]	; (8007b14 <HAL_GPIO_Init+0x2dc>)
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	089b      	lsrs	r3, r3, #2
 8007a3c:	3302      	adds	r3, #2
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007a44:	4b38      	ldr	r3, [pc, #224]	; (8007b28 <HAL_GPIO_Init+0x2f0>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	43db      	mvns	r3, r3
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	4013      	ands	r3, r2
 8007a52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d003      	beq.n	8007a68 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8007a60:	693a      	ldr	r2, [r7, #16]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8007a68:	4a2f      	ldr	r2, [pc, #188]	; (8007b28 <HAL_GPIO_Init+0x2f0>)
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007a6e:	4b2e      	ldr	r3, [pc, #184]	; (8007b28 <HAL_GPIO_Init+0x2f0>)
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	43db      	mvns	r3, r3
 8007a78:	693a      	ldr	r2, [r7, #16]
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d003      	beq.n	8007a92 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8007a8a:	693a      	ldr	r2, [r7, #16]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007a92:	4a25      	ldr	r2, [pc, #148]	; (8007b28 <HAL_GPIO_Init+0x2f0>)
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007a98:	4b23      	ldr	r3, [pc, #140]	; (8007b28 <HAL_GPIO_Init+0x2f0>)
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	43db      	mvns	r3, r3
 8007aa2:	693a      	ldr	r2, [r7, #16]
 8007aa4:	4013      	ands	r3, r2
 8007aa6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d003      	beq.n	8007abc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007abc:	4a1a      	ldr	r2, [pc, #104]	; (8007b28 <HAL_GPIO_Init+0x2f0>)
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007ac2:	4b19      	ldr	r3, [pc, #100]	; (8007b28 <HAL_GPIO_Init+0x2f0>)
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	43db      	mvns	r3, r3
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	4013      	ands	r3, r2
 8007ad0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d003      	beq.n	8007ae6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007ade:	693a      	ldr	r2, [r7, #16]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007ae6:	4a10      	ldr	r2, [pc, #64]	; (8007b28 <HAL_GPIO_Init+0x2f0>)
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	3301      	adds	r3, #1
 8007af0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	fa22 f303 	lsr.w	r3, r2, r3
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f47f aea3 	bne.w	8007848 <HAL_GPIO_Init+0x10>
  }
}
 8007b02:	bf00      	nop
 8007b04:	bf00      	nop
 8007b06:	371c      	adds	r7, #28
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr
 8007b10:	40021000 	.word	0x40021000
 8007b14:	40010000 	.word	0x40010000
 8007b18:	48000400 	.word	0x48000400
 8007b1c:	48000800 	.word	0x48000800
 8007b20:	48000c00 	.word	0x48000c00
 8007b24:	48001000 	.word	0x48001000
 8007b28:	40010400 	.word	0x40010400

08007b2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	1d3b      	adds	r3, r7, #4
 8007b36:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007b38:	1d3b      	adds	r3, r7, #4
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d102      	bne.n	8007b46 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	f000 bef4 	b.w	800892e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b46:	1d3b      	adds	r3, r7, #4
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 0301 	and.w	r3, r3, #1
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f000 816a 	beq.w	8007e2a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8007b56:	4bb3      	ldr	r3, [pc, #716]	; (8007e24 <HAL_RCC_OscConfig+0x2f8>)
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	f003 030c 	and.w	r3, r3, #12
 8007b5e:	2b04      	cmp	r3, #4
 8007b60:	d00c      	beq.n	8007b7c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007b62:	4bb0      	ldr	r3, [pc, #704]	; (8007e24 <HAL_RCC_OscConfig+0x2f8>)
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	f003 030c 	and.w	r3, r3, #12
 8007b6a:	2b08      	cmp	r3, #8
 8007b6c:	d159      	bne.n	8007c22 <HAL_RCC_OscConfig+0xf6>
 8007b6e:	4bad      	ldr	r3, [pc, #692]	; (8007e24 <HAL_RCC_OscConfig+0x2f8>)
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b7a:	d152      	bne.n	8007c22 <HAL_RCC_OscConfig+0xf6>
 8007b7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007b80:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b84:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8007b88:	fa93 f3a3 	rbit	r3, r3
 8007b8c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007b90:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b94:	fab3 f383 	clz	r3, r3
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	095b      	lsrs	r3, r3, #5
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	f043 0301 	orr.w	r3, r3, #1
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d102      	bne.n	8007bae <HAL_RCC_OscConfig+0x82>
 8007ba8:	4b9e      	ldr	r3, [pc, #632]	; (8007e24 <HAL_RCC_OscConfig+0x2f8>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	e015      	b.n	8007bda <HAL_RCC_OscConfig+0xae>
 8007bae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007bb2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bb6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8007bba:	fa93 f3a3 	rbit	r3, r3
 8007bbe:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8007bc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007bc6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8007bca:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8007bce:	fa93 f3a3 	rbit	r3, r3
 8007bd2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8007bd6:	4b93      	ldr	r3, [pc, #588]	; (8007e24 <HAL_RCC_OscConfig+0x2f8>)
 8007bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007bde:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8007be2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8007be6:	fa92 f2a2 	rbit	r2, r2
 8007bea:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8007bee:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8007bf2:	fab2 f282 	clz	r2, r2
 8007bf6:	b2d2      	uxtb	r2, r2
 8007bf8:	f042 0220 	orr.w	r2, r2, #32
 8007bfc:	b2d2      	uxtb	r2, r2
 8007bfe:	f002 021f 	and.w	r2, r2, #31
 8007c02:	2101      	movs	r1, #1
 8007c04:	fa01 f202 	lsl.w	r2, r1, r2
 8007c08:	4013      	ands	r3, r2
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	f000 810c 	beq.w	8007e28 <HAL_RCC_OscConfig+0x2fc>
 8007c10:	1d3b      	adds	r3, r7, #4
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	f040 8106 	bne.w	8007e28 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	f000 be86 	b.w	800892e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c22:	1d3b      	adds	r3, r7, #4
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c2c:	d106      	bne.n	8007c3c <HAL_RCC_OscConfig+0x110>
 8007c2e:	4b7d      	ldr	r3, [pc, #500]	; (8007e24 <HAL_RCC_OscConfig+0x2f8>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a7c      	ldr	r2, [pc, #496]	; (8007e24 <HAL_RCC_OscConfig+0x2f8>)
 8007c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c38:	6013      	str	r3, [r2, #0]
 8007c3a:	e030      	b.n	8007c9e <HAL_RCC_OscConfig+0x172>
 8007c3c:	1d3b      	adds	r3, r7, #4
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d10c      	bne.n	8007c60 <HAL_RCC_OscConfig+0x134>
 8007c46:	4b77      	ldr	r3, [pc, #476]	; (8007e24 <HAL_RCC_OscConfig+0x2f8>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a76      	ldr	r2, [pc, #472]	; (8007e24 <HAL_RCC_OscConfig+0x2f8>)
 8007c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c50:	6013      	str	r3, [r2, #0]
 8007c52:	4b74      	ldr	r3, [pc, #464]	; (8007e24 <HAL_RCC_OscConfig+0x2f8>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a73      	ldr	r2, [pc, #460]	; (8007e24 <HAL_RCC_OscConfig+0x2f8>)
 8007c58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c5c:	6013      	str	r3, [r2, #0]
 8007c5e:	e01e      	b.n	8007c9e <HAL_RCC_OscConfig+0x172>
 8007c60:	1d3b      	adds	r3, r7, #4
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c6a:	d10c      	bne.n	8007c86 <HAL_RCC_OscConfig+0x15a>
 8007c6c:	4b6d      	ldr	r3, [pc, #436]	; (8007e24 <HAL_RCC_OscConfig+0x2f8>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a6c      	ldr	r2, [pc, #432]	; (8007e24 <HAL_RCC_OscConfig+0x2f8>)
 8007c72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c76:	6013      	str	r3, [r2, #0]
 8007c78:	4b6a      	ldr	r3, [pc, #424]	; (8007e24 <HAL_RCC_OscConfig+0x2f8>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a69      	ldr	r2, [pc, #420]	; (8007e24 <HAL_RCC_OscConfig+0x2f8>)
 8007c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c82:	6013      	str	r3, [r2, #0]
 8007c84:	e00b      	b.n	8007c9e <HAL_RCC_OscConfig+0x172>
 8007c86:	4b67      	ldr	r3, [pc, #412]	; (8007e24 <HAL_RCC_OscConfig+0x2f8>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a66      	ldr	r2, [pc, #408]	; (8007e24 <HAL_RCC_OscConfig+0x2f8>)
 8007c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c90:	6013      	str	r3, [r2, #0]
 8007c92:	4b64      	ldr	r3, [pc, #400]	; (8007e24 <HAL_RCC_OscConfig+0x2f8>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a63      	ldr	r2, [pc, #396]	; (8007e24 <HAL_RCC_OscConfig+0x2f8>)
 8007c98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c9c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007c9e:	4b61      	ldr	r3, [pc, #388]	; (8007e24 <HAL_RCC_OscConfig+0x2f8>)
 8007ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca2:	f023 020f 	bic.w	r2, r3, #15
 8007ca6:	1d3b      	adds	r3, r7, #4
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	495d      	ldr	r1, [pc, #372]	; (8007e24 <HAL_RCC_OscConfig+0x2f8>)
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007cb2:	1d3b      	adds	r3, r7, #4
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d059      	beq.n	8007d70 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cbc:	f7ff fc9e 	bl	80075fc <HAL_GetTick>
 8007cc0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cc4:	e00a      	b.n	8007cdc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007cc6:	f7ff fc99 	bl	80075fc <HAL_GetTick>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007cd0:	1ad3      	subs	r3, r2, r3
 8007cd2:	2b64      	cmp	r3, #100	; 0x64
 8007cd4:	d902      	bls.n	8007cdc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8007cd6:	2303      	movs	r3, #3
 8007cd8:	f000 be29 	b.w	800892e <HAL_RCC_OscConfig+0xe02>
 8007cdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007ce0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ce4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8007ce8:	fa93 f3a3 	rbit	r3, r3
 8007cec:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8007cf0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cf4:	fab3 f383 	clz	r3, r3
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	095b      	lsrs	r3, r3, #5
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	f043 0301 	orr.w	r3, r3, #1
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d102      	bne.n	8007d0e <HAL_RCC_OscConfig+0x1e2>
 8007d08:	4b46      	ldr	r3, [pc, #280]	; (8007e24 <HAL_RCC_OscConfig+0x2f8>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	e015      	b.n	8007d3a <HAL_RCC_OscConfig+0x20e>
 8007d0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007d12:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d16:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007d1a:	fa93 f3a3 	rbit	r3, r3
 8007d1e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8007d22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007d26:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8007d2a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8007d2e:	fa93 f3a3 	rbit	r3, r3
 8007d32:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8007d36:	4b3b      	ldr	r3, [pc, #236]	; (8007e24 <HAL_RCC_OscConfig+0x2f8>)
 8007d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007d3e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8007d42:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007d46:	fa92 f2a2 	rbit	r2, r2
 8007d4a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8007d4e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8007d52:	fab2 f282 	clz	r2, r2
 8007d56:	b2d2      	uxtb	r2, r2
 8007d58:	f042 0220 	orr.w	r2, r2, #32
 8007d5c:	b2d2      	uxtb	r2, r2
 8007d5e:	f002 021f 	and.w	r2, r2, #31
 8007d62:	2101      	movs	r1, #1
 8007d64:	fa01 f202 	lsl.w	r2, r1, r2
 8007d68:	4013      	ands	r3, r2
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d0ab      	beq.n	8007cc6 <HAL_RCC_OscConfig+0x19a>
 8007d6e:	e05c      	b.n	8007e2a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d70:	f7ff fc44 	bl	80075fc <HAL_GetTick>
 8007d74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d78:	e00a      	b.n	8007d90 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d7a:	f7ff fc3f 	bl	80075fc <HAL_GetTick>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007d84:	1ad3      	subs	r3, r2, r3
 8007d86:	2b64      	cmp	r3, #100	; 0x64
 8007d88:	d902      	bls.n	8007d90 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	f000 bdcf 	b.w	800892e <HAL_RCC_OscConfig+0xe02>
 8007d90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007d94:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d98:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8007d9c:	fa93 f3a3 	rbit	r3, r3
 8007da0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8007da4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007da8:	fab3 f383 	clz	r3, r3
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	095b      	lsrs	r3, r3, #5
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	f043 0301 	orr.w	r3, r3, #1
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d102      	bne.n	8007dc2 <HAL_RCC_OscConfig+0x296>
 8007dbc:	4b19      	ldr	r3, [pc, #100]	; (8007e24 <HAL_RCC_OscConfig+0x2f8>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	e015      	b.n	8007dee <HAL_RCC_OscConfig+0x2c2>
 8007dc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007dc6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dca:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8007dce:	fa93 f3a3 	rbit	r3, r3
 8007dd2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007dd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007dda:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8007dde:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8007de2:	fa93 f3a3 	rbit	r3, r3
 8007de6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8007dea:	4b0e      	ldr	r3, [pc, #56]	; (8007e24 <HAL_RCC_OscConfig+0x2f8>)
 8007dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007df2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8007df6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8007dfa:	fa92 f2a2 	rbit	r2, r2
 8007dfe:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8007e02:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8007e06:	fab2 f282 	clz	r2, r2
 8007e0a:	b2d2      	uxtb	r2, r2
 8007e0c:	f042 0220 	orr.w	r2, r2, #32
 8007e10:	b2d2      	uxtb	r2, r2
 8007e12:	f002 021f 	and.w	r2, r2, #31
 8007e16:	2101      	movs	r1, #1
 8007e18:	fa01 f202 	lsl.w	r2, r1, r2
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1ab      	bne.n	8007d7a <HAL_RCC_OscConfig+0x24e>
 8007e22:	e002      	b.n	8007e2a <HAL_RCC_OscConfig+0x2fe>
 8007e24:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e2a:	1d3b      	adds	r3, r7, #4
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 0302 	and.w	r3, r3, #2
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f000 816f 	beq.w	8008118 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007e3a:	4bd0      	ldr	r3, [pc, #832]	; (800817c <HAL_RCC_OscConfig+0x650>)
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	f003 030c 	and.w	r3, r3, #12
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00b      	beq.n	8007e5e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007e46:	4bcd      	ldr	r3, [pc, #820]	; (800817c <HAL_RCC_OscConfig+0x650>)
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	f003 030c 	and.w	r3, r3, #12
 8007e4e:	2b08      	cmp	r3, #8
 8007e50:	d16c      	bne.n	8007f2c <HAL_RCC_OscConfig+0x400>
 8007e52:	4bca      	ldr	r3, [pc, #808]	; (800817c <HAL_RCC_OscConfig+0x650>)
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d166      	bne.n	8007f2c <HAL_RCC_OscConfig+0x400>
 8007e5e:	2302      	movs	r3, #2
 8007e60:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e64:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8007e68:	fa93 f3a3 	rbit	r3, r3
 8007e6c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8007e70:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e74:	fab3 f383 	clz	r3, r3
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	095b      	lsrs	r3, r3, #5
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	f043 0301 	orr.w	r3, r3, #1
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d102      	bne.n	8007e8e <HAL_RCC_OscConfig+0x362>
 8007e88:	4bbc      	ldr	r3, [pc, #752]	; (800817c <HAL_RCC_OscConfig+0x650>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	e013      	b.n	8007eb6 <HAL_RCC_OscConfig+0x38a>
 8007e8e:	2302      	movs	r3, #2
 8007e90:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e94:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8007e98:	fa93 f3a3 	rbit	r3, r3
 8007e9c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8007ea0:	2302      	movs	r3, #2
 8007ea2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8007ea6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8007eaa:	fa93 f3a3 	rbit	r3, r3
 8007eae:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8007eb2:	4bb2      	ldr	r3, [pc, #712]	; (800817c <HAL_RCC_OscConfig+0x650>)
 8007eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb6:	2202      	movs	r2, #2
 8007eb8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8007ebc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8007ec0:	fa92 f2a2 	rbit	r2, r2
 8007ec4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8007ec8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8007ecc:	fab2 f282 	clz	r2, r2
 8007ed0:	b2d2      	uxtb	r2, r2
 8007ed2:	f042 0220 	orr.w	r2, r2, #32
 8007ed6:	b2d2      	uxtb	r2, r2
 8007ed8:	f002 021f 	and.w	r2, r2, #31
 8007edc:	2101      	movs	r1, #1
 8007ede:	fa01 f202 	lsl.w	r2, r1, r2
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d007      	beq.n	8007ef8 <HAL_RCC_OscConfig+0x3cc>
 8007ee8:	1d3b      	adds	r3, r7, #4
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d002      	beq.n	8007ef8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	f000 bd1b 	b.w	800892e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ef8:	4ba0      	ldr	r3, [pc, #640]	; (800817c <HAL_RCC_OscConfig+0x650>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f00:	1d3b      	adds	r3, r7, #4
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	695b      	ldr	r3, [r3, #20]
 8007f06:	21f8      	movs	r1, #248	; 0xf8
 8007f08:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f0c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8007f10:	fa91 f1a1 	rbit	r1, r1
 8007f14:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8007f18:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8007f1c:	fab1 f181 	clz	r1, r1
 8007f20:	b2c9      	uxtb	r1, r1
 8007f22:	408b      	lsls	r3, r1
 8007f24:	4995      	ldr	r1, [pc, #596]	; (800817c <HAL_RCC_OscConfig+0x650>)
 8007f26:	4313      	orrs	r3, r2
 8007f28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f2a:	e0f5      	b.n	8008118 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007f2c:	1d3b      	adds	r3, r7, #4
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f000 8085 	beq.w	8008042 <HAL_RCC_OscConfig+0x516>
 8007f38:	2301      	movs	r3, #1
 8007f3a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f3e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8007f42:	fa93 f3a3 	rbit	r3, r3
 8007f46:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8007f4a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007f4e:	fab3 f383 	clz	r3, r3
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007f58:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	461a      	mov	r2, r3
 8007f60:	2301      	movs	r3, #1
 8007f62:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f64:	f7ff fb4a 	bl	80075fc <HAL_GetTick>
 8007f68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f6c:	e00a      	b.n	8007f84 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f6e:	f7ff fb45 	bl	80075fc <HAL_GetTick>
 8007f72:	4602      	mov	r2, r0
 8007f74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d902      	bls.n	8007f84 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	f000 bcd5 	b.w	800892e <HAL_RCC_OscConfig+0xe02>
 8007f84:	2302      	movs	r3, #2
 8007f86:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f8a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8007f8e:	fa93 f3a3 	rbit	r3, r3
 8007f92:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8007f96:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f9a:	fab3 f383 	clz	r3, r3
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	095b      	lsrs	r3, r3, #5
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	f043 0301 	orr.w	r3, r3, #1
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d102      	bne.n	8007fb4 <HAL_RCC_OscConfig+0x488>
 8007fae:	4b73      	ldr	r3, [pc, #460]	; (800817c <HAL_RCC_OscConfig+0x650>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	e013      	b.n	8007fdc <HAL_RCC_OscConfig+0x4b0>
 8007fb4:	2302      	movs	r3, #2
 8007fb6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fba:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8007fbe:	fa93 f3a3 	rbit	r3, r3
 8007fc2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8007fc6:	2302      	movs	r3, #2
 8007fc8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007fcc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007fd0:	fa93 f3a3 	rbit	r3, r3
 8007fd4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8007fd8:	4b68      	ldr	r3, [pc, #416]	; (800817c <HAL_RCC_OscConfig+0x650>)
 8007fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fdc:	2202      	movs	r2, #2
 8007fde:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8007fe2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8007fe6:	fa92 f2a2 	rbit	r2, r2
 8007fea:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8007fee:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8007ff2:	fab2 f282 	clz	r2, r2
 8007ff6:	b2d2      	uxtb	r2, r2
 8007ff8:	f042 0220 	orr.w	r2, r2, #32
 8007ffc:	b2d2      	uxtb	r2, r2
 8007ffe:	f002 021f 	and.w	r2, r2, #31
 8008002:	2101      	movs	r1, #1
 8008004:	fa01 f202 	lsl.w	r2, r1, r2
 8008008:	4013      	ands	r3, r2
 800800a:	2b00      	cmp	r3, #0
 800800c:	d0af      	beq.n	8007f6e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800800e:	4b5b      	ldr	r3, [pc, #364]	; (800817c <HAL_RCC_OscConfig+0x650>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008016:	1d3b      	adds	r3, r7, #4
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	695b      	ldr	r3, [r3, #20]
 800801c:	21f8      	movs	r1, #248	; 0xf8
 800801e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008022:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8008026:	fa91 f1a1 	rbit	r1, r1
 800802a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800802e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8008032:	fab1 f181 	clz	r1, r1
 8008036:	b2c9      	uxtb	r1, r1
 8008038:	408b      	lsls	r3, r1
 800803a:	4950      	ldr	r1, [pc, #320]	; (800817c <HAL_RCC_OscConfig+0x650>)
 800803c:	4313      	orrs	r3, r2
 800803e:	600b      	str	r3, [r1, #0]
 8008040:	e06a      	b.n	8008118 <HAL_RCC_OscConfig+0x5ec>
 8008042:	2301      	movs	r3, #1
 8008044:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008048:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800804c:	fa93 f3a3 	rbit	r3, r3
 8008050:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8008054:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008058:	fab3 f383 	clz	r3, r3
 800805c:	b2db      	uxtb	r3, r3
 800805e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008062:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	461a      	mov	r2, r3
 800806a:	2300      	movs	r3, #0
 800806c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800806e:	f7ff fac5 	bl	80075fc <HAL_GetTick>
 8008072:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008076:	e00a      	b.n	800808e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008078:	f7ff fac0 	bl	80075fc <HAL_GetTick>
 800807c:	4602      	mov	r2, r0
 800807e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008082:	1ad3      	subs	r3, r2, r3
 8008084:	2b02      	cmp	r3, #2
 8008086:	d902      	bls.n	800808e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8008088:	2303      	movs	r3, #3
 800808a:	f000 bc50 	b.w	800892e <HAL_RCC_OscConfig+0xe02>
 800808e:	2302      	movs	r3, #2
 8008090:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008094:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008098:	fa93 f3a3 	rbit	r3, r3
 800809c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80080a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080a4:	fab3 f383 	clz	r3, r3
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	095b      	lsrs	r3, r3, #5
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	f043 0301 	orr.w	r3, r3, #1
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d102      	bne.n	80080be <HAL_RCC_OscConfig+0x592>
 80080b8:	4b30      	ldr	r3, [pc, #192]	; (800817c <HAL_RCC_OscConfig+0x650>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	e013      	b.n	80080e6 <HAL_RCC_OscConfig+0x5ba>
 80080be:	2302      	movs	r3, #2
 80080c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080c8:	fa93 f3a3 	rbit	r3, r3
 80080cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80080d0:	2302      	movs	r3, #2
 80080d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80080d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80080da:	fa93 f3a3 	rbit	r3, r3
 80080de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80080e2:	4b26      	ldr	r3, [pc, #152]	; (800817c <HAL_RCC_OscConfig+0x650>)
 80080e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e6:	2202      	movs	r2, #2
 80080e8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80080ec:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80080f0:	fa92 f2a2 	rbit	r2, r2
 80080f4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80080f8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80080fc:	fab2 f282 	clz	r2, r2
 8008100:	b2d2      	uxtb	r2, r2
 8008102:	f042 0220 	orr.w	r2, r2, #32
 8008106:	b2d2      	uxtb	r2, r2
 8008108:	f002 021f 	and.w	r2, r2, #31
 800810c:	2101      	movs	r1, #1
 800810e:	fa01 f202 	lsl.w	r2, r1, r2
 8008112:	4013      	ands	r3, r2
 8008114:	2b00      	cmp	r3, #0
 8008116:	d1af      	bne.n	8008078 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008118:	1d3b      	adds	r3, r7, #4
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f003 0308 	and.w	r3, r3, #8
 8008122:	2b00      	cmp	r3, #0
 8008124:	f000 80da 	beq.w	80082dc <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008128:	1d3b      	adds	r3, r7, #4
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d069      	beq.n	8008206 <HAL_RCC_OscConfig+0x6da>
 8008132:	2301      	movs	r3, #1
 8008134:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008138:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800813c:	fa93 f3a3 	rbit	r3, r3
 8008140:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8008144:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008148:	fab3 f383 	clz	r3, r3
 800814c:	b2db      	uxtb	r3, r3
 800814e:	461a      	mov	r2, r3
 8008150:	4b0b      	ldr	r3, [pc, #44]	; (8008180 <HAL_RCC_OscConfig+0x654>)
 8008152:	4413      	add	r3, r2
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	461a      	mov	r2, r3
 8008158:	2301      	movs	r3, #1
 800815a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800815c:	f7ff fa4e 	bl	80075fc <HAL_GetTick>
 8008160:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008164:	e00e      	b.n	8008184 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008166:	f7ff fa49 	bl	80075fc <HAL_GetTick>
 800816a:	4602      	mov	r2, r0
 800816c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	2b02      	cmp	r3, #2
 8008174:	d906      	bls.n	8008184 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8008176:	2303      	movs	r3, #3
 8008178:	e3d9      	b.n	800892e <HAL_RCC_OscConfig+0xe02>
 800817a:	bf00      	nop
 800817c:	40021000 	.word	0x40021000
 8008180:	10908120 	.word	0x10908120
 8008184:	2302      	movs	r3, #2
 8008186:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800818a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800818e:	fa93 f3a3 	rbit	r3, r3
 8008192:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008196:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800819a:	2202      	movs	r2, #2
 800819c:	601a      	str	r2, [r3, #0]
 800819e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	fa93 f2a3 	rbit	r2, r3
 80081a8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80081ac:	601a      	str	r2, [r3, #0]
 80081ae:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80081b2:	2202      	movs	r2, #2
 80081b4:	601a      	str	r2, [r3, #0]
 80081b6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	fa93 f2a3 	rbit	r2, r3
 80081c0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80081c4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80081c6:	4ba5      	ldr	r3, [pc, #660]	; (800845c <HAL_RCC_OscConfig+0x930>)
 80081c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081ca:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80081ce:	2102      	movs	r1, #2
 80081d0:	6019      	str	r1, [r3, #0]
 80081d2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	fa93 f1a3 	rbit	r1, r3
 80081dc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80081e0:	6019      	str	r1, [r3, #0]
  return result;
 80081e2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	fab3 f383 	clz	r3, r3
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	f003 031f 	and.w	r3, r3, #31
 80081f8:	2101      	movs	r1, #1
 80081fa:	fa01 f303 	lsl.w	r3, r1, r3
 80081fe:	4013      	ands	r3, r2
 8008200:	2b00      	cmp	r3, #0
 8008202:	d0b0      	beq.n	8008166 <HAL_RCC_OscConfig+0x63a>
 8008204:	e06a      	b.n	80082dc <HAL_RCC_OscConfig+0x7b0>
 8008206:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800820a:	2201      	movs	r2, #1
 800820c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800820e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	fa93 f2a3 	rbit	r2, r3
 8008218:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800821c:	601a      	str	r2, [r3, #0]
  return result;
 800821e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8008222:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008224:	fab3 f383 	clz	r3, r3
 8008228:	b2db      	uxtb	r3, r3
 800822a:	461a      	mov	r2, r3
 800822c:	4b8c      	ldr	r3, [pc, #560]	; (8008460 <HAL_RCC_OscConfig+0x934>)
 800822e:	4413      	add	r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	461a      	mov	r2, r3
 8008234:	2300      	movs	r3, #0
 8008236:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008238:	f7ff f9e0 	bl	80075fc <HAL_GetTick>
 800823c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008240:	e009      	b.n	8008256 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008242:	f7ff f9db 	bl	80075fc <HAL_GetTick>
 8008246:	4602      	mov	r2, r0
 8008248:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	2b02      	cmp	r3, #2
 8008250:	d901      	bls.n	8008256 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8008252:	2303      	movs	r3, #3
 8008254:	e36b      	b.n	800892e <HAL_RCC_OscConfig+0xe02>
 8008256:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800825a:	2202      	movs	r2, #2
 800825c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800825e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	fa93 f2a3 	rbit	r2, r3
 8008268:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800826c:	601a      	str	r2, [r3, #0]
 800826e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8008272:	2202      	movs	r2, #2
 8008274:	601a      	str	r2, [r3, #0]
 8008276:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	fa93 f2a3 	rbit	r2, r3
 8008280:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008284:	601a      	str	r2, [r3, #0]
 8008286:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800828a:	2202      	movs	r2, #2
 800828c:	601a      	str	r2, [r3, #0]
 800828e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	fa93 f2a3 	rbit	r2, r3
 8008298:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800829c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800829e:	4b6f      	ldr	r3, [pc, #444]	; (800845c <HAL_RCC_OscConfig+0x930>)
 80082a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082a2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80082a6:	2102      	movs	r1, #2
 80082a8:	6019      	str	r1, [r3, #0]
 80082aa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	fa93 f1a3 	rbit	r1, r3
 80082b4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80082b8:	6019      	str	r1, [r3, #0]
  return result;
 80082ba:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	fab3 f383 	clz	r3, r3
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	f003 031f 	and.w	r3, r3, #31
 80082d0:	2101      	movs	r1, #1
 80082d2:	fa01 f303 	lsl.w	r3, r1, r3
 80082d6:	4013      	ands	r3, r2
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d1b2      	bne.n	8008242 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082dc:	1d3b      	adds	r3, r7, #4
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 0304 	and.w	r3, r3, #4
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	f000 8158 	beq.w	800859c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80082ec:	2300      	movs	r3, #0
 80082ee:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082f2:	4b5a      	ldr	r3, [pc, #360]	; (800845c <HAL_RCC_OscConfig+0x930>)
 80082f4:	69db      	ldr	r3, [r3, #28]
 80082f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d112      	bne.n	8008324 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082fe:	4b57      	ldr	r3, [pc, #348]	; (800845c <HAL_RCC_OscConfig+0x930>)
 8008300:	69db      	ldr	r3, [r3, #28]
 8008302:	4a56      	ldr	r2, [pc, #344]	; (800845c <HAL_RCC_OscConfig+0x930>)
 8008304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008308:	61d3      	str	r3, [r2, #28]
 800830a:	4b54      	ldr	r3, [pc, #336]	; (800845c <HAL_RCC_OscConfig+0x930>)
 800830c:	69db      	ldr	r3, [r3, #28]
 800830e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8008312:	f107 0308 	add.w	r3, r7, #8
 8008316:	601a      	str	r2, [r3, #0]
 8008318:	f107 0308 	add.w	r3, r7, #8
 800831c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800831e:	2301      	movs	r3, #1
 8008320:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008324:	4b4f      	ldr	r3, [pc, #316]	; (8008464 <HAL_RCC_OscConfig+0x938>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800832c:	2b00      	cmp	r3, #0
 800832e:	d11a      	bne.n	8008366 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008330:	4b4c      	ldr	r3, [pc, #304]	; (8008464 <HAL_RCC_OscConfig+0x938>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a4b      	ldr	r2, [pc, #300]	; (8008464 <HAL_RCC_OscConfig+0x938>)
 8008336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800833a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800833c:	f7ff f95e 	bl	80075fc <HAL_GetTick>
 8008340:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008344:	e009      	b.n	800835a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008346:	f7ff f959 	bl	80075fc <HAL_GetTick>
 800834a:	4602      	mov	r2, r0
 800834c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008350:	1ad3      	subs	r3, r2, r3
 8008352:	2b64      	cmp	r3, #100	; 0x64
 8008354:	d901      	bls.n	800835a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8008356:	2303      	movs	r3, #3
 8008358:	e2e9      	b.n	800892e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800835a:	4b42      	ldr	r3, [pc, #264]	; (8008464 <HAL_RCC_OscConfig+0x938>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008362:	2b00      	cmp	r3, #0
 8008364:	d0ef      	beq.n	8008346 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008366:	1d3b      	adds	r3, r7, #4
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	68db      	ldr	r3, [r3, #12]
 800836c:	2b01      	cmp	r3, #1
 800836e:	d106      	bne.n	800837e <HAL_RCC_OscConfig+0x852>
 8008370:	4b3a      	ldr	r3, [pc, #232]	; (800845c <HAL_RCC_OscConfig+0x930>)
 8008372:	6a1b      	ldr	r3, [r3, #32]
 8008374:	4a39      	ldr	r2, [pc, #228]	; (800845c <HAL_RCC_OscConfig+0x930>)
 8008376:	f043 0301 	orr.w	r3, r3, #1
 800837a:	6213      	str	r3, [r2, #32]
 800837c:	e02f      	b.n	80083de <HAL_RCC_OscConfig+0x8b2>
 800837e:	1d3b      	adds	r3, r7, #4
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d10c      	bne.n	80083a2 <HAL_RCC_OscConfig+0x876>
 8008388:	4b34      	ldr	r3, [pc, #208]	; (800845c <HAL_RCC_OscConfig+0x930>)
 800838a:	6a1b      	ldr	r3, [r3, #32]
 800838c:	4a33      	ldr	r2, [pc, #204]	; (800845c <HAL_RCC_OscConfig+0x930>)
 800838e:	f023 0301 	bic.w	r3, r3, #1
 8008392:	6213      	str	r3, [r2, #32]
 8008394:	4b31      	ldr	r3, [pc, #196]	; (800845c <HAL_RCC_OscConfig+0x930>)
 8008396:	6a1b      	ldr	r3, [r3, #32]
 8008398:	4a30      	ldr	r2, [pc, #192]	; (800845c <HAL_RCC_OscConfig+0x930>)
 800839a:	f023 0304 	bic.w	r3, r3, #4
 800839e:	6213      	str	r3, [r2, #32]
 80083a0:	e01d      	b.n	80083de <HAL_RCC_OscConfig+0x8b2>
 80083a2:	1d3b      	adds	r3, r7, #4
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	2b05      	cmp	r3, #5
 80083aa:	d10c      	bne.n	80083c6 <HAL_RCC_OscConfig+0x89a>
 80083ac:	4b2b      	ldr	r3, [pc, #172]	; (800845c <HAL_RCC_OscConfig+0x930>)
 80083ae:	6a1b      	ldr	r3, [r3, #32]
 80083b0:	4a2a      	ldr	r2, [pc, #168]	; (800845c <HAL_RCC_OscConfig+0x930>)
 80083b2:	f043 0304 	orr.w	r3, r3, #4
 80083b6:	6213      	str	r3, [r2, #32]
 80083b8:	4b28      	ldr	r3, [pc, #160]	; (800845c <HAL_RCC_OscConfig+0x930>)
 80083ba:	6a1b      	ldr	r3, [r3, #32]
 80083bc:	4a27      	ldr	r2, [pc, #156]	; (800845c <HAL_RCC_OscConfig+0x930>)
 80083be:	f043 0301 	orr.w	r3, r3, #1
 80083c2:	6213      	str	r3, [r2, #32]
 80083c4:	e00b      	b.n	80083de <HAL_RCC_OscConfig+0x8b2>
 80083c6:	4b25      	ldr	r3, [pc, #148]	; (800845c <HAL_RCC_OscConfig+0x930>)
 80083c8:	6a1b      	ldr	r3, [r3, #32]
 80083ca:	4a24      	ldr	r2, [pc, #144]	; (800845c <HAL_RCC_OscConfig+0x930>)
 80083cc:	f023 0301 	bic.w	r3, r3, #1
 80083d0:	6213      	str	r3, [r2, #32]
 80083d2:	4b22      	ldr	r3, [pc, #136]	; (800845c <HAL_RCC_OscConfig+0x930>)
 80083d4:	6a1b      	ldr	r3, [r3, #32]
 80083d6:	4a21      	ldr	r2, [pc, #132]	; (800845c <HAL_RCC_OscConfig+0x930>)
 80083d8:	f023 0304 	bic.w	r3, r3, #4
 80083dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80083de:	1d3b      	adds	r3, r7, #4
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d06b      	beq.n	80084c0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083e8:	f7ff f908 	bl	80075fc <HAL_GetTick>
 80083ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083f0:	e00b      	b.n	800840a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083f2:	f7ff f903 	bl	80075fc <HAL_GetTick>
 80083f6:	4602      	mov	r2, r0
 80083f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80083fc:	1ad3      	subs	r3, r2, r3
 80083fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008402:	4293      	cmp	r3, r2
 8008404:	d901      	bls.n	800840a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8008406:	2303      	movs	r3, #3
 8008408:	e291      	b.n	800892e <HAL_RCC_OscConfig+0xe02>
 800840a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800840e:	2202      	movs	r2, #2
 8008410:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008412:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	fa93 f2a3 	rbit	r2, r3
 800841c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8008420:	601a      	str	r2, [r3, #0]
 8008422:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8008426:	2202      	movs	r2, #2
 8008428:	601a      	str	r2, [r3, #0]
 800842a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	fa93 f2a3 	rbit	r2, r3
 8008434:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8008438:	601a      	str	r2, [r3, #0]
  return result;
 800843a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800843e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008440:	fab3 f383 	clz	r3, r3
 8008444:	b2db      	uxtb	r3, r3
 8008446:	095b      	lsrs	r3, r3, #5
 8008448:	b2db      	uxtb	r3, r3
 800844a:	f043 0302 	orr.w	r3, r3, #2
 800844e:	b2db      	uxtb	r3, r3
 8008450:	2b02      	cmp	r3, #2
 8008452:	d109      	bne.n	8008468 <HAL_RCC_OscConfig+0x93c>
 8008454:	4b01      	ldr	r3, [pc, #4]	; (800845c <HAL_RCC_OscConfig+0x930>)
 8008456:	6a1b      	ldr	r3, [r3, #32]
 8008458:	e014      	b.n	8008484 <HAL_RCC_OscConfig+0x958>
 800845a:	bf00      	nop
 800845c:	40021000 	.word	0x40021000
 8008460:	10908120 	.word	0x10908120
 8008464:	40007000 	.word	0x40007000
 8008468:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800846c:	2202      	movs	r2, #2
 800846e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008470:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	fa93 f2a3 	rbit	r2, r3
 800847a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800847e:	601a      	str	r2, [r3, #0]
 8008480:	4bbb      	ldr	r3, [pc, #748]	; (8008770 <HAL_RCC_OscConfig+0xc44>)
 8008482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008484:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8008488:	2102      	movs	r1, #2
 800848a:	6011      	str	r1, [r2, #0]
 800848c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8008490:	6812      	ldr	r2, [r2, #0]
 8008492:	fa92 f1a2 	rbit	r1, r2
 8008496:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800849a:	6011      	str	r1, [r2, #0]
  return result;
 800849c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80084a0:	6812      	ldr	r2, [r2, #0]
 80084a2:	fab2 f282 	clz	r2, r2
 80084a6:	b2d2      	uxtb	r2, r2
 80084a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084ac:	b2d2      	uxtb	r2, r2
 80084ae:	f002 021f 	and.w	r2, r2, #31
 80084b2:	2101      	movs	r1, #1
 80084b4:	fa01 f202 	lsl.w	r2, r1, r2
 80084b8:	4013      	ands	r3, r2
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d099      	beq.n	80083f2 <HAL_RCC_OscConfig+0x8c6>
 80084be:	e063      	b.n	8008588 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80084c0:	f7ff f89c 	bl	80075fc <HAL_GetTick>
 80084c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80084c8:	e00b      	b.n	80084e2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80084ca:	f7ff f897 	bl	80075fc <HAL_GetTick>
 80084ce:	4602      	mov	r2, r0
 80084d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80084da:	4293      	cmp	r3, r2
 80084dc:	d901      	bls.n	80084e2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80084de:	2303      	movs	r3, #3
 80084e0:	e225      	b.n	800892e <HAL_RCC_OscConfig+0xe02>
 80084e2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80084e6:	2202      	movs	r2, #2
 80084e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	fa93 f2a3 	rbit	r2, r3
 80084f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80084f8:	601a      	str	r2, [r3, #0]
 80084fa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80084fe:	2202      	movs	r2, #2
 8008500:	601a      	str	r2, [r3, #0]
 8008502:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	fa93 f2a3 	rbit	r2, r3
 800850c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8008510:	601a      	str	r2, [r3, #0]
  return result;
 8008512:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8008516:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008518:	fab3 f383 	clz	r3, r3
 800851c:	b2db      	uxtb	r3, r3
 800851e:	095b      	lsrs	r3, r3, #5
 8008520:	b2db      	uxtb	r3, r3
 8008522:	f043 0302 	orr.w	r3, r3, #2
 8008526:	b2db      	uxtb	r3, r3
 8008528:	2b02      	cmp	r3, #2
 800852a:	d102      	bne.n	8008532 <HAL_RCC_OscConfig+0xa06>
 800852c:	4b90      	ldr	r3, [pc, #576]	; (8008770 <HAL_RCC_OscConfig+0xc44>)
 800852e:	6a1b      	ldr	r3, [r3, #32]
 8008530:	e00d      	b.n	800854e <HAL_RCC_OscConfig+0xa22>
 8008532:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008536:	2202      	movs	r2, #2
 8008538:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800853a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	fa93 f2a3 	rbit	r2, r3
 8008544:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008548:	601a      	str	r2, [r3, #0]
 800854a:	4b89      	ldr	r3, [pc, #548]	; (8008770 <HAL_RCC_OscConfig+0xc44>)
 800854c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8008552:	2102      	movs	r1, #2
 8008554:	6011      	str	r1, [r2, #0]
 8008556:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800855a:	6812      	ldr	r2, [r2, #0]
 800855c:	fa92 f1a2 	rbit	r1, r2
 8008560:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8008564:	6011      	str	r1, [r2, #0]
  return result;
 8008566:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800856a:	6812      	ldr	r2, [r2, #0]
 800856c:	fab2 f282 	clz	r2, r2
 8008570:	b2d2      	uxtb	r2, r2
 8008572:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008576:	b2d2      	uxtb	r2, r2
 8008578:	f002 021f 	and.w	r2, r2, #31
 800857c:	2101      	movs	r1, #1
 800857e:	fa01 f202 	lsl.w	r2, r1, r2
 8008582:	4013      	ands	r3, r2
 8008584:	2b00      	cmp	r3, #0
 8008586:	d1a0      	bne.n	80084ca <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008588:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800858c:	2b01      	cmp	r3, #1
 800858e:	d105      	bne.n	800859c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008590:	4b77      	ldr	r3, [pc, #476]	; (8008770 <HAL_RCC_OscConfig+0xc44>)
 8008592:	69db      	ldr	r3, [r3, #28]
 8008594:	4a76      	ldr	r2, [pc, #472]	; (8008770 <HAL_RCC_OscConfig+0xc44>)
 8008596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800859a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800859c:	1d3b      	adds	r3, r7, #4
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	69db      	ldr	r3, [r3, #28]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f000 81c2 	beq.w	800892c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80085a8:	4b71      	ldr	r3, [pc, #452]	; (8008770 <HAL_RCC_OscConfig+0xc44>)
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	f003 030c 	and.w	r3, r3, #12
 80085b0:	2b08      	cmp	r3, #8
 80085b2:	f000 819c 	beq.w	80088ee <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80085b6:	1d3b      	adds	r3, r7, #4
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	69db      	ldr	r3, [r3, #28]
 80085bc:	2b02      	cmp	r3, #2
 80085be:	f040 8114 	bne.w	80087ea <HAL_RCC_OscConfig+0xcbe>
 80085c2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80085c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80085ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085cc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	fa93 f2a3 	rbit	r2, r3
 80085d6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80085da:	601a      	str	r2, [r3, #0]
  return result;
 80085dc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80085e0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085e2:	fab3 f383 	clz	r3, r3
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80085ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	461a      	mov	r2, r3
 80085f4:	2300      	movs	r3, #0
 80085f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085f8:	f7ff f800 	bl	80075fc <HAL_GetTick>
 80085fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008600:	e009      	b.n	8008616 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008602:	f7fe fffb 	bl	80075fc <HAL_GetTick>
 8008606:	4602      	mov	r2, r0
 8008608:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800860c:	1ad3      	subs	r3, r2, r3
 800860e:	2b02      	cmp	r3, #2
 8008610:	d901      	bls.n	8008616 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8008612:	2303      	movs	r3, #3
 8008614:	e18b      	b.n	800892e <HAL_RCC_OscConfig+0xe02>
 8008616:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800861a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800861e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008620:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	fa93 f2a3 	rbit	r2, r3
 800862a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800862e:	601a      	str	r2, [r3, #0]
  return result;
 8008630:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008634:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008636:	fab3 f383 	clz	r3, r3
 800863a:	b2db      	uxtb	r3, r3
 800863c:	095b      	lsrs	r3, r3, #5
 800863e:	b2db      	uxtb	r3, r3
 8008640:	f043 0301 	orr.w	r3, r3, #1
 8008644:	b2db      	uxtb	r3, r3
 8008646:	2b01      	cmp	r3, #1
 8008648:	d102      	bne.n	8008650 <HAL_RCC_OscConfig+0xb24>
 800864a:	4b49      	ldr	r3, [pc, #292]	; (8008770 <HAL_RCC_OscConfig+0xc44>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	e01b      	b.n	8008688 <HAL_RCC_OscConfig+0xb5c>
 8008650:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008654:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008658:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800865a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	fa93 f2a3 	rbit	r2, r3
 8008664:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008668:	601a      	str	r2, [r3, #0]
 800866a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800866e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008672:	601a      	str	r2, [r3, #0]
 8008674:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	fa93 f2a3 	rbit	r2, r3
 800867e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008682:	601a      	str	r2, [r3, #0]
 8008684:	4b3a      	ldr	r3, [pc, #232]	; (8008770 <HAL_RCC_OscConfig+0xc44>)
 8008686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008688:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800868c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008690:	6011      	str	r1, [r2, #0]
 8008692:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8008696:	6812      	ldr	r2, [r2, #0]
 8008698:	fa92 f1a2 	rbit	r1, r2
 800869c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80086a0:	6011      	str	r1, [r2, #0]
  return result;
 80086a2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80086a6:	6812      	ldr	r2, [r2, #0]
 80086a8:	fab2 f282 	clz	r2, r2
 80086ac:	b2d2      	uxtb	r2, r2
 80086ae:	f042 0220 	orr.w	r2, r2, #32
 80086b2:	b2d2      	uxtb	r2, r2
 80086b4:	f002 021f 	and.w	r2, r2, #31
 80086b8:	2101      	movs	r1, #1
 80086ba:	fa01 f202 	lsl.w	r2, r1, r2
 80086be:	4013      	ands	r3, r2
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d19e      	bne.n	8008602 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80086c4:	4b2a      	ldr	r3, [pc, #168]	; (8008770 <HAL_RCC_OscConfig+0xc44>)
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80086cc:	1d3b      	adds	r3, r7, #4
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80086d2:	1d3b      	adds	r3, r7, #4
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	6a1b      	ldr	r3, [r3, #32]
 80086d8:	430b      	orrs	r3, r1
 80086da:	4925      	ldr	r1, [pc, #148]	; (8008770 <HAL_RCC_OscConfig+0xc44>)
 80086dc:	4313      	orrs	r3, r2
 80086de:	604b      	str	r3, [r1, #4]
 80086e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80086e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80086e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	fa93 f2a3 	rbit	r2, r3
 80086f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80086f8:	601a      	str	r2, [r3, #0]
  return result;
 80086fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80086fe:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008700:	fab3 f383 	clz	r3, r3
 8008704:	b2db      	uxtb	r3, r3
 8008706:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800870a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	461a      	mov	r2, r3
 8008712:	2301      	movs	r3, #1
 8008714:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008716:	f7fe ff71 	bl	80075fc <HAL_GetTick>
 800871a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800871e:	e009      	b.n	8008734 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008720:	f7fe ff6c 	bl	80075fc <HAL_GetTick>
 8008724:	4602      	mov	r2, r0
 8008726:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800872a:	1ad3      	subs	r3, r2, r3
 800872c:	2b02      	cmp	r3, #2
 800872e:	d901      	bls.n	8008734 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8008730:	2303      	movs	r3, #3
 8008732:	e0fc      	b.n	800892e <HAL_RCC_OscConfig+0xe02>
 8008734:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008738:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800873c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800873e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	fa93 f2a3 	rbit	r2, r3
 8008748:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800874c:	601a      	str	r2, [r3, #0]
  return result;
 800874e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008752:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008754:	fab3 f383 	clz	r3, r3
 8008758:	b2db      	uxtb	r3, r3
 800875a:	095b      	lsrs	r3, r3, #5
 800875c:	b2db      	uxtb	r3, r3
 800875e:	f043 0301 	orr.w	r3, r3, #1
 8008762:	b2db      	uxtb	r3, r3
 8008764:	2b01      	cmp	r3, #1
 8008766:	d105      	bne.n	8008774 <HAL_RCC_OscConfig+0xc48>
 8008768:	4b01      	ldr	r3, [pc, #4]	; (8008770 <HAL_RCC_OscConfig+0xc44>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	e01e      	b.n	80087ac <HAL_RCC_OscConfig+0xc80>
 800876e:	bf00      	nop
 8008770:	40021000 	.word	0x40021000
 8008774:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008778:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800877c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800877e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	fa93 f2a3 	rbit	r2, r3
 8008788:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800878c:	601a      	str	r2, [r3, #0]
 800878e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008792:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008796:	601a      	str	r2, [r3, #0]
 8008798:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	fa93 f2a3 	rbit	r2, r3
 80087a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80087a6:	601a      	str	r2, [r3, #0]
 80087a8:	4b63      	ldr	r3, [pc, #396]	; (8008938 <HAL_RCC_OscConfig+0xe0c>)
 80087aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ac:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80087b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80087b4:	6011      	str	r1, [r2, #0]
 80087b6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80087ba:	6812      	ldr	r2, [r2, #0]
 80087bc:	fa92 f1a2 	rbit	r1, r2
 80087c0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80087c4:	6011      	str	r1, [r2, #0]
  return result;
 80087c6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80087ca:	6812      	ldr	r2, [r2, #0]
 80087cc:	fab2 f282 	clz	r2, r2
 80087d0:	b2d2      	uxtb	r2, r2
 80087d2:	f042 0220 	orr.w	r2, r2, #32
 80087d6:	b2d2      	uxtb	r2, r2
 80087d8:	f002 021f 	and.w	r2, r2, #31
 80087dc:	2101      	movs	r1, #1
 80087de:	fa01 f202 	lsl.w	r2, r1, r2
 80087e2:	4013      	ands	r3, r2
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d09b      	beq.n	8008720 <HAL_RCC_OscConfig+0xbf4>
 80087e8:	e0a0      	b.n	800892c <HAL_RCC_OscConfig+0xe00>
 80087ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80087ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80087f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	fa93 f2a3 	rbit	r2, r3
 80087fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008802:	601a      	str	r2, [r3, #0]
  return result;
 8008804:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008808:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800880a:	fab3 f383 	clz	r3, r3
 800880e:	b2db      	uxtb	r3, r3
 8008810:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008814:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	461a      	mov	r2, r3
 800881c:	2300      	movs	r3, #0
 800881e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008820:	f7fe feec 	bl	80075fc <HAL_GetTick>
 8008824:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008828:	e009      	b.n	800883e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800882a:	f7fe fee7 	bl	80075fc <HAL_GetTick>
 800882e:	4602      	mov	r2, r0
 8008830:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008834:	1ad3      	subs	r3, r2, r3
 8008836:	2b02      	cmp	r3, #2
 8008838:	d901      	bls.n	800883e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800883a:	2303      	movs	r3, #3
 800883c:	e077      	b.n	800892e <HAL_RCC_OscConfig+0xe02>
 800883e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008842:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008846:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008848:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	fa93 f2a3 	rbit	r2, r3
 8008852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008856:	601a      	str	r2, [r3, #0]
  return result;
 8008858:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800885c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800885e:	fab3 f383 	clz	r3, r3
 8008862:	b2db      	uxtb	r3, r3
 8008864:	095b      	lsrs	r3, r3, #5
 8008866:	b2db      	uxtb	r3, r3
 8008868:	f043 0301 	orr.w	r3, r3, #1
 800886c:	b2db      	uxtb	r3, r3
 800886e:	2b01      	cmp	r3, #1
 8008870:	d102      	bne.n	8008878 <HAL_RCC_OscConfig+0xd4c>
 8008872:	4b31      	ldr	r3, [pc, #196]	; (8008938 <HAL_RCC_OscConfig+0xe0c>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	e01b      	b.n	80088b0 <HAL_RCC_OscConfig+0xd84>
 8008878:	f107 0320 	add.w	r3, r7, #32
 800887c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008880:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008882:	f107 0320 	add.w	r3, r7, #32
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	fa93 f2a3 	rbit	r2, r3
 800888c:	f107 031c 	add.w	r3, r7, #28
 8008890:	601a      	str	r2, [r3, #0]
 8008892:	f107 0318 	add.w	r3, r7, #24
 8008896:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800889a:	601a      	str	r2, [r3, #0]
 800889c:	f107 0318 	add.w	r3, r7, #24
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	fa93 f2a3 	rbit	r2, r3
 80088a6:	f107 0314 	add.w	r3, r7, #20
 80088aa:	601a      	str	r2, [r3, #0]
 80088ac:	4b22      	ldr	r3, [pc, #136]	; (8008938 <HAL_RCC_OscConfig+0xe0c>)
 80088ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b0:	f107 0210 	add.w	r2, r7, #16
 80088b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80088b8:	6011      	str	r1, [r2, #0]
 80088ba:	f107 0210 	add.w	r2, r7, #16
 80088be:	6812      	ldr	r2, [r2, #0]
 80088c0:	fa92 f1a2 	rbit	r1, r2
 80088c4:	f107 020c 	add.w	r2, r7, #12
 80088c8:	6011      	str	r1, [r2, #0]
  return result;
 80088ca:	f107 020c 	add.w	r2, r7, #12
 80088ce:	6812      	ldr	r2, [r2, #0]
 80088d0:	fab2 f282 	clz	r2, r2
 80088d4:	b2d2      	uxtb	r2, r2
 80088d6:	f042 0220 	orr.w	r2, r2, #32
 80088da:	b2d2      	uxtb	r2, r2
 80088dc:	f002 021f 	and.w	r2, r2, #31
 80088e0:	2101      	movs	r1, #1
 80088e2:	fa01 f202 	lsl.w	r2, r1, r2
 80088e6:	4013      	ands	r3, r2
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d19e      	bne.n	800882a <HAL_RCC_OscConfig+0xcfe>
 80088ec:	e01e      	b.n	800892c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80088ee:	1d3b      	adds	r3, r7, #4
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	69db      	ldr	r3, [r3, #28]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d101      	bne.n	80088fc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80088f8:	2301      	movs	r3, #1
 80088fa:	e018      	b.n	800892e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80088fc:	4b0e      	ldr	r3, [pc, #56]	; (8008938 <HAL_RCC_OscConfig+0xe0c>)
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008904:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008908:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800890c:	1d3b      	adds	r3, r7, #4
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	6a1b      	ldr	r3, [r3, #32]
 8008912:	429a      	cmp	r2, r3
 8008914:	d108      	bne.n	8008928 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8008916:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800891a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800891e:	1d3b      	adds	r3, r7, #4
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008924:	429a      	cmp	r2, r3
 8008926:	d001      	beq.n	800892c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	e000      	b.n	800892e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	40021000 	.word	0x40021000

0800893c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b09e      	sub	sp, #120	; 0x78
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8008946:	2300      	movs	r3, #0
 8008948:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d101      	bne.n	8008954 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	e162      	b.n	8008c1a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008954:	4b90      	ldr	r3, [pc, #576]	; (8008b98 <HAL_RCC_ClockConfig+0x25c>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 0307 	and.w	r3, r3, #7
 800895c:	683a      	ldr	r2, [r7, #0]
 800895e:	429a      	cmp	r2, r3
 8008960:	d910      	bls.n	8008984 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008962:	4b8d      	ldr	r3, [pc, #564]	; (8008b98 <HAL_RCC_ClockConfig+0x25c>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f023 0207 	bic.w	r2, r3, #7
 800896a:	498b      	ldr	r1, [pc, #556]	; (8008b98 <HAL_RCC_ClockConfig+0x25c>)
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	4313      	orrs	r3, r2
 8008970:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008972:	4b89      	ldr	r3, [pc, #548]	; (8008b98 <HAL_RCC_ClockConfig+0x25c>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f003 0307 	and.w	r3, r3, #7
 800897a:	683a      	ldr	r2, [r7, #0]
 800897c:	429a      	cmp	r2, r3
 800897e:	d001      	beq.n	8008984 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	e14a      	b.n	8008c1a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f003 0302 	and.w	r3, r3, #2
 800898c:	2b00      	cmp	r3, #0
 800898e:	d008      	beq.n	80089a2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008990:	4b82      	ldr	r3, [pc, #520]	; (8008b9c <HAL_RCC_ClockConfig+0x260>)
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	497f      	ldr	r1, [pc, #508]	; (8008b9c <HAL_RCC_ClockConfig+0x260>)
 800899e:	4313      	orrs	r3, r2
 80089a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f003 0301 	and.w	r3, r3, #1
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f000 80dc 	beq.w	8008b68 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d13c      	bne.n	8008a32 <HAL_RCC_ClockConfig+0xf6>
 80089b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80089bc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80089c0:	fa93 f3a3 	rbit	r3, r3
 80089c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80089c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089c8:	fab3 f383 	clz	r3, r3
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	095b      	lsrs	r3, r3, #5
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	f043 0301 	orr.w	r3, r3, #1
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d102      	bne.n	80089e2 <HAL_RCC_ClockConfig+0xa6>
 80089dc:	4b6f      	ldr	r3, [pc, #444]	; (8008b9c <HAL_RCC_ClockConfig+0x260>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	e00f      	b.n	8008a02 <HAL_RCC_ClockConfig+0xc6>
 80089e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80089e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089ea:	fa93 f3a3 	rbit	r3, r3
 80089ee:	667b      	str	r3, [r7, #100]	; 0x64
 80089f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80089f4:	663b      	str	r3, [r7, #96]	; 0x60
 80089f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80089f8:	fa93 f3a3 	rbit	r3, r3
 80089fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089fe:	4b67      	ldr	r3, [pc, #412]	; (8008b9c <HAL_RCC_ClockConfig+0x260>)
 8008a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008a06:	65ba      	str	r2, [r7, #88]	; 0x58
 8008a08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a0a:	fa92 f2a2 	rbit	r2, r2
 8008a0e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8008a10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a12:	fab2 f282 	clz	r2, r2
 8008a16:	b2d2      	uxtb	r2, r2
 8008a18:	f042 0220 	orr.w	r2, r2, #32
 8008a1c:	b2d2      	uxtb	r2, r2
 8008a1e:	f002 021f 	and.w	r2, r2, #31
 8008a22:	2101      	movs	r1, #1
 8008a24:	fa01 f202 	lsl.w	r2, r1, r2
 8008a28:	4013      	ands	r3, r2
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d17b      	bne.n	8008b26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e0f3      	b.n	8008c1a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	2b02      	cmp	r3, #2
 8008a38:	d13c      	bne.n	8008ab4 <HAL_RCC_ClockConfig+0x178>
 8008a3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a3e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a42:	fa93 f3a3 	rbit	r3, r3
 8008a46:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a4a:	fab3 f383 	clz	r3, r3
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	095b      	lsrs	r3, r3, #5
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	f043 0301 	orr.w	r3, r3, #1
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d102      	bne.n	8008a64 <HAL_RCC_ClockConfig+0x128>
 8008a5e:	4b4f      	ldr	r3, [pc, #316]	; (8008b9c <HAL_RCC_ClockConfig+0x260>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	e00f      	b.n	8008a84 <HAL_RCC_ClockConfig+0x148>
 8008a64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a68:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a6c:	fa93 f3a3 	rbit	r3, r3
 8008a70:	647b      	str	r3, [r7, #68]	; 0x44
 8008a72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a76:	643b      	str	r3, [r7, #64]	; 0x40
 8008a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a7a:	fa93 f3a3 	rbit	r3, r3
 8008a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a80:	4b46      	ldr	r3, [pc, #280]	; (8008b9c <HAL_RCC_ClockConfig+0x260>)
 8008a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008a88:	63ba      	str	r2, [r7, #56]	; 0x38
 8008a8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a8c:	fa92 f2a2 	rbit	r2, r2
 8008a90:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8008a92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a94:	fab2 f282 	clz	r2, r2
 8008a98:	b2d2      	uxtb	r2, r2
 8008a9a:	f042 0220 	orr.w	r2, r2, #32
 8008a9e:	b2d2      	uxtb	r2, r2
 8008aa0:	f002 021f 	and.w	r2, r2, #31
 8008aa4:	2101      	movs	r1, #1
 8008aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8008aaa:	4013      	ands	r3, r2
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d13a      	bne.n	8008b26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e0b2      	b.n	8008c1a <HAL_RCC_ClockConfig+0x2de>
 8008ab4:	2302      	movs	r3, #2
 8008ab6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aba:	fa93 f3a3 	rbit	r3, r3
 8008abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ac2:	fab3 f383 	clz	r3, r3
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	095b      	lsrs	r3, r3, #5
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	f043 0301 	orr.w	r3, r3, #1
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d102      	bne.n	8008adc <HAL_RCC_ClockConfig+0x1a0>
 8008ad6:	4b31      	ldr	r3, [pc, #196]	; (8008b9c <HAL_RCC_ClockConfig+0x260>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	e00d      	b.n	8008af8 <HAL_RCC_ClockConfig+0x1bc>
 8008adc:	2302      	movs	r3, #2
 8008ade:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae2:	fa93 f3a3 	rbit	r3, r3
 8008ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8008ae8:	2302      	movs	r3, #2
 8008aea:	623b      	str	r3, [r7, #32]
 8008aec:	6a3b      	ldr	r3, [r7, #32]
 8008aee:	fa93 f3a3 	rbit	r3, r3
 8008af2:	61fb      	str	r3, [r7, #28]
 8008af4:	4b29      	ldr	r3, [pc, #164]	; (8008b9c <HAL_RCC_ClockConfig+0x260>)
 8008af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af8:	2202      	movs	r2, #2
 8008afa:	61ba      	str	r2, [r7, #24]
 8008afc:	69ba      	ldr	r2, [r7, #24]
 8008afe:	fa92 f2a2 	rbit	r2, r2
 8008b02:	617a      	str	r2, [r7, #20]
  return result;
 8008b04:	697a      	ldr	r2, [r7, #20]
 8008b06:	fab2 f282 	clz	r2, r2
 8008b0a:	b2d2      	uxtb	r2, r2
 8008b0c:	f042 0220 	orr.w	r2, r2, #32
 8008b10:	b2d2      	uxtb	r2, r2
 8008b12:	f002 021f 	and.w	r2, r2, #31
 8008b16:	2101      	movs	r1, #1
 8008b18:	fa01 f202 	lsl.w	r2, r1, r2
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d101      	bne.n	8008b26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	e079      	b.n	8008c1a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008b26:	4b1d      	ldr	r3, [pc, #116]	; (8008b9c <HAL_RCC_ClockConfig+0x260>)
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	f023 0203 	bic.w	r2, r3, #3
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	491a      	ldr	r1, [pc, #104]	; (8008b9c <HAL_RCC_ClockConfig+0x260>)
 8008b34:	4313      	orrs	r3, r2
 8008b36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008b38:	f7fe fd60 	bl	80075fc <HAL_GetTick>
 8008b3c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b3e:	e00a      	b.n	8008b56 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b40:	f7fe fd5c 	bl	80075fc <HAL_GetTick>
 8008b44:	4602      	mov	r2, r0
 8008b46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b48:	1ad3      	subs	r3, r2, r3
 8008b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d901      	bls.n	8008b56 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8008b52:	2303      	movs	r3, #3
 8008b54:	e061      	b.n	8008c1a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b56:	4b11      	ldr	r3, [pc, #68]	; (8008b9c <HAL_RCC_ClockConfig+0x260>)
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	f003 020c 	and.w	r2, r3, #12
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d1eb      	bne.n	8008b40 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008b68:	4b0b      	ldr	r3, [pc, #44]	; (8008b98 <HAL_RCC_ClockConfig+0x25c>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f003 0307 	and.w	r3, r3, #7
 8008b70:	683a      	ldr	r2, [r7, #0]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d214      	bcs.n	8008ba0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b76:	4b08      	ldr	r3, [pc, #32]	; (8008b98 <HAL_RCC_ClockConfig+0x25c>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f023 0207 	bic.w	r2, r3, #7
 8008b7e:	4906      	ldr	r1, [pc, #24]	; (8008b98 <HAL_RCC_ClockConfig+0x25c>)
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b86:	4b04      	ldr	r3, [pc, #16]	; (8008b98 <HAL_RCC_ClockConfig+0x25c>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 0307 	and.w	r3, r3, #7
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d005      	beq.n	8008ba0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	e040      	b.n	8008c1a <HAL_RCC_ClockConfig+0x2de>
 8008b98:	40022000 	.word	0x40022000
 8008b9c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 0304 	and.w	r3, r3, #4
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d008      	beq.n	8008bbe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008bac:	4b1d      	ldr	r3, [pc, #116]	; (8008c24 <HAL_RCC_ClockConfig+0x2e8>)
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	491a      	ldr	r1, [pc, #104]	; (8008c24 <HAL_RCC_ClockConfig+0x2e8>)
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f003 0308 	and.w	r3, r3, #8
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d009      	beq.n	8008bde <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008bca:	4b16      	ldr	r3, [pc, #88]	; (8008c24 <HAL_RCC_ClockConfig+0x2e8>)
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	00db      	lsls	r3, r3, #3
 8008bd8:	4912      	ldr	r1, [pc, #72]	; (8008c24 <HAL_RCC_ClockConfig+0x2e8>)
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008bde:	f000 f829 	bl	8008c34 <HAL_RCC_GetSysClockFreq>
 8008be2:	4601      	mov	r1, r0
 8008be4:	4b0f      	ldr	r3, [pc, #60]	; (8008c24 <HAL_RCC_ClockConfig+0x2e8>)
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008bec:	22f0      	movs	r2, #240	; 0xf0
 8008bee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bf0:	693a      	ldr	r2, [r7, #16]
 8008bf2:	fa92 f2a2 	rbit	r2, r2
 8008bf6:	60fa      	str	r2, [r7, #12]
  return result;
 8008bf8:	68fa      	ldr	r2, [r7, #12]
 8008bfa:	fab2 f282 	clz	r2, r2
 8008bfe:	b2d2      	uxtb	r2, r2
 8008c00:	40d3      	lsrs	r3, r2
 8008c02:	4a09      	ldr	r2, [pc, #36]	; (8008c28 <HAL_RCC_ClockConfig+0x2ec>)
 8008c04:	5cd3      	ldrb	r3, [r2, r3]
 8008c06:	fa21 f303 	lsr.w	r3, r1, r3
 8008c0a:	4a08      	ldr	r2, [pc, #32]	; (8008c2c <HAL_RCC_ClockConfig+0x2f0>)
 8008c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8008c0e:	4b08      	ldr	r3, [pc, #32]	; (8008c30 <HAL_RCC_ClockConfig+0x2f4>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7fe fcae 	bl	8007574 <HAL_InitTick>
  
  return HAL_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3778      	adds	r7, #120	; 0x78
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	40021000 	.word	0x40021000
 8008c28:	0800abf4 	.word	0x0800abf4
 8008c2c:	20001c7c 	.word	0x20001c7c
 8008c30:	20001c80 	.word	0x20001c80

08008c34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b08b      	sub	sp, #44	; 0x2c
 8008c38:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	61fb      	str	r3, [r7, #28]
 8008c3e:	2300      	movs	r3, #0
 8008c40:	61bb      	str	r3, [r7, #24]
 8008c42:	2300      	movs	r3, #0
 8008c44:	627b      	str	r3, [r7, #36]	; 0x24
 8008c46:	2300      	movs	r3, #0
 8008c48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8008c4e:	4b29      	ldr	r3, [pc, #164]	; (8008cf4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	f003 030c 	and.w	r3, r3, #12
 8008c5a:	2b04      	cmp	r3, #4
 8008c5c:	d002      	beq.n	8008c64 <HAL_RCC_GetSysClockFreq+0x30>
 8008c5e:	2b08      	cmp	r3, #8
 8008c60:	d003      	beq.n	8008c6a <HAL_RCC_GetSysClockFreq+0x36>
 8008c62:	e03c      	b.n	8008cde <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008c64:	4b24      	ldr	r3, [pc, #144]	; (8008cf8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008c66:	623b      	str	r3, [r7, #32]
      break;
 8008c68:	e03c      	b.n	8008ce4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8008c70:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8008c74:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c76:	68ba      	ldr	r2, [r7, #8]
 8008c78:	fa92 f2a2 	rbit	r2, r2
 8008c7c:	607a      	str	r2, [r7, #4]
  return result;
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	fab2 f282 	clz	r2, r2
 8008c84:	b2d2      	uxtb	r2, r2
 8008c86:	40d3      	lsrs	r3, r2
 8008c88:	4a1c      	ldr	r2, [pc, #112]	; (8008cfc <HAL_RCC_GetSysClockFreq+0xc8>)
 8008c8a:	5cd3      	ldrb	r3, [r2, r3]
 8008c8c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8008c8e:	4b19      	ldr	r3, [pc, #100]	; (8008cf4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c92:	f003 030f 	and.w	r3, r3, #15
 8008c96:	220f      	movs	r2, #15
 8008c98:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c9a:	693a      	ldr	r2, [r7, #16]
 8008c9c:	fa92 f2a2 	rbit	r2, r2
 8008ca0:	60fa      	str	r2, [r7, #12]
  return result;
 8008ca2:	68fa      	ldr	r2, [r7, #12]
 8008ca4:	fab2 f282 	clz	r2, r2
 8008ca8:	b2d2      	uxtb	r2, r2
 8008caa:	40d3      	lsrs	r3, r2
 8008cac:	4a14      	ldr	r2, [pc, #80]	; (8008d00 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008cae:	5cd3      	ldrb	r3, [r2, r3]
 8008cb0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d008      	beq.n	8008cce <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008cbc:	4a0e      	ldr	r2, [pc, #56]	; (8008cf8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	fb02 f303 	mul.w	r3, r2, r3
 8008cca:	627b      	str	r3, [r7, #36]	; 0x24
 8008ccc:	e004      	b.n	8008cd8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	4a0c      	ldr	r2, [pc, #48]	; (8008d04 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008cd2:	fb02 f303 	mul.w	r3, r2, r3
 8008cd6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8008cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cda:	623b      	str	r3, [r7, #32]
      break;
 8008cdc:	e002      	b.n	8008ce4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008cde:	4b06      	ldr	r3, [pc, #24]	; (8008cf8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008ce0:	623b      	str	r3, [r7, #32]
      break;
 8008ce2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008ce4:	6a3b      	ldr	r3, [r7, #32]
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	372c      	adds	r7, #44	; 0x2c
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	40021000 	.word	0x40021000
 8008cf8:	007a1200 	.word	0x007a1200
 8008cfc:	0800ac0c 	.word	0x0800ac0c
 8008d00:	0800ac1c 	.word	0x0800ac1c
 8008d04:	003d0900 	.word	0x003d0900

08008d08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d0c:	4b03      	ldr	r3, [pc, #12]	; (8008d1c <HAL_RCC_GetHCLKFreq+0x14>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr
 8008d1a:	bf00      	nop
 8008d1c:	20001c7c 	.word	0x20001c7c

08008d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8008d26:	f7ff ffef 	bl	8008d08 <HAL_RCC_GetHCLKFreq>
 8008d2a:	4601      	mov	r1, r0
 8008d2c:	4b0b      	ldr	r3, [pc, #44]	; (8008d5c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d34:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008d38:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	fa92 f2a2 	rbit	r2, r2
 8008d40:	603a      	str	r2, [r7, #0]
  return result;
 8008d42:	683a      	ldr	r2, [r7, #0]
 8008d44:	fab2 f282 	clz	r2, r2
 8008d48:	b2d2      	uxtb	r2, r2
 8008d4a:	40d3      	lsrs	r3, r2
 8008d4c:	4a04      	ldr	r2, [pc, #16]	; (8008d60 <HAL_RCC_GetPCLK1Freq+0x40>)
 8008d4e:	5cd3      	ldrb	r3, [r2, r3]
 8008d50:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8008d54:	4618      	mov	r0, r3
 8008d56:	3708      	adds	r7, #8
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	40021000 	.word	0x40021000
 8008d60:	0800ac04 	.word	0x0800ac04

08008d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8008d6a:	f7ff ffcd 	bl	8008d08 <HAL_RCC_GetHCLKFreq>
 8008d6e:	4601      	mov	r1, r0
 8008d70:	4b0b      	ldr	r3, [pc, #44]	; (8008da0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8008d78:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008d7c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	fa92 f2a2 	rbit	r2, r2
 8008d84:	603a      	str	r2, [r7, #0]
  return result;
 8008d86:	683a      	ldr	r2, [r7, #0]
 8008d88:	fab2 f282 	clz	r2, r2
 8008d8c:	b2d2      	uxtb	r2, r2
 8008d8e:	40d3      	lsrs	r3, r2
 8008d90:	4a04      	ldr	r2, [pc, #16]	; (8008da4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8008d92:	5cd3      	ldrb	r3, [r2, r3]
 8008d94:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3708      	adds	r7, #8
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	40021000 	.word	0x40021000
 8008da4:	0800ac04 	.word	0x0800ac04

08008da8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b092      	sub	sp, #72	; 0x48
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008db0:	2300      	movs	r3, #0
 8008db2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8008db4:	2300      	movs	r3, #0
 8008db6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8008db8:	2300      	movs	r3, #0
 8008dba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	f000 80d4 	beq.w	8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008dcc:	4b4e      	ldr	r3, [pc, #312]	; (8008f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008dce:	69db      	ldr	r3, [r3, #28]
 8008dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d10e      	bne.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008dd8:	4b4b      	ldr	r3, [pc, #300]	; (8008f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008dda:	69db      	ldr	r3, [r3, #28]
 8008ddc:	4a4a      	ldr	r2, [pc, #296]	; (8008f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008de2:	61d3      	str	r3, [r2, #28]
 8008de4:	4b48      	ldr	r3, [pc, #288]	; (8008f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008de6:	69db      	ldr	r3, [r3, #28]
 8008de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dec:	60bb      	str	r3, [r7, #8]
 8008dee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008df0:	2301      	movs	r3, #1
 8008df2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008df6:	4b45      	ldr	r3, [pc, #276]	; (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d118      	bne.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008e02:	4b42      	ldr	r3, [pc, #264]	; (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a41      	ldr	r2, [pc, #260]	; (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e0c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e0e:	f7fe fbf5 	bl	80075fc <HAL_GetTick>
 8008e12:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e14:	e008      	b.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e16:	f7fe fbf1 	bl	80075fc <HAL_GetTick>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e1e:	1ad3      	subs	r3, r2, r3
 8008e20:	2b64      	cmp	r3, #100	; 0x64
 8008e22:	d901      	bls.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8008e24:	2303      	movs	r3, #3
 8008e26:	e169      	b.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e28:	4b38      	ldr	r3, [pc, #224]	; (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d0f0      	beq.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008e34:	4b34      	ldr	r3, [pc, #208]	; (8008f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008e36:	6a1b      	ldr	r3, [r3, #32]
 8008e38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f000 8084 	beq.w	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d07c      	beq.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008e54:	4b2c      	ldr	r3, [pc, #176]	; (8008f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008e56:	6a1b      	ldr	r3, [r3, #32]
 8008e58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e62:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e66:	fa93 f3a3 	rbit	r3, r3
 8008e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008e6e:	fab3 f383 	clz	r3, r3
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	461a      	mov	r2, r3
 8008e76:	4b26      	ldr	r3, [pc, #152]	; (8008f10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008e78:	4413      	add	r3, r2
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	2301      	movs	r3, #1
 8008e80:	6013      	str	r3, [r2, #0]
 8008e82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e86:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8a:	fa93 f3a3 	rbit	r3, r3
 8008e8e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008e92:	fab3 f383 	clz	r3, r3
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	461a      	mov	r2, r3
 8008e9a:	4b1d      	ldr	r3, [pc, #116]	; (8008f10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008e9c:	4413      	add	r3, r2
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008ea6:	4a18      	ldr	r2, [pc, #96]	; (8008f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eaa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eae:	f003 0301 	and.w	r3, r3, #1
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d04b      	beq.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008eb6:	f7fe fba1 	bl	80075fc <HAL_GetTick>
 8008eba:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ebc:	e00a      	b.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ebe:	f7fe fb9d 	bl	80075fc <HAL_GetTick>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ec6:	1ad3      	subs	r3, r2, r3
 8008ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d901      	bls.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008ed0:	2303      	movs	r3, #3
 8008ed2:	e113      	b.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x354>
 8008ed4:	2302      	movs	r3, #2
 8008ed6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eda:	fa93 f3a3 	rbit	r3, r3
 8008ede:	627b      	str	r3, [r7, #36]	; 0x24
 8008ee0:	2302      	movs	r3, #2
 8008ee2:	623b      	str	r3, [r7, #32]
 8008ee4:	6a3b      	ldr	r3, [r7, #32]
 8008ee6:	fa93 f3a3 	rbit	r3, r3
 8008eea:	61fb      	str	r3, [r7, #28]
  return result;
 8008eec:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008eee:	fab3 f383 	clz	r3, r3
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	095b      	lsrs	r3, r3, #5
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	f043 0302 	orr.w	r3, r3, #2
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d108      	bne.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8008f02:	4b01      	ldr	r3, [pc, #4]	; (8008f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008f04:	6a1b      	ldr	r3, [r3, #32]
 8008f06:	e00d      	b.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8008f08:	40021000 	.word	0x40021000
 8008f0c:	40007000 	.word	0x40007000
 8008f10:	10908100 	.word	0x10908100
 8008f14:	2302      	movs	r3, #2
 8008f16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f18:	69bb      	ldr	r3, [r7, #24]
 8008f1a:	fa93 f3a3 	rbit	r3, r3
 8008f1e:	617b      	str	r3, [r7, #20]
 8008f20:	4b78      	ldr	r3, [pc, #480]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f24:	2202      	movs	r2, #2
 8008f26:	613a      	str	r2, [r7, #16]
 8008f28:	693a      	ldr	r2, [r7, #16]
 8008f2a:	fa92 f2a2 	rbit	r2, r2
 8008f2e:	60fa      	str	r2, [r7, #12]
  return result;
 8008f30:	68fa      	ldr	r2, [r7, #12]
 8008f32:	fab2 f282 	clz	r2, r2
 8008f36:	b2d2      	uxtb	r2, r2
 8008f38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f3c:	b2d2      	uxtb	r2, r2
 8008f3e:	f002 021f 	and.w	r2, r2, #31
 8008f42:	2101      	movs	r1, #1
 8008f44:	fa01 f202 	lsl.w	r2, r1, r2
 8008f48:	4013      	ands	r3, r2
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d0b7      	beq.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8008f4e:	4b6d      	ldr	r3, [pc, #436]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008f50:	6a1b      	ldr	r3, [r3, #32]
 8008f52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	496a      	ldr	r1, [pc, #424]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008f60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d105      	bne.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f68:	4b66      	ldr	r3, [pc, #408]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008f6a:	69db      	ldr	r3, [r3, #28]
 8008f6c:	4a65      	ldr	r2, [pc, #404]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008f6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f72:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f003 0301 	and.w	r3, r3, #1
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d008      	beq.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008f80:	4b60      	ldr	r3, [pc, #384]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f84:	f023 0203 	bic.w	r2, r3, #3
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	495d      	ldr	r1, [pc, #372]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f003 0302 	and.w	r3, r3, #2
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d008      	beq.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008f9e:	4b59      	ldr	r3, [pc, #356]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fa2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	4956      	ldr	r1, [pc, #344]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008fac:	4313      	orrs	r3, r2
 8008fae:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f003 0304 	and.w	r3, r3, #4
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d008      	beq.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008fbc:	4b51      	ldr	r3, [pc, #324]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fc0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	691b      	ldr	r3, [r3, #16]
 8008fc8:	494e      	ldr	r1, [pc, #312]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f003 0320 	and.w	r3, r3, #32
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d008      	beq.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008fda:	4b4a      	ldr	r3, [pc, #296]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fde:	f023 0210 	bic.w	r2, r3, #16
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	69db      	ldr	r3, [r3, #28]
 8008fe6:	4947      	ldr	r1, [pc, #284]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d008      	beq.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8008ff8:	4b42      	ldr	r3, [pc, #264]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009004:	493f      	ldr	r1, [pc, #252]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009006:	4313      	orrs	r3, r2
 8009008:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009012:	2b00      	cmp	r3, #0
 8009014:	d008      	beq.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009016:	4b3b      	ldr	r3, [pc, #236]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800901a:	f023 0220 	bic.w	r2, r3, #32
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a1b      	ldr	r3, [r3, #32]
 8009022:	4938      	ldr	r1, [pc, #224]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009024:	4313      	orrs	r3, r2
 8009026:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f003 0308 	and.w	r3, r3, #8
 8009030:	2b00      	cmp	r3, #0
 8009032:	d008      	beq.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009034:	4b33      	ldr	r3, [pc, #204]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009038:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	695b      	ldr	r3, [r3, #20]
 8009040:	4930      	ldr	r1, [pc, #192]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009042:	4313      	orrs	r3, r2
 8009044:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f003 0310 	and.w	r3, r3, #16
 800904e:	2b00      	cmp	r3, #0
 8009050:	d008      	beq.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009052:	4b2c      	ldr	r3, [pc, #176]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009056:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	699b      	ldr	r3, [r3, #24]
 800905e:	4929      	ldr	r1, [pc, #164]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009060:	4313      	orrs	r3, r2
 8009062:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800906c:	2b00      	cmp	r3, #0
 800906e:	d008      	beq.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009070:	4b24      	ldr	r3, [pc, #144]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907c:	4921      	ldr	r1, [pc, #132]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800907e:	4313      	orrs	r3, r2
 8009080:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800908a:	2b00      	cmp	r3, #0
 800908c:	d008      	beq.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800908e:	4b1d      	ldr	r3, [pc, #116]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009092:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909a:	491a      	ldr	r1, [pc, #104]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800909c:	4313      	orrs	r3, r2
 800909e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d008      	beq.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80090ac:	4b15      	ldr	r3, [pc, #84]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80090ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090b8:	4912      	ldr	r1, [pc, #72]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80090ba:	4313      	orrs	r3, r2
 80090bc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d008      	beq.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80090ca:	4b0e      	ldr	r3, [pc, #56]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80090cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090d6:	490b      	ldr	r1, [pc, #44]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80090d8:	4313      	orrs	r3, r2
 80090da:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d008      	beq.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80090e8:	4b06      	ldr	r3, [pc, #24]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80090ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090f4:	4903      	ldr	r1, [pc, #12]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80090f6:	4313      	orrs	r3, r2
 80090f8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80090fa:	2300      	movs	r3, #0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3748      	adds	r7, #72	; 0x48
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}
 8009104:	40021000 	.word	0x40021000

08009108 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d101      	bne.n	800911a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009116:	2301      	movs	r3, #1
 8009118:	e049      	b.n	80091ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009120:	b2db      	uxtb	r3, r3
 8009122:	2b00      	cmp	r3, #0
 8009124:	d106      	bne.n	8009134 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f7fd ff7e 	bl	8007030 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2202      	movs	r2, #2
 8009138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	3304      	adds	r3, #4
 8009144:	4619      	mov	r1, r3
 8009146:	4610      	mov	r0, r2
 8009148:	f000 faa8 	bl	800969c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2201      	movs	r2, #1
 8009158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2201      	movs	r2, #1
 8009170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2201      	movs	r2, #1
 8009178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2201      	movs	r2, #1
 8009188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2201      	movs	r2, #1
 80091a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2201      	movs	r2, #1
 80091a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091ac:	2300      	movs	r3, #0
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3708      	adds	r7, #8
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
	...

080091b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b085      	sub	sp, #20
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d001      	beq.n	80091d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80091cc:	2301      	movs	r3, #1
 80091ce:	e042      	b.n	8009256 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2202      	movs	r2, #2
 80091d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a21      	ldr	r2, [pc, #132]	; (8009264 <HAL_TIM_Base_Start+0xac>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d018      	beq.n	8009214 <HAL_TIM_Base_Start+0x5c>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091ea:	d013      	beq.n	8009214 <HAL_TIM_Base_Start+0x5c>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a1d      	ldr	r2, [pc, #116]	; (8009268 <HAL_TIM_Base_Start+0xb0>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d00e      	beq.n	8009214 <HAL_TIM_Base_Start+0x5c>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a1c      	ldr	r2, [pc, #112]	; (800926c <HAL_TIM_Base_Start+0xb4>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d009      	beq.n	8009214 <HAL_TIM_Base_Start+0x5c>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a1a      	ldr	r2, [pc, #104]	; (8009270 <HAL_TIM_Base_Start+0xb8>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d004      	beq.n	8009214 <HAL_TIM_Base_Start+0x5c>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4a19      	ldr	r2, [pc, #100]	; (8009274 <HAL_TIM_Base_Start+0xbc>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d115      	bne.n	8009240 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	689a      	ldr	r2, [r3, #8]
 800921a:	4b17      	ldr	r3, [pc, #92]	; (8009278 <HAL_TIM_Base_Start+0xc0>)
 800921c:	4013      	ands	r3, r2
 800921e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2b06      	cmp	r3, #6
 8009224:	d015      	beq.n	8009252 <HAL_TIM_Base_Start+0x9a>
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800922c:	d011      	beq.n	8009252 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f042 0201 	orr.w	r2, r2, #1
 800923c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800923e:	e008      	b.n	8009252 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f042 0201 	orr.w	r2, r2, #1
 800924e:	601a      	str	r2, [r3, #0]
 8009250:	e000      	b.n	8009254 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009252:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009254:	2300      	movs	r3, #0
}
 8009256:	4618      	mov	r0, r3
 8009258:	3714      	adds	r7, #20
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr
 8009262:	bf00      	nop
 8009264:	40012c00 	.word	0x40012c00
 8009268:	40000400 	.word	0x40000400
 800926c:	40000800 	.word	0x40000800
 8009270:	40013400 	.word	0x40013400
 8009274:	40014000 	.word	0x40014000
 8009278:	00010007 	.word	0x00010007

0800927c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b082      	sub	sp, #8
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	f003 0302 	and.w	r3, r3, #2
 800928e:	2b02      	cmp	r3, #2
 8009290:	d122      	bne.n	80092d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	f003 0302 	and.w	r3, r3, #2
 800929c:	2b02      	cmp	r3, #2
 800929e:	d11b      	bne.n	80092d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f06f 0202 	mvn.w	r2, #2
 80092a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2201      	movs	r2, #1
 80092ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	699b      	ldr	r3, [r3, #24]
 80092b6:	f003 0303 	and.w	r3, r3, #3
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d003      	beq.n	80092c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 f9ce 	bl	8009660 <HAL_TIM_IC_CaptureCallback>
 80092c4:	e005      	b.n	80092d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 f9c0 	bl	800964c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 f9d1 	bl	8009674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	691b      	ldr	r3, [r3, #16]
 80092de:	f003 0304 	and.w	r3, r3, #4
 80092e2:	2b04      	cmp	r3, #4
 80092e4:	d122      	bne.n	800932c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	f003 0304 	and.w	r3, r3, #4
 80092f0:	2b04      	cmp	r3, #4
 80092f2:	d11b      	bne.n	800932c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f06f 0204 	mvn.w	r2, #4
 80092fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2202      	movs	r2, #2
 8009302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	699b      	ldr	r3, [r3, #24]
 800930a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800930e:	2b00      	cmp	r3, #0
 8009310:	d003      	beq.n	800931a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 f9a4 	bl	8009660 <HAL_TIM_IC_CaptureCallback>
 8009318:	e005      	b.n	8009326 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 f996 	bl	800964c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 f9a7 	bl	8009674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	f003 0308 	and.w	r3, r3, #8
 8009336:	2b08      	cmp	r3, #8
 8009338:	d122      	bne.n	8009380 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	f003 0308 	and.w	r3, r3, #8
 8009344:	2b08      	cmp	r3, #8
 8009346:	d11b      	bne.n	8009380 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f06f 0208 	mvn.w	r2, #8
 8009350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2204      	movs	r2, #4
 8009356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	69db      	ldr	r3, [r3, #28]
 800935e:	f003 0303 	and.w	r3, r3, #3
 8009362:	2b00      	cmp	r3, #0
 8009364:	d003      	beq.n	800936e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 f97a 	bl	8009660 <HAL_TIM_IC_CaptureCallback>
 800936c:	e005      	b.n	800937a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 f96c 	bl	800964c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 f97d 	bl	8009674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2200      	movs	r2, #0
 800937e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	f003 0310 	and.w	r3, r3, #16
 800938a:	2b10      	cmp	r3, #16
 800938c:	d122      	bne.n	80093d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	f003 0310 	and.w	r3, r3, #16
 8009398:	2b10      	cmp	r3, #16
 800939a:	d11b      	bne.n	80093d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f06f 0210 	mvn.w	r2, #16
 80093a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2208      	movs	r2, #8
 80093aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	69db      	ldr	r3, [r3, #28]
 80093b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d003      	beq.n	80093c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 f950 	bl	8009660 <HAL_TIM_IC_CaptureCallback>
 80093c0:	e005      	b.n	80093ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 f942 	bl	800964c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 f953 	bl	8009674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2200      	movs	r2, #0
 80093d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	691b      	ldr	r3, [r3, #16]
 80093da:	f003 0301 	and.w	r3, r3, #1
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d10e      	bne.n	8009400 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	68db      	ldr	r3, [r3, #12]
 80093e8:	f003 0301 	and.w	r3, r3, #1
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d107      	bne.n	8009400 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f06f 0201 	mvn.w	r2, #1
 80093f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f7fd fddc 	bl	8006fb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	691b      	ldr	r3, [r3, #16]
 8009406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800940a:	2b80      	cmp	r3, #128	; 0x80
 800940c:	d10e      	bne.n	800942c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	68db      	ldr	r3, [r3, #12]
 8009414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009418:	2b80      	cmp	r3, #128	; 0x80
 800941a:	d107      	bne.n	800942c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 faec 	bl	8009a04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	691b      	ldr	r3, [r3, #16]
 8009432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800943a:	d10e      	bne.n	800945a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009446:	2b80      	cmp	r3, #128	; 0x80
 8009448:	d107      	bne.n	800945a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 fadf 	bl	8009a18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	691b      	ldr	r3, [r3, #16]
 8009460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009464:	2b40      	cmp	r3, #64	; 0x40
 8009466:	d10e      	bne.n	8009486 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009472:	2b40      	cmp	r3, #64	; 0x40
 8009474:	d107      	bne.n	8009486 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800947e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 f901 	bl	8009688 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	691b      	ldr	r3, [r3, #16]
 800948c:	f003 0320 	and.w	r3, r3, #32
 8009490:	2b20      	cmp	r3, #32
 8009492:	d10e      	bne.n	80094b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	f003 0320 	and.w	r3, r3, #32
 800949e:	2b20      	cmp	r3, #32
 80094a0:	d107      	bne.n	80094b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f06f 0220 	mvn.w	r2, #32
 80094aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 fa9f 	bl	80099f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80094b2:	bf00      	nop
 80094b4:	3708      	adds	r7, #8
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b084      	sub	sp, #16
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
 80094c2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80094c4:	2300      	movs	r3, #0
 80094c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d101      	bne.n	80094d6 <HAL_TIM_ConfigClockSource+0x1c>
 80094d2:	2302      	movs	r3, #2
 80094d4:	e0b6      	b.n	8009644 <HAL_TIM_ConfigClockSource+0x18a>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2201      	movs	r2, #1
 80094da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2202      	movs	r2, #2
 80094e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80094f4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80094f8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009500:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	68ba      	ldr	r2, [r7, #8]
 8009508:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009512:	d03e      	beq.n	8009592 <HAL_TIM_ConfigClockSource+0xd8>
 8009514:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009518:	f200 8087 	bhi.w	800962a <HAL_TIM_ConfigClockSource+0x170>
 800951c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009520:	f000 8086 	beq.w	8009630 <HAL_TIM_ConfigClockSource+0x176>
 8009524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009528:	d87f      	bhi.n	800962a <HAL_TIM_ConfigClockSource+0x170>
 800952a:	2b70      	cmp	r3, #112	; 0x70
 800952c:	d01a      	beq.n	8009564 <HAL_TIM_ConfigClockSource+0xaa>
 800952e:	2b70      	cmp	r3, #112	; 0x70
 8009530:	d87b      	bhi.n	800962a <HAL_TIM_ConfigClockSource+0x170>
 8009532:	2b60      	cmp	r3, #96	; 0x60
 8009534:	d050      	beq.n	80095d8 <HAL_TIM_ConfigClockSource+0x11e>
 8009536:	2b60      	cmp	r3, #96	; 0x60
 8009538:	d877      	bhi.n	800962a <HAL_TIM_ConfigClockSource+0x170>
 800953a:	2b50      	cmp	r3, #80	; 0x50
 800953c:	d03c      	beq.n	80095b8 <HAL_TIM_ConfigClockSource+0xfe>
 800953e:	2b50      	cmp	r3, #80	; 0x50
 8009540:	d873      	bhi.n	800962a <HAL_TIM_ConfigClockSource+0x170>
 8009542:	2b40      	cmp	r3, #64	; 0x40
 8009544:	d058      	beq.n	80095f8 <HAL_TIM_ConfigClockSource+0x13e>
 8009546:	2b40      	cmp	r3, #64	; 0x40
 8009548:	d86f      	bhi.n	800962a <HAL_TIM_ConfigClockSource+0x170>
 800954a:	2b30      	cmp	r3, #48	; 0x30
 800954c:	d064      	beq.n	8009618 <HAL_TIM_ConfigClockSource+0x15e>
 800954e:	2b30      	cmp	r3, #48	; 0x30
 8009550:	d86b      	bhi.n	800962a <HAL_TIM_ConfigClockSource+0x170>
 8009552:	2b20      	cmp	r3, #32
 8009554:	d060      	beq.n	8009618 <HAL_TIM_ConfigClockSource+0x15e>
 8009556:	2b20      	cmp	r3, #32
 8009558:	d867      	bhi.n	800962a <HAL_TIM_ConfigClockSource+0x170>
 800955a:	2b00      	cmp	r3, #0
 800955c:	d05c      	beq.n	8009618 <HAL_TIM_ConfigClockSource+0x15e>
 800955e:	2b10      	cmp	r3, #16
 8009560:	d05a      	beq.n	8009618 <HAL_TIM_ConfigClockSource+0x15e>
 8009562:	e062      	b.n	800962a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6818      	ldr	r0, [r3, #0]
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	6899      	ldr	r1, [r3, #8]
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	685a      	ldr	r2, [r3, #4]
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	f000 f99c 	bl	80098b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009586:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	68ba      	ldr	r2, [r7, #8]
 800958e:	609a      	str	r2, [r3, #8]
      break;
 8009590:	e04f      	b.n	8009632 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6818      	ldr	r0, [r3, #0]
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	6899      	ldr	r1, [r3, #8]
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	685a      	ldr	r2, [r3, #4]
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	f000 f985 	bl	80098b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	689a      	ldr	r2, [r3, #8]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80095b4:	609a      	str	r2, [r3, #8]
      break;
 80095b6:	e03c      	b.n	8009632 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6818      	ldr	r0, [r3, #0]
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	6859      	ldr	r1, [r3, #4]
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	461a      	mov	r2, r3
 80095c6:	f000 f8f9 	bl	80097bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	2150      	movs	r1, #80	; 0x50
 80095d0:	4618      	mov	r0, r3
 80095d2:	f000 f952 	bl	800987a <TIM_ITRx_SetConfig>
      break;
 80095d6:	e02c      	b.n	8009632 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6818      	ldr	r0, [r3, #0]
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	6859      	ldr	r1, [r3, #4]
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	68db      	ldr	r3, [r3, #12]
 80095e4:	461a      	mov	r2, r3
 80095e6:	f000 f918 	bl	800981a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2160      	movs	r1, #96	; 0x60
 80095f0:	4618      	mov	r0, r3
 80095f2:	f000 f942 	bl	800987a <TIM_ITRx_SetConfig>
      break;
 80095f6:	e01c      	b.n	8009632 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6818      	ldr	r0, [r3, #0]
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	6859      	ldr	r1, [r3, #4]
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	461a      	mov	r2, r3
 8009606:	f000 f8d9 	bl	80097bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2140      	movs	r1, #64	; 0x40
 8009610:	4618      	mov	r0, r3
 8009612:	f000 f932 	bl	800987a <TIM_ITRx_SetConfig>
      break;
 8009616:	e00c      	b.n	8009632 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4619      	mov	r1, r3
 8009622:	4610      	mov	r0, r2
 8009624:	f000 f929 	bl	800987a <TIM_ITRx_SetConfig>
      break;
 8009628:	e003      	b.n	8009632 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800962a:	2301      	movs	r3, #1
 800962c:	73fb      	strb	r3, [r7, #15]
      break;
 800962e:	e000      	b.n	8009632 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009630:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2201      	movs	r2, #1
 8009636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009642:	7bfb      	ldrb	r3, [r7, #15]
}
 8009644:	4618      	mov	r0, r3
 8009646:	3710      	adds	r7, #16
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009654:	bf00      	nop
 8009656:	370c      	adds	r7, #12
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009668:	bf00      	nop
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800967c:	bf00      	nop
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009690:	bf00      	nop
 8009692:	370c      	adds	r7, #12
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800969c:	b480      	push	{r7}
 800969e:	b085      	sub	sp, #20
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4a3c      	ldr	r2, [pc, #240]	; (80097a0 <TIM_Base_SetConfig+0x104>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d00f      	beq.n	80096d4 <TIM_Base_SetConfig+0x38>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096ba:	d00b      	beq.n	80096d4 <TIM_Base_SetConfig+0x38>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	4a39      	ldr	r2, [pc, #228]	; (80097a4 <TIM_Base_SetConfig+0x108>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d007      	beq.n	80096d4 <TIM_Base_SetConfig+0x38>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	4a38      	ldr	r2, [pc, #224]	; (80097a8 <TIM_Base_SetConfig+0x10c>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d003      	beq.n	80096d4 <TIM_Base_SetConfig+0x38>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	4a37      	ldr	r2, [pc, #220]	; (80097ac <TIM_Base_SetConfig+0x110>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d108      	bne.n	80096e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	4313      	orrs	r3, r2
 80096e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4a2d      	ldr	r2, [pc, #180]	; (80097a0 <TIM_Base_SetConfig+0x104>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d01b      	beq.n	8009726 <TIM_Base_SetConfig+0x8a>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096f4:	d017      	beq.n	8009726 <TIM_Base_SetConfig+0x8a>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4a2a      	ldr	r2, [pc, #168]	; (80097a4 <TIM_Base_SetConfig+0x108>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d013      	beq.n	8009726 <TIM_Base_SetConfig+0x8a>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	4a29      	ldr	r2, [pc, #164]	; (80097a8 <TIM_Base_SetConfig+0x10c>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d00f      	beq.n	8009726 <TIM_Base_SetConfig+0x8a>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	4a28      	ldr	r2, [pc, #160]	; (80097ac <TIM_Base_SetConfig+0x110>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d00b      	beq.n	8009726 <TIM_Base_SetConfig+0x8a>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	4a27      	ldr	r2, [pc, #156]	; (80097b0 <TIM_Base_SetConfig+0x114>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d007      	beq.n	8009726 <TIM_Base_SetConfig+0x8a>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	4a26      	ldr	r2, [pc, #152]	; (80097b4 <TIM_Base_SetConfig+0x118>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d003      	beq.n	8009726 <TIM_Base_SetConfig+0x8a>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	4a25      	ldr	r2, [pc, #148]	; (80097b8 <TIM_Base_SetConfig+0x11c>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d108      	bne.n	8009738 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800972c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	68fa      	ldr	r2, [r7, #12]
 8009734:	4313      	orrs	r3, r2
 8009736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	695b      	ldr	r3, [r3, #20]
 8009742:	4313      	orrs	r3, r2
 8009744:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	68fa      	ldr	r2, [r7, #12]
 800974a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	689a      	ldr	r2, [r3, #8]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	4a10      	ldr	r2, [pc, #64]	; (80097a0 <TIM_Base_SetConfig+0x104>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d00f      	beq.n	8009784 <TIM_Base_SetConfig+0xe8>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	4a11      	ldr	r2, [pc, #68]	; (80097ac <TIM_Base_SetConfig+0x110>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d00b      	beq.n	8009784 <TIM_Base_SetConfig+0xe8>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	4a10      	ldr	r2, [pc, #64]	; (80097b0 <TIM_Base_SetConfig+0x114>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d007      	beq.n	8009784 <TIM_Base_SetConfig+0xe8>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a0f      	ldr	r2, [pc, #60]	; (80097b4 <TIM_Base_SetConfig+0x118>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d003      	beq.n	8009784 <TIM_Base_SetConfig+0xe8>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	4a0e      	ldr	r2, [pc, #56]	; (80097b8 <TIM_Base_SetConfig+0x11c>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d103      	bne.n	800978c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	691a      	ldr	r2, [r3, #16]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2201      	movs	r2, #1
 8009790:	615a      	str	r2, [r3, #20]
}
 8009792:	bf00      	nop
 8009794:	3714      	adds	r7, #20
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr
 800979e:	bf00      	nop
 80097a0:	40012c00 	.word	0x40012c00
 80097a4:	40000400 	.word	0x40000400
 80097a8:	40000800 	.word	0x40000800
 80097ac:	40013400 	.word	0x40013400
 80097b0:	40014000 	.word	0x40014000
 80097b4:	40014400 	.word	0x40014400
 80097b8:	40014800 	.word	0x40014800

080097bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097bc:	b480      	push	{r7}
 80097be:	b087      	sub	sp, #28
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	60f8      	str	r0, [r7, #12]
 80097c4:	60b9      	str	r1, [r7, #8]
 80097c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	6a1b      	ldr	r3, [r3, #32]
 80097cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6a1b      	ldr	r3, [r3, #32]
 80097d2:	f023 0201 	bic.w	r2, r3, #1
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	699b      	ldr	r3, [r3, #24]
 80097de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	011b      	lsls	r3, r3, #4
 80097ec:	693a      	ldr	r2, [r7, #16]
 80097ee:	4313      	orrs	r3, r2
 80097f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	f023 030a 	bic.w	r3, r3, #10
 80097f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80097fa:	697a      	ldr	r2, [r7, #20]
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	4313      	orrs	r3, r2
 8009800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	693a      	ldr	r2, [r7, #16]
 8009806:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	697a      	ldr	r2, [r7, #20]
 800980c:	621a      	str	r2, [r3, #32]
}
 800980e:	bf00      	nop
 8009810:	371c      	adds	r7, #28
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr

0800981a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800981a:	b480      	push	{r7}
 800981c:	b087      	sub	sp, #28
 800981e:	af00      	add	r7, sp, #0
 8009820:	60f8      	str	r0, [r7, #12]
 8009822:	60b9      	str	r1, [r7, #8]
 8009824:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	6a1b      	ldr	r3, [r3, #32]
 800982a:	f023 0210 	bic.w	r2, r3, #16
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	699b      	ldr	r3, [r3, #24]
 8009836:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	6a1b      	ldr	r3, [r3, #32]
 800983c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009844:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	031b      	lsls	r3, r3, #12
 800984a:	697a      	ldr	r2, [r7, #20]
 800984c:	4313      	orrs	r3, r2
 800984e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009856:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	011b      	lsls	r3, r3, #4
 800985c:	693a      	ldr	r2, [r7, #16]
 800985e:	4313      	orrs	r3, r2
 8009860:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	697a      	ldr	r2, [r7, #20]
 8009866:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	693a      	ldr	r2, [r7, #16]
 800986c:	621a      	str	r2, [r3, #32]
}
 800986e:	bf00      	nop
 8009870:	371c      	adds	r7, #28
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr

0800987a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800987a:	b480      	push	{r7}
 800987c:	b085      	sub	sp, #20
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
 8009882:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009890:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009892:	683a      	ldr	r2, [r7, #0]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	4313      	orrs	r3, r2
 8009898:	f043 0307 	orr.w	r3, r3, #7
 800989c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	68fa      	ldr	r2, [r7, #12]
 80098a2:	609a      	str	r2, [r3, #8]
}
 80098a4:	bf00      	nop
 80098a6:	3714      	adds	r7, #20
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b087      	sub	sp, #28
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	607a      	str	r2, [r7, #4]
 80098bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	689b      	ldr	r3, [r3, #8]
 80098c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80098ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	021a      	lsls	r2, r3, #8
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	431a      	orrs	r2, r3
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	4313      	orrs	r3, r2
 80098d8:	697a      	ldr	r2, [r7, #20]
 80098da:	4313      	orrs	r3, r2
 80098dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	697a      	ldr	r2, [r7, #20]
 80098e2:	609a      	str	r2, [r3, #8]
}
 80098e4:	bf00      	nop
 80098e6:	371c      	adds	r7, #28
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b085      	sub	sp, #20
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009900:	2b01      	cmp	r3, #1
 8009902:	d101      	bne.n	8009908 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009904:	2302      	movs	r3, #2
 8009906:	e063      	b.n	80099d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2201      	movs	r2, #1
 800990c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2202      	movs	r2, #2
 8009914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	689b      	ldr	r3, [r3, #8]
 8009926:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4a2b      	ldr	r2, [pc, #172]	; (80099dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d004      	beq.n	800993c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4a2a      	ldr	r2, [pc, #168]	; (80099e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d108      	bne.n	800994e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009942:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	68fa      	ldr	r2, [r7, #12]
 800994a:	4313      	orrs	r3, r2
 800994c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009954:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	68fa      	ldr	r2, [r7, #12]
 800995c:	4313      	orrs	r3, r2
 800995e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	68fa      	ldr	r2, [r7, #12]
 8009966:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a1b      	ldr	r2, [pc, #108]	; (80099dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d018      	beq.n	80099a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800997a:	d013      	beq.n	80099a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a18      	ldr	r2, [pc, #96]	; (80099e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d00e      	beq.n	80099a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a17      	ldr	r2, [pc, #92]	; (80099e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d009      	beq.n	80099a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a12      	ldr	r2, [pc, #72]	; (80099e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d004      	beq.n	80099a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4a13      	ldr	r2, [pc, #76]	; (80099ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d10c      	bne.n	80099be <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	68ba      	ldr	r2, [r7, #8]
 80099b2:	4313      	orrs	r3, r2
 80099b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	68ba      	ldr	r2, [r7, #8]
 80099bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2201      	movs	r2, #1
 80099c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80099ce:	2300      	movs	r3, #0
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3714      	adds	r7, #20
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr
 80099dc:	40012c00 	.word	0x40012c00
 80099e0:	40013400 	.word	0x40013400
 80099e4:	40000400 	.word	0x40000400
 80099e8:	40000800 	.word	0x40000800
 80099ec:	40014000 	.word	0x40014000

080099f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80099f8:	bf00      	nop
 80099fa:	370c      	adds	r7, #12
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr

08009a04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009a0c:	bf00      	nop
 8009a0e:	370c      	adds	r7, #12
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr

08009a18 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009a20:	bf00      	nop
 8009a22:	370c      	adds	r7, #12
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d101      	bne.n	8009a3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e040      	b.n	8009ac0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d106      	bne.n	8009a54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f7fd fb12 	bl	8007078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2224      	movs	r2, #36	; 0x24
 8009a58:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	681a      	ldr	r2, [r3, #0]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f022 0201 	bic.w	r2, r2, #1
 8009a68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 f8c0 	bl	8009bf0 <UART_SetConfig>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d101      	bne.n	8009a7a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009a76:	2301      	movs	r3, #1
 8009a78:	e022      	b.n	8009ac0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d002      	beq.n	8009a88 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 fa88 	bl	8009f98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	685a      	ldr	r2, [r3, #4]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009a96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	689a      	ldr	r2, [r3, #8]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009aa6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f042 0201 	orr.w	r2, r2, #1
 8009ab6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 fb0f 	bl	800a0dc <UART_CheckIdleState>
 8009abe:	4603      	mov	r3, r0
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3708      	adds	r7, #8
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b08a      	sub	sp, #40	; 0x28
 8009acc:	af02      	add	r7, sp, #8
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	60b9      	str	r1, [r7, #8]
 8009ad2:	603b      	str	r3, [r7, #0]
 8009ad4:	4613      	mov	r3, r2
 8009ad6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009adc:	2b20      	cmp	r3, #32
 8009ade:	f040 8082 	bne.w	8009be6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d002      	beq.n	8009aee <HAL_UART_Transmit+0x26>
 8009ae8:	88fb      	ldrh	r3, [r7, #6]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d101      	bne.n	8009af2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009aee:	2301      	movs	r3, #1
 8009af0:	e07a      	b.n	8009be8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d101      	bne.n	8009b00 <HAL_UART_Transmit+0x38>
 8009afc:	2302      	movs	r3, #2
 8009afe:	e073      	b.n	8009be8 <HAL_UART_Transmit+0x120>
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2221      	movs	r2, #33	; 0x21
 8009b14:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009b16:	f7fd fd71 	bl	80075fc <HAL_GetTick>
 8009b1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	88fa      	ldrh	r2, [r7, #6]
 8009b20:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	88fa      	ldrh	r2, [r7, #6]
 8009b28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b34:	d108      	bne.n	8009b48 <HAL_UART_Transmit+0x80>
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	691b      	ldr	r3, [r3, #16]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d104      	bne.n	8009b48 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	61bb      	str	r3, [r7, #24]
 8009b46:	e003      	b.n	8009b50 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2200      	movs	r2, #0
 8009b54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009b58:	e02d      	b.n	8009bb6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	9300      	str	r3, [sp, #0]
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	2200      	movs	r2, #0
 8009b62:	2180      	movs	r1, #128	; 0x80
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f000 fb02 	bl	800a16e <UART_WaitOnFlagUntilTimeout>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d001      	beq.n	8009b74 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009b70:	2303      	movs	r3, #3
 8009b72:	e039      	b.n	8009be8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8009b74:	69fb      	ldr	r3, [r7, #28]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d10b      	bne.n	8009b92 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009b7a:	69bb      	ldr	r3, [r7, #24]
 8009b7c:	881a      	ldrh	r2, [r3, #0]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b86:	b292      	uxth	r2, r2
 8009b88:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	3302      	adds	r3, #2
 8009b8e:	61bb      	str	r3, [r7, #24]
 8009b90:	e008      	b.n	8009ba4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009b92:	69fb      	ldr	r3, [r7, #28]
 8009b94:	781a      	ldrb	r2, [r3, #0]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	b292      	uxth	r2, r2
 8009b9c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009b9e:	69fb      	ldr	r3, [r7, #28]
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	3b01      	subs	r3, #1
 8009bae:	b29a      	uxth	r2, r3
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009bbc:	b29b      	uxth	r3, r3
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d1cb      	bne.n	8009b5a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	9300      	str	r3, [sp, #0]
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	2140      	movs	r1, #64	; 0x40
 8009bcc:	68f8      	ldr	r0, [r7, #12]
 8009bce:	f000 face 	bl	800a16e <UART_WaitOnFlagUntilTimeout>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d001      	beq.n	8009bdc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8009bd8:	2303      	movs	r3, #3
 8009bda:	e005      	b.n	8009be8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2220      	movs	r2, #32
 8009be0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009be2:	2300      	movs	r3, #0
 8009be4:	e000      	b.n	8009be8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8009be6:	2302      	movs	r3, #2
  }
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3720      	adds	r7, #32
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b088      	sub	sp, #32
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	689a      	ldr	r2, [r3, #8]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	691b      	ldr	r3, [r3, #16]
 8009c04:	431a      	orrs	r2, r3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	695b      	ldr	r3, [r3, #20]
 8009c0a:	431a      	orrs	r2, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	69db      	ldr	r3, [r3, #28]
 8009c10:	4313      	orrs	r3, r2
 8009c12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009c1e:	f023 030c 	bic.w	r3, r3, #12
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	6812      	ldr	r2, [r2, #0]
 8009c26:	6979      	ldr	r1, [r7, #20]
 8009c28:	430b      	orrs	r3, r1
 8009c2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	68da      	ldr	r2, [r3, #12]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	430a      	orrs	r2, r1
 8009c40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	699b      	ldr	r3, [r3, #24]
 8009c46:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6a1b      	ldr	r3, [r3, #32]
 8009c4c:	697a      	ldr	r2, [r7, #20]
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	689b      	ldr	r3, [r3, #8]
 8009c58:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	697a      	ldr	r2, [r7, #20]
 8009c62:	430a      	orrs	r2, r1
 8009c64:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4aae      	ldr	r2, [pc, #696]	; (8009f24 <UART_SetConfig+0x334>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d120      	bne.n	8009cb2 <UART_SetConfig+0xc2>
 8009c70:	4bad      	ldr	r3, [pc, #692]	; (8009f28 <UART_SetConfig+0x338>)
 8009c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c74:	f003 0303 	and.w	r3, r3, #3
 8009c78:	2b03      	cmp	r3, #3
 8009c7a:	d817      	bhi.n	8009cac <UART_SetConfig+0xbc>
 8009c7c:	a201      	add	r2, pc, #4	; (adr r2, 8009c84 <UART_SetConfig+0x94>)
 8009c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c82:	bf00      	nop
 8009c84:	08009c95 	.word	0x08009c95
 8009c88:	08009ca1 	.word	0x08009ca1
 8009c8c:	08009ca7 	.word	0x08009ca7
 8009c90:	08009c9b 	.word	0x08009c9b
 8009c94:	2301      	movs	r3, #1
 8009c96:	77fb      	strb	r3, [r7, #31]
 8009c98:	e0b5      	b.n	8009e06 <UART_SetConfig+0x216>
 8009c9a:	2302      	movs	r3, #2
 8009c9c:	77fb      	strb	r3, [r7, #31]
 8009c9e:	e0b2      	b.n	8009e06 <UART_SetConfig+0x216>
 8009ca0:	2304      	movs	r3, #4
 8009ca2:	77fb      	strb	r3, [r7, #31]
 8009ca4:	e0af      	b.n	8009e06 <UART_SetConfig+0x216>
 8009ca6:	2308      	movs	r3, #8
 8009ca8:	77fb      	strb	r3, [r7, #31]
 8009caa:	e0ac      	b.n	8009e06 <UART_SetConfig+0x216>
 8009cac:	2310      	movs	r3, #16
 8009cae:	77fb      	strb	r3, [r7, #31]
 8009cb0:	e0a9      	b.n	8009e06 <UART_SetConfig+0x216>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a9d      	ldr	r2, [pc, #628]	; (8009f2c <UART_SetConfig+0x33c>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d124      	bne.n	8009d06 <UART_SetConfig+0x116>
 8009cbc:	4b9a      	ldr	r3, [pc, #616]	; (8009f28 <UART_SetConfig+0x338>)
 8009cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009cc4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009cc8:	d011      	beq.n	8009cee <UART_SetConfig+0xfe>
 8009cca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009cce:	d817      	bhi.n	8009d00 <UART_SetConfig+0x110>
 8009cd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009cd4:	d011      	beq.n	8009cfa <UART_SetConfig+0x10a>
 8009cd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009cda:	d811      	bhi.n	8009d00 <UART_SetConfig+0x110>
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d003      	beq.n	8009ce8 <UART_SetConfig+0xf8>
 8009ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ce4:	d006      	beq.n	8009cf4 <UART_SetConfig+0x104>
 8009ce6:	e00b      	b.n	8009d00 <UART_SetConfig+0x110>
 8009ce8:	2300      	movs	r3, #0
 8009cea:	77fb      	strb	r3, [r7, #31]
 8009cec:	e08b      	b.n	8009e06 <UART_SetConfig+0x216>
 8009cee:	2302      	movs	r3, #2
 8009cf0:	77fb      	strb	r3, [r7, #31]
 8009cf2:	e088      	b.n	8009e06 <UART_SetConfig+0x216>
 8009cf4:	2304      	movs	r3, #4
 8009cf6:	77fb      	strb	r3, [r7, #31]
 8009cf8:	e085      	b.n	8009e06 <UART_SetConfig+0x216>
 8009cfa:	2308      	movs	r3, #8
 8009cfc:	77fb      	strb	r3, [r7, #31]
 8009cfe:	e082      	b.n	8009e06 <UART_SetConfig+0x216>
 8009d00:	2310      	movs	r3, #16
 8009d02:	77fb      	strb	r3, [r7, #31]
 8009d04:	e07f      	b.n	8009e06 <UART_SetConfig+0x216>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a89      	ldr	r2, [pc, #548]	; (8009f30 <UART_SetConfig+0x340>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d124      	bne.n	8009d5a <UART_SetConfig+0x16a>
 8009d10:	4b85      	ldr	r3, [pc, #532]	; (8009f28 <UART_SetConfig+0x338>)
 8009d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d14:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8009d18:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009d1c:	d011      	beq.n	8009d42 <UART_SetConfig+0x152>
 8009d1e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009d22:	d817      	bhi.n	8009d54 <UART_SetConfig+0x164>
 8009d24:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009d28:	d011      	beq.n	8009d4e <UART_SetConfig+0x15e>
 8009d2a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009d2e:	d811      	bhi.n	8009d54 <UART_SetConfig+0x164>
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d003      	beq.n	8009d3c <UART_SetConfig+0x14c>
 8009d34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d38:	d006      	beq.n	8009d48 <UART_SetConfig+0x158>
 8009d3a:	e00b      	b.n	8009d54 <UART_SetConfig+0x164>
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	77fb      	strb	r3, [r7, #31]
 8009d40:	e061      	b.n	8009e06 <UART_SetConfig+0x216>
 8009d42:	2302      	movs	r3, #2
 8009d44:	77fb      	strb	r3, [r7, #31]
 8009d46:	e05e      	b.n	8009e06 <UART_SetConfig+0x216>
 8009d48:	2304      	movs	r3, #4
 8009d4a:	77fb      	strb	r3, [r7, #31]
 8009d4c:	e05b      	b.n	8009e06 <UART_SetConfig+0x216>
 8009d4e:	2308      	movs	r3, #8
 8009d50:	77fb      	strb	r3, [r7, #31]
 8009d52:	e058      	b.n	8009e06 <UART_SetConfig+0x216>
 8009d54:	2310      	movs	r3, #16
 8009d56:	77fb      	strb	r3, [r7, #31]
 8009d58:	e055      	b.n	8009e06 <UART_SetConfig+0x216>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a75      	ldr	r2, [pc, #468]	; (8009f34 <UART_SetConfig+0x344>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d124      	bne.n	8009dae <UART_SetConfig+0x1be>
 8009d64:	4b70      	ldr	r3, [pc, #448]	; (8009f28 <UART_SetConfig+0x338>)
 8009d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d68:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009d6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009d70:	d011      	beq.n	8009d96 <UART_SetConfig+0x1a6>
 8009d72:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009d76:	d817      	bhi.n	8009da8 <UART_SetConfig+0x1b8>
 8009d78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d7c:	d011      	beq.n	8009da2 <UART_SetConfig+0x1b2>
 8009d7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d82:	d811      	bhi.n	8009da8 <UART_SetConfig+0x1b8>
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d003      	beq.n	8009d90 <UART_SetConfig+0x1a0>
 8009d88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d8c:	d006      	beq.n	8009d9c <UART_SetConfig+0x1ac>
 8009d8e:	e00b      	b.n	8009da8 <UART_SetConfig+0x1b8>
 8009d90:	2300      	movs	r3, #0
 8009d92:	77fb      	strb	r3, [r7, #31]
 8009d94:	e037      	b.n	8009e06 <UART_SetConfig+0x216>
 8009d96:	2302      	movs	r3, #2
 8009d98:	77fb      	strb	r3, [r7, #31]
 8009d9a:	e034      	b.n	8009e06 <UART_SetConfig+0x216>
 8009d9c:	2304      	movs	r3, #4
 8009d9e:	77fb      	strb	r3, [r7, #31]
 8009da0:	e031      	b.n	8009e06 <UART_SetConfig+0x216>
 8009da2:	2308      	movs	r3, #8
 8009da4:	77fb      	strb	r3, [r7, #31]
 8009da6:	e02e      	b.n	8009e06 <UART_SetConfig+0x216>
 8009da8:	2310      	movs	r3, #16
 8009daa:	77fb      	strb	r3, [r7, #31]
 8009dac:	e02b      	b.n	8009e06 <UART_SetConfig+0x216>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4a61      	ldr	r2, [pc, #388]	; (8009f38 <UART_SetConfig+0x348>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d124      	bne.n	8009e02 <UART_SetConfig+0x212>
 8009db8:	4b5b      	ldr	r3, [pc, #364]	; (8009f28 <UART_SetConfig+0x338>)
 8009dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dbc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009dc0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009dc4:	d011      	beq.n	8009dea <UART_SetConfig+0x1fa>
 8009dc6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009dca:	d817      	bhi.n	8009dfc <UART_SetConfig+0x20c>
 8009dcc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009dd0:	d011      	beq.n	8009df6 <UART_SetConfig+0x206>
 8009dd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009dd6:	d811      	bhi.n	8009dfc <UART_SetConfig+0x20c>
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d003      	beq.n	8009de4 <UART_SetConfig+0x1f4>
 8009ddc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009de0:	d006      	beq.n	8009df0 <UART_SetConfig+0x200>
 8009de2:	e00b      	b.n	8009dfc <UART_SetConfig+0x20c>
 8009de4:	2300      	movs	r3, #0
 8009de6:	77fb      	strb	r3, [r7, #31]
 8009de8:	e00d      	b.n	8009e06 <UART_SetConfig+0x216>
 8009dea:	2302      	movs	r3, #2
 8009dec:	77fb      	strb	r3, [r7, #31]
 8009dee:	e00a      	b.n	8009e06 <UART_SetConfig+0x216>
 8009df0:	2304      	movs	r3, #4
 8009df2:	77fb      	strb	r3, [r7, #31]
 8009df4:	e007      	b.n	8009e06 <UART_SetConfig+0x216>
 8009df6:	2308      	movs	r3, #8
 8009df8:	77fb      	strb	r3, [r7, #31]
 8009dfa:	e004      	b.n	8009e06 <UART_SetConfig+0x216>
 8009dfc:	2310      	movs	r3, #16
 8009dfe:	77fb      	strb	r3, [r7, #31]
 8009e00:	e001      	b.n	8009e06 <UART_SetConfig+0x216>
 8009e02:	2310      	movs	r3, #16
 8009e04:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	69db      	ldr	r3, [r3, #28]
 8009e0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e0e:	d15c      	bne.n	8009eca <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8009e10:	7ffb      	ldrb	r3, [r7, #31]
 8009e12:	2b08      	cmp	r3, #8
 8009e14:	d827      	bhi.n	8009e66 <UART_SetConfig+0x276>
 8009e16:	a201      	add	r2, pc, #4	; (adr r2, 8009e1c <UART_SetConfig+0x22c>)
 8009e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e1c:	08009e41 	.word	0x08009e41
 8009e20:	08009e49 	.word	0x08009e49
 8009e24:	08009e51 	.word	0x08009e51
 8009e28:	08009e67 	.word	0x08009e67
 8009e2c:	08009e57 	.word	0x08009e57
 8009e30:	08009e67 	.word	0x08009e67
 8009e34:	08009e67 	.word	0x08009e67
 8009e38:	08009e67 	.word	0x08009e67
 8009e3c:	08009e5f 	.word	0x08009e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e40:	f7fe ff6e 	bl	8008d20 <HAL_RCC_GetPCLK1Freq>
 8009e44:	61b8      	str	r0, [r7, #24]
        break;
 8009e46:	e013      	b.n	8009e70 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e48:	f7fe ff8c 	bl	8008d64 <HAL_RCC_GetPCLK2Freq>
 8009e4c:	61b8      	str	r0, [r7, #24]
        break;
 8009e4e:	e00f      	b.n	8009e70 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e50:	4b3a      	ldr	r3, [pc, #232]	; (8009f3c <UART_SetConfig+0x34c>)
 8009e52:	61bb      	str	r3, [r7, #24]
        break;
 8009e54:	e00c      	b.n	8009e70 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e56:	f7fe feed 	bl	8008c34 <HAL_RCC_GetSysClockFreq>
 8009e5a:	61b8      	str	r0, [r7, #24]
        break;
 8009e5c:	e008      	b.n	8009e70 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e62:	61bb      	str	r3, [r7, #24]
        break;
 8009e64:	e004      	b.n	8009e70 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8009e66:	2300      	movs	r3, #0
 8009e68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	77bb      	strb	r3, [r7, #30]
        break;
 8009e6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e70:	69bb      	ldr	r3, [r7, #24]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	f000 8085 	beq.w	8009f82 <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009e78:	69bb      	ldr	r3, [r7, #24]
 8009e7a:	005a      	lsls	r2, r3, #1
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	085b      	lsrs	r3, r3, #1
 8009e82:	441a      	add	r2, r3
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	2b0f      	cmp	r3, #15
 8009e94:	d916      	bls.n	8009ec4 <UART_SetConfig+0x2d4>
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e9c:	d212      	bcs.n	8009ec4 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	f023 030f 	bic.w	r3, r3, #15
 8009ea6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	085b      	lsrs	r3, r3, #1
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	f003 0307 	and.w	r3, r3, #7
 8009eb2:	b29a      	uxth	r2, r3
 8009eb4:	89fb      	ldrh	r3, [r7, #14]
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	89fa      	ldrh	r2, [r7, #14]
 8009ec0:	60da      	str	r2, [r3, #12]
 8009ec2:	e05e      	b.n	8009f82 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	77bb      	strb	r3, [r7, #30]
 8009ec8:	e05b      	b.n	8009f82 <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009eca:	7ffb      	ldrb	r3, [r7, #31]
 8009ecc:	2b08      	cmp	r3, #8
 8009ece:	d837      	bhi.n	8009f40 <UART_SetConfig+0x350>
 8009ed0:	a201      	add	r2, pc, #4	; (adr r2, 8009ed8 <UART_SetConfig+0x2e8>)
 8009ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed6:	bf00      	nop
 8009ed8:	08009efd 	.word	0x08009efd
 8009edc:	08009f05 	.word	0x08009f05
 8009ee0:	08009f0d 	.word	0x08009f0d
 8009ee4:	08009f41 	.word	0x08009f41
 8009ee8:	08009f13 	.word	0x08009f13
 8009eec:	08009f41 	.word	0x08009f41
 8009ef0:	08009f41 	.word	0x08009f41
 8009ef4:	08009f41 	.word	0x08009f41
 8009ef8:	08009f1b 	.word	0x08009f1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009efc:	f7fe ff10 	bl	8008d20 <HAL_RCC_GetPCLK1Freq>
 8009f00:	61b8      	str	r0, [r7, #24]
        break;
 8009f02:	e022      	b.n	8009f4a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f04:	f7fe ff2e 	bl	8008d64 <HAL_RCC_GetPCLK2Freq>
 8009f08:	61b8      	str	r0, [r7, #24]
        break;
 8009f0a:	e01e      	b.n	8009f4a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f0c:	4b0b      	ldr	r3, [pc, #44]	; (8009f3c <UART_SetConfig+0x34c>)
 8009f0e:	61bb      	str	r3, [r7, #24]
        break;
 8009f10:	e01b      	b.n	8009f4a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f12:	f7fe fe8f 	bl	8008c34 <HAL_RCC_GetSysClockFreq>
 8009f16:	61b8      	str	r0, [r7, #24]
        break;
 8009f18:	e017      	b.n	8009f4a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f1e:	61bb      	str	r3, [r7, #24]
        break;
 8009f20:	e013      	b.n	8009f4a <UART_SetConfig+0x35a>
 8009f22:	bf00      	nop
 8009f24:	40013800 	.word	0x40013800
 8009f28:	40021000 	.word	0x40021000
 8009f2c:	40004400 	.word	0x40004400
 8009f30:	40004800 	.word	0x40004800
 8009f34:	40004c00 	.word	0x40004c00
 8009f38:	40005000 	.word	0x40005000
 8009f3c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8009f40:	2300      	movs	r3, #0
 8009f42:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009f44:	2301      	movs	r3, #1
 8009f46:	77bb      	strb	r3, [r7, #30]
        break;
 8009f48:	bf00      	nop
    }

    if (pclk != 0U)
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d018      	beq.n	8009f82 <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	085a      	lsrs	r2, r3, #1
 8009f56:	69bb      	ldr	r3, [r7, #24]
 8009f58:	441a      	add	r2, r3
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	2b0f      	cmp	r3, #15
 8009f6a:	d908      	bls.n	8009f7e <UART_SetConfig+0x38e>
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f72:	d204      	bcs.n	8009f7e <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	693a      	ldr	r2, [r7, #16]
 8009f7a:	60da      	str	r2, [r3, #12]
 8009f7c:	e001      	b.n	8009f82 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2200      	movs	r2, #0
 8009f86:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009f8e:	7fbb      	ldrb	r3, [r7, #30]
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3720      	adds	r7, #32
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa4:	f003 0301 	and.w	r3, r3, #1
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00a      	beq.n	8009fc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	430a      	orrs	r2, r1
 8009fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc6:	f003 0302 	and.w	r3, r3, #2
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d00a      	beq.n	8009fe4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	430a      	orrs	r2, r1
 8009fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe8:	f003 0304 	and.w	r3, r3, #4
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d00a      	beq.n	800a006 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	430a      	orrs	r2, r1
 800a004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00a:	f003 0308 	and.w	r3, r3, #8
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d00a      	beq.n	800a028 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	430a      	orrs	r2, r1
 800a026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a02c:	f003 0310 	and.w	r3, r3, #16
 800a030:	2b00      	cmp	r3, #0
 800a032:	d00a      	beq.n	800a04a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	689b      	ldr	r3, [r3, #8]
 800a03a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	430a      	orrs	r2, r1
 800a048:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a04e:	f003 0320 	and.w	r3, r3, #32
 800a052:	2b00      	cmp	r3, #0
 800a054:	d00a      	beq.n	800a06c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	689b      	ldr	r3, [r3, #8]
 800a05c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	430a      	orrs	r2, r1
 800a06a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a074:	2b00      	cmp	r3, #0
 800a076:	d01a      	beq.n	800a0ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	430a      	orrs	r2, r1
 800a08c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a092:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a096:	d10a      	bne.n	800a0ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	430a      	orrs	r2, r1
 800a0ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d00a      	beq.n	800a0d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	430a      	orrs	r2, r1
 800a0ce:	605a      	str	r2, [r3, #4]
  }
}
 800a0d0:	bf00      	nop
 800a0d2:	370c      	adds	r7, #12
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr

0800a0dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b086      	sub	sp, #24
 800a0e0:	af02      	add	r7, sp, #8
 800a0e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a0ec:	f7fd fa86 	bl	80075fc <HAL_GetTick>
 800a0f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f003 0308 	and.w	r3, r3, #8
 800a0fc:	2b08      	cmp	r3, #8
 800a0fe:	d10e      	bne.n	800a11e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a100:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a104:	9300      	str	r3, [sp, #0]
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	2200      	movs	r2, #0
 800a10a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 f82d 	bl	800a16e <UART_WaitOnFlagUntilTimeout>
 800a114:	4603      	mov	r3, r0
 800a116:	2b00      	cmp	r3, #0
 800a118:	d001      	beq.n	800a11e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a11a:	2303      	movs	r3, #3
 800a11c:	e023      	b.n	800a166 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f003 0304 	and.w	r3, r3, #4
 800a128:	2b04      	cmp	r3, #4
 800a12a:	d10e      	bne.n	800a14a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a12c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a130:	9300      	str	r3, [sp, #0]
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2200      	movs	r2, #0
 800a136:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 f817 	bl	800a16e <UART_WaitOnFlagUntilTimeout>
 800a140:	4603      	mov	r3, r0
 800a142:	2b00      	cmp	r3, #0
 800a144:	d001      	beq.n	800a14a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a146:	2303      	movs	r3, #3
 800a148:	e00d      	b.n	800a166 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2220      	movs	r2, #32
 800a14e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2220      	movs	r2, #32
 800a154:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2200      	movs	r2, #0
 800a15a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a164:	2300      	movs	r3, #0
}
 800a166:	4618      	mov	r0, r3
 800a168:	3710      	adds	r7, #16
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}

0800a16e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a16e:	b580      	push	{r7, lr}
 800a170:	b09c      	sub	sp, #112	; 0x70
 800a172:	af00      	add	r7, sp, #0
 800a174:	60f8      	str	r0, [r7, #12]
 800a176:	60b9      	str	r1, [r7, #8]
 800a178:	603b      	str	r3, [r7, #0]
 800a17a:	4613      	mov	r3, r2
 800a17c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a17e:	e0a5      	b.n	800a2cc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a180:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a182:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a186:	f000 80a1 	beq.w	800a2cc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a18a:	f7fd fa37 	bl	80075fc <HAL_GetTick>
 800a18e:	4602      	mov	r2, r0
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	1ad3      	subs	r3, r2, r3
 800a194:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a196:	429a      	cmp	r2, r3
 800a198:	d302      	bcc.n	800a1a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800a19a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d13e      	bne.n	800a21e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1a8:	e853 3f00 	ldrex	r3, [r3]
 800a1ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a1ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a1b4:	667b      	str	r3, [r7, #100]	; 0x64
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1be:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a1c0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a1c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a1c6:	e841 2300 	strex	r3, r2, [r1]
 800a1ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a1cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d1e6      	bne.n	800a1a0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	3308      	adds	r3, #8
 800a1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1dc:	e853 3f00 	ldrex	r3, [r3]
 800a1e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e4:	f023 0301 	bic.w	r3, r3, #1
 800a1e8:	663b      	str	r3, [r7, #96]	; 0x60
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	3308      	adds	r3, #8
 800a1f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a1f2:	64ba      	str	r2, [r7, #72]	; 0x48
 800a1f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a1f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a1fa:	e841 2300 	strex	r3, r2, [r1]
 800a1fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a202:	2b00      	cmp	r3, #0
 800a204:	d1e5      	bne.n	800a1d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2220      	movs	r2, #32
 800a20a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2220      	movs	r2, #32
 800a210:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2200      	movs	r2, #0
 800a216:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a21a:	2303      	movs	r3, #3
 800a21c:	e067      	b.n	800a2ee <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f003 0304 	and.w	r3, r3, #4
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d04f      	beq.n	800a2cc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	69db      	ldr	r3, [r3, #28]
 800a232:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a236:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a23a:	d147      	bne.n	800a2cc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a244:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24e:	e853 3f00 	ldrex	r3, [r3]
 800a252:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a256:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a25a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	461a      	mov	r2, r3
 800a262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a264:	637b      	str	r3, [r7, #52]	; 0x34
 800a266:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a268:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a26a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a26c:	e841 2300 	strex	r3, r2, [r1]
 800a270:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a274:	2b00      	cmp	r3, #0
 800a276:	d1e6      	bne.n	800a246 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	3308      	adds	r3, #8
 800a27e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	e853 3f00 	ldrex	r3, [r3]
 800a286:	613b      	str	r3, [r7, #16]
   return(result);
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	f023 0301 	bic.w	r3, r3, #1
 800a28e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	3308      	adds	r3, #8
 800a296:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a298:	623a      	str	r2, [r7, #32]
 800a29a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a29c:	69f9      	ldr	r1, [r7, #28]
 800a29e:	6a3a      	ldr	r2, [r7, #32]
 800a2a0:	e841 2300 	strex	r3, r2, [r1]
 800a2a4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a2a6:	69bb      	ldr	r3, [r7, #24]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d1e5      	bne.n	800a278 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2220      	movs	r2, #32
 800a2b0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2220      	movs	r2, #32
 800a2b6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2220      	movs	r2, #32
 800a2bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a2c8:	2303      	movs	r3, #3
 800a2ca:	e010      	b.n	800a2ee <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	69da      	ldr	r2, [r3, #28]
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	4013      	ands	r3, r2
 800a2d6:	68ba      	ldr	r2, [r7, #8]
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	bf0c      	ite	eq
 800a2dc:	2301      	moveq	r3, #1
 800a2de:	2300      	movne	r3, #0
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	79fb      	ldrb	r3, [r7, #7]
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	f43f af4a 	beq.w	800a180 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a2ec:	2300      	movs	r3, #0
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3770      	adds	r7, #112	; 0x70
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
	...

0800a2f8 <__errno>:
 800a2f8:	4b01      	ldr	r3, [pc, #4]	; (800a300 <__errno+0x8>)
 800a2fa:	6818      	ldr	r0, [r3, #0]
 800a2fc:	4770      	bx	lr
 800a2fe:	bf00      	nop
 800a300:	20001c88 	.word	0x20001c88

0800a304 <__libc_init_array>:
 800a304:	b570      	push	{r4, r5, r6, lr}
 800a306:	4d0d      	ldr	r5, [pc, #52]	; (800a33c <__libc_init_array+0x38>)
 800a308:	4c0d      	ldr	r4, [pc, #52]	; (800a340 <__libc_init_array+0x3c>)
 800a30a:	1b64      	subs	r4, r4, r5
 800a30c:	10a4      	asrs	r4, r4, #2
 800a30e:	2600      	movs	r6, #0
 800a310:	42a6      	cmp	r6, r4
 800a312:	d109      	bne.n	800a328 <__libc_init_array+0x24>
 800a314:	4d0b      	ldr	r5, [pc, #44]	; (800a344 <__libc_init_array+0x40>)
 800a316:	4c0c      	ldr	r4, [pc, #48]	; (800a348 <__libc_init_array+0x44>)
 800a318:	f000 fc4e 	bl	800abb8 <_init>
 800a31c:	1b64      	subs	r4, r4, r5
 800a31e:	10a4      	asrs	r4, r4, #2
 800a320:	2600      	movs	r6, #0
 800a322:	42a6      	cmp	r6, r4
 800a324:	d105      	bne.n	800a332 <__libc_init_array+0x2e>
 800a326:	bd70      	pop	{r4, r5, r6, pc}
 800a328:	f855 3b04 	ldr.w	r3, [r5], #4
 800a32c:	4798      	blx	r3
 800a32e:	3601      	adds	r6, #1
 800a330:	e7ee      	b.n	800a310 <__libc_init_array+0xc>
 800a332:	f855 3b04 	ldr.w	r3, [r5], #4
 800a336:	4798      	blx	r3
 800a338:	3601      	adds	r6, #1
 800a33a:	e7f2      	b.n	800a322 <__libc_init_array+0x1e>
 800a33c:	0800ac60 	.word	0x0800ac60
 800a340:	0800ac60 	.word	0x0800ac60
 800a344:	0800ac60 	.word	0x0800ac60
 800a348:	0800ac64 	.word	0x0800ac64

0800a34c <memset>:
 800a34c:	4402      	add	r2, r0
 800a34e:	4603      	mov	r3, r0
 800a350:	4293      	cmp	r3, r2
 800a352:	d100      	bne.n	800a356 <memset+0xa>
 800a354:	4770      	bx	lr
 800a356:	f803 1b01 	strb.w	r1, [r3], #1
 800a35a:	e7f9      	b.n	800a350 <memset+0x4>

0800a35c <siprintf>:
 800a35c:	b40e      	push	{r1, r2, r3}
 800a35e:	b500      	push	{lr}
 800a360:	b09c      	sub	sp, #112	; 0x70
 800a362:	ab1d      	add	r3, sp, #116	; 0x74
 800a364:	9002      	str	r0, [sp, #8]
 800a366:	9006      	str	r0, [sp, #24]
 800a368:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a36c:	4809      	ldr	r0, [pc, #36]	; (800a394 <siprintf+0x38>)
 800a36e:	9107      	str	r1, [sp, #28]
 800a370:	9104      	str	r1, [sp, #16]
 800a372:	4909      	ldr	r1, [pc, #36]	; (800a398 <siprintf+0x3c>)
 800a374:	f853 2b04 	ldr.w	r2, [r3], #4
 800a378:	9105      	str	r1, [sp, #20]
 800a37a:	6800      	ldr	r0, [r0, #0]
 800a37c:	9301      	str	r3, [sp, #4]
 800a37e:	a902      	add	r1, sp, #8
 800a380:	f000 f868 	bl	800a454 <_svfiprintf_r>
 800a384:	9b02      	ldr	r3, [sp, #8]
 800a386:	2200      	movs	r2, #0
 800a388:	701a      	strb	r2, [r3, #0]
 800a38a:	b01c      	add	sp, #112	; 0x70
 800a38c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a390:	b003      	add	sp, #12
 800a392:	4770      	bx	lr
 800a394:	20001c88 	.word	0x20001c88
 800a398:	ffff0208 	.word	0xffff0208

0800a39c <__ssputs_r>:
 800a39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3a0:	688e      	ldr	r6, [r1, #8]
 800a3a2:	429e      	cmp	r6, r3
 800a3a4:	4682      	mov	sl, r0
 800a3a6:	460c      	mov	r4, r1
 800a3a8:	4690      	mov	r8, r2
 800a3aa:	461f      	mov	r7, r3
 800a3ac:	d838      	bhi.n	800a420 <__ssputs_r+0x84>
 800a3ae:	898a      	ldrh	r2, [r1, #12]
 800a3b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a3b4:	d032      	beq.n	800a41c <__ssputs_r+0x80>
 800a3b6:	6825      	ldr	r5, [r4, #0]
 800a3b8:	6909      	ldr	r1, [r1, #16]
 800a3ba:	eba5 0901 	sub.w	r9, r5, r1
 800a3be:	6965      	ldr	r5, [r4, #20]
 800a3c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3c8:	3301      	adds	r3, #1
 800a3ca:	444b      	add	r3, r9
 800a3cc:	106d      	asrs	r5, r5, #1
 800a3ce:	429d      	cmp	r5, r3
 800a3d0:	bf38      	it	cc
 800a3d2:	461d      	movcc	r5, r3
 800a3d4:	0553      	lsls	r3, r2, #21
 800a3d6:	d531      	bpl.n	800a43c <__ssputs_r+0xa0>
 800a3d8:	4629      	mov	r1, r5
 800a3da:	f000 fb47 	bl	800aa6c <_malloc_r>
 800a3de:	4606      	mov	r6, r0
 800a3e0:	b950      	cbnz	r0, 800a3f8 <__ssputs_r+0x5c>
 800a3e2:	230c      	movs	r3, #12
 800a3e4:	f8ca 3000 	str.w	r3, [sl]
 800a3e8:	89a3      	ldrh	r3, [r4, #12]
 800a3ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3ee:	81a3      	strh	r3, [r4, #12]
 800a3f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3f8:	6921      	ldr	r1, [r4, #16]
 800a3fa:	464a      	mov	r2, r9
 800a3fc:	f000 fabe 	bl	800a97c <memcpy>
 800a400:	89a3      	ldrh	r3, [r4, #12]
 800a402:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a40a:	81a3      	strh	r3, [r4, #12]
 800a40c:	6126      	str	r6, [r4, #16]
 800a40e:	6165      	str	r5, [r4, #20]
 800a410:	444e      	add	r6, r9
 800a412:	eba5 0509 	sub.w	r5, r5, r9
 800a416:	6026      	str	r6, [r4, #0]
 800a418:	60a5      	str	r5, [r4, #8]
 800a41a:	463e      	mov	r6, r7
 800a41c:	42be      	cmp	r6, r7
 800a41e:	d900      	bls.n	800a422 <__ssputs_r+0x86>
 800a420:	463e      	mov	r6, r7
 800a422:	4632      	mov	r2, r6
 800a424:	6820      	ldr	r0, [r4, #0]
 800a426:	4641      	mov	r1, r8
 800a428:	f000 fab6 	bl	800a998 <memmove>
 800a42c:	68a3      	ldr	r3, [r4, #8]
 800a42e:	6822      	ldr	r2, [r4, #0]
 800a430:	1b9b      	subs	r3, r3, r6
 800a432:	4432      	add	r2, r6
 800a434:	60a3      	str	r3, [r4, #8]
 800a436:	6022      	str	r2, [r4, #0]
 800a438:	2000      	movs	r0, #0
 800a43a:	e7db      	b.n	800a3f4 <__ssputs_r+0x58>
 800a43c:	462a      	mov	r2, r5
 800a43e:	f000 fb6f 	bl	800ab20 <_realloc_r>
 800a442:	4606      	mov	r6, r0
 800a444:	2800      	cmp	r0, #0
 800a446:	d1e1      	bne.n	800a40c <__ssputs_r+0x70>
 800a448:	6921      	ldr	r1, [r4, #16]
 800a44a:	4650      	mov	r0, sl
 800a44c:	f000 fabe 	bl	800a9cc <_free_r>
 800a450:	e7c7      	b.n	800a3e2 <__ssputs_r+0x46>
	...

0800a454 <_svfiprintf_r>:
 800a454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a458:	4698      	mov	r8, r3
 800a45a:	898b      	ldrh	r3, [r1, #12]
 800a45c:	061b      	lsls	r3, r3, #24
 800a45e:	b09d      	sub	sp, #116	; 0x74
 800a460:	4607      	mov	r7, r0
 800a462:	460d      	mov	r5, r1
 800a464:	4614      	mov	r4, r2
 800a466:	d50e      	bpl.n	800a486 <_svfiprintf_r+0x32>
 800a468:	690b      	ldr	r3, [r1, #16]
 800a46a:	b963      	cbnz	r3, 800a486 <_svfiprintf_r+0x32>
 800a46c:	2140      	movs	r1, #64	; 0x40
 800a46e:	f000 fafd 	bl	800aa6c <_malloc_r>
 800a472:	6028      	str	r0, [r5, #0]
 800a474:	6128      	str	r0, [r5, #16]
 800a476:	b920      	cbnz	r0, 800a482 <_svfiprintf_r+0x2e>
 800a478:	230c      	movs	r3, #12
 800a47a:	603b      	str	r3, [r7, #0]
 800a47c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a480:	e0d1      	b.n	800a626 <_svfiprintf_r+0x1d2>
 800a482:	2340      	movs	r3, #64	; 0x40
 800a484:	616b      	str	r3, [r5, #20]
 800a486:	2300      	movs	r3, #0
 800a488:	9309      	str	r3, [sp, #36]	; 0x24
 800a48a:	2320      	movs	r3, #32
 800a48c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a490:	f8cd 800c 	str.w	r8, [sp, #12]
 800a494:	2330      	movs	r3, #48	; 0x30
 800a496:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a640 <_svfiprintf_r+0x1ec>
 800a49a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a49e:	f04f 0901 	mov.w	r9, #1
 800a4a2:	4623      	mov	r3, r4
 800a4a4:	469a      	mov	sl, r3
 800a4a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4aa:	b10a      	cbz	r2, 800a4b0 <_svfiprintf_r+0x5c>
 800a4ac:	2a25      	cmp	r2, #37	; 0x25
 800a4ae:	d1f9      	bne.n	800a4a4 <_svfiprintf_r+0x50>
 800a4b0:	ebba 0b04 	subs.w	fp, sl, r4
 800a4b4:	d00b      	beq.n	800a4ce <_svfiprintf_r+0x7a>
 800a4b6:	465b      	mov	r3, fp
 800a4b8:	4622      	mov	r2, r4
 800a4ba:	4629      	mov	r1, r5
 800a4bc:	4638      	mov	r0, r7
 800a4be:	f7ff ff6d 	bl	800a39c <__ssputs_r>
 800a4c2:	3001      	adds	r0, #1
 800a4c4:	f000 80aa 	beq.w	800a61c <_svfiprintf_r+0x1c8>
 800a4c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4ca:	445a      	add	r2, fp
 800a4cc:	9209      	str	r2, [sp, #36]	; 0x24
 800a4ce:	f89a 3000 	ldrb.w	r3, [sl]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	f000 80a2 	beq.w	800a61c <_svfiprintf_r+0x1c8>
 800a4d8:	2300      	movs	r3, #0
 800a4da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4e2:	f10a 0a01 	add.w	sl, sl, #1
 800a4e6:	9304      	str	r3, [sp, #16]
 800a4e8:	9307      	str	r3, [sp, #28]
 800a4ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4ee:	931a      	str	r3, [sp, #104]	; 0x68
 800a4f0:	4654      	mov	r4, sl
 800a4f2:	2205      	movs	r2, #5
 800a4f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4f8:	4851      	ldr	r0, [pc, #324]	; (800a640 <_svfiprintf_r+0x1ec>)
 800a4fa:	f7f5 fe69 	bl	80001d0 <memchr>
 800a4fe:	9a04      	ldr	r2, [sp, #16]
 800a500:	b9d8      	cbnz	r0, 800a53a <_svfiprintf_r+0xe6>
 800a502:	06d0      	lsls	r0, r2, #27
 800a504:	bf44      	itt	mi
 800a506:	2320      	movmi	r3, #32
 800a508:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a50c:	0711      	lsls	r1, r2, #28
 800a50e:	bf44      	itt	mi
 800a510:	232b      	movmi	r3, #43	; 0x2b
 800a512:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a516:	f89a 3000 	ldrb.w	r3, [sl]
 800a51a:	2b2a      	cmp	r3, #42	; 0x2a
 800a51c:	d015      	beq.n	800a54a <_svfiprintf_r+0xf6>
 800a51e:	9a07      	ldr	r2, [sp, #28]
 800a520:	4654      	mov	r4, sl
 800a522:	2000      	movs	r0, #0
 800a524:	f04f 0c0a 	mov.w	ip, #10
 800a528:	4621      	mov	r1, r4
 800a52a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a52e:	3b30      	subs	r3, #48	; 0x30
 800a530:	2b09      	cmp	r3, #9
 800a532:	d94e      	bls.n	800a5d2 <_svfiprintf_r+0x17e>
 800a534:	b1b0      	cbz	r0, 800a564 <_svfiprintf_r+0x110>
 800a536:	9207      	str	r2, [sp, #28]
 800a538:	e014      	b.n	800a564 <_svfiprintf_r+0x110>
 800a53a:	eba0 0308 	sub.w	r3, r0, r8
 800a53e:	fa09 f303 	lsl.w	r3, r9, r3
 800a542:	4313      	orrs	r3, r2
 800a544:	9304      	str	r3, [sp, #16]
 800a546:	46a2      	mov	sl, r4
 800a548:	e7d2      	b.n	800a4f0 <_svfiprintf_r+0x9c>
 800a54a:	9b03      	ldr	r3, [sp, #12]
 800a54c:	1d19      	adds	r1, r3, #4
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	9103      	str	r1, [sp, #12]
 800a552:	2b00      	cmp	r3, #0
 800a554:	bfbb      	ittet	lt
 800a556:	425b      	neglt	r3, r3
 800a558:	f042 0202 	orrlt.w	r2, r2, #2
 800a55c:	9307      	strge	r3, [sp, #28]
 800a55e:	9307      	strlt	r3, [sp, #28]
 800a560:	bfb8      	it	lt
 800a562:	9204      	strlt	r2, [sp, #16]
 800a564:	7823      	ldrb	r3, [r4, #0]
 800a566:	2b2e      	cmp	r3, #46	; 0x2e
 800a568:	d10c      	bne.n	800a584 <_svfiprintf_r+0x130>
 800a56a:	7863      	ldrb	r3, [r4, #1]
 800a56c:	2b2a      	cmp	r3, #42	; 0x2a
 800a56e:	d135      	bne.n	800a5dc <_svfiprintf_r+0x188>
 800a570:	9b03      	ldr	r3, [sp, #12]
 800a572:	1d1a      	adds	r2, r3, #4
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	9203      	str	r2, [sp, #12]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	bfb8      	it	lt
 800a57c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a580:	3402      	adds	r4, #2
 800a582:	9305      	str	r3, [sp, #20]
 800a584:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a650 <_svfiprintf_r+0x1fc>
 800a588:	7821      	ldrb	r1, [r4, #0]
 800a58a:	2203      	movs	r2, #3
 800a58c:	4650      	mov	r0, sl
 800a58e:	f7f5 fe1f 	bl	80001d0 <memchr>
 800a592:	b140      	cbz	r0, 800a5a6 <_svfiprintf_r+0x152>
 800a594:	2340      	movs	r3, #64	; 0x40
 800a596:	eba0 000a 	sub.w	r0, r0, sl
 800a59a:	fa03 f000 	lsl.w	r0, r3, r0
 800a59e:	9b04      	ldr	r3, [sp, #16]
 800a5a0:	4303      	orrs	r3, r0
 800a5a2:	3401      	adds	r4, #1
 800a5a4:	9304      	str	r3, [sp, #16]
 800a5a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5aa:	4826      	ldr	r0, [pc, #152]	; (800a644 <_svfiprintf_r+0x1f0>)
 800a5ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5b0:	2206      	movs	r2, #6
 800a5b2:	f7f5 fe0d 	bl	80001d0 <memchr>
 800a5b6:	2800      	cmp	r0, #0
 800a5b8:	d038      	beq.n	800a62c <_svfiprintf_r+0x1d8>
 800a5ba:	4b23      	ldr	r3, [pc, #140]	; (800a648 <_svfiprintf_r+0x1f4>)
 800a5bc:	bb1b      	cbnz	r3, 800a606 <_svfiprintf_r+0x1b2>
 800a5be:	9b03      	ldr	r3, [sp, #12]
 800a5c0:	3307      	adds	r3, #7
 800a5c2:	f023 0307 	bic.w	r3, r3, #7
 800a5c6:	3308      	adds	r3, #8
 800a5c8:	9303      	str	r3, [sp, #12]
 800a5ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5cc:	4433      	add	r3, r6
 800a5ce:	9309      	str	r3, [sp, #36]	; 0x24
 800a5d0:	e767      	b.n	800a4a2 <_svfiprintf_r+0x4e>
 800a5d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5d6:	460c      	mov	r4, r1
 800a5d8:	2001      	movs	r0, #1
 800a5da:	e7a5      	b.n	800a528 <_svfiprintf_r+0xd4>
 800a5dc:	2300      	movs	r3, #0
 800a5de:	3401      	adds	r4, #1
 800a5e0:	9305      	str	r3, [sp, #20]
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	f04f 0c0a 	mov.w	ip, #10
 800a5e8:	4620      	mov	r0, r4
 800a5ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5ee:	3a30      	subs	r2, #48	; 0x30
 800a5f0:	2a09      	cmp	r2, #9
 800a5f2:	d903      	bls.n	800a5fc <_svfiprintf_r+0x1a8>
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d0c5      	beq.n	800a584 <_svfiprintf_r+0x130>
 800a5f8:	9105      	str	r1, [sp, #20]
 800a5fa:	e7c3      	b.n	800a584 <_svfiprintf_r+0x130>
 800a5fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a600:	4604      	mov	r4, r0
 800a602:	2301      	movs	r3, #1
 800a604:	e7f0      	b.n	800a5e8 <_svfiprintf_r+0x194>
 800a606:	ab03      	add	r3, sp, #12
 800a608:	9300      	str	r3, [sp, #0]
 800a60a:	462a      	mov	r2, r5
 800a60c:	4b0f      	ldr	r3, [pc, #60]	; (800a64c <_svfiprintf_r+0x1f8>)
 800a60e:	a904      	add	r1, sp, #16
 800a610:	4638      	mov	r0, r7
 800a612:	f3af 8000 	nop.w
 800a616:	1c42      	adds	r2, r0, #1
 800a618:	4606      	mov	r6, r0
 800a61a:	d1d6      	bne.n	800a5ca <_svfiprintf_r+0x176>
 800a61c:	89ab      	ldrh	r3, [r5, #12]
 800a61e:	065b      	lsls	r3, r3, #25
 800a620:	f53f af2c 	bmi.w	800a47c <_svfiprintf_r+0x28>
 800a624:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a626:	b01d      	add	sp, #116	; 0x74
 800a628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a62c:	ab03      	add	r3, sp, #12
 800a62e:	9300      	str	r3, [sp, #0]
 800a630:	462a      	mov	r2, r5
 800a632:	4b06      	ldr	r3, [pc, #24]	; (800a64c <_svfiprintf_r+0x1f8>)
 800a634:	a904      	add	r1, sp, #16
 800a636:	4638      	mov	r0, r7
 800a638:	f000 f87a 	bl	800a730 <_printf_i>
 800a63c:	e7eb      	b.n	800a616 <_svfiprintf_r+0x1c2>
 800a63e:	bf00      	nop
 800a640:	0800ac2c 	.word	0x0800ac2c
 800a644:	0800ac36 	.word	0x0800ac36
 800a648:	00000000 	.word	0x00000000
 800a64c:	0800a39d 	.word	0x0800a39d
 800a650:	0800ac32 	.word	0x0800ac32

0800a654 <_printf_common>:
 800a654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a658:	4616      	mov	r6, r2
 800a65a:	4699      	mov	r9, r3
 800a65c:	688a      	ldr	r2, [r1, #8]
 800a65e:	690b      	ldr	r3, [r1, #16]
 800a660:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a664:	4293      	cmp	r3, r2
 800a666:	bfb8      	it	lt
 800a668:	4613      	movlt	r3, r2
 800a66a:	6033      	str	r3, [r6, #0]
 800a66c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a670:	4607      	mov	r7, r0
 800a672:	460c      	mov	r4, r1
 800a674:	b10a      	cbz	r2, 800a67a <_printf_common+0x26>
 800a676:	3301      	adds	r3, #1
 800a678:	6033      	str	r3, [r6, #0]
 800a67a:	6823      	ldr	r3, [r4, #0]
 800a67c:	0699      	lsls	r1, r3, #26
 800a67e:	bf42      	ittt	mi
 800a680:	6833      	ldrmi	r3, [r6, #0]
 800a682:	3302      	addmi	r3, #2
 800a684:	6033      	strmi	r3, [r6, #0]
 800a686:	6825      	ldr	r5, [r4, #0]
 800a688:	f015 0506 	ands.w	r5, r5, #6
 800a68c:	d106      	bne.n	800a69c <_printf_common+0x48>
 800a68e:	f104 0a19 	add.w	sl, r4, #25
 800a692:	68e3      	ldr	r3, [r4, #12]
 800a694:	6832      	ldr	r2, [r6, #0]
 800a696:	1a9b      	subs	r3, r3, r2
 800a698:	42ab      	cmp	r3, r5
 800a69a:	dc26      	bgt.n	800a6ea <_printf_common+0x96>
 800a69c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a6a0:	1e13      	subs	r3, r2, #0
 800a6a2:	6822      	ldr	r2, [r4, #0]
 800a6a4:	bf18      	it	ne
 800a6a6:	2301      	movne	r3, #1
 800a6a8:	0692      	lsls	r2, r2, #26
 800a6aa:	d42b      	bmi.n	800a704 <_printf_common+0xb0>
 800a6ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a6b0:	4649      	mov	r1, r9
 800a6b2:	4638      	mov	r0, r7
 800a6b4:	47c0      	blx	r8
 800a6b6:	3001      	adds	r0, #1
 800a6b8:	d01e      	beq.n	800a6f8 <_printf_common+0xa4>
 800a6ba:	6823      	ldr	r3, [r4, #0]
 800a6bc:	68e5      	ldr	r5, [r4, #12]
 800a6be:	6832      	ldr	r2, [r6, #0]
 800a6c0:	f003 0306 	and.w	r3, r3, #6
 800a6c4:	2b04      	cmp	r3, #4
 800a6c6:	bf08      	it	eq
 800a6c8:	1aad      	subeq	r5, r5, r2
 800a6ca:	68a3      	ldr	r3, [r4, #8]
 800a6cc:	6922      	ldr	r2, [r4, #16]
 800a6ce:	bf0c      	ite	eq
 800a6d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a6d4:	2500      	movne	r5, #0
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	bfc4      	itt	gt
 800a6da:	1a9b      	subgt	r3, r3, r2
 800a6dc:	18ed      	addgt	r5, r5, r3
 800a6de:	2600      	movs	r6, #0
 800a6e0:	341a      	adds	r4, #26
 800a6e2:	42b5      	cmp	r5, r6
 800a6e4:	d11a      	bne.n	800a71c <_printf_common+0xc8>
 800a6e6:	2000      	movs	r0, #0
 800a6e8:	e008      	b.n	800a6fc <_printf_common+0xa8>
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	4652      	mov	r2, sl
 800a6ee:	4649      	mov	r1, r9
 800a6f0:	4638      	mov	r0, r7
 800a6f2:	47c0      	blx	r8
 800a6f4:	3001      	adds	r0, #1
 800a6f6:	d103      	bne.n	800a700 <_printf_common+0xac>
 800a6f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a700:	3501      	adds	r5, #1
 800a702:	e7c6      	b.n	800a692 <_printf_common+0x3e>
 800a704:	18e1      	adds	r1, r4, r3
 800a706:	1c5a      	adds	r2, r3, #1
 800a708:	2030      	movs	r0, #48	; 0x30
 800a70a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a70e:	4422      	add	r2, r4
 800a710:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a714:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a718:	3302      	adds	r3, #2
 800a71a:	e7c7      	b.n	800a6ac <_printf_common+0x58>
 800a71c:	2301      	movs	r3, #1
 800a71e:	4622      	mov	r2, r4
 800a720:	4649      	mov	r1, r9
 800a722:	4638      	mov	r0, r7
 800a724:	47c0      	blx	r8
 800a726:	3001      	adds	r0, #1
 800a728:	d0e6      	beq.n	800a6f8 <_printf_common+0xa4>
 800a72a:	3601      	adds	r6, #1
 800a72c:	e7d9      	b.n	800a6e2 <_printf_common+0x8e>
	...

0800a730 <_printf_i>:
 800a730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a734:	460c      	mov	r4, r1
 800a736:	4691      	mov	r9, r2
 800a738:	7e27      	ldrb	r7, [r4, #24]
 800a73a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a73c:	2f78      	cmp	r7, #120	; 0x78
 800a73e:	4680      	mov	r8, r0
 800a740:	469a      	mov	sl, r3
 800a742:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a746:	d807      	bhi.n	800a758 <_printf_i+0x28>
 800a748:	2f62      	cmp	r7, #98	; 0x62
 800a74a:	d80a      	bhi.n	800a762 <_printf_i+0x32>
 800a74c:	2f00      	cmp	r7, #0
 800a74e:	f000 80d8 	beq.w	800a902 <_printf_i+0x1d2>
 800a752:	2f58      	cmp	r7, #88	; 0x58
 800a754:	f000 80a3 	beq.w	800a89e <_printf_i+0x16e>
 800a758:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a75c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a760:	e03a      	b.n	800a7d8 <_printf_i+0xa8>
 800a762:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a766:	2b15      	cmp	r3, #21
 800a768:	d8f6      	bhi.n	800a758 <_printf_i+0x28>
 800a76a:	a001      	add	r0, pc, #4	; (adr r0, 800a770 <_printf_i+0x40>)
 800a76c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a770:	0800a7c9 	.word	0x0800a7c9
 800a774:	0800a7dd 	.word	0x0800a7dd
 800a778:	0800a759 	.word	0x0800a759
 800a77c:	0800a759 	.word	0x0800a759
 800a780:	0800a759 	.word	0x0800a759
 800a784:	0800a759 	.word	0x0800a759
 800a788:	0800a7dd 	.word	0x0800a7dd
 800a78c:	0800a759 	.word	0x0800a759
 800a790:	0800a759 	.word	0x0800a759
 800a794:	0800a759 	.word	0x0800a759
 800a798:	0800a759 	.word	0x0800a759
 800a79c:	0800a8e9 	.word	0x0800a8e9
 800a7a0:	0800a80d 	.word	0x0800a80d
 800a7a4:	0800a8cb 	.word	0x0800a8cb
 800a7a8:	0800a759 	.word	0x0800a759
 800a7ac:	0800a759 	.word	0x0800a759
 800a7b0:	0800a90b 	.word	0x0800a90b
 800a7b4:	0800a759 	.word	0x0800a759
 800a7b8:	0800a80d 	.word	0x0800a80d
 800a7bc:	0800a759 	.word	0x0800a759
 800a7c0:	0800a759 	.word	0x0800a759
 800a7c4:	0800a8d3 	.word	0x0800a8d3
 800a7c8:	680b      	ldr	r3, [r1, #0]
 800a7ca:	1d1a      	adds	r2, r3, #4
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	600a      	str	r2, [r1, #0]
 800a7d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a7d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a7d8:	2301      	movs	r3, #1
 800a7da:	e0a3      	b.n	800a924 <_printf_i+0x1f4>
 800a7dc:	6825      	ldr	r5, [r4, #0]
 800a7de:	6808      	ldr	r0, [r1, #0]
 800a7e0:	062e      	lsls	r6, r5, #24
 800a7e2:	f100 0304 	add.w	r3, r0, #4
 800a7e6:	d50a      	bpl.n	800a7fe <_printf_i+0xce>
 800a7e8:	6805      	ldr	r5, [r0, #0]
 800a7ea:	600b      	str	r3, [r1, #0]
 800a7ec:	2d00      	cmp	r5, #0
 800a7ee:	da03      	bge.n	800a7f8 <_printf_i+0xc8>
 800a7f0:	232d      	movs	r3, #45	; 0x2d
 800a7f2:	426d      	negs	r5, r5
 800a7f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7f8:	485e      	ldr	r0, [pc, #376]	; (800a974 <_printf_i+0x244>)
 800a7fa:	230a      	movs	r3, #10
 800a7fc:	e019      	b.n	800a832 <_printf_i+0x102>
 800a7fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a802:	6805      	ldr	r5, [r0, #0]
 800a804:	600b      	str	r3, [r1, #0]
 800a806:	bf18      	it	ne
 800a808:	b22d      	sxthne	r5, r5
 800a80a:	e7ef      	b.n	800a7ec <_printf_i+0xbc>
 800a80c:	680b      	ldr	r3, [r1, #0]
 800a80e:	6825      	ldr	r5, [r4, #0]
 800a810:	1d18      	adds	r0, r3, #4
 800a812:	6008      	str	r0, [r1, #0]
 800a814:	0628      	lsls	r0, r5, #24
 800a816:	d501      	bpl.n	800a81c <_printf_i+0xec>
 800a818:	681d      	ldr	r5, [r3, #0]
 800a81a:	e002      	b.n	800a822 <_printf_i+0xf2>
 800a81c:	0669      	lsls	r1, r5, #25
 800a81e:	d5fb      	bpl.n	800a818 <_printf_i+0xe8>
 800a820:	881d      	ldrh	r5, [r3, #0]
 800a822:	4854      	ldr	r0, [pc, #336]	; (800a974 <_printf_i+0x244>)
 800a824:	2f6f      	cmp	r7, #111	; 0x6f
 800a826:	bf0c      	ite	eq
 800a828:	2308      	moveq	r3, #8
 800a82a:	230a      	movne	r3, #10
 800a82c:	2100      	movs	r1, #0
 800a82e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a832:	6866      	ldr	r6, [r4, #4]
 800a834:	60a6      	str	r6, [r4, #8]
 800a836:	2e00      	cmp	r6, #0
 800a838:	bfa2      	ittt	ge
 800a83a:	6821      	ldrge	r1, [r4, #0]
 800a83c:	f021 0104 	bicge.w	r1, r1, #4
 800a840:	6021      	strge	r1, [r4, #0]
 800a842:	b90d      	cbnz	r5, 800a848 <_printf_i+0x118>
 800a844:	2e00      	cmp	r6, #0
 800a846:	d04d      	beq.n	800a8e4 <_printf_i+0x1b4>
 800a848:	4616      	mov	r6, r2
 800a84a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a84e:	fb03 5711 	mls	r7, r3, r1, r5
 800a852:	5dc7      	ldrb	r7, [r0, r7]
 800a854:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a858:	462f      	mov	r7, r5
 800a85a:	42bb      	cmp	r3, r7
 800a85c:	460d      	mov	r5, r1
 800a85e:	d9f4      	bls.n	800a84a <_printf_i+0x11a>
 800a860:	2b08      	cmp	r3, #8
 800a862:	d10b      	bne.n	800a87c <_printf_i+0x14c>
 800a864:	6823      	ldr	r3, [r4, #0]
 800a866:	07df      	lsls	r7, r3, #31
 800a868:	d508      	bpl.n	800a87c <_printf_i+0x14c>
 800a86a:	6923      	ldr	r3, [r4, #16]
 800a86c:	6861      	ldr	r1, [r4, #4]
 800a86e:	4299      	cmp	r1, r3
 800a870:	bfde      	ittt	le
 800a872:	2330      	movle	r3, #48	; 0x30
 800a874:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a878:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800a87c:	1b92      	subs	r2, r2, r6
 800a87e:	6122      	str	r2, [r4, #16]
 800a880:	f8cd a000 	str.w	sl, [sp]
 800a884:	464b      	mov	r3, r9
 800a886:	aa03      	add	r2, sp, #12
 800a888:	4621      	mov	r1, r4
 800a88a:	4640      	mov	r0, r8
 800a88c:	f7ff fee2 	bl	800a654 <_printf_common>
 800a890:	3001      	adds	r0, #1
 800a892:	d14c      	bne.n	800a92e <_printf_i+0x1fe>
 800a894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a898:	b004      	add	sp, #16
 800a89a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a89e:	4835      	ldr	r0, [pc, #212]	; (800a974 <_printf_i+0x244>)
 800a8a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a8a4:	6823      	ldr	r3, [r4, #0]
 800a8a6:	680e      	ldr	r6, [r1, #0]
 800a8a8:	061f      	lsls	r7, r3, #24
 800a8aa:	f856 5b04 	ldr.w	r5, [r6], #4
 800a8ae:	600e      	str	r6, [r1, #0]
 800a8b0:	d514      	bpl.n	800a8dc <_printf_i+0x1ac>
 800a8b2:	07d9      	lsls	r1, r3, #31
 800a8b4:	bf44      	itt	mi
 800a8b6:	f043 0320 	orrmi.w	r3, r3, #32
 800a8ba:	6023      	strmi	r3, [r4, #0]
 800a8bc:	b91d      	cbnz	r5, 800a8c6 <_printf_i+0x196>
 800a8be:	6823      	ldr	r3, [r4, #0]
 800a8c0:	f023 0320 	bic.w	r3, r3, #32
 800a8c4:	6023      	str	r3, [r4, #0]
 800a8c6:	2310      	movs	r3, #16
 800a8c8:	e7b0      	b.n	800a82c <_printf_i+0xfc>
 800a8ca:	6823      	ldr	r3, [r4, #0]
 800a8cc:	f043 0320 	orr.w	r3, r3, #32
 800a8d0:	6023      	str	r3, [r4, #0]
 800a8d2:	2378      	movs	r3, #120	; 0x78
 800a8d4:	4828      	ldr	r0, [pc, #160]	; (800a978 <_printf_i+0x248>)
 800a8d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a8da:	e7e3      	b.n	800a8a4 <_printf_i+0x174>
 800a8dc:	065e      	lsls	r6, r3, #25
 800a8de:	bf48      	it	mi
 800a8e0:	b2ad      	uxthmi	r5, r5
 800a8e2:	e7e6      	b.n	800a8b2 <_printf_i+0x182>
 800a8e4:	4616      	mov	r6, r2
 800a8e6:	e7bb      	b.n	800a860 <_printf_i+0x130>
 800a8e8:	680b      	ldr	r3, [r1, #0]
 800a8ea:	6826      	ldr	r6, [r4, #0]
 800a8ec:	6960      	ldr	r0, [r4, #20]
 800a8ee:	1d1d      	adds	r5, r3, #4
 800a8f0:	600d      	str	r5, [r1, #0]
 800a8f2:	0635      	lsls	r5, r6, #24
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	d501      	bpl.n	800a8fc <_printf_i+0x1cc>
 800a8f8:	6018      	str	r0, [r3, #0]
 800a8fa:	e002      	b.n	800a902 <_printf_i+0x1d2>
 800a8fc:	0671      	lsls	r1, r6, #25
 800a8fe:	d5fb      	bpl.n	800a8f8 <_printf_i+0x1c8>
 800a900:	8018      	strh	r0, [r3, #0]
 800a902:	2300      	movs	r3, #0
 800a904:	6123      	str	r3, [r4, #16]
 800a906:	4616      	mov	r6, r2
 800a908:	e7ba      	b.n	800a880 <_printf_i+0x150>
 800a90a:	680b      	ldr	r3, [r1, #0]
 800a90c:	1d1a      	adds	r2, r3, #4
 800a90e:	600a      	str	r2, [r1, #0]
 800a910:	681e      	ldr	r6, [r3, #0]
 800a912:	6862      	ldr	r2, [r4, #4]
 800a914:	2100      	movs	r1, #0
 800a916:	4630      	mov	r0, r6
 800a918:	f7f5 fc5a 	bl	80001d0 <memchr>
 800a91c:	b108      	cbz	r0, 800a922 <_printf_i+0x1f2>
 800a91e:	1b80      	subs	r0, r0, r6
 800a920:	6060      	str	r0, [r4, #4]
 800a922:	6863      	ldr	r3, [r4, #4]
 800a924:	6123      	str	r3, [r4, #16]
 800a926:	2300      	movs	r3, #0
 800a928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a92c:	e7a8      	b.n	800a880 <_printf_i+0x150>
 800a92e:	6923      	ldr	r3, [r4, #16]
 800a930:	4632      	mov	r2, r6
 800a932:	4649      	mov	r1, r9
 800a934:	4640      	mov	r0, r8
 800a936:	47d0      	blx	sl
 800a938:	3001      	adds	r0, #1
 800a93a:	d0ab      	beq.n	800a894 <_printf_i+0x164>
 800a93c:	6823      	ldr	r3, [r4, #0]
 800a93e:	079b      	lsls	r3, r3, #30
 800a940:	d413      	bmi.n	800a96a <_printf_i+0x23a>
 800a942:	68e0      	ldr	r0, [r4, #12]
 800a944:	9b03      	ldr	r3, [sp, #12]
 800a946:	4298      	cmp	r0, r3
 800a948:	bfb8      	it	lt
 800a94a:	4618      	movlt	r0, r3
 800a94c:	e7a4      	b.n	800a898 <_printf_i+0x168>
 800a94e:	2301      	movs	r3, #1
 800a950:	4632      	mov	r2, r6
 800a952:	4649      	mov	r1, r9
 800a954:	4640      	mov	r0, r8
 800a956:	47d0      	blx	sl
 800a958:	3001      	adds	r0, #1
 800a95a:	d09b      	beq.n	800a894 <_printf_i+0x164>
 800a95c:	3501      	adds	r5, #1
 800a95e:	68e3      	ldr	r3, [r4, #12]
 800a960:	9903      	ldr	r1, [sp, #12]
 800a962:	1a5b      	subs	r3, r3, r1
 800a964:	42ab      	cmp	r3, r5
 800a966:	dcf2      	bgt.n	800a94e <_printf_i+0x21e>
 800a968:	e7eb      	b.n	800a942 <_printf_i+0x212>
 800a96a:	2500      	movs	r5, #0
 800a96c:	f104 0619 	add.w	r6, r4, #25
 800a970:	e7f5      	b.n	800a95e <_printf_i+0x22e>
 800a972:	bf00      	nop
 800a974:	0800ac3d 	.word	0x0800ac3d
 800a978:	0800ac4e 	.word	0x0800ac4e

0800a97c <memcpy>:
 800a97c:	440a      	add	r2, r1
 800a97e:	4291      	cmp	r1, r2
 800a980:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a984:	d100      	bne.n	800a988 <memcpy+0xc>
 800a986:	4770      	bx	lr
 800a988:	b510      	push	{r4, lr}
 800a98a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a98e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a992:	4291      	cmp	r1, r2
 800a994:	d1f9      	bne.n	800a98a <memcpy+0xe>
 800a996:	bd10      	pop	{r4, pc}

0800a998 <memmove>:
 800a998:	4288      	cmp	r0, r1
 800a99a:	b510      	push	{r4, lr}
 800a99c:	eb01 0402 	add.w	r4, r1, r2
 800a9a0:	d902      	bls.n	800a9a8 <memmove+0x10>
 800a9a2:	4284      	cmp	r4, r0
 800a9a4:	4623      	mov	r3, r4
 800a9a6:	d807      	bhi.n	800a9b8 <memmove+0x20>
 800a9a8:	1e43      	subs	r3, r0, #1
 800a9aa:	42a1      	cmp	r1, r4
 800a9ac:	d008      	beq.n	800a9c0 <memmove+0x28>
 800a9ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a9b6:	e7f8      	b.n	800a9aa <memmove+0x12>
 800a9b8:	4402      	add	r2, r0
 800a9ba:	4601      	mov	r1, r0
 800a9bc:	428a      	cmp	r2, r1
 800a9be:	d100      	bne.n	800a9c2 <memmove+0x2a>
 800a9c0:	bd10      	pop	{r4, pc}
 800a9c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a9c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a9ca:	e7f7      	b.n	800a9bc <memmove+0x24>

0800a9cc <_free_r>:
 800a9cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9ce:	2900      	cmp	r1, #0
 800a9d0:	d048      	beq.n	800aa64 <_free_r+0x98>
 800a9d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9d6:	9001      	str	r0, [sp, #4]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	f1a1 0404 	sub.w	r4, r1, #4
 800a9de:	bfb8      	it	lt
 800a9e0:	18e4      	addlt	r4, r4, r3
 800a9e2:	f000 f8d3 	bl	800ab8c <__malloc_lock>
 800a9e6:	4a20      	ldr	r2, [pc, #128]	; (800aa68 <_free_r+0x9c>)
 800a9e8:	9801      	ldr	r0, [sp, #4]
 800a9ea:	6813      	ldr	r3, [r2, #0]
 800a9ec:	4615      	mov	r5, r2
 800a9ee:	b933      	cbnz	r3, 800a9fe <_free_r+0x32>
 800a9f0:	6063      	str	r3, [r4, #4]
 800a9f2:	6014      	str	r4, [r2, #0]
 800a9f4:	b003      	add	sp, #12
 800a9f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a9fa:	f000 b8cd 	b.w	800ab98 <__malloc_unlock>
 800a9fe:	42a3      	cmp	r3, r4
 800aa00:	d90b      	bls.n	800aa1a <_free_r+0x4e>
 800aa02:	6821      	ldr	r1, [r4, #0]
 800aa04:	1862      	adds	r2, r4, r1
 800aa06:	4293      	cmp	r3, r2
 800aa08:	bf04      	itt	eq
 800aa0a:	681a      	ldreq	r2, [r3, #0]
 800aa0c:	685b      	ldreq	r3, [r3, #4]
 800aa0e:	6063      	str	r3, [r4, #4]
 800aa10:	bf04      	itt	eq
 800aa12:	1852      	addeq	r2, r2, r1
 800aa14:	6022      	streq	r2, [r4, #0]
 800aa16:	602c      	str	r4, [r5, #0]
 800aa18:	e7ec      	b.n	800a9f4 <_free_r+0x28>
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	b10b      	cbz	r3, 800aa24 <_free_r+0x58>
 800aa20:	42a3      	cmp	r3, r4
 800aa22:	d9fa      	bls.n	800aa1a <_free_r+0x4e>
 800aa24:	6811      	ldr	r1, [r2, #0]
 800aa26:	1855      	adds	r5, r2, r1
 800aa28:	42a5      	cmp	r5, r4
 800aa2a:	d10b      	bne.n	800aa44 <_free_r+0x78>
 800aa2c:	6824      	ldr	r4, [r4, #0]
 800aa2e:	4421      	add	r1, r4
 800aa30:	1854      	adds	r4, r2, r1
 800aa32:	42a3      	cmp	r3, r4
 800aa34:	6011      	str	r1, [r2, #0]
 800aa36:	d1dd      	bne.n	800a9f4 <_free_r+0x28>
 800aa38:	681c      	ldr	r4, [r3, #0]
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	6053      	str	r3, [r2, #4]
 800aa3e:	4421      	add	r1, r4
 800aa40:	6011      	str	r1, [r2, #0]
 800aa42:	e7d7      	b.n	800a9f4 <_free_r+0x28>
 800aa44:	d902      	bls.n	800aa4c <_free_r+0x80>
 800aa46:	230c      	movs	r3, #12
 800aa48:	6003      	str	r3, [r0, #0]
 800aa4a:	e7d3      	b.n	800a9f4 <_free_r+0x28>
 800aa4c:	6825      	ldr	r5, [r4, #0]
 800aa4e:	1961      	adds	r1, r4, r5
 800aa50:	428b      	cmp	r3, r1
 800aa52:	bf04      	itt	eq
 800aa54:	6819      	ldreq	r1, [r3, #0]
 800aa56:	685b      	ldreq	r3, [r3, #4]
 800aa58:	6063      	str	r3, [r4, #4]
 800aa5a:	bf04      	itt	eq
 800aa5c:	1949      	addeq	r1, r1, r5
 800aa5e:	6021      	streq	r1, [r4, #0]
 800aa60:	6054      	str	r4, [r2, #4]
 800aa62:	e7c7      	b.n	800a9f4 <_free_r+0x28>
 800aa64:	b003      	add	sp, #12
 800aa66:	bd30      	pop	{r4, r5, pc}
 800aa68:	20001d10 	.word	0x20001d10

0800aa6c <_malloc_r>:
 800aa6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa6e:	1ccd      	adds	r5, r1, #3
 800aa70:	f025 0503 	bic.w	r5, r5, #3
 800aa74:	3508      	adds	r5, #8
 800aa76:	2d0c      	cmp	r5, #12
 800aa78:	bf38      	it	cc
 800aa7a:	250c      	movcc	r5, #12
 800aa7c:	2d00      	cmp	r5, #0
 800aa7e:	4606      	mov	r6, r0
 800aa80:	db01      	blt.n	800aa86 <_malloc_r+0x1a>
 800aa82:	42a9      	cmp	r1, r5
 800aa84:	d903      	bls.n	800aa8e <_malloc_r+0x22>
 800aa86:	230c      	movs	r3, #12
 800aa88:	6033      	str	r3, [r6, #0]
 800aa8a:	2000      	movs	r0, #0
 800aa8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa8e:	f000 f87d 	bl	800ab8c <__malloc_lock>
 800aa92:	4921      	ldr	r1, [pc, #132]	; (800ab18 <_malloc_r+0xac>)
 800aa94:	680a      	ldr	r2, [r1, #0]
 800aa96:	4614      	mov	r4, r2
 800aa98:	b99c      	cbnz	r4, 800aac2 <_malloc_r+0x56>
 800aa9a:	4f20      	ldr	r7, [pc, #128]	; (800ab1c <_malloc_r+0xb0>)
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	b923      	cbnz	r3, 800aaaa <_malloc_r+0x3e>
 800aaa0:	4621      	mov	r1, r4
 800aaa2:	4630      	mov	r0, r6
 800aaa4:	f000 f862 	bl	800ab6c <_sbrk_r>
 800aaa8:	6038      	str	r0, [r7, #0]
 800aaaa:	4629      	mov	r1, r5
 800aaac:	4630      	mov	r0, r6
 800aaae:	f000 f85d 	bl	800ab6c <_sbrk_r>
 800aab2:	1c43      	adds	r3, r0, #1
 800aab4:	d123      	bne.n	800aafe <_malloc_r+0x92>
 800aab6:	230c      	movs	r3, #12
 800aab8:	6033      	str	r3, [r6, #0]
 800aaba:	4630      	mov	r0, r6
 800aabc:	f000 f86c 	bl	800ab98 <__malloc_unlock>
 800aac0:	e7e3      	b.n	800aa8a <_malloc_r+0x1e>
 800aac2:	6823      	ldr	r3, [r4, #0]
 800aac4:	1b5b      	subs	r3, r3, r5
 800aac6:	d417      	bmi.n	800aaf8 <_malloc_r+0x8c>
 800aac8:	2b0b      	cmp	r3, #11
 800aaca:	d903      	bls.n	800aad4 <_malloc_r+0x68>
 800aacc:	6023      	str	r3, [r4, #0]
 800aace:	441c      	add	r4, r3
 800aad0:	6025      	str	r5, [r4, #0]
 800aad2:	e004      	b.n	800aade <_malloc_r+0x72>
 800aad4:	6863      	ldr	r3, [r4, #4]
 800aad6:	42a2      	cmp	r2, r4
 800aad8:	bf0c      	ite	eq
 800aada:	600b      	streq	r3, [r1, #0]
 800aadc:	6053      	strne	r3, [r2, #4]
 800aade:	4630      	mov	r0, r6
 800aae0:	f000 f85a 	bl	800ab98 <__malloc_unlock>
 800aae4:	f104 000b 	add.w	r0, r4, #11
 800aae8:	1d23      	adds	r3, r4, #4
 800aaea:	f020 0007 	bic.w	r0, r0, #7
 800aaee:	1ac2      	subs	r2, r0, r3
 800aaf0:	d0cc      	beq.n	800aa8c <_malloc_r+0x20>
 800aaf2:	1a1b      	subs	r3, r3, r0
 800aaf4:	50a3      	str	r3, [r4, r2]
 800aaf6:	e7c9      	b.n	800aa8c <_malloc_r+0x20>
 800aaf8:	4622      	mov	r2, r4
 800aafa:	6864      	ldr	r4, [r4, #4]
 800aafc:	e7cc      	b.n	800aa98 <_malloc_r+0x2c>
 800aafe:	1cc4      	adds	r4, r0, #3
 800ab00:	f024 0403 	bic.w	r4, r4, #3
 800ab04:	42a0      	cmp	r0, r4
 800ab06:	d0e3      	beq.n	800aad0 <_malloc_r+0x64>
 800ab08:	1a21      	subs	r1, r4, r0
 800ab0a:	4630      	mov	r0, r6
 800ab0c:	f000 f82e 	bl	800ab6c <_sbrk_r>
 800ab10:	3001      	adds	r0, #1
 800ab12:	d1dd      	bne.n	800aad0 <_malloc_r+0x64>
 800ab14:	e7cf      	b.n	800aab6 <_malloc_r+0x4a>
 800ab16:	bf00      	nop
 800ab18:	20001d10 	.word	0x20001d10
 800ab1c:	20001d14 	.word	0x20001d14

0800ab20 <_realloc_r>:
 800ab20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab22:	4607      	mov	r7, r0
 800ab24:	4614      	mov	r4, r2
 800ab26:	460e      	mov	r6, r1
 800ab28:	b921      	cbnz	r1, 800ab34 <_realloc_r+0x14>
 800ab2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ab2e:	4611      	mov	r1, r2
 800ab30:	f7ff bf9c 	b.w	800aa6c <_malloc_r>
 800ab34:	b922      	cbnz	r2, 800ab40 <_realloc_r+0x20>
 800ab36:	f7ff ff49 	bl	800a9cc <_free_r>
 800ab3a:	4625      	mov	r5, r4
 800ab3c:	4628      	mov	r0, r5
 800ab3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab40:	f000 f830 	bl	800aba4 <_malloc_usable_size_r>
 800ab44:	42a0      	cmp	r0, r4
 800ab46:	d20f      	bcs.n	800ab68 <_realloc_r+0x48>
 800ab48:	4621      	mov	r1, r4
 800ab4a:	4638      	mov	r0, r7
 800ab4c:	f7ff ff8e 	bl	800aa6c <_malloc_r>
 800ab50:	4605      	mov	r5, r0
 800ab52:	2800      	cmp	r0, #0
 800ab54:	d0f2      	beq.n	800ab3c <_realloc_r+0x1c>
 800ab56:	4631      	mov	r1, r6
 800ab58:	4622      	mov	r2, r4
 800ab5a:	f7ff ff0f 	bl	800a97c <memcpy>
 800ab5e:	4631      	mov	r1, r6
 800ab60:	4638      	mov	r0, r7
 800ab62:	f7ff ff33 	bl	800a9cc <_free_r>
 800ab66:	e7e9      	b.n	800ab3c <_realloc_r+0x1c>
 800ab68:	4635      	mov	r5, r6
 800ab6a:	e7e7      	b.n	800ab3c <_realloc_r+0x1c>

0800ab6c <_sbrk_r>:
 800ab6c:	b538      	push	{r3, r4, r5, lr}
 800ab6e:	4d06      	ldr	r5, [pc, #24]	; (800ab88 <_sbrk_r+0x1c>)
 800ab70:	2300      	movs	r3, #0
 800ab72:	4604      	mov	r4, r0
 800ab74:	4608      	mov	r0, r1
 800ab76:	602b      	str	r3, [r5, #0]
 800ab78:	f7fc faf6 	bl	8007168 <_sbrk>
 800ab7c:	1c43      	adds	r3, r0, #1
 800ab7e:	d102      	bne.n	800ab86 <_sbrk_r+0x1a>
 800ab80:	682b      	ldr	r3, [r5, #0]
 800ab82:	b103      	cbz	r3, 800ab86 <_sbrk_r+0x1a>
 800ab84:	6023      	str	r3, [r4, #0]
 800ab86:	bd38      	pop	{r3, r4, r5, pc}
 800ab88:	20009364 	.word	0x20009364

0800ab8c <__malloc_lock>:
 800ab8c:	4801      	ldr	r0, [pc, #4]	; (800ab94 <__malloc_lock+0x8>)
 800ab8e:	f000 b811 	b.w	800abb4 <__retarget_lock_acquire_recursive>
 800ab92:	bf00      	nop
 800ab94:	2000936c 	.word	0x2000936c

0800ab98 <__malloc_unlock>:
 800ab98:	4801      	ldr	r0, [pc, #4]	; (800aba0 <__malloc_unlock+0x8>)
 800ab9a:	f000 b80c 	b.w	800abb6 <__retarget_lock_release_recursive>
 800ab9e:	bf00      	nop
 800aba0:	2000936c 	.word	0x2000936c

0800aba4 <_malloc_usable_size_r>:
 800aba4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aba8:	1f18      	subs	r0, r3, #4
 800abaa:	2b00      	cmp	r3, #0
 800abac:	bfbc      	itt	lt
 800abae:	580b      	ldrlt	r3, [r1, r0]
 800abb0:	18c0      	addlt	r0, r0, r3
 800abb2:	4770      	bx	lr

0800abb4 <__retarget_lock_acquire_recursive>:
 800abb4:	4770      	bx	lr

0800abb6 <__retarget_lock_release_recursive>:
 800abb6:	4770      	bx	lr

0800abb8 <_init>:
 800abb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abba:	bf00      	nop
 800abbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abbe:	bc08      	pop	{r3}
 800abc0:	469e      	mov	lr, r3
 800abc2:	4770      	bx	lr

0800abc4 <_fini>:
 800abc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abc6:	bf00      	nop
 800abc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abca:	bc08      	pop	{r3}
 800abcc:	469e      	mov	lr, r3
 800abce:	4770      	bx	lr

0800abd0 <__susan_call_susan_veneer>:
 800abd0:	f85f f000 	ldr.w	pc, [pc]	; 800abd4 <__susan_call_susan_veneer+0x4>
 800abd4:	100001ad 	.word	0x100001ad

0800abd8 <__susan_init_veneer>:
 800abd8:	f85f f000 	ldr.w	pc, [pc]	; 800abdc <__susan_init_veneer+0x4>
 800abdc:	100006e5 	.word	0x100006e5

Disassembly of section .ccmram:

10000000 <susan_getint>:
{
10000000:	b580      	push	{r7, lr}
10000002:	f5ad 5d1c 	sub.w	sp, sp, #9984	; 0x2700
10000006:	b088      	sub	sp, #32
10000008:	af00      	add	r7, sp, #0
1000000a:	f107 0320 	add.w	r3, r7, #32
1000000e:	3b1c      	subs	r3, #28
10000010:	6018      	str	r0, [r3, #0]
  c = susan_wccfgetc( fd );
10000012:	f107 0320 	add.w	r3, r7, #32
10000016:	3b1c      	subs	r3, #28
10000018:	6818      	ldr	r0, [r3, #0]
1000001a:	f000 fc05 	bl	10000828 <__susan_wccfgetc_veneer>
1000001e:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
10000022:	f103 031c 	add.w	r3, r3, #28
10000026:	6018      	str	r0, [r3, #0]
    if ( c == '#' ) /* if we're at a comment, read to end of line */
10000028:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
1000002c:	f103 031c 	add.w	r3, r3, #28
10000030:	681b      	ldr	r3, [r3, #0]
10000032:	2b23      	cmp	r3, #35	; 0x23
10000034:	d10a      	bne.n	1000004c <susan_getint+0x4c>
      susan_wccfgets( dummy, 9000, fd );
10000036:	f107 0320 	add.w	r3, r7, #32
1000003a:	3b1c      	subs	r3, #28
1000003c:	f107 0020 	add.w	r0, r7, #32
10000040:	3818      	subs	r0, #24
10000042:	681a      	ldr	r2, [r3, #0]
10000044:	f242 3128 	movw	r1, #9000	; 0x2328
10000048:	f000 fbf6 	bl	10000838 <__susan_wccfgets_veneer>
    if ( c >= '0' && c <= '9' )
1000004c:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
10000050:	f103 031c 	add.w	r3, r3, #28
10000054:	681b      	ldr	r3, [r3, #0]
10000056:	2b2f      	cmp	r3, #47	; 0x2f
10000058:	dd06      	ble.n	10000068 <susan_getint+0x68>
1000005a:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
1000005e:	f103 031c 	add.w	r3, r3, #28
10000062:	681b      	ldr	r3, [r3, #0]
10000064:	2b39      	cmp	r3, #57	; 0x39
10000066:	dd0b      	ble.n	10000080 <susan_getint+0x80>
    c = susan_wccfgetc( fd );
10000068:	f107 0320 	add.w	r3, r7, #32
1000006c:	3b1c      	subs	r3, #28
1000006e:	6818      	ldr	r0, [r3, #0]
10000070:	f000 fbda 	bl	10000828 <__susan_wccfgetc_veneer>
10000074:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
10000078:	f103 031c 	add.w	r3, r3, #28
1000007c:	6018      	str	r0, [r3, #0]
    if ( c == '#' ) /* if we're at a comment, read to end of line */
1000007e:	e7d3      	b.n	10000028 <susan_getint+0x28>
      break;   /* found what we were looking for */
10000080:	bf00      	nop
  i = 0;
10000082:	2300      	movs	r3, #0
10000084:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
10000088:	f102 0218 	add.w	r2, r2, #24
1000008c:	6013      	str	r3, [r2, #0]
    i = ( i * 10 ) + ( c - '0' );
1000008e:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
10000092:	f103 0318 	add.w	r3, r3, #24
10000096:	681a      	ldr	r2, [r3, #0]
10000098:	4613      	mov	r3, r2
1000009a:	009b      	lsls	r3, r3, #2
1000009c:	4413      	add	r3, r2
1000009e:	005b      	lsls	r3, r3, #1
100000a0:	461a      	mov	r2, r3
100000a2:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
100000a6:	f103 031c 	add.w	r3, r3, #28
100000aa:	681b      	ldr	r3, [r3, #0]
100000ac:	3b30      	subs	r3, #48	; 0x30
100000ae:	4413      	add	r3, r2
100000b0:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
100000b4:	f102 0218 	add.w	r2, r2, #24
100000b8:	6013      	str	r3, [r2, #0]
    c = susan_wccfgetc( fd );
100000ba:	f107 0320 	add.w	r3, r7, #32
100000be:	3b1c      	subs	r3, #28
100000c0:	6818      	ldr	r0, [r3, #0]
100000c2:	f000 fbb1 	bl	10000828 <__susan_wccfgetc_veneer>
100000c6:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
100000ca:	f103 031c 	add.w	r3, r3, #28
100000ce:	6018      	str	r0, [r3, #0]
    if ( c == EOF ) return ( i );
100000d0:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
100000d4:	f103 031c 	add.w	r3, r3, #28
100000d8:	681b      	ldr	r3, [r3, #0]
100000da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
100000de:	d105      	bne.n	100000ec <susan_getint+0xec>
100000e0:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
100000e4:	f103 0318 	add.w	r3, r3, #24
100000e8:	681b      	ldr	r3, [r3, #0]
100000ea:	e013      	b.n	10000114 <susan_getint+0x114>
    if ( c < '0' || c > '9' ) break;
100000ec:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
100000f0:	f103 031c 	add.w	r3, r3, #28
100000f4:	681b      	ldr	r3, [r3, #0]
100000f6:	2b2f      	cmp	r3, #47	; 0x2f
100000f8:	dd07      	ble.n	1000010a <susan_getint+0x10a>
100000fa:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
100000fe:	f103 031c 	add.w	r3, r3, #28
10000102:	681b      	ldr	r3, [r3, #0]
10000104:	2b39      	cmp	r3, #57	; 0x39
10000106:	dc00      	bgt.n	1000010a <susan_getint+0x10a>
    i = ( i * 10 ) + ( c - '0' );
10000108:	e7c1      	b.n	1000008e <susan_getint+0x8e>
  return ( i );
1000010a:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
1000010e:	f103 0318 	add.w	r3, r3, #24
10000112:	681b      	ldr	r3, [r3, #0]
}
10000114:	4618      	mov	r0, r3
10000116:	f507 571c 	add.w	r7, r7, #9984	; 0x2700
1000011a:	3720      	adds	r7, #32
1000011c:	46bd      	mov	sp, r7
1000011e:	bd80      	pop	{r7, pc}

10000120 <susan_get_image>:
{
10000120:	b580      	push	{r7, lr}
10000122:	b09e      	sub	sp, #120	; 0x78
10000124:	af00      	add	r7, sp, #0
10000126:	60f8      	str	r0, [r7, #12]
10000128:	60b9      	str	r1, [r7, #8]
1000012a:	607a      	str	r2, [r7, #4]
1000012c:	603b      	str	r3, [r7, #0]
  susan_wccfseek( fd, 0, WCCSEEK_SET );
1000012e:	2200      	movs	r2, #0
10000130:	2100      	movs	r1, #0
10000132:	68f8      	ldr	r0, [r7, #12]
10000134:	f000 fba8 	bl	10000888 <__susan_wccfseek_veneer>
  header[ 0 ] = susan_wccfgetc( fd );
10000138:	68f8      	ldr	r0, [r7, #12]
1000013a:	f000 fb75 	bl	10000828 <__susan_wccfgetc_veneer>
1000013e:	4603      	mov	r3, r0
10000140:	b2db      	uxtb	r3, r3
10000142:	753b      	strb	r3, [r7, #20]
  header[ 1 ] = susan_wccfgetc( fd );
10000144:	68f8      	ldr	r0, [r7, #12]
10000146:	f000 fb6f 	bl	10000828 <__susan_wccfgetc_veneer>
1000014a:	4603      	mov	r3, r0
1000014c:	b2db      	uxtb	r3, r3
1000014e:	757b      	strb	r3, [r7, #21]
  if ( !( header[ 0 ] == 'P' && header[ 1 ] == '5' ) ) {
10000150:	7d3b      	ldrb	r3, [r7, #20]
10000152:	2b50      	cmp	r3, #80	; 0x50
  *x_size = susan_getint( fd );
10000154:	68f8      	ldr	r0, [r7, #12]
10000156:	f7ff ff53 	bl	10000000 <susan_getint>
1000015a:	4602      	mov	r2, r0
1000015c:	687b      	ldr	r3, [r7, #4]
1000015e:	601a      	str	r2, [r3, #0]
  *y_size = susan_getint( fd );
10000160:	68f8      	ldr	r0, [r7, #12]
10000162:	f7ff ff4d 	bl	10000000 <susan_getint>
10000166:	4602      	mov	r2, r0
10000168:	683b      	ldr	r3, [r7, #0]
1000016a:	601a      	str	r2, [r3, #0]
  susan_getint( fd );
1000016c:	68f8      	ldr	r0, [r7, #12]
1000016e:	f7ff ff47 	bl	10000000 <susan_getint>
  *in = ( uchar * ) susan_wccmalloc( *x_size * *y_size );
10000172:	687b      	ldr	r3, [r7, #4]
10000174:	681b      	ldr	r3, [r3, #0]
10000176:	683a      	ldr	r2, [r7, #0]
10000178:	6812      	ldr	r2, [r2, #0]
1000017a:	fb02 f303 	mul.w	r3, r2, r3
1000017e:	4618      	mov	r0, r3
10000180:	f000 fb72 	bl	10000868 <__susan_wccmalloc_veneer>
10000184:	4602      	mov	r2, r0
10000186:	68bb      	ldr	r3, [r7, #8]
10000188:	601a      	str	r2, [r3, #0]
  if ( susan_wccfread( *in, 1, *x_size * *y_size, fd ) == 0 ) {
1000018a:	68bb      	ldr	r3, [r7, #8]
1000018c:	6818      	ldr	r0, [r3, #0]
1000018e:	687b      	ldr	r3, [r7, #4]
10000190:	681b      	ldr	r3, [r3, #0]
10000192:	683a      	ldr	r2, [r7, #0]
10000194:	6812      	ldr	r2, [r2, #0]
10000196:	fb02 f303 	mul.w	r3, r2, r3
1000019a:	461a      	mov	r2, r3
1000019c:	68fb      	ldr	r3, [r7, #12]
1000019e:	2101      	movs	r1, #1
100001a0:	f000 fb5e 	bl	10000860 <__susan_wccfread_veneer>
}
100001a4:	bf00      	nop
100001a6:	3778      	adds	r7, #120	; 0x78
100001a8:	46bd      	mov	sp, r7
100001aa:	bd80      	pop	{r7, pc}

100001ac <susan_call_susan>:
{
100001ac:	b590      	push	{r4, r7, lr}
100001ae:	f5ad 4dbb 	sub.w	sp, sp, #23936	; 0x5d80
100001b2:	b09d      	sub	sp, #116	; 0x74
100001b4:	af04      	add	r7, sp, #16
100001b6:	f107 0360 	add.w	r3, r7, #96	; 0x60
100001ba:	3b5c      	subs	r3, #92	; 0x5c
100001bc:	6018      	str	r0, [r3, #0]
100001be:	f107 0360 	add.w	r3, r7, #96	; 0x60
100001c2:	3b60      	subs	r3, #96	; 0x60
100001c4:	6019      	str	r1, [r3, #0]
  susan_get_image( inputFile, &in, &x_size, &y_size );
100001c6:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
100001ca:	f103 0348 	add.w	r3, r3, #72	; 0x48
100001ce:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
100001d2:	f102 024c 	add.w	r2, r2, #76	; 0x4c
100001d6:	f507 41bb 	add.w	r1, r7, #23936	; 0x5d80
100001da:	f101 0154 	add.w	r1, r1, #84	; 0x54
100001de:	f107 0060 	add.w	r0, r7, #96	; 0x60
100001e2:	385c      	subs	r0, #92	; 0x5c
100001e4:	6800      	ldr	r0, [r0, #0]
100001e6:	f7ff ff9b 	bl	10000120 <susan_get_image>
  if ( susan_dt < 0 ) susan_three_by_three = 1;
100001ea:	4b9b      	ldr	r3, [pc, #620]	; (10000458 <susan_call_susan+0x2ac>)
100001ec:	edd3 7a00 	vldr	s15, [r3]
100001f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
100001f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
100001f8:	d502      	bpl.n	10000200 <susan_call_susan+0x54>
100001fa:	4b98      	ldr	r3, [pc, #608]	; (1000045c <susan_call_susan+0x2b0>)
100001fc:	2201      	movs	r2, #1
100001fe:	601a      	str	r2, [r3, #0]
  if ( ( susan_principle_conf == 1 ) && ( mode == 0 ) )
10000200:	4b97      	ldr	r3, [pc, #604]	; (10000460 <susan_call_susan+0x2b4>)
10000202:	681b      	ldr	r3, [r3, #0]
10000204:	2b01      	cmp	r3, #1
10000206:	d10a      	bne.n	1000021e <susan_call_susan+0x72>
10000208:	f107 0360 	add.w	r3, r7, #96	; 0x60
1000020c:	3b60      	subs	r3, #96	; 0x60
1000020e:	681b      	ldr	r3, [r3, #0]
10000210:	2b00      	cmp	r3, #0
10000212:	d104      	bne.n	1000021e <susan_call_susan+0x72>
    mode = 1;
10000214:	f107 0360 	add.w	r3, r7, #96	; 0x60
10000218:	3b60      	subs	r3, #96	; 0x60
1000021a:	2201      	movs	r2, #1
1000021c:	601a      	str	r2, [r3, #0]
  switch ( mode ) {
1000021e:	f107 0360 	add.w	r3, r7, #96	; 0x60
10000222:	3b60      	subs	r3, #96	; 0x60
10000224:	681b      	ldr	r3, [r3, #0]
10000226:	2b02      	cmp	r3, #2
10000228:	f000 817b 	beq.w	10000522 <susan_call_susan+0x376>
1000022c:	f107 0360 	add.w	r3, r7, #96	; 0x60
10000230:	3b60      	subs	r3, #96	; 0x60
10000232:	681b      	ldr	r3, [r3, #0]
10000234:	2b02      	cmp	r3, #2
10000236:	f300 8232 	bgt.w	1000069e <susan_call_susan+0x4f2>
1000023a:	f107 0360 	add.w	r3, r7, #96	; 0x60
1000023e:	3b60      	subs	r3, #96	; 0x60
10000240:	681b      	ldr	r3, [r3, #0]
10000242:	2b00      	cmp	r3, #0
10000244:	d006      	beq.n	10000254 <susan_call_susan+0xa8>
10000246:	f107 0360 	add.w	r3, r7, #96	; 0x60
1000024a:	3b60      	subs	r3, #96	; 0x60
1000024c:	681b      	ldr	r3, [r3, #0]
1000024e:	2b01      	cmp	r3, #1
10000250:	d02a      	beq.n	100002a8 <susan_call_susan+0xfc>
10000252:	e224      	b.n	1000069e <susan_call_susan+0x4f2>
      susan_setup_brightness_lut( &bp, susan_bt, 2 );
10000254:	4b83      	ldr	r3, [pc, #524]	; (10000464 <susan_call_susan+0x2b8>)
10000256:	6819      	ldr	r1, [r3, #0]
10000258:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
1000025c:	f103 0350 	add.w	r3, r3, #80	; 0x50
10000260:	2202      	movs	r2, #2
10000262:	4618      	mov	r0, r3
10000264:	f000 fb18 	bl	10000898 <__susan_setup_brightness_lut_veneer>
      susan_smoothing( susan_three_by_three, in, susan_dt, x_size, y_size, bp );
10000268:	4b7c      	ldr	r3, [pc, #496]	; (1000045c <susan_call_susan+0x2b0>)
1000026a:	6818      	ldr	r0, [r3, #0]
1000026c:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
10000270:	f103 0354 	add.w	r3, r3, #84	; 0x54
10000274:	6819      	ldr	r1, [r3, #0]
10000276:	4b78      	ldr	r3, [pc, #480]	; (10000458 <susan_call_susan+0x2ac>)
10000278:	edd3 7a00 	vldr	s15, [r3]
1000027c:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
10000280:	f103 034c 	add.w	r3, r3, #76	; 0x4c
10000284:	681a      	ldr	r2, [r3, #0]
10000286:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
1000028a:	f103 0348 	add.w	r3, r3, #72	; 0x48
1000028e:	681c      	ldr	r4, [r3, #0]
10000290:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
10000294:	f103 0350 	add.w	r3, r3, #80	; 0x50
10000298:	681b      	ldr	r3, [r3, #0]
1000029a:	9300      	str	r3, [sp, #0]
1000029c:	4623      	mov	r3, r4
1000029e:	eeb0 0a67 	vmov.f32	s0, s15
100002a2:	f000 facd 	bl	10000840 <__susan_smoothing_veneer>
      break;
100002a6:	e1fa      	b.n	1000069e <susan_call_susan+0x4f2>
      r   = ( char * ) susan_wccmalloc( x_size * y_size );
100002a8:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
100002ac:	f103 034c 	add.w	r3, r3, #76	; 0x4c
100002b0:	681b      	ldr	r3, [r3, #0]
100002b2:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
100002b6:	f102 0248 	add.w	r2, r2, #72	; 0x48
100002ba:	6812      	ldr	r2, [r2, #0]
100002bc:	fb02 f303 	mul.w	r3, r2, r3
100002c0:	4618      	mov	r0, r3
100002c2:	f000 fad1 	bl	10000868 <__susan_wccmalloc_veneer>
100002c6:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
100002ca:	f103 035c 	add.w	r3, r3, #92	; 0x5c
100002ce:	6018      	str	r0, [r3, #0]
      susan_setup_brightness_lut( &bp, susan_bt, 6 );
100002d0:	4b64      	ldr	r3, [pc, #400]	; (10000464 <susan_call_susan+0x2b8>)
100002d2:	6819      	ldr	r1, [r3, #0]
100002d4:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
100002d8:	f103 0350 	add.w	r3, r3, #80	; 0x50
100002dc:	2206      	movs	r2, #6
100002de:	4618      	mov	r0, r3
100002e0:	f000 fada 	bl	10000898 <__susan_setup_brightness_lut_veneer>
      if ( susan_principle_conf ) {
100002e4:	4b5e      	ldr	r3, [pc, #376]	; (10000460 <susan_call_susan+0x2b4>)
100002e6:	681b      	ldr	r3, [r3, #0]
100002e8:	2b00      	cmp	r3, #0
100002ea:	d060      	beq.n	100003ae <susan_call_susan+0x202>
        if ( susan_three_by_three )
100002ec:	4b5b      	ldr	r3, [pc, #364]	; (1000045c <susan_call_susan+0x2b0>)
100002ee:	681b      	ldr	r3, [r3, #0]
100002f0:	2b00      	cmp	r3, #0
100002f2:	d021      	beq.n	10000338 <susan_call_susan+0x18c>
          susan_principle_small( in, r, bp, susan_max_no_edges, x_size, y_size );
100002f4:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
100002f8:	f103 0354 	add.w	r3, r3, #84	; 0x54
100002fc:	6818      	ldr	r0, [r3, #0]
100002fe:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
10000302:	f103 0350 	add.w	r3, r3, #80	; 0x50
10000306:	6819      	ldr	r1, [r3, #0]
10000308:	4b57      	ldr	r3, [pc, #348]	; (10000468 <susan_call_susan+0x2bc>)
1000030a:	681c      	ldr	r4, [r3, #0]
1000030c:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
10000310:	f103 034c 	add.w	r3, r3, #76	; 0x4c
10000314:	681b      	ldr	r3, [r3, #0]
10000316:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
1000031a:	f102 0248 	add.w	r2, r2, #72	; 0x48
1000031e:	6812      	ldr	r2, [r2, #0]
10000320:	9201      	str	r2, [sp, #4]
10000322:	9300      	str	r3, [sp, #0]
10000324:	4623      	mov	r3, r4
10000326:	460a      	mov	r2, r1
10000328:	f507 41bb 	add.w	r1, r7, #23936	; 0x5d80
1000032c:	f101 015c 	add.w	r1, r1, #92	; 0x5c
10000330:	6809      	ldr	r1, [r1, #0]
10000332:	f000 faa5 	bl	10000880 <__susan_principle_small_veneer>
10000336:	e020      	b.n	1000037a <susan_call_susan+0x1ce>
          susan_principle( in, r, bp, susan_max_no_edges, x_size, y_size );
10000338:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
1000033c:	f103 0354 	add.w	r3, r3, #84	; 0x54
10000340:	6818      	ldr	r0, [r3, #0]
10000342:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
10000346:	f103 0350 	add.w	r3, r3, #80	; 0x50
1000034a:	6819      	ldr	r1, [r3, #0]
1000034c:	4b46      	ldr	r3, [pc, #280]	; (10000468 <susan_call_susan+0x2bc>)
1000034e:	681c      	ldr	r4, [r3, #0]
10000350:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
10000354:	f103 034c 	add.w	r3, r3, #76	; 0x4c
10000358:	681b      	ldr	r3, [r3, #0]
1000035a:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
1000035e:	f102 0248 	add.w	r2, r2, #72	; 0x48
10000362:	6812      	ldr	r2, [r2, #0]
10000364:	9201      	str	r2, [sp, #4]
10000366:	9300      	str	r3, [sp, #0]
10000368:	4623      	mov	r3, r4
1000036a:	460a      	mov	r2, r1
1000036c:	f507 41bb 	add.w	r1, r7, #23936	; 0x5d80
10000370:	f101 015c 	add.w	r1, r1, #92	; 0x5c
10000374:	6809      	ldr	r1, [r1, #0]
10000376:	f000 fa6b 	bl	10000850 <__susan_principle_veneer>
        susan_int_to_uchar( r, in, x_size * y_size );
1000037a:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
1000037e:	f103 0354 	add.w	r3, r3, #84	; 0x54
10000382:	6819      	ldr	r1, [r3, #0]
10000384:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
10000388:	f103 034c 	add.w	r3, r3, #76	; 0x4c
1000038c:	681b      	ldr	r3, [r3, #0]
1000038e:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
10000392:	f102 0248 	add.w	r2, r2, #72	; 0x48
10000396:	6812      	ldr	r2, [r2, #0]
10000398:	fb02 f303 	mul.w	r3, r2, r3
1000039c:	461a      	mov	r2, r3
1000039e:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
100003a2:	f103 035c 	add.w	r3, r3, #92	; 0x5c
100003a6:	6818      	ldr	r0, [r3, #0]
100003a8:	f000 fa66 	bl	10000878 <__susan_int_to_uchar_veneer>
      break;
100003ac:	e177      	b.n	1000069e <susan_call_susan+0x4f2>
        mid = ( uchar * )susan_wccmalloc( x_size * y_size );
100003ae:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
100003b2:	f103 034c 	add.w	r3, r3, #76	; 0x4c
100003b6:	681b      	ldr	r3, [r3, #0]
100003b8:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
100003bc:	f102 0248 	add.w	r2, r2, #72	; 0x48
100003c0:	6812      	ldr	r2, [r2, #0]
100003c2:	fb02 f303 	mul.w	r3, r2, r3
100003c6:	4618      	mov	r0, r3
100003c8:	f000 fa4e 	bl	10000868 <__susan_wccmalloc_veneer>
100003cc:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
100003d0:	f103 0358 	add.w	r3, r3, #88	; 0x58
100003d4:	6018      	str	r0, [r3, #0]
        susan_wccmemset( mid, 100, x_size * y_size ); /* note not set to zero */
100003d6:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
100003da:	f103 034c 	add.w	r3, r3, #76	; 0x4c
100003de:	681b      	ldr	r3, [r3, #0]
100003e0:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
100003e4:	f102 0248 	add.w	r2, r2, #72	; 0x48
100003e8:	6812      	ldr	r2, [r2, #0]
100003ea:	fb02 f303 	mul.w	r3, r2, r3
100003ee:	461a      	mov	r2, r3
100003f0:	2164      	movs	r1, #100	; 0x64
100003f2:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
100003f6:	f103 0358 	add.w	r3, r3, #88	; 0x58
100003fa:	6818      	ldr	r0, [r3, #0]
100003fc:	f000 fa04 	bl	10000808 <__susan_wccmemset_veneer>
        if ( susan_three_by_three )
10000400:	4b16      	ldr	r3, [pc, #88]	; (1000045c <susan_call_susan+0x2b0>)
10000402:	681b      	ldr	r3, [r3, #0]
10000404:	2b00      	cmp	r3, #0
10000406:	d031      	beq.n	1000046c <susan_call_susan+0x2c0>
          susan_edges_small( in, r, mid, bp, susan_max_no_edges, x_size, y_size );
10000408:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
1000040c:	f103 0354 	add.w	r3, r3, #84	; 0x54
10000410:	6818      	ldr	r0, [r3, #0]
10000412:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
10000416:	f103 0350 	add.w	r3, r3, #80	; 0x50
1000041a:	681c      	ldr	r4, [r3, #0]
1000041c:	4b12      	ldr	r3, [pc, #72]	; (10000468 <susan_call_susan+0x2bc>)
1000041e:	681b      	ldr	r3, [r3, #0]
10000420:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
10000424:	f102 024c 	add.w	r2, r2, #76	; 0x4c
10000428:	6812      	ldr	r2, [r2, #0]
1000042a:	f507 41bb 	add.w	r1, r7, #23936	; 0x5d80
1000042e:	f101 0148 	add.w	r1, r1, #72	; 0x48
10000432:	6809      	ldr	r1, [r1, #0]
10000434:	9102      	str	r1, [sp, #8]
10000436:	9201      	str	r2, [sp, #4]
10000438:	9300      	str	r3, [sp, #0]
1000043a:	4623      	mov	r3, r4
1000043c:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
10000440:	f102 0258 	add.w	r2, r2, #88	; 0x58
10000444:	6812      	ldr	r2, [r2, #0]
10000446:	f507 41bb 	add.w	r1, r7, #23936	; 0x5d80
1000044a:	f101 015c 	add.w	r1, r1, #92	; 0x5c
1000044e:	6809      	ldr	r1, [r1, #0]
10000450:	f000 f9e2 	bl	10000818 <__susan_edges_small_veneer>
10000454:	e030      	b.n	100004b8 <susan_call_susan+0x30c>
10000456:	bf00      	nop
10000458:	20001dbc 	.word	0x20001dbc
1000045c:	20001e28 	.word	0x20001e28
10000460:	20001d20 	.word	0x20001d20
10000464:	20001dd0 	.word	0x20001dd0
10000468:	20001d1c 	.word	0x20001d1c
          susan_edges( in, r, mid, bp, susan_max_no_edges, x_size, y_size );
1000046c:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
10000470:	f103 0354 	add.w	r3, r3, #84	; 0x54
10000474:	6818      	ldr	r0, [r3, #0]
10000476:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
1000047a:	f103 0350 	add.w	r3, r3, #80	; 0x50
1000047e:	681c      	ldr	r4, [r3, #0]
10000480:	4b91      	ldr	r3, [pc, #580]	; (100006c8 <susan_call_susan+0x51c>)
10000482:	681b      	ldr	r3, [r3, #0]
10000484:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
10000488:	f102 024c 	add.w	r2, r2, #76	; 0x4c
1000048c:	6812      	ldr	r2, [r2, #0]
1000048e:	f507 41bb 	add.w	r1, r7, #23936	; 0x5d80
10000492:	f101 0148 	add.w	r1, r1, #72	; 0x48
10000496:	6809      	ldr	r1, [r1, #0]
10000498:	9102      	str	r1, [sp, #8]
1000049a:	9201      	str	r2, [sp, #4]
1000049c:	9300      	str	r3, [sp, #0]
1000049e:	4623      	mov	r3, r4
100004a0:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
100004a4:	f102 0258 	add.w	r2, r2, #88	; 0x58
100004a8:	6812      	ldr	r2, [r2, #0]
100004aa:	f507 41bb 	add.w	r1, r7, #23936	; 0x5d80
100004ae:	f101 015c 	add.w	r1, r1, #92	; 0x5c
100004b2:	6809      	ldr	r1, [r1, #0]
100004b4:	f000 f9ec 	bl	10000890 <__susan_edges_veneer>
        if ( susan_thin_post_proc )
100004b8:	4b84      	ldr	r3, [pc, #528]	; (100006cc <susan_call_susan+0x520>)
100004ba:	681b      	ldr	r3, [r3, #0]
100004bc:	2b00      	cmp	r3, #0
100004be:	d015      	beq.n	100004ec <susan_call_susan+0x340>
          susan_thin( r, mid, x_size, y_size );
100004c0:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
100004c4:	f103 034c 	add.w	r3, r3, #76	; 0x4c
100004c8:	681a      	ldr	r2, [r3, #0]
100004ca:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
100004ce:	f103 0348 	add.w	r3, r3, #72	; 0x48
100004d2:	681b      	ldr	r3, [r3, #0]
100004d4:	f507 41bb 	add.w	r1, r7, #23936	; 0x5d80
100004d8:	f101 0158 	add.w	r1, r1, #88	; 0x58
100004dc:	6809      	ldr	r1, [r1, #0]
100004de:	f507 40bb 	add.w	r0, r7, #23936	; 0x5d80
100004e2:	f100 005c 	add.w	r0, r0, #92	; 0x5c
100004e6:	6800      	ldr	r0, [r0, #0]
100004e8:	f000 f9b6 	bl	10000858 <__susan_thin_veneer>
        susan_edge_draw( in, mid, x_size, y_size, susan_drawing_mode );
100004ec:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
100004f0:	f103 0354 	add.w	r3, r3, #84	; 0x54
100004f4:	6818      	ldr	r0, [r3, #0]
100004f6:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
100004fa:	f103 034c 	add.w	r3, r3, #76	; 0x4c
100004fe:	681a      	ldr	r2, [r3, #0]
10000500:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
10000504:	f103 0348 	add.w	r3, r3, #72	; 0x48
10000508:	6819      	ldr	r1, [r3, #0]
1000050a:	4b71      	ldr	r3, [pc, #452]	; (100006d0 <susan_call_susan+0x524>)
1000050c:	681b      	ldr	r3, [r3, #0]
1000050e:	9300      	str	r3, [sp, #0]
10000510:	460b      	mov	r3, r1
10000512:	f507 41bb 	add.w	r1, r7, #23936	; 0x5d80
10000516:	f101 0158 	add.w	r1, r1, #88	; 0x58
1000051a:	6809      	ldr	r1, [r1, #0]
1000051c:	f000 f980 	bl	10000820 <__susan_edge_draw_veneer>
      break;
10000520:	e0bd      	b.n	1000069e <susan_call_susan+0x4f2>
      r   = ( char * ) susan_wccmalloc( x_size * y_size );
10000522:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
10000526:	f103 034c 	add.w	r3, r3, #76	; 0x4c
1000052a:	681b      	ldr	r3, [r3, #0]
1000052c:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
10000530:	f102 0248 	add.w	r2, r2, #72	; 0x48
10000534:	6812      	ldr	r2, [r2, #0]
10000536:	fb02 f303 	mul.w	r3, r2, r3
1000053a:	4618      	mov	r0, r3
1000053c:	f000 f994 	bl	10000868 <__susan_wccmalloc_veneer>
10000540:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
10000544:	f103 035c 	add.w	r3, r3, #92	; 0x5c
10000548:	6018      	str	r0, [r3, #0]
      susan_setup_brightness_lut( &bp, susan_bt, 6 );
1000054a:	4b62      	ldr	r3, [pc, #392]	; (100006d4 <susan_call_susan+0x528>)
1000054c:	6819      	ldr	r1, [r3, #0]
1000054e:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
10000552:	f103 0350 	add.w	r3, r3, #80	; 0x50
10000556:	2206      	movs	r2, #6
10000558:	4618      	mov	r0, r3
1000055a:	f000 f99d 	bl	10000898 <__susan_setup_brightness_lut_veneer>
      if ( susan_principle_conf ) {
1000055e:	4b5e      	ldr	r3, [pc, #376]	; (100006d8 <susan_call_susan+0x52c>)
10000560:	681b      	ldr	r3, [r3, #0]
10000562:	2b00      	cmp	r3, #0
10000564:	d03a      	beq.n	100005dc <susan_call_susan+0x430>
        susan_principle( in, r, bp, susan_max_no_corners, x_size, y_size );
10000566:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
1000056a:	f103 0354 	add.w	r3, r3, #84	; 0x54
1000056e:	6818      	ldr	r0, [r3, #0]
10000570:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
10000574:	f103 0350 	add.w	r3, r3, #80	; 0x50
10000578:	6819      	ldr	r1, [r3, #0]
1000057a:	4b58      	ldr	r3, [pc, #352]	; (100006dc <susan_call_susan+0x530>)
1000057c:	681c      	ldr	r4, [r3, #0]
1000057e:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
10000582:	f103 034c 	add.w	r3, r3, #76	; 0x4c
10000586:	681b      	ldr	r3, [r3, #0]
10000588:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
1000058c:	f102 0248 	add.w	r2, r2, #72	; 0x48
10000590:	6812      	ldr	r2, [r2, #0]
10000592:	9201      	str	r2, [sp, #4]
10000594:	9300      	str	r3, [sp, #0]
10000596:	4623      	mov	r3, r4
10000598:	460a      	mov	r2, r1
1000059a:	f507 41bb 	add.w	r1, r7, #23936	; 0x5d80
1000059e:	f101 015c 	add.w	r1, r1, #92	; 0x5c
100005a2:	6809      	ldr	r1, [r1, #0]
100005a4:	f000 f954 	bl	10000850 <__susan_principle_veneer>
        susan_int_to_uchar( r, in, x_size * y_size );
100005a8:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
100005ac:	f103 0354 	add.w	r3, r3, #84	; 0x54
100005b0:	6819      	ldr	r1, [r3, #0]
100005b2:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
100005b6:	f103 034c 	add.w	r3, r3, #76	; 0x4c
100005ba:	681b      	ldr	r3, [r3, #0]
100005bc:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
100005c0:	f102 0248 	add.w	r2, r2, #72	; 0x48
100005c4:	6812      	ldr	r2, [r2, #0]
100005c6:	fb02 f303 	mul.w	r3, r2, r3
100005ca:	461a      	mov	r2, r3
100005cc:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
100005d0:	f103 035c 	add.w	r3, r3, #92	; 0x5c
100005d4:	6818      	ldr	r0, [r3, #0]
100005d6:	f000 f94f 	bl	10000878 <__susan_int_to_uchar_veneer>
      break;
100005da:	e05f      	b.n	1000069c <susan_call_susan+0x4f0>
        if ( susan_susan_quick ){
100005dc:	4b40      	ldr	r3, [pc, #256]	; (100006e0 <susan_call_susan+0x534>)
100005de:	681b      	ldr	r3, [r3, #0]
100005e0:	2b00      	cmp	r3, #0
100005e2:	d025      	beq.n	10000630 <susan_call_susan+0x484>
          susan_corners_quick( in, r, bp, susan_max_no_corners, corner_list, x_size,
100005e4:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
100005e8:	f103 0354 	add.w	r3, r3, #84	; 0x54
100005ec:	6818      	ldr	r0, [r3, #0]
100005ee:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
100005f2:	f103 0350 	add.w	r3, r3, #80	; 0x50
100005f6:	6819      	ldr	r1, [r3, #0]
100005f8:	4b38      	ldr	r3, [pc, #224]	; (100006dc <susan_call_susan+0x530>)
100005fa:	681c      	ldr	r4, [r3, #0]
100005fc:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
10000600:	f103 034c 	add.w	r3, r3, #76	; 0x4c
10000604:	681b      	ldr	r3, [r3, #0]
10000606:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
1000060a:	f102 0248 	add.w	r2, r2, #72	; 0x48
1000060e:	6812      	ldr	r2, [r2, #0]
10000610:	9202      	str	r2, [sp, #8]
10000612:	9301      	str	r3, [sp, #4]
10000614:	f107 0360 	add.w	r3, r7, #96	; 0x60
10000618:	3b58      	subs	r3, #88	; 0x58
1000061a:	9300      	str	r3, [sp, #0]
1000061c:	4623      	mov	r3, r4
1000061e:	460a      	mov	r2, r1
10000620:	f507 41bb 	add.w	r1, r7, #23936	; 0x5d80
10000624:	f101 015c 	add.w	r1, r1, #92	; 0x5c
10000628:	6809      	ldr	r1, [r1, #0]
1000062a:	f000 f921 	bl	10000870 <__susan_corners_quick_veneer>
1000062e:	e024      	b.n	1000067a <susan_call_susan+0x4ce>
          susan_corners( in, r, bp, susan_max_no_corners, corner_list, x_size, y_size );
10000630:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
10000634:	f103 0354 	add.w	r3, r3, #84	; 0x54
10000638:	6818      	ldr	r0, [r3, #0]
1000063a:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
1000063e:	f103 0350 	add.w	r3, r3, #80	; 0x50
10000642:	6819      	ldr	r1, [r3, #0]
10000644:	4b25      	ldr	r3, [pc, #148]	; (100006dc <susan_call_susan+0x530>)
10000646:	681c      	ldr	r4, [r3, #0]
10000648:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
1000064c:	f103 034c 	add.w	r3, r3, #76	; 0x4c
10000650:	681b      	ldr	r3, [r3, #0]
10000652:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
10000656:	f102 0248 	add.w	r2, r2, #72	; 0x48
1000065a:	6812      	ldr	r2, [r2, #0]
1000065c:	9202      	str	r2, [sp, #8]
1000065e:	9301      	str	r3, [sp, #4]
10000660:	f107 0360 	add.w	r3, r7, #96	; 0x60
10000664:	3b58      	subs	r3, #88	; 0x58
10000666:	9300      	str	r3, [sp, #0]
10000668:	4623      	mov	r3, r4
1000066a:	460a      	mov	r2, r1
1000066c:	f507 41bb 	add.w	r1, r7, #23936	; 0x5d80
10000670:	f101 015c 	add.w	r1, r1, #92	; 0x5c
10000674:	6809      	ldr	r1, [r1, #0]
10000676:	f000 f8e7 	bl	10000848 <__susan_corners_veneer>
        susan_corner_draw( in, corner_list, x_size, susan_drawing_mode );
1000067a:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
1000067e:	f103 0354 	add.w	r3, r3, #84	; 0x54
10000682:	6818      	ldr	r0, [r3, #0]
10000684:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
10000688:	f103 034c 	add.w	r3, r3, #76	; 0x4c
1000068c:	681a      	ldr	r2, [r3, #0]
1000068e:	4b10      	ldr	r3, [pc, #64]	; (100006d0 <susan_call_susan+0x524>)
10000690:	681b      	ldr	r3, [r3, #0]
10000692:	f107 0160 	add.w	r1, r7, #96	; 0x60
10000696:	3958      	subs	r1, #88	; 0x58
10000698:	f000 f8ba 	bl	10000810 <__susan_corner_draw_veneer>
      break;
1000069c:	bf00      	nop
  susan_put_image( x_size, y_size );
1000069e:	f507 43bb 	add.w	r3, r7, #23936	; 0x5d80
100006a2:	f103 034c 	add.w	r3, r3, #76	; 0x4c
100006a6:	681b      	ldr	r3, [r3, #0]
100006a8:	f507 42bb 	add.w	r2, r7, #23936	; 0x5d80
100006ac:	f102 0248 	add.w	r2, r2, #72	; 0x48
100006b0:	6812      	ldr	r2, [r2, #0]
100006b2:	4611      	mov	r1, r2
100006b4:	4618      	mov	r0, r3
100006b6:	f000 f8bb 	bl	10000830 <__susan_put_image_veneer>
}
100006ba:	bf00      	nop
100006bc:	f507 47bb 	add.w	r7, r7, #23936	; 0x5d80
100006c0:	3764      	adds	r7, #100	; 0x64
100006c2:	46bd      	mov	sp, r7
100006c4:	bd90      	pop	{r4, r7, pc}
100006c6:	bf00      	nop
100006c8:	20001d1c 	.word	0x20001d1c
100006cc:	20001dd4 	.word	0x20001dd4
100006d0:	20001d28 	.word	0x20001d28
100006d4:	20001dd0 	.word	0x20001dd0
100006d8:	20001d20 	.word	0x20001d20
100006dc:	20001dd8 	.word	0x20001dd8
100006e0:	20001dc0 	.word	0x20001dc0

100006e4 <susan_init>:
{
100006e4:	b480      	push	{r7}
100006e6:	b083      	sub	sp, #12
100006e8:	af00      	add	r7, sp, #0
  volatile int a = 0;
100006ea:	2300      	movs	r3, #0
100006ec:	607b      	str	r3, [r7, #4]
  susan_file.data = susan_input;
100006ee:	4b3a      	ldr	r3, [pc, #232]	; (100007d8 <susan_init+0xf4>)
100006f0:	4a3a      	ldr	r2, [pc, #232]	; (100007dc <susan_init+0xf8>)
100006f2:	601a      	str	r2, [r3, #0]
  susan_file.size = 7292;
100006f4:	4b38      	ldr	r3, [pc, #224]	; (100007d8 <susan_init+0xf4>)
100006f6:	f641 427c 	movw	r2, #7292	; 0x1c7c
100006fa:	605a      	str	r2, [r3, #4]
  susan_file.size += a;
100006fc:	687a      	ldr	r2, [r7, #4]
100006fe:	4b36      	ldr	r3, [pc, #216]	; (100007d8 <susan_init+0xf4>)
10000700:	685b      	ldr	r3, [r3, #4]
10000702:	4413      	add	r3, r2
10000704:	4a34      	ldr	r2, [pc, #208]	; (100007d8 <susan_init+0xf4>)
10000706:	6053      	str	r3, [r2, #4]
  susan_file.cur_pos = 0;
10000708:	4b33      	ldr	r3, [pc, #204]	; (100007d8 <susan_init+0xf4>)
1000070a:	2200      	movs	r2, #0
1000070c:	609a      	str	r2, [r3, #8]
  susan_file.cur_pos += a;
1000070e:	687a      	ldr	r2, [r7, #4]
10000710:	4b31      	ldr	r3, [pc, #196]	; (100007d8 <susan_init+0xf4>)
10000712:	689b      	ldr	r3, [r3, #8]
10000714:	4413      	add	r3, r2
10000716:	4a30      	ldr	r2, [pc, #192]	; (100007d8 <susan_init+0xf4>)
10000718:	6093      	str	r3, [r2, #8]
  susan_dt = 4.0;
1000071a:	4b31      	ldr	r3, [pc, #196]	; (100007e0 <susan_init+0xfc>)
1000071c:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
10000720:	601a      	str	r2, [r3, #0]
  susan_dt += a;
10000722:	687b      	ldr	r3, [r7, #4]
10000724:	ee07 3a90 	vmov	s15, r3
10000728:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
1000072c:	4b2c      	ldr	r3, [pc, #176]	; (100007e0 <susan_init+0xfc>)
1000072e:	edd3 7a00 	vldr	s15, [r3]
10000732:	ee77 7a27 	vadd.f32	s15, s14, s15
10000736:	4b2a      	ldr	r3, [pc, #168]	; (100007e0 <susan_init+0xfc>)
10000738:	edc3 7a00 	vstr	s15, [r3]
  susan_bt = 20;
1000073c:	4b29      	ldr	r3, [pc, #164]	; (100007e4 <susan_init+0x100>)
1000073e:	2214      	movs	r2, #20
10000740:	601a      	str	r2, [r3, #0]
  susan_bt += a;
10000742:	687a      	ldr	r2, [r7, #4]
10000744:	4b27      	ldr	r3, [pc, #156]	; (100007e4 <susan_init+0x100>)
10000746:	681b      	ldr	r3, [r3, #0]
10000748:	4413      	add	r3, r2
1000074a:	4a26      	ldr	r2, [pc, #152]	; (100007e4 <susan_init+0x100>)
1000074c:	6013      	str	r3, [r2, #0]
  susan_principle_conf = 0;
1000074e:	4b26      	ldr	r3, [pc, #152]	; (100007e8 <susan_init+0x104>)
10000750:	2200      	movs	r2, #0
10000752:	601a      	str	r2, [r3, #0]
  susan_principle_conf += a;
10000754:	687a      	ldr	r2, [r7, #4]
10000756:	4b24      	ldr	r3, [pc, #144]	; (100007e8 <susan_init+0x104>)
10000758:	681b      	ldr	r3, [r3, #0]
1000075a:	4413      	add	r3, r2
1000075c:	4a22      	ldr	r2, [pc, #136]	; (100007e8 <susan_init+0x104>)
1000075e:	6013      	str	r3, [r2, #0]
  susan_thin_post_proc = 1;
10000760:	4b22      	ldr	r3, [pc, #136]	; (100007ec <susan_init+0x108>)
10000762:	2201      	movs	r2, #1
10000764:	601a      	str	r2, [r3, #0]
  susan_thin_post_proc += a;
10000766:	687a      	ldr	r2, [r7, #4]
10000768:	4b20      	ldr	r3, [pc, #128]	; (100007ec <susan_init+0x108>)
1000076a:	681b      	ldr	r3, [r3, #0]
1000076c:	4413      	add	r3, r2
1000076e:	4a1f      	ldr	r2, [pc, #124]	; (100007ec <susan_init+0x108>)
10000770:	6013      	str	r3, [r2, #0]
  susan_three_by_three = 0;
10000772:	4b1f      	ldr	r3, [pc, #124]	; (100007f0 <susan_init+0x10c>)
10000774:	2200      	movs	r2, #0
10000776:	601a      	str	r2, [r3, #0]
  susan_three_by_three += a;
10000778:	687a      	ldr	r2, [r7, #4]
1000077a:	4b1d      	ldr	r3, [pc, #116]	; (100007f0 <susan_init+0x10c>)
1000077c:	681b      	ldr	r3, [r3, #0]
1000077e:	4413      	add	r3, r2
10000780:	4a1b      	ldr	r2, [pc, #108]	; (100007f0 <susan_init+0x10c>)
10000782:	6013      	str	r3, [r2, #0]
  susan_drawing_mode = 0;
10000784:	4b1b      	ldr	r3, [pc, #108]	; (100007f4 <susan_init+0x110>)
10000786:	2200      	movs	r2, #0
10000788:	601a      	str	r2, [r3, #0]
  susan_drawing_mode += a;
1000078a:	687a      	ldr	r2, [r7, #4]
1000078c:	4b19      	ldr	r3, [pc, #100]	; (100007f4 <susan_init+0x110>)
1000078e:	681b      	ldr	r3, [r3, #0]
10000790:	4413      	add	r3, r2
10000792:	4a18      	ldr	r2, [pc, #96]	; (100007f4 <susan_init+0x110>)
10000794:	6013      	str	r3, [r2, #0]
  susan_susan_quick = 0;
10000796:	4b18      	ldr	r3, [pc, #96]	; (100007f8 <susan_init+0x114>)
10000798:	2200      	movs	r2, #0
1000079a:	601a      	str	r2, [r3, #0]
  susan_susan_quick += a;
1000079c:	687a      	ldr	r2, [r7, #4]
1000079e:	4b16      	ldr	r3, [pc, #88]	; (100007f8 <susan_init+0x114>)
100007a0:	681b      	ldr	r3, [r3, #0]
100007a2:	4413      	add	r3, r2
100007a4:	4a14      	ldr	r2, [pc, #80]	; (100007f8 <susan_init+0x114>)
100007a6:	6013      	str	r3, [r2, #0]
  susan_max_no_corners = 50;
100007a8:	4b14      	ldr	r3, [pc, #80]	; (100007fc <susan_init+0x118>)
100007aa:	2232      	movs	r2, #50	; 0x32
100007ac:	601a      	str	r2, [r3, #0]
  susan_max_no_corners += a;
100007ae:	687a      	ldr	r2, [r7, #4]
100007b0:	4b12      	ldr	r3, [pc, #72]	; (100007fc <susan_init+0x118>)
100007b2:	681b      	ldr	r3, [r3, #0]
100007b4:	4413      	add	r3, r2
100007b6:	4a11      	ldr	r2, [pc, #68]	; (100007fc <susan_init+0x118>)
100007b8:	6013      	str	r3, [r2, #0]
  susan_max_no_edges = 50;
100007ba:	4b11      	ldr	r3, [pc, #68]	; (10000800 <susan_init+0x11c>)
100007bc:	2232      	movs	r2, #50	; 0x32
100007be:	601a      	str	r2, [r3, #0]
  susan_max_no_edges += a;
100007c0:	687a      	ldr	r2, [r7, #4]
100007c2:	4b0f      	ldr	r3, [pc, #60]	; (10000800 <susan_init+0x11c>)
100007c4:	681b      	ldr	r3, [r3, #0]
100007c6:	4413      	add	r3, r2
100007c8:	4a0d      	ldr	r2, [pc, #52]	; (10000800 <susan_init+0x11c>)
100007ca:	6013      	str	r3, [r2, #0]
}
100007cc:	bf00      	nop
100007ce:	370c      	adds	r7, #12
100007d0:	46bd      	mov	sp, r7
100007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
100007d6:	4770      	bx	lr
100007d8:	20001d2c 	.word	0x20001d2c
100007dc:	20000000 	.word	0x20000000
100007e0:	20001dbc 	.word	0x20001dbc
100007e4:	20001dd0 	.word	0x20001dd0
100007e8:	20001d20 	.word	0x20001d20
100007ec:	20001dd4 	.word	0x20001dd4
100007f0:	20001e28 	.word	0x20001e28
100007f4:	20001d28 	.word	0x20001d28
100007f8:	20001dc0 	.word	0x20001dc0
100007fc:	20001dd8 	.word	0x20001dd8
10000800:	20001d1c 	.word	0x20001d1c
10000804:	00000000 	.word	0x00000000

10000808 <__susan_wccmemset_veneer>:
10000808:	f85f f000 	ldr.w	pc, [pc]	; 1000080c <__susan_wccmemset_veneer+0x4>
1000080c:	080074b5 	.word	0x080074b5

10000810 <__susan_corner_draw_veneer>:
10000810:	f85f f000 	ldr.w	pc, [pc]	; 10000814 <__susan_corner_draw_veneer+0x4>
10000814:	080042ed 	.word	0x080042ed

10000818 <__susan_edges_small_veneer>:
10000818:	f85f f000 	ldr.w	pc, [pc]	; 1000081c <__susan_edges_small_veneer+0x4>
1000081c:	08003c29 	.word	0x08003c29

10000820 <__susan_edge_draw_veneer>:
10000820:	f85f f000 	ldr.w	pc, [pc]	; 10000824 <__susan_edge_draw_veneer+0x4>
10000824:	08001c1d 	.word	0x08001c1d

10000828 <__susan_wccfgetc_veneer>:
10000828:	f85f f000 	ldr.w	pc, [pc]	; 1000082c <__susan_wccfgetc_veneer+0x4>
1000082c:	0800727d 	.word	0x0800727d

10000830 <__susan_put_image_veneer>:
10000830:	f85f f000 	ldr.w	pc, [pc]	; 10000834 <__susan_put_image_veneer+0x4>
10000834:	08000c81 	.word	0x08000c81

10000838 <__susan_wccfgets_veneer>:
10000838:	f85f f000 	ldr.w	pc, [pc]	; 1000083c <__susan_wccfgets_veneer+0x4>
1000083c:	080072b1 	.word	0x080072b1

10000840 <__susan_smoothing_veneer>:
10000840:	f85f f000 	ldr.w	pc, [pc]	; 10000844 <__susan_smoothing_veneer+0x4>
10000844:	0800175d 	.word	0x0800175d

10000848 <__susan_corners_veneer>:
10000848:	f85f f000 	ldr.w	pc, [pc]	; 1000084c <__susan_corners_veneer+0x4>
1000084c:	0800440d 	.word	0x0800440d

10000850 <__susan_principle_veneer>:
10000850:	f85f f000 	ldr.w	pc, [pc]	; 10000854 <__susan_principle_veneer+0x4>
10000854:	08000e4d 	.word	0x08000e4d

10000858 <__susan_thin_veneer>:
10000858:	f85f f000 	ldr.w	pc, [pc]	; 1000085c <__susan_thin_veneer+0x4>
1000085c:	08001d19 	.word	0x08001d19

10000860 <__susan_wccfread_veneer>:
10000860:	f85f f000 	ldr.w	pc, [pc]	; 10000864 <__susan_wccfread_veneer+0x4>
10000864:	080071f9 	.word	0x080071f9

10000868 <__susan_wccmalloc_veneer>:
10000868:	f85f f000 	ldr.w	pc, [pc]	; 1000086c <__susan_wccmalloc_veneer+0x4>
1000086c:	080073fd 	.word	0x080073fd

10000870 <__susan_corners_quick_veneer>:
10000870:	f85f f000 	ldr.w	pc, [pc]	; 10000874 <__susan_corners_quick_veneer+0x4>
10000874:	08005995 	.word	0x08005995

10000878 <__susan_int_to_uchar_veneer>:
10000878:	f85f f000 	ldr.w	pc, [pc]	; 1000087c <__susan_int_to_uchar_veneer+0x4>
1000087c:	08000cb3 	.word	0x08000cb3

10000880 <__susan_principle_small_veneer>:
10000880:	f85f f000 	ldr.w	pc, [pc]	; 10000884 <__susan_principle_small_veneer+0x4>
10000884:	0800128b 	.word	0x0800128b

10000888 <__susan_wccfseek_veneer>:
10000888:	f85f f000 	ldr.w	pc, [pc]	; 1000088c <__susan_wccfseek_veneer+0x4>
1000088c:	08007349 	.word	0x08007349

10000890 <__susan_edges_veneer>:
10000890:	f85f f000 	ldr.w	pc, [pc]	; 10000894 <__susan_edges_veneer+0x4>
10000894:	08002921 	.word	0x08002921

10000898 <__susan_setup_brightness_lut_veneer>:
10000898:	f85f f000 	ldr.w	pc, [pc]	; 1000089c <__susan_setup_brightness_lut_veneer+0x4>
1000089c:	08000d85 	.word	0x08000d85
